@startuml
namespace blaze {
    class ClusterManager << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - nodeHost *dragonboat.NodeHost
        + StartCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateStateMachineFunc, cfg config.Config) error
        + StartConcurrentCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateConcurrentStateMachineFunc, cfg config.Config) error
        + StartOnDiskCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateOnDiskStateMachineFunc, cfg config.Config) error
        + StopCluster(clusterID uint64) error
        + SyncGetClusterMembership(ctx context.Context, clusterID uint64) (*dragonboat.Membership, error)
    }
    interface ICluster  {
        + StartCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateStateMachineFunc, cfg config.Config) error
        + StartConcurrentCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateConcurrentStateMachineFunc, cfg config.Config) error
        + StartOnDiskCluster(initialMembers <font color=blue>map</font>[uint64]dragonboat.Target, join bool, create statemachine.CreateOnDiskStateMachineFunc, cfg config.Config) error
        + StopCluster(clusterID uint64) error
        + SyncGetClusterMembership(ctx context.Context, clusterID uint64) (*dragonboat.Membership, error)

    }
    interface INodeConfig  {
        + NodeHostConfig() config.NodeHostConfig
        + HasNodeInfo(clusterID uint64, nodeID uint64) bool
        + GetNodeHostInfo(opt dragonboat.NodeHostInfoOption) *dragonboat.NodeHostInfo

    }
    interface INodeHost  {
        + NotifyOnCommit() bool
        + GetLeaderID(clusterID uint64) (uint64, bool, error)
        + GetNodeUser(clusterID uint64) (dragonboat.INodeUser, error)
        + ID() string
        + NAReadLocalNode(rs *dragonboat.RequestState, query []byte) ([]byte, error)
        + RaftAddress() string
        + ReadIndex(clusterID uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + ReadLocalNode(rs *dragonboat.RequestState, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + RemoveData(clusterID uint64, nodeID uint64) error
        + RequestAddNode(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestAddObserver(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestAddWitness(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestCompaction(clusterID uint64, nodeID uint64) (*dragonboat.SysOpState, error)
        + RequestDeleteNode(clusterID uint64, nodeID uint64, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestLeaderTransfer(clusterID uint64, targetNodeID uint64) error
        + RequestSnapshot(clusterID uint64, opt dragonboat.SnapshotOption, timeout time.Duration) (*dragonboat.RequestState, error)
        + StaleRead(clusterID uint64, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + Stop() 
        + StopNode(clusterID uint64, nodeID uint64) error
        + SyncRemoveData(ctx context.Context, clusterID uint64, nodeID uint64) error
        + SyncRequestAddNode(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestAddObserver(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestAddWitness(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestDeleteNode(ctx context.Context, clusterID uint64, nodeID uint64, configChangeIndex uint64) error
        + SyncRequestSnapshot(ctx context.Context, clusterID uint64, opt dragonboat.SnapshotOption) (uint64, error)

    }
    interface IReadWriter  {
        + Read() (T, error)
        + Write() error

    }
    interface ISession  {
        + GetNoOPSession(clusterID uint64) *client.Session
        + SyncGetSession(ctx context.Context, clusterID uint64) (*client.Session, error)
        + SyncCloseSession(ctx context.Context, cs *client.Session) error
        + ProposeSession(session *client.Session, timeout time.Duration) (*dragonboat.RequestState, error)

    }
    interface IStore  {
        + SyncPropose(ctx context.Context, session *client.Session, cmd []byte) (statemachine.Result, error)
        + SyncRead(ctx context.Context, clusterID uint64, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + Propose(session *client.Session, cmd []byte, timeout time.Duration) (*dragonboat.RequestState, error)

    }
    class MessageStream << (S,Aquamarine) >> {
        - stream network.Stream
        - logger zerolog.Logger
        - header requestHeader
        - body []byte

        + VerifyMagicNumber() error
        + Send(t uint16) error
        + Read() (uint16, []byte, error)

    }
    class Node << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - nh *dragonboat.NodeHost
        - started bool
        - notifyOnCommit bool
        - clusterManager ICluster
        - sessionManager ISession
        - storeManager IStore

        - verifyStarted() (error, bool)

        + NewOrGetClusterManager() (ICluster, error)
        + NewOrGetSessionManager() (ISession, error)
        + NewOrGetStoreManager() (IStore, error)
        + NotifyOnCommit() bool
        + GetLeaderID(clusterID uint64) (uint64, bool, error)
        + GetNodeUser(clusterID uint64) (dragonboat.INodeUser, error)
        + ID() string
        + NAReadLocalNode(rs *dragonboat.RequestState, query []byte) ([]byte, error)
        + RaftAddress() string
        + ReadIndex(clusterID uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + ReadLocalNode(rs *dragonboat.RequestState, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + RemoveData(clusterID uint64, nodeID uint64) error
        + RequestAddNode(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestAddObserver(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestAddWitness(clusterID uint64, nodeID uint64, target dragonboat.Target, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestCompaction(clusterID uint64, nodeID uint64) (*dragonboat.SysOpState, error)
        + RequestDeleteNode(clusterID uint64, nodeID uint64, configChangeIndex uint64, timeout time.Duration) (*dragonboat.RequestState, error)
        + RequestLeaderTransfer(clusterID uint64, targetNodeID uint64) error
        + RequestSnapshot(clusterID uint64, opt dragonboat.SnapshotOption, timeout time.Duration) (*dragonboat.RequestState, error)
        + StaleRead(clusterID uint64, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + Stop() 
        + StopNode(clusterID uint64, nodeID uint64) error
        + SyncRemoveData(ctx context.Context, clusterID uint64, nodeID uint64) error
        + SyncRequestAddNode(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestAddObserver(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestAddWitness(ctx context.Context, clusterID uint64, nodeID uint64, target string, configChangeIndex uint64) error
        + SyncRequestDeleteNode(ctx context.Context, clusterID uint64, nodeID uint64, configChangeIndex uint64) error
        + SyncRequestSnapshot(ctx context.Context, clusterID uint64, opt dragonboat.SnapshotOption) (uint64, error)

    }
    class QuicTestKit << (S,Aquamarine) >> {
        - t *testing.T
        - logger zerolog.Logger
        - testServerAddr string
        - quicConfig *quic.Config
        - listener quic.Listener
        - dialConn quic.Connection
        - certPool *x509.CertPool
        - keyPair tls.Certificate
        - tlsConf *tls.Config
        - ctx context.Context

        + Start() 
        + Stop() 
        + GenerateTlsConfig() (*tls.Config, error)
        + GetListener() quic.Listener
        + CloseListener() 
        + GetConnection() quic.Connection
        + NewConnectionStream() quic.Stream

    }
    class RaftConnectionStream << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - stream network.Stream
        - messageHandler raftio.MessageHandler
        - chunkHandler raftio.ChunkHandler

        + Serve() 
        + ReadMessage() error
        + Poison() error
        + Close() 
        + SendMessageBatch(batch raftpb.MessageBatch) error

    }
    class RaftControlRPCServer << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - node INodeHost
        - stream network.Stream

        - handleStream(stream network.Stream) 
        - readAndHandle() 
        - writePayloads(payloadStream <font color=blue>chan</font> []byte, isStream bool) 
        - addNodeHandler(request *database.ModifyNodeRequest) 
        - requestStateCodeToResultCode(result dragonboat.RequestResult) database.IndexState_ResultCode

        + GetLeaderID(ctx context.Context, request *database.GetLeaderIDRequest) (*database.GetLeaderIDResponse, error)
        + GetID(ctx context.Context, _ *database.IdRequest) (*database.IdResponse, error)
        + ReadIndex(request *database.ReadIndexRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + ReadLocalNode(ctx context.Context, request *database.ReadLocalNodeRequest) (*database.KeyValue, error)
        + AddNode(request *database.ModifyNodeRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + AddObserver(request *database.ModifyNodeRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + AddWitness(request *database.ModifyNodeRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + RequestCompaction(ctx context.Context, request *database.ModifyNodeRequest) (*database.SysOpState, error)
        + RequestDeleteNode(request *database.ModifyNodeRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + RequestLeaderTransfer(ctx context.Context, request *database.ModifyNodeRequest) (*database.RequestLeaderTransferResponse, error)
        + RequestSnapshot(request *database.RequestSnapshotRequest, stream <font color=blue>chan</font> *database.IndexState) error
        + Stop(ctx context.Context, request *database.StopRequest) (*database.StopResponse, error)
        + StopNode(ctx context.Context, request *database.ModifyNodeRequest) (*database.StopNodeResponse, error)

    }
    class RaftSnapshotConnectionStream << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - stream network.Stream

        + Close() 
        + SendChunk(chunk raftpb.Chunk) error

    }
    class RaftTransport << (S,Aquamarine) >> {
        - host host.Host
        - logger zerolog.Logger
        - messageHandler raftio.MessageHandler
        - chunkHandler raftio.ChunkHandler

        - connectionStreamHandler(stream network.Stream) 

        + Name() string
        + Start() error
        + Stop() 
        + GetConnection(ctx context.Context, target string) (raftio.IConnection, error)
        + GetSnapshotConnection(ctx context.Context, target string) (raftio.ISnapshotConnection, error)

    }
    class Runtime << (S,Aquamarine) >> {
        - addrs []multiaddr.Multiaddr
        - ctx context.Context
        - host host.Host
        - listener transport.Listener
        - logger zerolog.Logger
        - mp go-mplex.Multiplex
        - mux srpc.Mux
        - peerId peer.ID
        - privKey crypto.PrivKey
        - srv *srpc.Server
        - quicTr transport.Transport

        - handleStream(stream network.Stream) 

        + Run() error
        + Stop() 

    }
    class Server << (S,Aquamarine) >> {
        - listener quic.Listener
        - logger zerolog.Logger
        - closed bool
        - mu sync.RWMutex
        - registry *config.Registry

        - handleConn(ctx context.Context) 
        - handleStreams(conn quic.Connection, ctx context.Context) 
        - receiveStream(ctx context.Context, inheritedLogger zerolog.Logger, stream quic.Stream) 

        + Start(ctx context.Context) error
        + Stop(ctx context.Context) error

    }
    class SessionManager << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - nh *dragonboat.NodeHost

        + GetNoOPSession(clusterID uint64) *client.Session
        + SyncGetSession(ctx context.Context, clusterID uint64) (*client.Session, error)
        + SyncCloseSession(ctx context.Context, cs *client.Session) error
        + ProposeSession(session *client.Session, timeout time.Duration) (*dragonboat.RequestState, error)

    }
    class StoreManager << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - nodeHost *dragonboat.NodeHost

        + SyncPropose(ctx context.Context, session *client.Session, cmd []byte) (statemachine.Result, error)
        + SyncRead(ctx context.Context, clusterID uint64, query <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + Propose(session *client.Session, cmd []byte, timeout time.Duration) (*dragonboat.RequestState, error)

    }
    class StreamReceiver << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - registry *config.Registry

        + Receive(ctx context.Context, logger zerolog.Logger, stream quic.Stream) 

    }
    class TestStream << (S,Aquamarine) >> {
        - buf *bytes.Buffer

        + Read(p []byte) (int, error)
        + CancelRead(code quic.StreamErrorCode) 
        + SetReadDeadline(time time.Time) error
        + StreamID() quic.StreamID
        + Write(p []byte) (int, error)
        + Close() error
        + CancelWrite(code quic.StreamErrorCode) 
        + Context() context.Context
        + SetWriteDeadline(time time.Time) error
        + SetDeadline(time time.Time) error

    }
    class blaze.StreamState << (T, #FF7700) >>  {
    }
    class requestHeader << (S,Aquamarine) >> {
        - method uint16
        - size uint64
        - crc uint32

        - encode(buf []byte) []byte
        - decode(buf []byte) error

    }
}

"blaze.ICluster" <|-- "blaze.ClusterManager"
"blaze.INodeHost" <|-- "blaze.Node"
"blaze.ISession" <|-- "blaze.SessionManager"
"blaze.IStore" <|-- "blaze.StoreManager"

namespace cmd {
    class versionInfo << (S,Aquamarine) >> {
        + GoVersion string
        + Sha string
        + BuildTime string
        + Dirty string

    }
}


namespace conf {
    class GossipConfig << (S,Aquamarine) >> {
        + BindAddress string
        + AdvertiseAddress string
        + Seed []string

    }
    class Logger << (S,Aquamarine) >> {
        - logger zerolog.Logger

        + LoggerFactory(pkgName string) logger.ILogger
        + GetLogger() zerolog.Logger
        + GetLevel() logger.LogLevel
        + SetLevel(logLevel logger.LogLevel) 
        + Debugf(format string, args ...<font color=blue>interface</font>{}) 
        + Infof(format string, args ...<font color=blue>interface</font>{}) 
        + Warningf(format string, args ...<font color=blue>interface</font>{}) 
        + Errorf(format string, args ...<font color=blue>interface</font>{}) 
        + Panicf(format string, args ...<font color=blue>interface</font>{}) 

    }
    class NodeHostConfig << (S,Aquamarine) >> {
        + DevMode bool
        + DeploymentID uint64
        + WALDir string
        + NodeHostDir string
        + RTTMillisecond uint64
        + RaftAddress string
        + AddressByNodeHostID bool
        + ListenAddress string
        + MutualTLS bool
        + CAFile string
        + CertFile string
        + KeyFile string
        + EnableMetrics bool
        + MaxSendQueueSize uint64
        + MaxReceiveQueueSize uint64
        + MaxSnapshotSendBytesPerSecond uint64
        + MaxSnapshotRecvBytesPerSecond uint64
        + NotifyCommit bool
        + Gossip GossipConfig

    }
    class NodeHostGossipConfig << (S,Aquamarine) >> {
        + BindAddress string
        + AdvertiseAddress string
        + Seed []string

    }
}


namespace config {
    class ConfigServer << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - raftManager *fsm.ConfigServiceStoreManager

        - getRaftConfig(ctx context.Context, key string, call host.ConfigService_getConfig) error
        - getAllRaftConfigs(ctx context.Context, call host.ConfigService_getConfig) error
        - putRaftConfig(ctx context.Context, call host.ConfigService_putConfig) error

        + GetConfig(ctx context.Context, call host.ConfigService_getConfig) error
        + PutConfig(ctx context.Context, call host.ConfigService_putConfig) error

    }
    class NegotiatorServer << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - registry *Registry

        + Register(t host.ServiceType_Type, srv any) error
        + ConfigService(ctx context.Context, call host.Negotiator_configService) error

    }
    class Registry << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - serverMap <font color=blue>map</font>[host.ServiceType_Type]any
        - clientFactoryMap <font color=blue>map</font>[string]any

        + GetServer(key host.ServiceType_Type) (any, error)
        + GetClientFactory(key string) (any, error)
        + PutServer(key host.ServiceType_Type, srv any) error
        + PutClientFactory(key string, f any) error

    }
}

"host.ConfigService_Server" <|-- "config.ConfigServer"
"host.Negotiator_Server" <|-- "config.NegotiatorServer"

namespace database {
    class Client << (S,Aquamarine) >> {
        + Client v3.Client

        + NewSession(ctx context.Context, params <font color=blue>func</font>(Client_newSession_Params) error) (Client_newSession_Results_Future, v3.ReleaseFunc)
        + CloseSession(ctx context.Context, params <font color=blue>func</font>(Client_closeSession_Params) error) (Client_closeSession_Results_Future, v3.ReleaseFunc)
        + GetClusterId(ctx context.Context, params <font color=blue>func</font>(Client_getClusterId_Params) error) (Client_getClusterId_Results_Future, v3.ReleaseFunc)
        + GetClientId(ctx context.Context, params <font color=blue>func</font>(Client_getClientId_Params) error) (Client_getClientId_Results_Future, v3.ReleaseFunc)
        + Propose(ctx context.Context, params <font color=blue>func</font>(Client_propose_Params) error) (Client_propose_Results_Future, v3.ReleaseFunc)
        + Read(ctx context.Context, params <font color=blue>func</font>(Client_read_Params) error) (Client_read_Results_Future, v3.ReleaseFunc)
        + AddRef() Client
        + Release() 

    }
    interface Client_Server  {
        + NewSession( context.Context,  Client_newSession) error
        + CloseSession( context.Context,  Client_closeSession) error
        + GetClusterId( context.Context,  Client_getClusterId) error
        + GetClientId( context.Context,  Client_getClientId) error
        + Propose( context.Context,  Client_propose) error
        + Read( context.Context,  Client_read) error

    }
    class Client_closeSession << (S,Aquamarine) >> {
        + Args() Client_closeSession_Params
        + AllocResults() (Client_closeSession_Results, error)

    }
    class Client_closeSession_Params << (S,Aquamarine) >> {
        + String() string
        + Session() (Session, error)
        + HasSession() bool
        + SetSession(v Session) error
        + NewSession() (Session, error)

    }
    class Client_closeSession_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_closeSession_Params, error)
        + Session() Session_Future

    }
    class Client_closeSession_Results << (S,Aquamarine) >> {
        + String() string

    }
    class Client_closeSession_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_closeSession_Results, error)

    }
    class Client_getClientId << (S,Aquamarine) >> {
        + Args() Client_getClientId_Params
        + AllocResults() (Client_getClientId_Results, error)

    }
    class Client_getClientId_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Client_getClientId_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_getClientId_Params, error)

    }
    class Client_getClientId_Results << (S,Aquamarine) >> {
        + String() string
        + ClientId() uint64
        + SetClientId(v uint64) 

    }
    class Client_getClientId_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_getClientId_Results, error)

    }
    class Client_getClusterId << (S,Aquamarine) >> {
        + Args() Client_getClusterId_Params
        + AllocResults() (Client_getClusterId_Results, error)

    }
    class Client_getClusterId_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Client_getClusterId_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_getClusterId_Params, error)

    }
    class Client_getClusterId_Results << (S,Aquamarine) >> {
        + String() string
        + ClusterId() uint64
        + SetClusterId(v uint64) 

    }
    class Client_getClusterId_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_getClusterId_Results, error)

    }
    class Client_newSession << (S,Aquamarine) >> {
        + Args() Client_newSession_Params
        + AllocResults() (Client_newSession_Results, error)

    }
    class Client_newSession_Params << (S,Aquamarine) >> {
        + String() string
        + ClusterId() uint64
        + SetClusterId(v uint64) 

    }
    class Client_newSession_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_newSession_Params, error)

    }
    class Client_newSession_Results << (S,Aquamarine) >> {
        + String() string
        + Session() (Session, error)
        + HasSession() bool
        + SetSession(v Session) error
        + NewSession() (Session, error)

    }
    class Client_newSession_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_newSession_Results, error)
        + Session() Session_Future

    }
    class Client_propose << (S,Aquamarine) >> {
        + Args() Client_propose_Params
        + AllocResults() (Client_propose_Results, error)

    }
    class Client_propose_Params << (S,Aquamarine) >> {
        + String() string
        + Session() (Session, error)
        + HasSession() bool
        + SetSession(v Session) error
        + NewSession() (Session, error)
        + Cmd() ([]byte, error)
        + HasCmd() bool
        + SetCmd(v []byte) error
        + Timeout() int64
        + SetTimeout(v int64) 
        + Synchronous() bool
        + SetSynchronous(v bool) 

    }
    class Client_propose_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_propose_Params, error)
        + Session() Session_Future

    }
    class Client_propose_Results << (S,Aquamarine) >> {
        + String() string
        + Response() RequestResult
        + HasResponse() bool
        + SetResponse(v RequestResult) error

    }
    class Client_propose_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_propose_Results, error)
        + Response() RequestResult

    }
    class Client_read << (S,Aquamarine) >> {
        + Args() Client_read_Params
        + AllocResults() (Client_read_Results, error)

    }
    class Client_read_Params << (S,Aquamarine) >> {
        + String() string
        + Query() ([]byte, error)
        + HasQuery() bool
        + SetQuery(v []byte) error

    }
    class Client_read_Params_Future << (S,Aquamarine) >> {
        + Struct() (Client_read_Params, error)

    }
    class Client_read_Results << (S,Aquamarine) >> {
        + String() string
        + Payload() ([]byte, error)
        + HasPayload() bool
        + SetPayload(v []byte) error

    }
    class Client_read_Results_Future << (S,Aquamarine) >> {
        + Struct() (Client_read_Results, error)

    }
    class ClusterInfo << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterID uint64
        + NodeID uint64
        + Nodes <font color=blue>map</font>[uint64]string
        + ConfigChangeIndex uint64
        + StateMachineType uint64
        + IsLeader bool
        + IsObserver bool
        + IsWitness bool
        + Pending bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterID() uint64
        + GetNodeID() uint64
        + GetNodes() <font color=blue>map</font>[uint64]string
        + GetConfigChangeIndex() uint64
        + GetStateMachineType() uint64
        + GetIsLeader() bool
        + GetIsObserver() bool
        + GetIsWitness() bool
        + GetPending() bool
        + EqualVT(that *ClusterInfo) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class DeleteRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Payload *KeyValue
        + Session *Session

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetPayload() *KeyValue
        + GetSession() *Session
        + EqualVT(that *DeleteRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class DeleteResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *DeleteResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class Event << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Type Event_EventType
        + Kv *KeyValue
        + PrevKv *KeyValue

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetType() Event_EventType
        + GetKv() *KeyValue
        + GetPrevKv() *KeyValue
        + EqualVT(that *Event) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error
        + String() string
        + Type() Event_EventType
        + SetType(v Event_EventType) 
        + KeyValue() (KeyValue, error)
        + HasKeyValue() bool
        + SetKeyValue(v KeyValue) error
        + NewKeyValue() (KeyValue, error)
        + PreviousKeyValue() (KeyValue, error)
        + HasPreviousKeyValue() bool
        + SetPreviousKeyValue(v KeyValue) error
        + NewPreviousKeyValue() (KeyValue, error)

    }
    class Event_EventType << (S,Aquamarine) >> {
        + Enum() *Event_EventType
        + String() string
        + Descriptor() protoreflect.EnumDescriptor
        + Type() protoreflect.EnumType
        + Number() protoreflect.EnumNumber
        + EnumDescriptor() ([]byte, []int)
        + String() string

    }
    class Event_Future << (S,Aquamarine) >> {
        + Struct() (Event, error)
        + KeyValue() KeyValue_Future
        + PreviousKeyValue() KeyValue_Future

    }
    class GetClusterMembershipRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + EqualVT(that *GetClusterMembershipRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetClusterMembershipResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Membership *RaftMembership

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetMembership() *RaftMembership
        + EqualVT(that *GetClusterMembershipResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetLeaderIDRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + EqualVT(that *GetLeaderIDRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetLeaderIDResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + LeaderId uint64
        + IsLeader bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetLeaderId() uint64
        + GetIsLeader() bool
        + EqualVT(that *GetLeaderIDResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetNodeHostConfigRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterID *uint64
        + NodeID *uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterID() uint64
        + GetNodeID() uint64
        + EqualVT(that *GetNodeHostConfigRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetNodeHostConfigResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + NodeHostConfig *NodeHostConfig

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetNodeHostConfig() *NodeHostConfig
        + EqualVT(that *GetNodeHostConfigResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetNodeHostInfoRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Option *NodeHostInfoOption

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetOption() *NodeHostInfoOption
        + EqualVT(that *GetNodeHostInfoRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetNodeHostInfoResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Info *NodeHostInfo

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetInfo() *NodeHostInfo
        + EqualVT(that *GetNodeHostInfoResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Key string
        + Session *Session
        + ClusterId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetKey() string
        + GetSession() *Session
        + GetClusterId() uint64
        + EqualVT(that *GetRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GetResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Results []*KeyValue

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetResults() []*KeyValue
        + EqualVT(that *GetResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GossipConfig << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + BindAddress string
        + AdvertiseAddress string
        + Seed []string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetBindAddress() string
        + GetAdvertiseAddress() string
        + GetSeed() []string
        + EqualVT(that *GossipConfig) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class GossipInfo << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Enabled bool
        + AdvertiseAddress string
        + NumOfKnownNodeHosts int32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetEnabled() bool
        + GetAdvertiseAddress() string
        + GetNumOfKnownNodeHosts() int32
        + EqualVT(that *GossipInfo) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class HasNodeInfoRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterID uint64
        + NodeID uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterID() uint64
        + GetNodeID() uint64
        + EqualVT(that *HasNodeInfoRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class HasNodeInfoResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + HasNodeInfo bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetHasNodeInfo() bool
        + EqualVT(that *HasNodeInfoResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class IdRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *IdRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class IdResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Id string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() string
        + EqualVT(that *IdResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class IndexState << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Status IndexState_ResultCode
        + SnapshotIndex uint64
        + Results *Result

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetStatus() IndexState_ResultCode
        + GetSnapshotIndex() uint64
        + GetResults() *Result
        + EqualVT(that *IndexState) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class IndexState_ResultCode << (S,Aquamarine) >> {
        + Enum() *IndexState_ResultCode
        + String() string
        + Descriptor() protoreflect.EnumDescriptor
        + Type() protoreflect.EnumType
        + Number() protoreflect.EnumNumber
        + EnumDescriptor() ([]byte, []int)

    }
    class KeyValue << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Key []byte
        + CreateRevision int64
        + ModRevision int64
        + Version int64
        + Value []byte
        + Lease int64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetKey() []byte
        + GetCreateRevision() int64
        + GetModRevision() int64
        + GetVersion() int64
        + GetValue() []byte
        + GetLease() int64
        + EqualVT(that *KeyValue) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error
        + String() string
        + Key() ([]byte, error)
        + HasKey() bool
        + SetKey(v []byte) error
        + Value() ([]byte, error)
        + HasValue() bool
        + SetValue(v []byte) error
        + CreateRevision() int64
        + SetCreateRevision(v int64) 
        + ModifyRevision() int64
        + SetModifyRevision(v int64) 
        + Version() int64
        + SetVersion(v int64) 
        + Lease() int64
        + SetLease(v int64) 

    }
    class KeyValue_Future << (S,Aquamarine) >> {
        + Struct() (KeyValue, error)

    }
    class ModifyNodeRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId *uint64
        + NodeId *uint64
        + Target *string
        + ConfigChangeIndex *uint64
        + Timeout *int64
        + Synchronous *bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + GetNodeId() uint64
        + GetTarget() string
        + GetConfigChangeIndex() uint64
        + GetTimeout() int64
        + GetSynchronous() bool
        + EqualVT(that *ModifyNodeRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NewSessionRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64
        + ClientId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + GetClientId() uint64
        + EqualVT(that *NewSessionRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NewSessionResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + SessionId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetSessionId() uint64
        + EqualVT(that *NewSessionResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NilVal << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *NilVal) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NodeHostConfig << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + DeploymentID uint64
        + WALDir string
        + NodeHostDir string
        + RoundTripTimeMillisecond uint64
        + RaftAddress string
        + AddressByNodeHostID bool
        + ListenAddress string
        + MutualTLS bool
        + CAFile string
        + CertFile string
        + KeyFile string
        + EnableMetrics bool
        + MaxSendQueueSize uint64
        + MaxReceiveQueueSize uint64
        + MaxSnapshotSendBytesPerSecond uint64
        + MaxSnapshotRecvBytesPerSecond uint64
        + NotifyCommit bool
        + GossipConfig *GossipConfig

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetDeploymentID() uint64
        + GetWALDir() string
        + GetNodeHostDir() string
        + GetRoundTripTimeMillisecond() uint64
        + GetRaftAddress() string
        + GetAddressByNodeHostID() bool
        + GetListenAddress() string
        + GetMutualTLS() bool
        + GetCAFile() string
        + GetCertFile() string
        + GetKeyFile() string
        + GetEnableMetrics() bool
        + GetMaxSendQueueSize() uint64
        + GetMaxReceiveQueueSize() uint64
        + GetMaxSnapshotSendBytesPerSecond() uint64
        + GetMaxSnapshotRecvBytesPerSecond() uint64
        + GetNotifyCommit() bool
        + GetGossipConfig() *GossipConfig
        + EqualVT(that *NodeHostConfig) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NodeHostInfo << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + NodeHostID string
        + RaftAddress string
        + Gossip *GossipInfo
        + ClusterInfo []*ClusterInfo
        + LogInfo []*NodeInfo

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetNodeHostID() string
        + GetRaftAddress() string
        + GetGossip() *GossipInfo
        + GetClusterInfo() []*ClusterInfo
        + GetLogInfo() []*NodeInfo
        + EqualVT(that *NodeHostInfo) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NodeHostInfoOption << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + SkipLogInfo bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetSkipLogInfo() bool
        + EqualVT(that *NodeHostInfoOption) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class NodeInfo << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterID uint64
        + NodeID uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterID() uint64
        + GetNodeID() uint64
        + EqualVT(that *NodeInfo) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class ProposeRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Session *Session
        + Command *KeyValue

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetSession() *Session
        + GetCommand() *KeyValue
        + EqualVT(that *ProposeRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class ProposeResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + CommandId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetCommandId() uint64
        + EqualVT(that *ProposeResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class ProposeSessionRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Session *Session
        + Timeout int64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetSession() *Session
        + GetTimeout() int64
        + EqualVT(that *ProposeSessionRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class PutRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Payload *KeyValue
        + Session *Session

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetPayload() *KeyValue
        + GetSession() *Session
        + EqualVT(that *PutRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RaftConfig << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + NodeID uint64
        + ClusterID uint64
        + CheckQuorum bool
        + ElectionRoundTripTime uint64
        + HeartbeatRoundTripTime uint64
        + SnapshotEntries uint64
        + CompactionOverhead uint64
        + OrderedConfigChange bool
        + MaxInMemLogSize uint64
        + SnapshotCompressionType int32
        + EntryCompressionType int32
        + DisableAutoCompactions bool
        + IsObserver bool
        + IsWitness bool
        + Quiesce bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetNodeID() uint64
        + GetClusterID() uint64
        + GetCheckQuorum() bool
        + GetElectionRoundTripTime() uint64
        + GetHeartbeatRoundTripTime() uint64
        + GetSnapshotEntries() uint64
        + GetCompactionOverhead() uint64
        + GetOrderedConfigChange() bool
        + GetMaxInMemLogSize() uint64
        + GetSnapshotCompressionType() int32
        + GetEntryCompressionType() int32
        + GetDisableAutoCompactions() bool
        + GetIsObserver() bool
        + GetIsWitness() bool
        + GetQuiesce() bool
        + EqualVT(that *RaftConfig) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RaftControlPayload << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Types isRaftControlPayload_Types
        + Method RaftControlPayload_MethodName

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetTypes() isRaftControlPayload_Types
        + GetGetLeaderIdRequest() *GetLeaderIDRequest
        + GetGetLeaderIdResponse() *GetLeaderIDResponse
        + GetIdRequest() *IdRequest
        + GetIdResponse() *IdResponse
        + GetIndexState() *IndexState
        + GetModifyNodeRequest() *ModifyNodeRequest
        + GetReadIndexRequest() *ReadIndexRequest
        + GetReadLocalNodeRequest() *ReadLocalNodeRequest
        + GetRequestLeaderTransferResponse() *RequestLeaderTransferResponse
        + GetRequestSnapshotRequest() *RequestSnapshotRequest
        + GetSnapshotOption() *SnapshotOption
        + GetStopNodeResponse() *StopNodeResponse
        + GetStopRequest() *StopRequest
        + GetStopResponse() *StopResponse
        + GetSysOpState() *SysOpState
        + GetMethod() RaftControlPayload_MethodName
        + EqualVT(that *RaftControlPayload) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RaftControlPayload_GetLeaderIdRequest << (S,Aquamarine) >> {
        + GetLeaderIdRequest *GetLeaderIDRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_GetLeaderIdResponse << (S,Aquamarine) >> {
        + GetLeaderIdResponse *GetLeaderIDResponse

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_IdRequest << (S,Aquamarine) >> {
        + IdRequest *IdRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_IdResponse << (S,Aquamarine) >> {
        + IdResponse *IdResponse

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_IndexState << (S,Aquamarine) >> {
        + IndexState *IndexState

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_MethodName << (S,Aquamarine) >> {
        + Enum() *RaftControlPayload_MethodName
        + String() string
        + Descriptor() protoreflect.EnumDescriptor
        + Type() protoreflect.EnumType
        + Number() protoreflect.EnumNumber
        + EnumDescriptor() ([]byte, []int)

    }
    class RaftControlPayload_ModifyNodeRequest << (S,Aquamarine) >> {
        + ModifyNodeRequest *ModifyNodeRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_ReadIndexRequest << (S,Aquamarine) >> {
        + ReadIndexRequest *ReadIndexRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_ReadLocalNodeRequest << (S,Aquamarine) >> {
        + ReadLocalNodeRequest *ReadLocalNodeRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_RequestLeaderTransferResponse << (S,Aquamarine) >> {
        + RequestLeaderTransferResponse *RequestLeaderTransferResponse

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_RequestSnapshotRequest << (S,Aquamarine) >> {
        + RequestSnapshotRequest *RequestSnapshotRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_SnapshotOption << (S,Aquamarine) >> {
        + SnapshotOption *SnapshotOption

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_StopNodeResponse << (S,Aquamarine) >> {
        + StopNodeResponse *StopNodeResponse

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_StopRequest << (S,Aquamarine) >> {
        + StopRequest *StopRequest

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_StopResponse << (S,Aquamarine) >> {
        + StopResponse *StopResponse

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftControlPayload_SysOpState << (S,Aquamarine) >> {
        + SysOpState *SysOpState

        - isRaftControlPayload_Types() 

        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int

    }
    class RaftMembership << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ConfigChangeID uint64
        + Nodes <font color=blue>map</font>[uint64]string
        + Observers <font color=blue>map</font>[uint64]string
        + Witnesses <font color=blue>map</font>[uint64]string
        + Removed <font color=blue>map</font>[uint64]*NilVal

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetConfigChangeID() uint64
        + GetNodes() <font color=blue>map</font>[uint64]string
        + GetObservers() <font color=blue>map</font>[uint64]string
        + GetWitnesses() <font color=blue>map</font>[uint64]string
        + GetRemoved() <font color=blue>map</font>[uint64]*NilVal
        + EqualVT(that *RaftMembership) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class ReadIndexRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64
        + Timeout int64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + GetTimeout() int64
        + EqualVT(that *ReadIndexRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class ReadLocalNodeRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Query *KeyValue

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetQuery() *KeyValue
        + EqualVT(that *ReadLocalNodeRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RequestLeaderTransferResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *RequestLeaderTransferResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RequestResult << (S,Aquamarine) >> {
        + Client v3.Client

        + Completed(ctx context.Context, params <font color=blue>func</font>(RequestResult_completed_Params) error) (RequestResult_completed_Results_Future, v3.ReleaseFunc)
        + GetResult(ctx context.Context, params <font color=blue>func</font>(RequestResult_getResult_Params) error) (RequestResult_getResult_Results_Future, v3.ReleaseFunc)
        + Rejected(ctx context.Context, params <font color=blue>func</font>(RequestResult_rejected_Params) error) (RequestResult_rejected_Results_Future, v3.ReleaseFunc)
        + Terminated(ctx context.Context, params <font color=blue>func</font>(RequestResult_terminated_Params) error) (RequestResult_terminated_Results_Future, v3.ReleaseFunc)
        + Timeout(ctx context.Context, params <font color=blue>func</font>(RequestResult_timeout_Params) error) (RequestResult_timeout_Results_Future, v3.ReleaseFunc)
        + AddRef() RequestResult
        + Release() 

    }
    class RequestResultIterator << (S,Aquamarine) >> {
        + Client v3.Client

        + Get(ctx context.Context, params <font color=blue>func</font>(RequestResultIterator_get_Params) error) (RequestResultIterator_get_Results_Future, v3.ReleaseFunc)
        + Next(ctx context.Context, params <font color=blue>func</font>(RequestResultIterator_next_Params) error) (RequestResultIterator_next_Results_Future, v3.ReleaseFunc)
        + AddRef() RequestResultIterator
        + Release() 

    }
    interface RequestResultIterator_Server  {
        + Get( context.Context,  RequestResultIterator_get) error
        + Next( context.Context,  RequestResultIterator_next) error

    }
    class RequestResultIterator_get << (S,Aquamarine) >> {
        + Args() RequestResultIterator_get_Params
        + AllocResults() (RequestResultIterator_get_Results, error)

    }
    class RequestResultIterator_get_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResultIterator_get_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResultIterator_get_Params, error)

    }
    class RequestResultIterator_get_Results << (S,Aquamarine) >> {
        + String() string
        + Value() RequestResult
        + HasValue() bool
        + SetValue(v RequestResult) error

    }
    class RequestResultIterator_get_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResultIterator_get_Results, error)
        + Value() RequestResult

    }
    class RequestResultIterator_next << (S,Aquamarine) >> {
        + Args() RequestResultIterator_next_Params
        + AllocResults() (RequestResultIterator_next_Results, error)

    }
    class RequestResultIterator_next_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResultIterator_next_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResultIterator_next_Params, error)

    }
    class RequestResultIterator_next_Results << (S,Aquamarine) >> {
        + String() string
        + More() bool
        + SetMore(v bool) 

    }
    class RequestResultIterator_next_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResultIterator_next_Results, error)

    }
    interface RequestResult_Server  {
        + Completed( context.Context,  RequestResult_completed) error
        + GetResult( context.Context,  RequestResult_getResult) error
        + Rejected( context.Context,  RequestResult_rejected) error
        + Terminated( context.Context,  RequestResult_terminated) error
        + Timeout( context.Context,  RequestResult_timeout) error

    }
    class RequestResult_completed << (S,Aquamarine) >> {
        + Args() RequestResult_completed_Params
        + AllocResults() (RequestResult_completed_Results, error)

    }
    class RequestResult_completed_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResult_completed_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_completed_Params, error)

    }
    class RequestResult_completed_Results << (S,Aquamarine) >> {
        + String() string
        + Done() bool
        + SetDone(v bool) 

    }
    class RequestResult_completed_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_completed_Results, error)

    }
    class RequestResult_getResult << (S,Aquamarine) >> {
        + Args() RequestResult_getResult_Params
        + AllocResults() (RequestResult_getResult_Results, error)

    }
    class RequestResult_getResult_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResult_getResult_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_getResult_Params, error)

    }
    class RequestResult_getResult_Results << (S,Aquamarine) >> {
        + String() string
        + Result() uint64
        + SetResult(v uint64) 

    }
    class RequestResult_getResult_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_getResult_Results, error)

    }
    class RequestResult_rejected << (S,Aquamarine) >> {
        + Args() RequestResult_rejected_Params
        + AllocResults() (RequestResult_rejected_Results, error)

    }
    class RequestResult_rejected_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResult_rejected_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_rejected_Params, error)

    }
    class RequestResult_rejected_Results << (S,Aquamarine) >> {
        + String() string
        + Rejected() bool
        + SetRejected(v bool) 

    }
    class RequestResult_rejected_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_rejected_Results, error)

    }
    class RequestResult_terminated << (S,Aquamarine) >> {
        + Args() RequestResult_terminated_Params
        + AllocResults() (RequestResult_terminated_Results, error)

    }
    class RequestResult_terminated_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResult_terminated_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_terminated_Params, error)

    }
    class RequestResult_terminated_Results << (S,Aquamarine) >> {
        + String() string
        + Terminated() bool
        + SetTerminated(v bool) 

    }
    class RequestResult_terminated_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_terminated_Results, error)

    }
    class RequestResult_timeout << (S,Aquamarine) >> {
        + Args() RequestResult_timeout_Params
        + AllocResults() (RequestResult_timeout_Results, error)

    }
    class RequestResult_timeout_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestResult_timeout_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_timeout_Params, error)

    }
    class RequestResult_timeout_Results << (S,Aquamarine) >> {
        + String() string
        + Timedout() bool
        + SetTimedout(v bool) 

    }
    class RequestResult_timeout_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestResult_timeout_Results, error)

    }
    class RequestSnapshotRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64
        + Options *SnapshotOption
        + Timeout int64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + GetOptions() *SnapshotOption
        + GetTimeout() int64
        + EqualVT(that *RequestSnapshotRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class RequestState << (S,Aquamarine) >> {
        + Client v3.Client

        + Completed(ctx context.Context, params <font color=blue>func</font>(RequestState_completed_Params) error) (RequestState_completed_Results_Future, v3.ReleaseFunc)
        + AddRef() RequestState
        + Release() 

    }
    interface RequestState_Server  {
        + Completed( context.Context,  RequestState_completed) error

    }
    class RequestState_completed << (S,Aquamarine) >> {
        + Args() RequestState_completed_Params
        + AllocResults() (RequestState_completed_Results, error)

    }
    class RequestState_completed_Params << (S,Aquamarine) >> {
        + String() string

    }
    class RequestState_completed_Params_Future << (S,Aquamarine) >> {
        + Struct() (RequestState_completed_Params, error)

    }
    class RequestState_completed_Results << (S,Aquamarine) >> {
        + String() string
        + Iterator() RequestResultIterator
        + HasIterator() bool
        + SetIterator(v RequestResultIterator) error

    }
    class RequestState_completed_Results_Future << (S,Aquamarine) >> {
        + Struct() (RequestState_completed_Results, error)
        + Iterator() RequestResultIterator

    }
    class Result << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Value uint64
        + Data []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetValue() uint64
        + GetData() []byte
        + EqualVT(that *Result) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class Session << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64
        + ClientId uint64
        + SessionId uint64
        + RespondedTo uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + GetClientId() uint64
        + GetSessionId() uint64
        + GetRespondedTo() uint64
        + EqualVT(that *Session) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error
        + String() string
        + ClusterId() uint64
        + SetClusterId(v uint64) 
        + ClientId() uint64
        + SetClientId(v uint64) 
        + SeriesId() uint64
        + SetSeriesId(v uint64) 
        + RespondedTo() uint64
        + SetRespondedTo(v uint64) 

    }
    class Session_Future << (S,Aquamarine) >> {
        + Struct() (Session, error)

    }
    class SnapshotOption << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + CompactionOverhead uint64
        + ExportPath string
        + Exported bool
        + OverrideCompactionOverhead bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetCompactionOverhead() uint64
        + GetExportPath() string
        + GetExported() bool
        + GetOverrideCompactionOverhead() bool
        + EqualVT(that *SnapshotOption) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StartClusterRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + InitialMembers <font color=blue>map</font>[uint64]string
        + Join bool
        + RaftConfig *RaftConfig
        + Concurrent *bool
        + OnDisk *bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetInitialMembers() <font color=blue>map</font>[uint64]string
        + GetJoin() bool
        + GetRaftConfig() *RaftConfig
        + GetConcurrent() bool
        + GetOnDisk() bool
        + EqualVT(that *StartClusterRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StartClusterResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *StartClusterResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StopClusterRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + ClusterId uint64

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetClusterId() uint64
        + EqualVT(that *StopClusterRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StopClusterResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *StopClusterResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StopNodeResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *StopNodeResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StopRequest << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *StopRequest) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class StopResponse << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *StopResponse) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class SysOpState << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + EqualVT(that *SysOpState) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class database.Client_List << (T, #FF7700) >>  {
    }
    class database.Client_closeSession_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_closeSession_Results_List << (T, #FF7700) >>  {
    }
    class database.Client_getClientId_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_getClientId_Results_List << (T, #FF7700) >>  {
    }
    class database.Client_getClusterId_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_getClusterId_Results_List << (T, #FF7700) >>  {
    }
    class database.Client_newSession_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_newSession_Results_List << (T, #FF7700) >>  {
    }
    class database.Client_propose_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_propose_Results_List << (T, #FF7700) >>  {
    }
    class database.Client_read_Params_List << (T, #FF7700) >>  {
    }
    class database.Client_read_Results_List << (T, #FF7700) >>  {
    }
    class database.Event_EventType << (T, #FF7700) >>  {
    }
    class database.Event_EventType_List << (T, #FF7700) >>  {
    }
    class database.Event_List << (T, #FF7700) >>  {
    }
    class database.IndexState_ResultCode << (T, #FF7700) >>  {
    }
    class database.KeyValue_List << (T, #FF7700) >>  {
    }
    class database.RaftControlPayload_MethodName << (T, #FF7700) >>  {
    }
    class database.RequestResultIterator_List << (T, #FF7700) >>  {
    }
    class database.RequestResultIterator_get_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResultIterator_get_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResultIterator_next_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResultIterator_next_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_completed_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_completed_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_getResult_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_getResult_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_rejected_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_rejected_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_terminated_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_terminated_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_timeout_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestResult_timeout_Results_List << (T, #FF7700) >>  {
    }
    class database.RequestState_List << (T, #FF7700) >>  {
    }
    class database.RequestState_completed_Params_List << (T, #FF7700) >>  {
    }
    class database.RequestState_completed_Results_List << (T, #FF7700) >>  {
    }
    class database.Session_List << (T, #FF7700) >>  {
    }
    interface isRaftControlPayload_Types  {
        - isRaftControlPayload_Types() 

    }
}
"server.Call" *-- "database.Client_closeSession"
"v3.Struct" *-- "database.Client_closeSession_Params"
"v3.Future" *-- "database.Client_closeSession_Params_Future"
"v3.Struct" *-- "database.Client_closeSession_Results"
"v3.Future" *-- "database.Client_closeSession_Results_Future"
"server.Call" *-- "database.Client_getClientId"
"v3.Struct" *-- "database.Client_getClientId_Params"
"v3.Future" *-- "database.Client_getClientId_Params_Future"
"v3.Struct" *-- "database.Client_getClientId_Results"
"v3.Future" *-- "database.Client_getClientId_Results_Future"
"server.Call" *-- "database.Client_getClusterId"
"v3.Struct" *-- "database.Client_getClusterId_Params"
"v3.Future" *-- "database.Client_getClusterId_Params_Future"
"v3.Struct" *-- "database.Client_getClusterId_Results"
"v3.Future" *-- "database.Client_getClusterId_Results_Future"
"server.Call" *-- "database.Client_newSession"
"v3.Struct" *-- "database.Client_newSession_Params"
"v3.Future" *-- "database.Client_newSession_Params_Future"
"v3.Struct" *-- "database.Client_newSession_Results"
"v3.Future" *-- "database.Client_newSession_Results_Future"
"server.Call" *-- "database.Client_propose"
"v3.Struct" *-- "database.Client_propose_Params"
"v3.Future" *-- "database.Client_propose_Params_Future"
"v3.Struct" *-- "database.Client_propose_Results"
"v3.Future" *-- "database.Client_propose_Results_Future"
"server.Call" *-- "database.Client_read"
"v3.Struct" *-- "database.Client_read_Params"
"v3.Future" *-- "database.Client_read_Params_Future"
"v3.Struct" *-- "database.Client_read_Results"
"v3.Future" *-- "database.Client_read_Results_Future"
"v3.Struct" *-- "database.Event"
"v3.Future" *-- "database.Event_Future"
"v3.Struct" *-- "database.KeyValue"
"v3.Future" *-- "database.KeyValue_Future"
"server.Call" *-- "database.RequestResultIterator_get"
"v3.Struct" *-- "database.RequestResultIterator_get_Params"
"v3.Future" *-- "database.RequestResultIterator_get_Params_Future"
"v3.Struct" *-- "database.RequestResultIterator_get_Results"
"v3.Future" *-- "database.RequestResultIterator_get_Results_Future"
"server.Call" *-- "database.RequestResultIterator_next"
"v3.Struct" *-- "database.RequestResultIterator_next_Params"
"v3.Future" *-- "database.RequestResultIterator_next_Params_Future"
"v3.Struct" *-- "database.RequestResultIterator_next_Results"
"v3.Future" *-- "database.RequestResultIterator_next_Results_Future"
"server.Call" *-- "database.RequestResult_completed"
"v3.Struct" *-- "database.RequestResult_completed_Params"
"v3.Future" *-- "database.RequestResult_completed_Params_Future"
"v3.Struct" *-- "database.RequestResult_completed_Results"
"v3.Future" *-- "database.RequestResult_completed_Results_Future"
"server.Call" *-- "database.RequestResult_getResult"
"v3.Struct" *-- "database.RequestResult_getResult_Params"
"v3.Future" *-- "database.RequestResult_getResult_Params_Future"
"v3.Struct" *-- "database.RequestResult_getResult_Results"
"v3.Future" *-- "database.RequestResult_getResult_Results_Future"
"server.Call" *-- "database.RequestResult_rejected"
"v3.Struct" *-- "database.RequestResult_rejected_Params"
"v3.Future" *-- "database.RequestResult_rejected_Params_Future"
"v3.Struct" *-- "database.RequestResult_rejected_Results"
"v3.Future" *-- "database.RequestResult_rejected_Results_Future"
"server.Call" *-- "database.RequestResult_terminated"
"v3.Struct" *-- "database.RequestResult_terminated_Params"
"v3.Future" *-- "database.RequestResult_terminated_Params_Future"
"v3.Struct" *-- "database.RequestResult_terminated_Results"
"v3.Future" *-- "database.RequestResult_terminated_Results_Future"
"server.Call" *-- "database.RequestResult_timeout"
"v3.Struct" *-- "database.RequestResult_timeout_Params"
"v3.Future" *-- "database.RequestResult_timeout_Params_Future"
"v3.Struct" *-- "database.RequestResult_timeout_Results"
"v3.Future" *-- "database.RequestResult_timeout_Results_Future"
"server.Call" *-- "database.RequestState_completed"
"v3.Struct" *-- "database.RequestState_completed_Params"
"v3.Future" *-- "database.RequestState_completed_Params_Future"
"v3.Struct" *-- "database.RequestState_completed_Results"
"v3.Future" *-- "database.RequestState_completed_Results_Future"
"v3.Struct" *-- "database.Session"
"v3.Future" *-- "database.Session_Future"

"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_GetLeaderIdRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_GetLeaderIdResponse"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_IdRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_IdResponse"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_IndexState"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_ModifyNodeRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_ReadIndexRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_ReadLocalNodeRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_RequestLeaderTransferResponse"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_RequestSnapshotRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_SnapshotOption"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_StopNodeResponse"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_StopRequest"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_StopResponse"
"database.isRaftControlPayload_Types" <|-- "database.RaftControlPayload_SysOpState"

namespace fsm {
    class BBoltStateMachine << (S,Aquamarine) >> {
        - db *bbolt.DB
        - mu sync.RWMutex

        + ClusterId uint64
        + NodeId uint64
        + BasePath string
        + Options *bbolt.Options

        - dbPath(withDb bool) string

        + Open(stopc <font color=blue>chan</font> <font color=blue>struct</font>{}) (uint64, error)
        + Update(entries []statemachine.Entry) ([]statemachine.Entry, error)
        + Lookup(i <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + Sync() error
        + PrepareSnapshot() (<font color=blue>interface</font>{}, error)
        + SaveSnapshot(ctx <font color=blue>interface</font>{}, writer io.Writer, done <font color=blue>chan</font> <font color=blue>struct</font>{}) error
        + RecoverFromSnapshot(reader io.Reader, i <font color=blue>chan</font> <font color=blue>struct</font>{}) error
        + Close() error

    }
    class ConfigServiceStoreManager << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - store *services.StoreManager

        + Get(key string) (*host.RaftConfiguration, error)
        + GetAll() (<font color=blue>map</font>[string]*host.RaftConfiguration, error)
        + Put(key string, payload *host.RaftConfiguration) error

    }
    class PleiadesResourceName << (S,Aquamarine) >> {
        + Partition PartitionType
        + Service ServiceType
        + Region RegionType
        + AccountId int
        + ResourceType ResourceType
        + ResourceId string

        + ToFsmRootPath(bucketName string) string

    }
    class fsm.PartitionType << (T, #FF7700) >>  {
    }
    class fsm.RegionType << (T, #FF7700) >>  {
    }
    class fsm.ResourceType << (T, #FF7700) >>  {
    }
    class fsm.ServiceType << (T, #FF7700) >>  {
    }
    class fsm.op << (T, #FF7700) >>  {
    }
}


namespace host {
    class AllConfigurations << (S,Aquamarine) >> {
        + String() string
        + Raft() (RaftConfiguration_List, error)
        + HasRaft() bool
        + SetRaft(v RaftConfiguration_List) error
        + NewRaft(n int32) (RaftConfiguration_List, error)

    }
    class AllConfigurations_Future << (S,Aquamarine) >> {
        + Struct() (AllConfigurations, error)

    }
    class ConfigService << (S,Aquamarine) >> {
        + Client v3.Client

        + GetConfig(ctx context.Context, params <font color=blue>func</font>(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, v3.ReleaseFunc)
        + PutConfig(ctx context.Context, params <font color=blue>func</font>(ConfigService_putConfig_Params) error) (ConfigService_putConfig_Results_Future, v3.ReleaseFunc)
        + AddRef() ConfigService
        + Release() 

    }
    interface ConfigService_Server  {
        + GetConfig( context.Context,  ConfigService_getConfig) error
        + PutConfig( context.Context,  ConfigService_putConfig) error

    }
    class ConfigService_getConfig << (S,Aquamarine) >> {
        + Args() ConfigService_getConfig_Params
        + AllocResults() (ConfigService_getConfig_Results, error)

    }
    class ConfigService_getConfig_Params << (S,Aquamarine) >> {
        + String() string
        + Request() (GetConfigurationRequest, error)
        + HasRequest() bool
        + SetRequest(v GetConfigurationRequest) error
        + NewRequest() (GetConfigurationRequest, error)

    }
    class ConfigService_getConfig_Params_Future << (S,Aquamarine) >> {
        + Struct() (ConfigService_getConfig_Params, error)
        + Request() GetConfigurationRequest_Future

    }
    class ConfigService_getConfig_Results << (S,Aquamarine) >> {
        + String() string
        + Response() (GetConfigurationResponse, error)
        + HasResponse() bool
        + SetResponse(v GetConfigurationResponse) error
        + NewResponse() (GetConfigurationResponse, error)

    }
    class ConfigService_getConfig_Results_Future << (S,Aquamarine) >> {
        + Struct() (ConfigService_getConfig_Results, error)
        + Response() GetConfigurationResponse_Future

    }
    class ConfigService_putConfig << (S,Aquamarine) >> {
        + Args() ConfigService_putConfig_Params
        + AllocResults() (ConfigService_putConfig_Results, error)

    }
    class ConfigService_putConfig_Params << (S,Aquamarine) >> {
        + String() string
        + Request() (PutConfigurationRequest, error)
        + HasRequest() bool
        + SetRequest(v PutConfigurationRequest) error
        + NewRequest() (PutConfigurationRequest, error)

    }
    class ConfigService_putConfig_Params_Future << (S,Aquamarine) >> {
        + Struct() (ConfigService_putConfig_Params, error)
        + Request() PutConfigurationRequest_Future

    }
    class ConfigService_putConfig_Results << (S,Aquamarine) >> {
        + String() string
        + Response() (PutConfigurationResponse, error)
        + HasResponse() bool
        + SetResponse(v PutConfigurationResponse) error
        + NewResponse() (PutConfigurationResponse, error)

    }
    class ConfigService_putConfig_Results_Future << (S,Aquamarine) >> {
        + Struct() (ConfigService_putConfig_Results, error)
        + Response() PutConfigurationResponse_Future

    }
    class ConfigType << (S,Aquamarine) >> {
        + String() string

    }
    class DirectedGraph << (S,Aquamarine) >> {
        + Client v3.Client

        + HasEdgeFromTo(ctx context.Context, params <font color=blue>func</font>(DirectedGraph_hasEdgeFromTo_Params) error) (DirectedGraph_hasEdgeFromTo_Results_Future, v3.ReleaseFunc)
        + To(ctx context.Context, params <font color=blue>func</font>(DirectedGraph_to_Params) error) (DirectedGraph_to_Results_Future, v3.ReleaseFunc)
        + Node(ctx context.Context, params <font color=blue>func</font>(Graph_node_Params) error) (Graph_node_Results_Future, v3.ReleaseFunc)
        + Nodes(ctx context.Context, params <font color=blue>func</font>(Graph_nodes_Params) error) (Graph_nodes_Results_Future, v3.ReleaseFunc)
        + From(ctx context.Context, params <font color=blue>func</font>(Graph_from_Params) error) (Graph_from_Results_Future, v3.ReleaseFunc)
        + HasEdgeBetween(ctx context.Context, params <font color=blue>func</font>(Graph_hasEdgeBetween_Params) error) (Graph_hasEdgeBetween_Results_Future, v3.ReleaseFunc)
        + Edge(ctx context.Context, params <font color=blue>func</font>(Graph_edge_Params) error) (Graph_edge_Results_Future, v3.ReleaseFunc)
        + AddRef() DirectedGraph
        + Release() 

    }
    interface DirectedGraph_Server  {
        + HasEdgeFromTo( context.Context,  DirectedGraph_hasEdgeFromTo) error
        + To( context.Context,  DirectedGraph_to) error
        + Node( context.Context,  Graph_node) error
        + Nodes( context.Context,  Graph_nodes) error
        + From( context.Context,  Graph_from) error
        + HasEdgeBetween( context.Context,  Graph_hasEdgeBetween) error
        + Edge( context.Context,  Graph_edge) error

    }
    class DirectedGraph_hasEdgeFromTo << (S,Aquamarine) >> {
        + Args() DirectedGraph_hasEdgeFromTo_Params
        + AllocResults() (DirectedGraph_hasEdgeFromTo_Results, error)

    }
    class DirectedGraph_hasEdgeFromTo_Params << (S,Aquamarine) >> {
        + String() string
        + UId() int64
        + SetUId(v int64) 
        + VId() int64
        + SetVId(v int64) 

    }
    class DirectedGraph_hasEdgeFromTo_Params_Future << (S,Aquamarine) >> {
        + Struct() (DirectedGraph_hasEdgeFromTo_Params, error)

    }
    class DirectedGraph_hasEdgeFromTo_Results << (S,Aquamarine) >> {
        + String() string
        + Connected() bool
        + SetConnected(v bool) 

    }
    class DirectedGraph_hasEdgeFromTo_Results_Future << (S,Aquamarine) >> {
        + Struct() (DirectedGraph_hasEdgeFromTo_Results, error)

    }
    class DirectedGraph_to << (S,Aquamarine) >> {
        + Args() DirectedGraph_to_Params
        + AllocResults() (DirectedGraph_to_Results, error)

    }
    class DirectedGraph_to_Params << (S,Aquamarine) >> {
        + String() string
        + Id() int64
        + SetId(v int64) 

    }
    class DirectedGraph_to_Params_Future << (S,Aquamarine) >> {
        + Struct() (DirectedGraph_to_Params, error)

    }
    class DirectedGraph_to_Results << (S,Aquamarine) >> {
        + String() string
        + Nodes() (Node_List, error)
        + HasNodes() bool
        + SetNodes(v Node_List) error
        + NewNodes(n int32) (Node_List, error)

    }
    class DirectedGraph_to_Results_Future << (S,Aquamarine) >> {
        + Struct() (DirectedGraph_to_Results, error)

    }
    class Edge << (S,Aquamarine) >> {
        + Client v3.Client

        + From(ctx context.Context, params <font color=blue>func</font>(Edge_from_Params) error) (Edge_from_Results_Future, v3.ReleaseFunc)
        + To(ctx context.Context, params <font color=blue>func</font>(Edge_to_Params) error) (Edge_to_Results_Future, v3.ReleaseFunc)
        + ReversedEdge(ctx context.Context, params <font color=blue>func</font>(Edge_reversedEdge_Params) error) (Edge_reversedEdge_Results_Future, v3.ReleaseFunc)
        + AddRef() Edge
        + Release() 

    }
    interface Edge_Server  {
        + From( context.Context,  Edge_from) error
        + To( context.Context,  Edge_to) error
        + ReversedEdge( context.Context,  Edge_reversedEdge) error

    }
    class Edge_from << (S,Aquamarine) >> {
        + Args() Edge_from_Params
        + AllocResults() (Edge_from_Results, error)

    }
    class Edge_from_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Edge_from_Params_Future << (S,Aquamarine) >> {
        + Struct() (Edge_from_Params, error)

    }
    class Edge_from_Results << (S,Aquamarine) >> {
        + String() string
        + Node() Node
        + HasNode() bool
        + SetNode(v Node) error

    }
    class Edge_from_Results_Future << (S,Aquamarine) >> {
        + Struct() (Edge_from_Results, error)
        + Node() Node

    }
    class Edge_reversedEdge << (S,Aquamarine) >> {
        + Args() Edge_reversedEdge_Params
        + AllocResults() (Edge_reversedEdge_Results, error)

    }
    class Edge_reversedEdge_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Edge_reversedEdge_Params_Future << (S,Aquamarine) >> {
        + Struct() (Edge_reversedEdge_Params, error)

    }
    class Edge_reversedEdge_Results << (S,Aquamarine) >> {
        + String() string
        + Edge() Edge
        + HasEdge() bool
        + SetEdge(v Edge) error

    }
    class Edge_reversedEdge_Results_Future << (S,Aquamarine) >> {
        + Struct() (Edge_reversedEdge_Results, error)
        + Edge() Edge

    }
    class Edge_to << (S,Aquamarine) >> {
        + Args() Edge_to_Params
        + AllocResults() (Edge_to_Results, error)

    }
    class Edge_to_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Edge_to_Params_Future << (S,Aquamarine) >> {
        + Struct() (Edge_to_Params, error)

    }
    class Edge_to_Results << (S,Aquamarine) >> {
        + String() string
        + Node() Node
        + HasNode() bool
        + SetNode(v Node) error

    }
    class Edge_to_Results_Future << (S,Aquamarine) >> {
        + Struct() (Edge_to_Results, error)
        + Node() Node

    }
    class GetConfigurationRequest << (S,Aquamarine) >> {
        + String() string
        + What() GetConfigurationRequest_Type
        + SetWhat(v GetConfigurationRequest_Type) 
        + Amount() GetConfigurationRequest_Specificity
        + SetAmount(v GetConfigurationRequest_Specificity) 
        + Id() (string, error)
        + HasId() bool
        + IdBytes() ([]byte, error)
        + SetId(v string) error

    }
    class GetConfigurationRequest_Future << (S,Aquamarine) >> {
        + Struct() (GetConfigurationRequest, error)

    }
    class GetConfigurationRequest_Specificity << (S,Aquamarine) >> {
        + String() string

    }
    class GetConfigurationRequest_Type << (S,Aquamarine) >> {
        + String() string

    }
    class GetConfigurationResponse << (S,Aquamarine) >> {
        + String() string
        + Which() GetConfigurationResponse_Which
        + All() (AllConfigurations, error)
        + HasAll() bool
        + SetAll(v AllConfigurations) error
        + NewAll() (AllConfigurations, error)
        + Raft() (RaftConfiguration_List, error)
        + HasRaft() bool
        + SetRaft(v RaftConfiguration_List) error
        + NewRaft(n int32) (RaftConfiguration_List, error)

    }
    class GetConfigurationResponse_Future << (S,Aquamarine) >> {
        + Struct() (GetConfigurationResponse, error)
        + All() AllConfigurations_Future

    }
    class GetConfigurationResponse_Which << (S,Aquamarine) >> {
        + String() string

    }
    class GetRaftConfigurationRequest << (S,Aquamarine) >> {
        + String() string
        + Id() (string, error)
        + HasId() bool
        + IdBytes() ([]byte, error)
        + SetId(v string) error

    }
    class GetRaftConfigurationRequest_Future << (S,Aquamarine) >> {
        + Struct() (GetRaftConfigurationRequest, error)

    }
    class GetRaftConfigurationResponse << (S,Aquamarine) >> {
        + String() string
        + Config() (RaftConfiguration, error)
        + HasConfig() bool
        + SetConfig(v RaftConfiguration) error
        + NewConfig() (RaftConfiguration, error)

    }
    class GetRaftConfigurationResponse_Future << (S,Aquamarine) >> {
        + Struct() (GetRaftConfigurationResponse, error)
        + Config() RaftConfiguration_Future

    }
    class Graph << (S,Aquamarine) >> {
        + Client v3.Client

        + Node(ctx context.Context, params <font color=blue>func</font>(Graph_node_Params) error) (Graph_node_Results_Future, v3.ReleaseFunc)
        + Nodes(ctx context.Context, params <font color=blue>func</font>(Graph_nodes_Params) error) (Graph_nodes_Results_Future, v3.ReleaseFunc)
        + From(ctx context.Context, params <font color=blue>func</font>(Graph_from_Params) error) (Graph_from_Results_Future, v3.ReleaseFunc)
        + HasEdgeBetween(ctx context.Context, params <font color=blue>func</font>(Graph_hasEdgeBetween_Params) error) (Graph_hasEdgeBetween_Results_Future, v3.ReleaseFunc)
        + Edge(ctx context.Context, params <font color=blue>func</font>(Graph_edge_Params) error) (Graph_edge_Results_Future, v3.ReleaseFunc)
        + AddRef() Graph
        + Release() 

    }
    interface Graph_Server  {
        + Node( context.Context,  Graph_node) error
        + Nodes( context.Context,  Graph_nodes) error
        + From( context.Context,  Graph_from) error
        + HasEdgeBetween( context.Context,  Graph_hasEdgeBetween) error
        + Edge( context.Context,  Graph_edge) error

    }
    class Graph_edge << (S,Aquamarine) >> {
        + Args() Graph_edge_Params
        + AllocResults() (Graph_edge_Results, error)

    }
    class Graph_edge_Params << (S,Aquamarine) >> {
        + String() string
        + UId() int64
        + SetUId(v int64) 
        + VId() int64
        + SetVId(v int64) 

    }
    class Graph_edge_Params_Future << (S,Aquamarine) >> {
        + Struct() (Graph_edge_Params, error)

    }
    class Graph_edge_Results << (S,Aquamarine) >> {
        + String() string
        + Edge() Edge
        + HasEdge() bool
        + SetEdge(v Edge) error

    }
    class Graph_edge_Results_Future << (S,Aquamarine) >> {
        + Struct() (Graph_edge_Results, error)
        + Edge() Edge

    }
    class Graph_from << (S,Aquamarine) >> {
        + Args() Graph_from_Params
        + AllocResults() (Graph_from_Results, error)

    }
    class Graph_from_Params << (S,Aquamarine) >> {
        + String() string
        + Id() int64
        + SetId(v int64) 

    }
    class Graph_from_Params_Future << (S,Aquamarine) >> {
        + Struct() (Graph_from_Params, error)

    }
    class Graph_from_Results << (S,Aquamarine) >> {
        + String() string
        + Nodes() (Node_List, error)
        + HasNodes() bool
        + SetNodes(v Node_List) error
        + NewNodes(n int32) (Node_List, error)

    }
    class Graph_from_Results_Future << (S,Aquamarine) >> {
        + Struct() (Graph_from_Results, error)

    }
    class Graph_hasEdgeBetween << (S,Aquamarine) >> {
        + Args() Graph_hasEdgeBetween_Params
        + AllocResults() (Graph_hasEdgeBetween_Results, error)

    }
    class Graph_hasEdgeBetween_Params << (S,Aquamarine) >> {
        + String() string
        + XId() int64
        + SetXId(v int64) 
        + YId() int64
        + SetYId(v int64) 

    }
    class Graph_hasEdgeBetween_Params_Future << (S,Aquamarine) >> {
        + Struct() (Graph_hasEdgeBetween_Params, error)

    }
    class Graph_hasEdgeBetween_Results << (S,Aquamarine) >> {
        + String() string
        + Connected() bool
        + SetConnected(v bool) 

    }
    class Graph_hasEdgeBetween_Results_Future << (S,Aquamarine) >> {
        + Struct() (Graph_hasEdgeBetween_Results, error)

    }
    class Graph_node << (S,Aquamarine) >> {
        + Args() Graph_node_Params
        + AllocResults() (Graph_node_Results, error)

    }
    class Graph_node_Params << (S,Aquamarine) >> {
        + String() string
        + Id() int64
        + SetId(v int64) 

    }
    class Graph_node_Params_Future << (S,Aquamarine) >> {
        + Struct() (Graph_node_Params, error)

    }
    class Graph_node_Results << (S,Aquamarine) >> {
        + String() string
        + Node() Node
        + HasNode() bool
        + SetNode(v Node) error

    }
    class Graph_node_Results_Future << (S,Aquamarine) >> {
        + Struct() (Graph_node_Results, error)
        + Node() Node

    }
    class Graph_nodes << (S,Aquamarine) >> {
        + Args() Graph_nodes_Params
        + AllocResults() (Graph_nodes_Results, error)

    }
    class Graph_nodes_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Graph_nodes_Params_Future << (S,Aquamarine) >> {
        + Struct() (Graph_nodes_Params, error)

    }
    class Graph_nodes_Results << (S,Aquamarine) >> {
        + String() string
        + Nodes() (Node_List, error)
        + HasNodes() bool
        + SetNodes(v Node_List) error
        + NewNodes(n int32) (Node_List, error)

    }
    class Graph_nodes_Results_Future << (S,Aquamarine) >> {
        + Struct() (Graph_nodes_Results, error)

    }
    class ListRaftConfigurationRequest << (S,Aquamarine) >> {
        + String() string

    }
    class ListRaftConfigurationRequest_Future << (S,Aquamarine) >> {
        + Struct() (ListRaftConfigurationRequest, error)

    }
    class ListRaftConfigurationResponse << (S,Aquamarine) >> {
        + String() string
        + Configs() (RaftConfiguration_List, error)
        + HasConfigs() bool
        + SetConfigs(v RaftConfiguration_List) error
        + NewConfigs(n int32) (RaftConfiguration_List, error)

    }
    class ListRaftConfigurationResponse_Future << (S,Aquamarine) >> {
        + Struct() (ListRaftConfigurationResponse, error)

    }
    class Negotiator << (S,Aquamarine) >> {
        + Client v3.Client

        + ConfigService(ctx context.Context, params <font color=blue>func</font>(Negotiator_configService_Params) error) (Negotiator_configService_Results_Future, v3.ReleaseFunc)
        + AddRef() Negotiator
        + Release() 

    }
    interface Negotiator_Server  {
        + ConfigService( context.Context,  Negotiator_configService) error

    }
    class Negotiator_configService << (S,Aquamarine) >> {
        + Args() Negotiator_configService_Params
        + AllocResults() (Negotiator_configService_Results, error)

    }
    class Negotiator_configService_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Negotiator_configService_Params_Future << (S,Aquamarine) >> {
        + Struct() (Negotiator_configService_Params, error)

    }
    class Negotiator_configService_Results << (S,Aquamarine) >> {
        + String() string
        + Svc() ConfigService
        + HasSvc() bool
        + SetSvc(v ConfigService) error

    }
    class Negotiator_configService_Results_Future << (S,Aquamarine) >> {
        + Struct() (Negotiator_configService_Results, error)
        + Svc() ConfigService

    }
    class Node << (S,Aquamarine) >> {
        + Client v3.Client

        + Id(ctx context.Context, params <font color=blue>func</font>(Node_id_Params) error) (Node_id_Results_Future, v3.ReleaseFunc)
        + AddRef() Node
        + Release() 

    }
    class NodeHostConfiguration << (S,Aquamarine) >> {
        + String() string
        + DeploymentId() uint64
        + SetDeploymentId(v uint64) 
        + WriteAheadLogDir() (string, error)
        + HasWriteAheadLogDir() bool
        + WriteAheadLogDirBytes() ([]byte, error)
        + SetWriteAheadLogDir(v string) error
        + NodeHostDir() (string, error)
        + HasNodeHostDir() bool
        + NodeHostDirBytes() ([]byte, error)
        + SetNodeHostDir(v string) error
        + RoundTripTimeMilliseconds() uint64
        + SetRoundTripTimeMilliseconds(v uint64) 
        + RaftAddress() (string, error)
        + HasRaftAddress() bool
        + RaftAddressBytes() ([]byte, error)
        + SetRaftAddress(v string) error
        + ApiAddress() (string, error)
        + HasApiAddress() bool
        + ApiAddressBytes() ([]byte, error)
        + SetApiAddress(v string) error
        + MutualTls() bool
        + SetMutualTls(v bool) 
        + CaFile() (string, error)
        + HasCaFile() bool
        + CaFileBytes() ([]byte, error)
        + SetCaFile(v string) error
        + CertFile() (string, error)
        + HasCertFile() bool
        + CertFileBytes() ([]byte, error)
        + SetCertFile(v string) error
        + KeyFile() (string, error)
        + HasKeyFile() bool
        + KeyFileBytes() ([]byte, error)
        + SetKeyFile(v string) error

    }
    class NodeHostConfiguration_Future << (S,Aquamarine) >> {
        + Struct() (NodeHostConfiguration, error)

    }
    interface Node_Server  {
        + Id( context.Context,  Node_id) error

    }
    class Node_id << (S,Aquamarine) >> {
        + Args() Node_id_Params
        + AllocResults() (Node_id_Results, error)

    }
    class Node_id_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Node_id_Params_Future << (S,Aquamarine) >> {
        + Struct() (Node_id_Params, error)

    }
    class Node_id_Results << (S,Aquamarine) >> {
        + String() string
        + Id() int64
        + SetId(v int64) 

    }
    class Node_id_Results_Future << (S,Aquamarine) >> {
        + Struct() (Node_id_Results, error)

    }
    class PutConfigurationRequest << (S,Aquamarine) >> {
        + String() string
        + Which() PutConfigurationRequest_Which
        + Raft() (RaftConfiguration, error)
        + HasRaft() bool
        + SetRaft(v RaftConfiguration) error
        + NewRaft() (RaftConfiguration, error)
        + NodeHost() (NodeHostConfiguration, error)
        + HasNodeHost() bool
        + SetNodeHost(v NodeHostConfiguration) error
        + NewNodeHost() (NodeHostConfiguration, error)

    }
    class PutConfigurationRequest_Future << (S,Aquamarine) >> {
        + Struct() (PutConfigurationRequest, error)
        + Raft() RaftConfiguration_Future
        + NodeHost() NodeHostConfiguration_Future

    }
    class PutConfigurationRequest_Type << (S,Aquamarine) >> {
        + String() string

    }
    class PutConfigurationRequest_Which << (S,Aquamarine) >> {
        + String() string

    }
    class PutConfigurationResponse << (S,Aquamarine) >> {
        + String() string
        + Which() PutConfigurationResponse_Which
        + Raft() (RaftConfiguration, error)
        + HasRaft() bool
        + SetRaft(v RaftConfiguration) error
        + NewRaft() (RaftConfiguration, error)
        + NodeHost() (NodeHostConfiguration, error)
        + HasNodeHost() bool
        + SetNodeHost(v NodeHostConfiguration) error
        + NewNodeHost() (NodeHostConfiguration, error)
        + Success() bool
        + SetSuccess(v bool) 
        + Status() (string, error)
        + HasStatus() bool
        + StatusBytes() ([]byte, error)
        + SetStatus(v string) error
        + Type() PutConfigurationResponse_Type
        + SetType(v PutConfigurationResponse_Type) 

    }
    class PutConfigurationResponse_Future << (S,Aquamarine) >> {
        + Struct() (PutConfigurationResponse, error)
        + Raft() RaftConfiguration_Future
        + NodeHost() NodeHostConfiguration_Future

    }
    class PutConfigurationResponse_Type << (S,Aquamarine) >> {
        + String() string

    }
    class PutConfigurationResponse_Which << (S,Aquamarine) >> {
        + String() string

    }
    class PutRaftConfigurationRequest << (S,Aquamarine) >> {
        + String() string
        + Enable() bool
        + SetEnable(v bool) 
        + Name() (string, error)
        + HasName() bool
        + NameBytes() ([]byte, error)
        + SetName(v string) error
        + Config() (RaftConfiguration, error)
        + HasConfig() bool
        + SetConfig(v RaftConfiguration) error
        + NewConfig() (RaftConfiguration, error)

    }
    class PutRaftConfigurationRequest_Future << (S,Aquamarine) >> {
        + Struct() (PutRaftConfigurationRequest, error)
        + Config() RaftConfiguration_Future

    }
    class PutRaftConfigurationResponse << (S,Aquamarine) >> {
        + String() string
        + Valid() bool
        + SetValid(v bool) 
        + Name() (string, error)
        + HasName() bool
        + NameBytes() ([]byte, error)
        + SetName(v string) error
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class PutRaftConfigurationResponse_Future << (S,Aquamarine) >> {
        + Struct() (PutRaftConfigurationResponse, error)

    }
    class RaftConfiguration << (S,Aquamarine) >> {
        + String() string
        + Id() (string, error)
        + HasId() bool
        + IdBytes() ([]byte, error)
        + SetId(v string) error
        + NodeId() uint64
        + SetNodeId(v uint64) 
        + ClusterId() uint64
        + SetClusterId(v uint64) 
        + CheckQuorum() bool
        + SetCheckQuorum(v bool) 
        + ElectionTimeout() uint64
        + SetElectionTimeout(v uint64) 
        + HeartbeatTimeout() uint64
        + SetHeartbeatTimeout(v uint64) 
        + SnapshotEntries() uint64
        + SetSnapshotEntries(v uint64) 
        + CompactionOverhead() uint64
        + SetCompactionOverhead(v uint64) 
        + OrderedConfigurationChange() bool
        + SetOrderedConfigurationChange(v bool) 
        + MaxInMemoryLogSize() uint64
        + SetMaxInMemoryLogSize(v uint64) 
        + SnapshotCompressionType() uint64
        + SetSnapshotCompressionType(v uint64) 
        + EntryCompressionType() uint64
        + SetEntryCompressionType(v uint64) 
        + DisableAutoCompaction() bool
        + SetDisableAutoCompaction(v bool) 
        + IsObserver() bool
        + SetIsObserver(v bool) 
        + IsWitness() bool
        + SetIsWitness(v bool) 
        + Quiesce() bool
        + SetQuiesce(v bool) 
        + ConfigType() ConfigType
        + SetConfigType(v ConfigType) 

    }
    class RaftConfiguration_Future << (S,Aquamarine) >> {
        + Struct() (RaftConfiguration, error)

    }
    class Service << (S,Aquamarine) >> {
        + Client v3.Client

        + SetNodeId(ctx context.Context, params <font color=blue>func</font>(Service_setNodeId_Params) error) (Service_setNodeId_Results_Future, v3.ReleaseFunc)
        + GetServiceName(ctx context.Context, params <font color=blue>func</font>(Service_getServiceName_Params) error) (Service_getServiceName_Results_Future, v3.ReleaseFunc)
        + GetServiceType(ctx context.Context, params <font color=blue>func</font>(Service_getServiceType_Params) error) (Service_getServiceType_Results_Future, v3.ReleaseFunc)
        + GetDependencies(ctx context.Context, params <font color=blue>func</font>(Service_getDependencies_Params) error) (Service_getDependencies_Results_Future, v3.ReleaseFunc)
        + PrepareToRun(ctx context.Context, params <font color=blue>func</font>(Service_prepareToRun_Params) error) (Service_prepareToRun_Results_Future, v3.ReleaseFunc)
        + IsRunning(ctx context.Context, params <font color=blue>func</font>(Service_isRunning_Params) error) (Service_isRunning_Results_Future, v3.ReleaseFunc)
        + Start(ctx context.Context, params <font color=blue>func</font>(Service_start_Params) error) (Service_start_Results_Future, v3.ReleaseFunc)
        + Stop(ctx context.Context, params <font color=blue>func</font>(Service_stop_Params) error) (Service_stop_Results_Future, v3.ReleaseFunc)
        + Id(ctx context.Context, params <font color=blue>func</font>(Node_id_Params) error) (Node_id_Results_Future, v3.ReleaseFunc)
        + AddRef() Service
        + Release() 

    }
    class ServiceLibrary << (S,Aquamarine) >> {
        + Client v3.Client

        + AddService(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_addService_Params) error) (ServiceLibrary_addService_Results_Future, v3.ReleaseFunc)
        + AddServices(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_addServices_Params) error) (ServiceLibrary_addServices_Results_Future, v3.ReleaseFunc)
        + GetService(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_getService_Params) error) (ServiceLibrary_getService_Results_Future, v3.ReleaseFunc)
        + GetServices(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_getServices_Params) error) (ServiceLibrary_getServices_Results_Future, v3.ReleaseFunc)
        + StartService(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_startService_Params) error) (ServiceLibrary_startService_Results_Future, v3.ReleaseFunc)
        + StopService(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_stopService_Params) error) (ServiceLibrary_stopService_Results_Future, v3.ReleaseFunc)
        + StopServices(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_stopServices_Params) error) (ServiceLibrary_stopServices_Results_Future, v3.ReleaseFunc)
        + GetServiceStatus(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_getServiceStatus_Params) error) (ServiceLibrary_getServiceStatus_Results_Future, v3.ReleaseFunc)
        + GetServiceStatuses(ctx context.Context, params <font color=blue>func</font>(ServiceLibrary_getServiceStatuses_Params) error) (ServiceLibrary_getServiceStatuses_Results_Future, v3.ReleaseFunc)
        + AddRef() ServiceLibrary
        + Release() 

    }
    interface ServiceLibrary_Server  {
        + AddService( context.Context,  ServiceLibrary_addService) error
        + AddServices( context.Context,  ServiceLibrary_addServices) error
        + GetService( context.Context,  ServiceLibrary_getService) error
        + GetServices( context.Context,  ServiceLibrary_getServices) error
        + StartService( context.Context,  ServiceLibrary_startService) error
        + StopService( context.Context,  ServiceLibrary_stopService) error
        + StopServices( context.Context,  ServiceLibrary_stopServices) error
        + GetServiceStatus( context.Context,  ServiceLibrary_getServiceStatus) error
        + GetServiceStatuses( context.Context,  ServiceLibrary_getServiceStatuses) error

    }
    class ServiceLibrary_addService << (S,Aquamarine) >> {
        + Args() ServiceLibrary_addService_Params
        + AllocResults() (ServiceLibrary_addService_Results, error)

    }
    class ServiceLibrary_addService_Params << (S,Aquamarine) >> {
        + String() string
        + Svc() Service
        + HasSvc() bool
        + SetSvc(v Service) error

    }
    class ServiceLibrary_addService_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_addService_Params, error)
        + Svc() Service

    }
    class ServiceLibrary_addService_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_addService_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_addService_Results, error)

    }
    class ServiceLibrary_addServices << (S,Aquamarine) >> {
        + Args() ServiceLibrary_addServices_Params
        + AllocResults() (ServiceLibrary_addServices_Results, error)

    }
    class ServiceLibrary_addServices_Params << (S,Aquamarine) >> {
        + String() string
        + Svcs() (Service_List, error)
        + HasSvcs() bool
        + SetSvcs(v Service_List) error
        + NewSvcs(n int32) (Service_List, error)

    }
    class ServiceLibrary_addServices_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_addServices_Params, error)

    }
    class ServiceLibrary_addServices_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_addServices_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_addServices_Results, error)

    }
    class ServiceLibrary_getService << (S,Aquamarine) >> {
        + Args() ServiceLibrary_getService_Params
        + AllocResults() (ServiceLibrary_getService_Results, error)

    }
    class ServiceLibrary_getServiceStatus << (S,Aquamarine) >> {
        + Args() ServiceLibrary_getServiceStatus_Params
        + AllocResults() (ServiceLibrary_getServiceStatus_Results, error)

    }
    class ServiceLibrary_getServiceStatus_Params << (S,Aquamarine) >> {
        + String() string
        + Svc() ServiceStatus
        + HasSvc() bool
        + SetSvc(v ServiceStatus) error

    }
    class ServiceLibrary_getServiceStatus_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServiceStatus_Params, error)
        + Svc() ServiceStatus

    }
    class ServiceLibrary_getServiceStatus_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_getServiceStatus_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServiceStatus_Results, error)

    }
    class ServiceLibrary_getServiceStatuses << (S,Aquamarine) >> {
        + Args() ServiceLibrary_getServiceStatuses_Params
        + AllocResults() (ServiceLibrary_getServiceStatuses_Results, error)

    }
    class ServiceLibrary_getServiceStatuses_Params << (S,Aquamarine) >> {
        + String() string
        + Svcs() (ServiceStatus_List, error)
        + HasSvcs() bool
        + SetSvcs(v ServiceStatus_List) error
        + NewSvcs(n int32) (ServiceStatus_List, error)

    }
    class ServiceLibrary_getServiceStatuses_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServiceStatuses_Params, error)

    }
    class ServiceLibrary_getServiceStatuses_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_getServiceStatuses_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServiceStatuses_Results, error)

    }
    class ServiceLibrary_getService_Params << (S,Aquamarine) >> {
        + String() string
        + Svc() Service
        + HasSvc() bool
        + SetSvc(v Service) error

    }
    class ServiceLibrary_getService_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getService_Params, error)
        + Svc() Service

    }
    class ServiceLibrary_getService_Results << (S,Aquamarine) >> {
        + String() string
        + Svc() Service
        + HasSvc() bool
        + SetSvc(v Service) error
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_getService_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getService_Results, error)
        + Svc() Service

    }
    class ServiceLibrary_getServices << (S,Aquamarine) >> {
        + Args() ServiceLibrary_getServices_Params
        + AllocResults() (ServiceLibrary_getServices_Results, error)

    }
    class ServiceLibrary_getServices_Params << (S,Aquamarine) >> {
        + String() string
        + Svcs() (Service_List, error)
        + HasSvcs() bool
        + SetSvcs(v Service_List) error
        + NewSvcs(n int32) (Service_List, error)

    }
    class ServiceLibrary_getServices_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServices_Params, error)

    }
    class ServiceLibrary_getServices_Results << (S,Aquamarine) >> {
        + String() string
        + Svcs() (Service_List, error)
        + HasSvcs() bool
        + SetSvcs(v Service_List) error
        + NewSvcs(n int32) (Service_List, error)
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_getServices_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_getServices_Results, error)

    }
    class ServiceLibrary_startService << (S,Aquamarine) >> {
        + Args() ServiceLibrary_startService_Params
        + AllocResults() (ServiceLibrary_startService_Results, error)

    }
    class ServiceLibrary_startService_Params << (S,Aquamarine) >> {
        + String() string
        + Svc() Service
        + HasSvc() bool
        + SetSvc(v Service) error
        + Retry() bool
        + SetRetry(v bool) 

    }
    class ServiceLibrary_startService_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_startService_Params, error)
        + Svc() Service

    }
    class ServiceLibrary_startService_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_startService_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_startService_Results, error)

    }
    class ServiceLibrary_stopService << (S,Aquamarine) >> {
        + Args() ServiceLibrary_stopService_Params
        + AllocResults() (ServiceLibrary_stopService_Results, error)

    }
    class ServiceLibrary_stopService_Params << (S,Aquamarine) >> {
        + String() string
        + Retry() bool
        + SetRetry(v bool) 
        + Force() bool
        + SetForce(v bool) 
        + Svc() Service
        + HasSvc() bool
        + SetSvc(v Service) error

    }
    class ServiceLibrary_stopService_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_stopService_Params, error)
        + Svc() Service

    }
    class ServiceLibrary_stopService_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_stopService_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_stopService_Results, error)

    }
    class ServiceLibrary_stopServices << (S,Aquamarine) >> {
        + Args() ServiceLibrary_stopServices_Params
        + AllocResults() (ServiceLibrary_stopServices_Results, error)

    }
    class ServiceLibrary_stopServices_Params << (S,Aquamarine) >> {
        + String() string
        + Retry() bool
        + SetRetry(v bool) 
        + Force() bool
        + SetForce(v bool) 
        + Svcs() (Service_List, error)
        + HasSvcs() bool
        + SetSvcs(v Service_List) error
        + NewSvcs(n int32) (Service_List, error)

    }
    class ServiceLibrary_stopServices_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_stopServices_Params, error)

    }
    class ServiceLibrary_stopServices_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class ServiceLibrary_stopServices_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceLibrary_stopServices_Results, error)

    }
    class ServiceStatus << (S,Aquamarine) >> {
        + Client v3.Client

        + Status(ctx context.Context, params <font color=blue>func</font>(ServiceStatus_status_Params) error) (ServiceStatus_status_Results_Future, v3.ReleaseFunc)
        + AddRef() ServiceStatus
        + Release() 

    }
    interface ServiceStatus_Server  {
        + Status( context.Context,  ServiceStatus_status) error

    }
    class ServiceStatus_SvcState << (S,Aquamarine) >> {
        + String() string

    }
    class ServiceStatus_status << (S,Aquamarine) >> {
        + Args() ServiceStatus_status_Params
        + AllocResults() (ServiceStatus_status_Results, error)

    }
    class ServiceStatus_status_Params << (S,Aquamarine) >> {
        + String() string

    }
    class ServiceStatus_status_Params_Future << (S,Aquamarine) >> {
        + Struct() (ServiceStatus_status_Params, error)

    }
    class ServiceStatus_status_Results << (S,Aquamarine) >> {
        + String() string
        + State() ServiceStatus_SvcState
        + SetState(v ServiceStatus_SvcState) 

    }
    class ServiceStatus_status_Results_Future << (S,Aquamarine) >> {
        + Struct() (ServiceStatus_status_Results, error)

    }
    class ServiceType << (S,Aquamarine) >> {
        + String() string
        + Type() ServiceType_Type
        + SetType(v ServiceType_Type) 

    }
    class ServiceType_Future << (S,Aquamarine) >> {
        + Struct() (ServiceType, error)

    }
    class ServiceType_Type << (S,Aquamarine) >> {
        + String() string

    }
    interface Service_Server  {
        + SetNodeId( context.Context,  Service_setNodeId) error
        + GetServiceName( context.Context,  Service_getServiceName) error
        + GetServiceType( context.Context,  Service_getServiceType) error
        + GetDependencies( context.Context,  Service_getDependencies) error
        + PrepareToRun( context.Context,  Service_prepareToRun) error
        + IsRunning( context.Context,  Service_isRunning) error
        + Start( context.Context,  Service_start) error
        + Stop( context.Context,  Service_stop) error
        + Id( context.Context,  Node_id) error

    }
    class Service_getDependencies << (S,Aquamarine) >> {
        + Args() Service_getDependencies_Params
        + AllocResults() (Service_getDependencies_Results, error)

    }
    class Service_getDependencies_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Service_getDependencies_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_getDependencies_Params, error)

    }
    class Service_getDependencies_Results << (S,Aquamarine) >> {
        + String() string
        + Dependencies() (Service_List, error)
        + HasDependencies() bool
        + SetDependencies(v Service_List) error
        + NewDependencies(n int32) (Service_List, error)

    }
    class Service_getDependencies_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_getDependencies_Results, error)

    }
    class Service_getServiceName << (S,Aquamarine) >> {
        + Args() Service_getServiceName_Params
        + AllocResults() (Service_getServiceName_Results, error)

    }
    class Service_getServiceName_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Service_getServiceName_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_getServiceName_Params, error)

    }
    class Service_getServiceName_Results << (S,Aquamarine) >> {
        + String() string
        + Name() (string, error)
        + HasName() bool
        + NameBytes() ([]byte, error)
        + SetName(v string) error

    }
    class Service_getServiceName_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_getServiceName_Results, error)

    }
    class Service_getServiceType << (S,Aquamarine) >> {
        + Args() Service_getServiceType_Params
        + AllocResults() (Service_getServiceType_Results, error)

    }
    class Service_getServiceType_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Service_getServiceType_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_getServiceType_Params, error)

    }
    class Service_getServiceType_Results << (S,Aquamarine) >> {
        + String() string
        + Type() (ServiceType, error)
        + HasType() bool
        + SetType(v ServiceType) error
        + NewType() (ServiceType, error)

    }
    class Service_getServiceType_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_getServiceType_Results, error)
        + Type() ServiceType_Future

    }
    class Service_isRunning << (S,Aquamarine) >> {
        + Args() Service_isRunning_Params
        + AllocResults() (Service_isRunning_Results, error)

    }
    class Service_isRunning_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Service_isRunning_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_isRunning_Params, error)

    }
    class Service_isRunning_Results << (S,Aquamarine) >> {
        + String() string
        + Running() bool
        + SetRunning(v bool) 

    }
    class Service_isRunning_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_isRunning_Results, error)

    }
    class Service_prepareToRun << (S,Aquamarine) >> {
        + Args() Service_prepareToRun_Params
        + AllocResults() (Service_prepareToRun_Results, error)

    }
    class Service_prepareToRun_Params << (S,Aquamarine) >> {
        + String() string

    }
    class Service_prepareToRun_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_prepareToRun_Params, error)

    }
    class Service_prepareToRun_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class Service_prepareToRun_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_prepareToRun_Results, error)

    }
    class Service_setNodeId << (S,Aquamarine) >> {
        + Args() Service_setNodeId_Params
        + AllocResults() (Service_setNodeId_Results, error)

    }
    class Service_setNodeId_Params << (S,Aquamarine) >> {
        + String() string
        + NodeId() int64
        + SetNodeId(v int64) 

    }
    class Service_setNodeId_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_setNodeId_Params, error)

    }
    class Service_setNodeId_Results << (S,Aquamarine) >> {
        + String() string

    }
    class Service_setNodeId_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_setNodeId_Results, error)

    }
    class Service_start << (S,Aquamarine) >> {
        + Args() Service_start_Params
        + AllocResults() (Service_start_Results, error)

    }
    class Service_start_Params << (S,Aquamarine) >> {
        + String() string
        + Retry() bool
        + SetRetry(v bool) 

    }
    class Service_start_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_start_Params, error)

    }
    class Service_start_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class Service_start_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_start_Results, error)

    }
    class Service_stop << (S,Aquamarine) >> {
        + Args() Service_stop_Params
        + AllocResults() (Service_stop_Results, error)

    }
    class Service_stop_Params << (S,Aquamarine) >> {
        + String() string
        + Retry() bool
        + SetRetry(v bool) 
        + Force() bool
        + SetForce(v bool) 

    }
    class Service_stop_Params_Future << (S,Aquamarine) >> {
        + Struct() (Service_stop_Params, error)

    }
    class Service_stop_Results << (S,Aquamarine) >> {
        + String() string
        + Error() (string, error)
        + HasError() bool
        + ErrorBytes() ([]byte, error)
        + SetError(v string) error

    }
    class Service_stop_Results_Future << (S,Aquamarine) >> {
        + Struct() (Service_stop_Results, error)

    }
    class host.AllConfigurations_List << (T, #FF7700) >>  {
    }
    class host.ConfigService_List << (T, #FF7700) >>  {
    }
    class host.ConfigService_getConfig_Params_List << (T, #FF7700) >>  {
    }
    class host.ConfigService_getConfig_Results_List << (T, #FF7700) >>  {
    }
    class host.ConfigService_putConfig_Params_List << (T, #FF7700) >>  {
    }
    class host.ConfigService_putConfig_Results_List << (T, #FF7700) >>  {
    }
    class host.ConfigType << (T, #FF7700) >>  {
    }
    class host.ConfigType_List << (T, #FF7700) >>  {
    }
    class host.DirectedGraph_List << (T, #FF7700) >>  {
    }
    class host.DirectedGraph_hasEdgeFromTo_Params_List << (T, #FF7700) >>  {
    }
    class host.DirectedGraph_hasEdgeFromTo_Results_List << (T, #FF7700) >>  {
    }
    class host.DirectedGraph_to_Params_List << (T, #FF7700) >>  {
    }
    class host.DirectedGraph_to_Results_List << (T, #FF7700) >>  {
    }
    class host.Edge_List << (T, #FF7700) >>  {
    }
    class host.Edge_from_Params_List << (T, #FF7700) >>  {
    }
    class host.Edge_from_Results_List << (T, #FF7700) >>  {
    }
    class host.Edge_reversedEdge_Params_List << (T, #FF7700) >>  {
    }
    class host.Edge_reversedEdge_Results_List << (T, #FF7700) >>  {
    }
    class host.Edge_to_Params_List << (T, #FF7700) >>  {
    }
    class host.Edge_to_Results_List << (T, #FF7700) >>  {
    }
    class host.GetConfigurationRequest_List << (T, #FF7700) >>  {
    }
    class host.GetConfigurationRequest_Specificity << (T, #FF7700) >>  {
    }
    class host.GetConfigurationRequest_Specificity_List << (T, #FF7700) >>  {
    }
    class host.GetConfigurationRequest_Type << (T, #FF7700) >>  {
    }
    class host.GetConfigurationRequest_Type_List << (T, #FF7700) >>  {
    }
    class host.GetConfigurationResponse_List << (T, #FF7700) >>  {
    }
    class host.GetConfigurationResponse_Which << (T, #FF7700) >>  {
    }
    class host.GetRaftConfigurationRequest_List << (T, #FF7700) >>  {
    }
    class host.GetRaftConfigurationResponse_List << (T, #FF7700) >>  {
    }
    class host.Graph_List << (T, #FF7700) >>  {
    }
    class host.Graph_edge_Params_List << (T, #FF7700) >>  {
    }
    class host.Graph_edge_Results_List << (T, #FF7700) >>  {
    }
    class host.Graph_from_Params_List << (T, #FF7700) >>  {
    }
    class host.Graph_from_Results_List << (T, #FF7700) >>  {
    }
    class host.Graph_hasEdgeBetween_Params_List << (T, #FF7700) >>  {
    }
    class host.Graph_hasEdgeBetween_Results_List << (T, #FF7700) >>  {
    }
    class host.Graph_node_Params_List << (T, #FF7700) >>  {
    }
    class host.Graph_node_Results_List << (T, #FF7700) >>  {
    }
    class host.Graph_nodes_Params_List << (T, #FF7700) >>  {
    }
    class host.Graph_nodes_Results_List << (T, #FF7700) >>  {
    }
    class host.ListRaftConfigurationRequest_List << (T, #FF7700) >>  {
    }
    class host.ListRaftConfigurationResponse_List << (T, #FF7700) >>  {
    }
    class host.Negotiator_List << (T, #FF7700) >>  {
    }
    class host.Negotiator_configService_Params_List << (T, #FF7700) >>  {
    }
    class host.Negotiator_configService_Results_List << (T, #FF7700) >>  {
    }
    class host.NodeHostConfiguration_List << (T, #FF7700) >>  {
    }
    class host.Node_List << (T, #FF7700) >>  {
    }
    class host.Node_id_Params_List << (T, #FF7700) >>  {
    }
    class host.Node_id_Results_List << (T, #FF7700) >>  {
    }
    class host.PutConfigurationRequest_List << (T, #FF7700) >>  {
    }
    class host.PutConfigurationRequest_Type << (T, #FF7700) >>  {
    }
    class host.PutConfigurationRequest_Type_List << (T, #FF7700) >>  {
    }
    class host.PutConfigurationRequest_Which << (T, #FF7700) >>  {
    }
    class host.PutConfigurationResponse_List << (T, #FF7700) >>  {
    }
    class host.PutConfigurationResponse_Type << (T, #FF7700) >>  {
    }
    class host.PutConfigurationResponse_Type_List << (T, #FF7700) >>  {
    }
    class host.PutConfigurationResponse_Which << (T, #FF7700) >>  {
    }
    class host.PutRaftConfigurationRequest_List << (T, #FF7700) >>  {
    }
    class host.PutRaftConfigurationResponse_List << (T, #FF7700) >>  {
    }
    class host.RaftConfiguration_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_addService_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_addService_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_addServices_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_addServices_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServiceStatus_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServiceStatus_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServiceStatuses_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServiceStatuses_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getService_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getService_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServices_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_getServices_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_startService_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_startService_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_stopService_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_stopService_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_stopServices_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceLibrary_stopServices_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceStatus_List << (T, #FF7700) >>  {
    }
    class host.ServiceStatus_SvcState << (T, #FF7700) >>  {
    }
    class host.ServiceStatus_SvcState_List << (T, #FF7700) >>  {
    }
    class host.ServiceStatus_status_Params_List << (T, #FF7700) >>  {
    }
    class host.ServiceStatus_status_Results_List << (T, #FF7700) >>  {
    }
    class host.ServiceType_List << (T, #FF7700) >>  {
    }
    class host.ServiceType_Type << (T, #FF7700) >>  {
    }
    class host.ServiceType_Type_List << (T, #FF7700) >>  {
    }
    class host.Service_List << (T, #FF7700) >>  {
    }
    class host.Service_getDependencies_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_getDependencies_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_getServiceName_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_getServiceName_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_getServiceType_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_getServiceType_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_isRunning_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_isRunning_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_prepareToRun_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_prepareToRun_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_setNodeId_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_setNodeId_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_start_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_start_Results_List << (T, #FF7700) >>  {
    }
    class host.Service_stop_Params_List << (T, #FF7700) >>  {
    }
    class host.Service_stop_Results_List << (T, #FF7700) >>  {
    }
}
"v3.Struct" *-- "host.AllConfigurations"
"v3.Future" *-- "host.AllConfigurations_Future"
"server.Call" *-- "host.ConfigService_getConfig"
"v3.Struct" *-- "host.ConfigService_getConfig_Params"
"v3.Future" *-- "host.ConfigService_getConfig_Params_Future"
"v3.Struct" *-- "host.ConfigService_getConfig_Results"
"v3.Future" *-- "host.ConfigService_getConfig_Results_Future"
"server.Call" *-- "host.ConfigService_putConfig"
"v3.Struct" *-- "host.ConfigService_putConfig_Params"
"v3.Future" *-- "host.ConfigService_putConfig_Params_Future"
"v3.Struct" *-- "host.ConfigService_putConfig_Results"
"v3.Future" *-- "host.ConfigService_putConfig_Results_Future"
"server.Call" *-- "host.DirectedGraph_hasEdgeFromTo"
"v3.Struct" *-- "host.DirectedGraph_hasEdgeFromTo_Params"
"v3.Future" *-- "host.DirectedGraph_hasEdgeFromTo_Params_Future"
"v3.Struct" *-- "host.DirectedGraph_hasEdgeFromTo_Results"
"v3.Future" *-- "host.DirectedGraph_hasEdgeFromTo_Results_Future"
"server.Call" *-- "host.DirectedGraph_to"
"v3.Struct" *-- "host.DirectedGraph_to_Params"
"v3.Future" *-- "host.DirectedGraph_to_Params_Future"
"v3.Struct" *-- "host.DirectedGraph_to_Results"
"v3.Future" *-- "host.DirectedGraph_to_Results_Future"
"server.Call" *-- "host.Edge_from"
"v3.Struct" *-- "host.Edge_from_Params"
"v3.Future" *-- "host.Edge_from_Params_Future"
"v3.Struct" *-- "host.Edge_from_Results"
"v3.Future" *-- "host.Edge_from_Results_Future"
"server.Call" *-- "host.Edge_reversedEdge"
"v3.Struct" *-- "host.Edge_reversedEdge_Params"
"v3.Future" *-- "host.Edge_reversedEdge_Params_Future"
"v3.Struct" *-- "host.Edge_reversedEdge_Results"
"v3.Future" *-- "host.Edge_reversedEdge_Results_Future"
"server.Call" *-- "host.Edge_to"
"v3.Struct" *-- "host.Edge_to_Params"
"v3.Future" *-- "host.Edge_to_Params_Future"
"v3.Struct" *-- "host.Edge_to_Results"
"v3.Future" *-- "host.Edge_to_Results_Future"
"v3.Struct" *-- "host.GetConfigurationRequest"
"v3.Future" *-- "host.GetConfigurationRequest_Future"
"v3.Struct" *-- "host.GetConfigurationResponse"
"v3.Future" *-- "host.GetConfigurationResponse_Future"
"v3.Struct" *-- "host.GetRaftConfigurationRequest"
"v3.Future" *-- "host.GetRaftConfigurationRequest_Future"
"v3.Struct" *-- "host.GetRaftConfigurationResponse"
"v3.Future" *-- "host.GetRaftConfigurationResponse_Future"
"server.Call" *-- "host.Graph_edge"
"v3.Struct" *-- "host.Graph_edge_Params"
"v3.Future" *-- "host.Graph_edge_Params_Future"
"v3.Struct" *-- "host.Graph_edge_Results"
"v3.Future" *-- "host.Graph_edge_Results_Future"
"server.Call" *-- "host.Graph_from"
"v3.Struct" *-- "host.Graph_from_Params"
"v3.Future" *-- "host.Graph_from_Params_Future"
"v3.Struct" *-- "host.Graph_from_Results"
"v3.Future" *-- "host.Graph_from_Results_Future"
"server.Call" *-- "host.Graph_hasEdgeBetween"
"v3.Struct" *-- "host.Graph_hasEdgeBetween_Params"
"v3.Future" *-- "host.Graph_hasEdgeBetween_Params_Future"
"v3.Struct" *-- "host.Graph_hasEdgeBetween_Results"
"v3.Future" *-- "host.Graph_hasEdgeBetween_Results_Future"
"server.Call" *-- "host.Graph_node"
"v3.Struct" *-- "host.Graph_node_Params"
"v3.Future" *-- "host.Graph_node_Params_Future"
"v3.Struct" *-- "host.Graph_node_Results"
"v3.Future" *-- "host.Graph_node_Results_Future"
"server.Call" *-- "host.Graph_nodes"
"v3.Struct" *-- "host.Graph_nodes_Params"
"v3.Future" *-- "host.Graph_nodes_Params_Future"
"v3.Struct" *-- "host.Graph_nodes_Results"
"v3.Future" *-- "host.Graph_nodes_Results_Future"
"v3.Struct" *-- "host.ListRaftConfigurationRequest"
"v3.Future" *-- "host.ListRaftConfigurationRequest_Future"
"v3.Struct" *-- "host.ListRaftConfigurationResponse"
"v3.Future" *-- "host.ListRaftConfigurationResponse_Future"
"server.Call" *-- "host.Negotiator_configService"
"v3.Struct" *-- "host.Negotiator_configService_Params"
"v3.Future" *-- "host.Negotiator_configService_Params_Future"
"v3.Struct" *-- "host.Negotiator_configService_Results"
"v3.Future" *-- "host.Negotiator_configService_Results_Future"
"v3.Struct" *-- "host.NodeHostConfiguration"
"v3.Future" *-- "host.NodeHostConfiguration_Future"
"server.Call" *-- "host.Node_id"
"v3.Struct" *-- "host.Node_id_Params"
"v3.Future" *-- "host.Node_id_Params_Future"
"v3.Struct" *-- "host.Node_id_Results"
"v3.Future" *-- "host.Node_id_Results_Future"
"v3.Struct" *-- "host.PutConfigurationRequest"
"v3.Future" *-- "host.PutConfigurationRequest_Future"
"v3.Struct" *-- "host.PutConfigurationResponse"
"v3.Future" *-- "host.PutConfigurationResponse_Future"
"v3.Struct" *-- "host.PutRaftConfigurationRequest"
"v3.Future" *-- "host.PutRaftConfigurationRequest_Future"
"v3.Struct" *-- "host.PutRaftConfigurationResponse"
"v3.Future" *-- "host.PutRaftConfigurationResponse_Future"
"v3.Struct" *-- "host.RaftConfiguration"
"v3.Future" *-- "host.RaftConfiguration_Future"
"server.Call" *-- "host.ServiceLibrary_addService"
"v3.Struct" *-- "host.ServiceLibrary_addService_Params"
"v3.Future" *-- "host.ServiceLibrary_addService_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_addService_Results"
"v3.Future" *-- "host.ServiceLibrary_addService_Results_Future"
"server.Call" *-- "host.ServiceLibrary_addServices"
"v3.Struct" *-- "host.ServiceLibrary_addServices_Params"
"v3.Future" *-- "host.ServiceLibrary_addServices_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_addServices_Results"
"v3.Future" *-- "host.ServiceLibrary_addServices_Results_Future"
"server.Call" *-- "host.ServiceLibrary_getService"
"server.Call" *-- "host.ServiceLibrary_getServiceStatus"
"v3.Struct" *-- "host.ServiceLibrary_getServiceStatus_Params"
"v3.Future" *-- "host.ServiceLibrary_getServiceStatus_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_getServiceStatus_Results"
"v3.Future" *-- "host.ServiceLibrary_getServiceStatus_Results_Future"
"server.Call" *-- "host.ServiceLibrary_getServiceStatuses"
"v3.Struct" *-- "host.ServiceLibrary_getServiceStatuses_Params"
"v3.Future" *-- "host.ServiceLibrary_getServiceStatuses_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_getServiceStatuses_Results"
"v3.Future" *-- "host.ServiceLibrary_getServiceStatuses_Results_Future"
"v3.Struct" *-- "host.ServiceLibrary_getService_Params"
"v3.Future" *-- "host.ServiceLibrary_getService_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_getService_Results"
"v3.Future" *-- "host.ServiceLibrary_getService_Results_Future"
"server.Call" *-- "host.ServiceLibrary_getServices"
"v3.Struct" *-- "host.ServiceLibrary_getServices_Params"
"v3.Future" *-- "host.ServiceLibrary_getServices_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_getServices_Results"
"v3.Future" *-- "host.ServiceLibrary_getServices_Results_Future"
"server.Call" *-- "host.ServiceLibrary_startService"
"v3.Struct" *-- "host.ServiceLibrary_startService_Params"
"v3.Future" *-- "host.ServiceLibrary_startService_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_startService_Results"
"v3.Future" *-- "host.ServiceLibrary_startService_Results_Future"
"server.Call" *-- "host.ServiceLibrary_stopService"
"v3.Struct" *-- "host.ServiceLibrary_stopService_Params"
"v3.Future" *-- "host.ServiceLibrary_stopService_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_stopService_Results"
"v3.Future" *-- "host.ServiceLibrary_stopService_Results_Future"
"server.Call" *-- "host.ServiceLibrary_stopServices"
"v3.Struct" *-- "host.ServiceLibrary_stopServices_Params"
"v3.Future" *-- "host.ServiceLibrary_stopServices_Params_Future"
"v3.Struct" *-- "host.ServiceLibrary_stopServices_Results"
"v3.Future" *-- "host.ServiceLibrary_stopServices_Results_Future"
"server.Call" *-- "host.ServiceStatus_status"
"v3.Struct" *-- "host.ServiceStatus_status_Params"
"v3.Future" *-- "host.ServiceStatus_status_Params_Future"
"v3.Struct" *-- "host.ServiceStatus_status_Results"
"v3.Future" *-- "host.ServiceStatus_status_Results_Future"
"v3.Struct" *-- "host.ServiceType"
"v3.Future" *-- "host.ServiceType_Future"
"server.Call" *-- "host.Service_getDependencies"
"v3.Struct" *-- "host.Service_getDependencies_Params"
"v3.Future" *-- "host.Service_getDependencies_Params_Future"
"v3.Struct" *-- "host.Service_getDependencies_Results"
"v3.Future" *-- "host.Service_getDependencies_Results_Future"
"server.Call" *-- "host.Service_getServiceName"
"v3.Struct" *-- "host.Service_getServiceName_Params"
"v3.Future" *-- "host.Service_getServiceName_Params_Future"
"v3.Struct" *-- "host.Service_getServiceName_Results"
"v3.Future" *-- "host.Service_getServiceName_Results_Future"
"server.Call" *-- "host.Service_getServiceType"
"v3.Struct" *-- "host.Service_getServiceType_Params"
"v3.Future" *-- "host.Service_getServiceType_Params_Future"
"v3.Struct" *-- "host.Service_getServiceType_Results"
"v3.Future" *-- "host.Service_getServiceType_Results_Future"
"server.Call" *-- "host.Service_isRunning"
"v3.Struct" *-- "host.Service_isRunning_Params"
"v3.Future" *-- "host.Service_isRunning_Params_Future"
"v3.Struct" *-- "host.Service_isRunning_Results"
"v3.Future" *-- "host.Service_isRunning_Results_Future"
"server.Call" *-- "host.Service_prepareToRun"
"v3.Struct" *-- "host.Service_prepareToRun_Params"
"v3.Future" *-- "host.Service_prepareToRun_Params_Future"
"v3.Struct" *-- "host.Service_prepareToRun_Results"
"v3.Future" *-- "host.Service_prepareToRun_Results_Future"
"server.Call" *-- "host.Service_setNodeId"
"v3.Struct" *-- "host.Service_setNodeId_Params"
"v3.Future" *-- "host.Service_setNodeId_Params_Future"
"v3.Struct" *-- "host.Service_setNodeId_Results"
"v3.Future" *-- "host.Service_setNodeId_Results_Future"
"server.Call" *-- "host.Service_start"
"v3.Struct" *-- "host.Service_start_Params"
"v3.Future" *-- "host.Service_start_Params_Future"
"v3.Struct" *-- "host.Service_start_Results"
"v3.Future" *-- "host.Service_start_Results_Future"
"server.Call" *-- "host.Service_stop"
"v3.Struct" *-- "host.Service_stop_Params"
"v3.Future" *-- "host.Service_stop_Params_Future"
"v3.Struct" *-- "host.Service_stop_Results"
"v3.Future" *-- "host.Service_stop_Results_Future"


namespace main {
    class Build << (S,Aquamarine) >> {
        + Setup() 
        + Compile() error
        + Rebuild() error
        + Vet() error

    }
    class CI << (S,Aquamarine) >> {
        + Setup() error
        + Validate(pipelineName string) error
        + Rendervars() error
        + Run(taskName string, extraInputs string) error

    }
    class Clean << (S,Aquamarine) >> {
        + Build() error
        + Vendor() error
        + Cache() error
        + Bindir() error
        + Homebrew() error
        + All() 

    }
    class Gen << (S,Aquamarine) >> {
        + Setup() 
        + All() error
        + Database() error
        + Net() error

    }
    class Install << (S,Aquamarine) >> {
        + Local() error
        + Homebrew(path string) error
        + Godeps() error
        + Node() error
        + Tools() error

    }
    class Test << (S,Aquamarine) >> {
        + Cleanroom() error
        + All() error
        + Blaze() error
        + Config() error
        + FSM() error
        + Routing() error
        + Services() error

    }
    class concourseVersionInfo << (S,Aquamarine) >> {
        + ExternalURL string
        + FeatureFlags <font color=blue>struct</font>{bool, bool, bool, bool, bool, bool, bool}
        + Version string
        + WorkerVersion string

    }
    class main.Build << (T, #FF7700) >>  {
    }
    class main.CI << (T, #FF7700) >>  {
    }
    class main.Clean << (T, #FF7700) >>  {
    }
    class main.Gen << (T, #FF7700) >>  {
    }
    class main.Install << (T, #FF7700) >>  {
    }
    class main.Test << (T, #FF7700) >>  {
    }
    class "mg.Namespace" as mgNamespace {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace servicegraph {
    interface IServiceLibrary  {
        + AddService(svc Service) error
        + AddServices(svcs []Service) error
        + GetService(svc Service) (Service, error)
        + StartService(svc Service, retry bool) error
        + StopService(retry bool, force bool, svc Service) error

    }
    interface Service  {
        + SetNodeID(nid int64) 
        + GetServiceName() string
        + GetServiceType() LifecycleServiceType
        + GetDependencies() []Service
        + PrepareToRun() error
        + ReadyToRun() bool
        + IsRunning() bool
        + Start(retry bool) error
        + Stop(retry bool, force bool) error

    }
    class ServiceLibrary << (S,Aquamarine) >> {
        - graph *simple.DirectedGraph

        - registerDeps(svc Service) error

        + AddService(svc Service) error
        + AddServices(svcs []Service) error
        + GetService(svc Service) (Service, error)
        + StartService(svc Service, retry bool) error
        + StopService(retry bool, force bool, svc Service) error

    }
    class servicegraph.LifecycleServiceType << (T, #FF7700) >>  {
    }
}

"servicegraph.IServiceLibrary" <|-- "servicegraph.ServiceLibrary"

namespace services {
    interface IServiceManager  {
        + Start(retry bool) error
        + Stop(retry bool) error
        + Restart(retry bool) error

    }
    interface IStore  {
        + Get(key string) (*T, error)
        + GetAll() (<font color=blue>map</font>[string]*T, error)
        + Put(key string, payload *T) error

    }
    class StoreManager << (S,Aquamarine) >> {
        - baseDir string
        - logger zerolog.Logger
        - db *bbolt.DB
        - initialized bool
        - typeMap <font color=blue>map</font>[string]bool
        - mu sync.RWMutex

        - init() error

        + Put(key string, target []byte, t reflect.Type) error
        + Get(key string, t reflect.Type) ([]byte, error)
        + GetAll(t reflect.Type) (<font color=blue>map</font>[string][]byte, error)
        + Flush() error
        + Start(retry bool) error
        + Restart(retry bool) error
        + Stop(retry bool) error

    }
}

"services.IServiceManager" <|-- "services.StoreManager"

namespace v1 {
    class Header << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + Size uint32
        + Checksum uint32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetSize() uint32
        + GetChecksum() uint32
        + EqualVT(that *Header) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
    class State << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - sizeCache protoimpl.SizeCache
        - unknownFields protoimpl.UnknownFields

        + State uint32
        + HeaderToFollow uint32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetState() uint32
        + GetHeaderToFollow() uint32
        + EqualVT(that *State) bool
        + MarshalVT() ([]byte, error)
        + MarshalToVT(dAtA []byte) (int, error)
        + MarshalToSizedBufferVT(dAtA []byte) (int, error)
        + SizeVT() int
        + UnmarshalVT(dAtA []byte) error

    }
}


"__builtin__.int" #.. "fsm.op"
"__builtin__.int" #.. "servicegraph.LifecycleServiceType"
"__builtin__.int32" #.. "database.IndexState_ResultCode"
"__builtin__.int32" #.. "database.RaftControlPayload_MethodName"
"__builtin__.string" #.. "fsm.PartitionType"
"__builtin__.string" #.. "fsm.RegionType"
"__builtin__.string" #.. "fsm.ResourceType"
"__builtin__.string" #.. "fsm.ServiceType"
"__builtin__.uint16" #.. "database.Event_EventType"
"__builtin__.uint16" #.. "host.ConfigType"
"__builtin__.uint16" #.. "host.GetConfigurationRequest_Specificity"
"__builtin__.uint16" #.. "host.GetConfigurationRequest_Type"
"__builtin__.uint16" #.. "host.GetConfigurationResponse_Which"
"__builtin__.uint16" #.. "host.PutConfigurationRequest_Type"
"__builtin__.uint16" #.. "host.PutConfigurationRequest_Which"
"__builtin__.uint16" #.. "host.PutConfigurationResponse_Type"
"__builtin__.uint16" #.. "host.PutConfigurationResponse_Which"
"__builtin__.uint16" #.. "host.ServiceStatus_SvcState"
"__builtin__.uint16" #.. "host.ServiceType_Type"
"__builtin__.uint32" #.. "blaze.StreamState"
"database." #.. "database.Client_List"
"database." #.. "database.Client_closeSession_Params_List"
"database." #.. "database.Client_closeSession_Results_List"
"database." #.. "database.Client_getClientId_Params_List"
"database." #.. "database.Client_getClientId_Results_List"
"database." #.. "database.Client_getClusterId_Params_List"
"database." #.. "database.Client_getClusterId_Results_List"
"database." #.. "database.Client_newSession_Params_List"
"database." #.. "database.Client_newSession_Results_List"
"database." #.. "database.Client_propose_Params_List"
"database." #.. "database.Client_propose_Results_List"
"database." #.. "database.Client_read_Params_List"
"database." #.. "database.Client_read_Results_List"
"database." #.. "database.Event_EventType_List"
"database." #.. "database.Event_List"
"database." #.. "database.KeyValue_List"
"database." #.. "database.RequestResultIterator_List"
"database." #.. "database.RequestResultIterator_get_Params_List"
"database." #.. "database.RequestResultIterator_get_Results_List"
"database." #.. "database.RequestResultIterator_next_Params_List"
"database." #.. "database.RequestResultIterator_next_Results_List"
"database." #.. "database.RequestResult_List"
"database." #.. "database.RequestResult_completed_Params_List"
"database." #.. "database.RequestResult_completed_Results_List"
"database." #.. "database.RequestResult_getResult_Params_List"
"database." #.. "database.RequestResult_getResult_Results_List"
"database." #.. "database.RequestResult_rejected_Params_List"
"database." #.. "database.RequestResult_rejected_Results_List"
"database." #.. "database.RequestResult_terminated_Params_List"
"database." #.. "database.RequestResult_terminated_Results_List"
"database." #.. "database.RequestResult_timeout_Params_List"
"database." #.. "database.RequestResult_timeout_Results_List"
"database." #.. "database.RequestState_List"
"database." #.. "database.RequestState_completed_Params_List"
"database." #.. "database.RequestState_completed_Results_List"
"database." #.. "database.Session_List"
"host." #.. "host.AllConfigurations_List"
"host." #.. "host.ConfigService_List"
"host." #.. "host.ConfigService_getConfig_Params_List"
"host." #.. "host.ConfigService_getConfig_Results_List"
"host." #.. "host.ConfigService_putConfig_Params_List"
"host." #.. "host.ConfigService_putConfig_Results_List"
"host." #.. "host.ConfigType_List"
"host." #.. "host.DirectedGraph_List"
"host." #.. "host.DirectedGraph_hasEdgeFromTo_Params_List"
"host." #.. "host.DirectedGraph_hasEdgeFromTo_Results_List"
"host." #.. "host.DirectedGraph_to_Params_List"
"host." #.. "host.DirectedGraph_to_Results_List"
"host." #.. "host.Edge_List"
"host." #.. "host.Edge_from_Params_List"
"host." #.. "host.Edge_from_Results_List"
"host." #.. "host.Edge_reversedEdge_Params_List"
"host." #.. "host.Edge_reversedEdge_Results_List"
"host." #.. "host.Edge_to_Params_List"
"host." #.. "host.Edge_to_Results_List"
"host." #.. "host.GetConfigurationRequest_List"
"host." #.. "host.GetConfigurationRequest_Specificity_List"
"host." #.. "host.GetConfigurationRequest_Type_List"
"host." #.. "host.GetConfigurationResponse_List"
"host." #.. "host.GetRaftConfigurationRequest_List"
"host." #.. "host.GetRaftConfigurationResponse_List"
"host." #.. "host.Graph_List"
"host." #.. "host.Graph_edge_Params_List"
"host." #.. "host.Graph_edge_Results_List"
"host." #.. "host.Graph_from_Params_List"
"host." #.. "host.Graph_from_Results_List"
"host." #.. "host.Graph_hasEdgeBetween_Params_List"
"host." #.. "host.Graph_hasEdgeBetween_Results_List"
"host." #.. "host.Graph_node_Params_List"
"host." #.. "host.Graph_node_Results_List"
"host." #.. "host.Graph_nodes_Params_List"
"host." #.. "host.Graph_nodes_Results_List"
"host." #.. "host.ListRaftConfigurationRequest_List"
"host." #.. "host.ListRaftConfigurationResponse_List"
"host." #.. "host.Negotiator_List"
"host." #.. "host.Negotiator_configService_Params_List"
"host." #.. "host.Negotiator_configService_Results_List"
"host." #.. "host.NodeHostConfiguration_List"
"host." #.. "host.Node_List"
"host." #.. "host.Node_id_Params_List"
"host." #.. "host.Node_id_Results_List"
"host." #.. "host.PutConfigurationRequest_List"
"host." #.. "host.PutConfigurationRequest_Type_List"
"host." #.. "host.PutConfigurationResponse_List"
"host." #.. "host.PutConfigurationResponse_Type_List"
"host." #.. "host.PutRaftConfigurationRequest_List"
"host." #.. "host.PutRaftConfigurationResponse_List"
"host." #.. "host.RaftConfiguration_List"
"host." #.. "host.ServiceLibrary_List"
"host." #.. "host.ServiceLibrary_addService_Params_List"
"host." #.. "host.ServiceLibrary_addService_Results_List"
"host." #.. "host.ServiceLibrary_addServices_Params_List"
"host." #.. "host.ServiceLibrary_addServices_Results_List"
"host." #.. "host.ServiceLibrary_getServiceStatus_Params_List"
"host." #.. "host.ServiceLibrary_getServiceStatus_Results_List"
"host." #.. "host.ServiceLibrary_getServiceStatuses_Params_List"
"host." #.. "host.ServiceLibrary_getServiceStatuses_Results_List"
"host." #.. "host.ServiceLibrary_getService_Params_List"
"host." #.. "host.ServiceLibrary_getService_Results_List"
"host." #.. "host.ServiceLibrary_getServices_Params_List"
"host." #.. "host.ServiceLibrary_getServices_Results_List"
"host." #.. "host.ServiceLibrary_startService_Params_List"
"host." #.. "host.ServiceLibrary_startService_Results_List"
"host." #.. "host.ServiceLibrary_stopService_Params_List"
"host." #.. "host.ServiceLibrary_stopService_Results_List"
"host." #.. "host.ServiceLibrary_stopServices_Params_List"
"host." #.. "host.ServiceLibrary_stopServices_Results_List"
"host." #.. "host.ServiceStatus_List"
"host." #.. "host.ServiceStatus_SvcState_List"
"host." #.. "host.ServiceStatus_status_Params_List"
"host." #.. "host.ServiceStatus_status_Results_List"
"host." #.. "host.ServiceType_List"
"host." #.. "host.ServiceType_Type_List"
"host." #.. "host.Service_List"
"host." #.. "host.Service_getDependencies_Params_List"
"host." #.. "host.Service_getDependencies_Results_List"
"host." #.. "host.Service_getServiceName_Params_List"
"host." #.. "host.Service_getServiceName_Results_List"
"host." #.. "host.Service_getServiceType_Params_List"
"host." #.. "host.Service_getServiceType_Results_List"
"host." #.. "host.Service_isRunning_Params_List"
"host." #.. "host.Service_isRunning_Results_List"
"host." #.. "host.Service_prepareToRun_Params_List"
"host." #.. "host.Service_prepareToRun_Results_List"
"host." #.. "host.Service_setNodeId_Params_List"
"host." #.. "host.Service_setNodeId_Results_List"
"host." #.. "host.Service_start_Params_List"
"host." #.. "host.Service_start_Results_List"
"host." #.. "host.Service_stop_Params_List"
"host." #.. "host.Service_stop_Results_List"
"main.mgNamespace" #.. "main.Build"
"main.mgNamespace" #.. "main.CI"
"main.mgNamespace" #.. "main.Clean"
"main.mgNamespace" #.. "main.Gen"
"main.mgNamespace" #.. "main.Install"
"main.mgNamespace" #.. "main.Test"
@enduml
