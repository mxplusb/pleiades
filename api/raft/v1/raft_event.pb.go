// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: raft/v1/raft_event.proto

package raftv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	EventType_EVENT_TYPE_LOG_ENTRY   EventType = 1
	EventType_EVENT_TYPE_SNAPSHOT    EventType = 2
	EventType_EVENT_TYPE_CONNECTION  EventType = 3
	EventType_EVENT_TYPE_HOST        EventType = 4
	EventType_EVENT_TYPE_NODE        EventType = 5
	EventType_EVENT_TYPE_RAFT        EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_LOG_ENTRY",
		2: "EVENT_TYPE_SNAPSHOT",
		3: "EVENT_TYPE_CONNECTION",
		4: "EVENT_TYPE_HOST",
		5: "EVENT_TYPE_NODE",
		6: "EVENT_TYPE_RAFT",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_LOG_ENTRY":   1,
		"EVENT_TYPE_SNAPSHOT":    2,
		"EVENT_TYPE_CONNECTION":  3,
		"EVENT_TYPE_HOST":        4,
		"EVENT_TYPE_NODE":        5,
		"EVENT_TYPE_RAFT":        6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_v1_raft_event_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_raft_v1_raft_event_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{0}
}

type Event int32

const (
	Event_EVENT_UNSPECIFIED             Event = 0
	Event_EVENT_CONNECTION_ESTABLISHED  Event = 1
	Event_EVENT_CONNECTION_FAILED       Event = 2
	Event_EVENT_LOG_COMPACTED           Event = 3
	Event_EVENT_LOGDB_COMPACTED         Event = 4
	Event_EVENT_MEMBERSHIP_CHANGED      Event = 5
	Event_EVENT_NODE_HOST_SHUTTING_DOWN Event = 6
	Event_EVENT_NODE_READY              Event = 7
	Event_EVENT_NODE_UNLOADED           Event = 8
	Event_EVENT_SEND_SNAPSHOT_ABORTED   Event = 9
	Event_EVENT_SEND_SNAPSHOT_COMPLETED Event = 10
	Event_EVENT_SEND_SNAPSHOT_STARTED   Event = 11
	Event_EVENT_SNAPSHOT_COMPACTED      Event = 12
	Event_EVENT_SNAPSHOT_CREATED        Event = 13
	Event_EVENT_SNAPSHOT_RECEIVED       Event = 14
	Event_EVENT_SNAPSHOT_RECOVERED      Event = 15
	Event_EVENT_LEADER_UPDATED          Event = 16
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0:  "EVENT_UNSPECIFIED",
		1:  "EVENT_CONNECTION_ESTABLISHED",
		2:  "EVENT_CONNECTION_FAILED",
		3:  "EVENT_LOG_COMPACTED",
		4:  "EVENT_LOGDB_COMPACTED",
		5:  "EVENT_MEMBERSHIP_CHANGED",
		6:  "EVENT_NODE_HOST_SHUTTING_DOWN",
		7:  "EVENT_NODE_READY",
		8:  "EVENT_NODE_UNLOADED",
		9:  "EVENT_SEND_SNAPSHOT_ABORTED",
		10: "EVENT_SEND_SNAPSHOT_COMPLETED",
		11: "EVENT_SEND_SNAPSHOT_STARTED",
		12: "EVENT_SNAPSHOT_COMPACTED",
		13: "EVENT_SNAPSHOT_CREATED",
		14: "EVENT_SNAPSHOT_RECEIVED",
		15: "EVENT_SNAPSHOT_RECOVERED",
		16: "EVENT_LEADER_UPDATED",
	}
	Event_value = map[string]int32{
		"EVENT_UNSPECIFIED":             0,
		"EVENT_CONNECTION_ESTABLISHED":  1,
		"EVENT_CONNECTION_FAILED":       2,
		"EVENT_LOG_COMPACTED":           3,
		"EVENT_LOGDB_COMPACTED":         4,
		"EVENT_MEMBERSHIP_CHANGED":      5,
		"EVENT_NODE_HOST_SHUTTING_DOWN": 6,
		"EVENT_NODE_READY":              7,
		"EVENT_NODE_UNLOADED":           8,
		"EVENT_SEND_SNAPSHOT_ABORTED":   9,
		"EVENT_SEND_SNAPSHOT_COMPLETED": 10,
		"EVENT_SEND_SNAPSHOT_STARTED":   11,
		"EVENT_SNAPSHOT_COMPACTED":      12,
		"EVENT_SNAPSHOT_CREATED":        13,
		"EVENT_SNAPSHOT_RECEIVED":       14,
		"EVENT_SNAPSHOT_RECOVERED":      15,
		"EVENT_LEADER_UPDATED":          16,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_v1_raft_event_proto_enumTypes[1].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_raft_v1_raft_event_proto_enumTypes[1]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{1}
}

type RaftEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ       EventType              `protobuf:"varint,1,opt,name=typ,proto3,enum=raft.v1.EventType" json:"typ,omitempty"`
	Action    Event                  `protobuf:"varint,2,opt,name=action,proto3,enum=raft.v1.Event" json:"action,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Event:
	//	*RaftEvent_LogEntry
	//	*RaftEvent_Snapshot
	//	*RaftEvent_Connection
	//	*RaftEvent_Node
	//	*RaftEvent_HostShutdown
	Event isRaftEvent_Event `protobuf_oneof:"event"`
}

func (x *RaftEvent) Reset() {
	*x = RaftEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftEvent) ProtoMessage() {}

func (x *RaftEvent) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftEvent.ProtoReflect.Descriptor instead.
func (*RaftEvent) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{0}
}

func (x *RaftEvent) GetTyp() EventType {
	if x != nil {
		return x.Typ
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *RaftEvent) GetAction() Event {
	if x != nil {
		return x.Action
	}
	return Event_EVENT_UNSPECIFIED
}

func (x *RaftEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *RaftEvent) GetEvent() isRaftEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RaftEvent) GetLogEntry() *RaftLogEntryEvent {
	if x, ok := x.GetEvent().(*RaftEvent_LogEntry); ok {
		return x.LogEntry
	}
	return nil
}

func (x *RaftEvent) GetSnapshot() *RaftSnapshotEvent {
	if x, ok := x.GetEvent().(*RaftEvent_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *RaftEvent) GetConnection() *RaftConnectionEvent {
	if x, ok := x.GetEvent().(*RaftEvent_Connection); ok {
		return x.Connection
	}
	return nil
}

func (x *RaftEvent) GetNode() *RaftNodeEvent {
	if x, ok := x.GetEvent().(*RaftEvent_Node); ok {
		return x.Node
	}
	return nil
}

func (x *RaftEvent) GetHostShutdown() *RaftHostShutdown {
	if x, ok := x.GetEvent().(*RaftEvent_HostShutdown); ok {
		return x.HostShutdown
	}
	return nil
}

type isRaftEvent_Event interface {
	isRaftEvent_Event()
}

type RaftEvent_LogEntry struct {
	LogEntry *RaftLogEntryEvent `protobuf:"bytes,4,opt,name=log_entry,json=logEntry,proto3,oneof"`
}

type RaftEvent_Snapshot struct {
	Snapshot *RaftSnapshotEvent `protobuf:"bytes,5,opt,name=snapshot,proto3,oneof"`
}

type RaftEvent_Connection struct {
	Connection *RaftConnectionEvent `protobuf:"bytes,6,opt,name=connection,proto3,oneof"`
}

type RaftEvent_Node struct {
	Node *RaftNodeEvent `protobuf:"bytes,7,opt,name=node,proto3,oneof"`
}

type RaftEvent_HostShutdown struct {
	HostShutdown *RaftHostShutdown `protobuf:"bytes,8,opt,name=host_shutdown,json=hostShutdown,proto3,oneof"`
}

func (*RaftEvent_LogEntry) isRaftEvent_Event() {}

func (*RaftEvent_Snapshot) isRaftEvent_Event() {}

func (*RaftEvent_Connection) isRaftEvent_Event() {}

func (*RaftEvent_Node) isRaftEvent_Event() {}

func (*RaftEvent_HostShutdown) isRaftEvent_Event() {}

type RaftLeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Term      uint64 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId  uint64 `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *RaftLeaderInfo) Reset() {
	*x = RaftLeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftLeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftLeaderInfo) ProtoMessage() {}

func (x *RaftLeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftLeaderInfo.ProtoReflect.Descriptor instead.
func (*RaftLeaderInfo) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{1}
}

func (x *RaftLeaderInfo) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftLeaderInfo) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftLeaderInfo) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftLeaderInfo) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type RaftLogEntryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Index     uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RaftLogEntryEvent) Reset() {
	*x = RaftLogEntryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftLogEntryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftLogEntryEvent) ProtoMessage() {}

func (x *RaftLogEntryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftLogEntryEvent.ProtoReflect.Descriptor instead.
func (*RaftLogEntryEvent) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{2}
}

func (x *RaftLogEntryEvent) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftLogEntryEvent) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftLogEntryEvent) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RaftSnapshotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	FromIndex uint64 `protobuf:"varint,3,opt,name=from_index,json=fromIndex,proto3" json:"from_index,omitempty"`
	ToIndex   uint64 `protobuf:"varint,4,opt,name=to_index,json=toIndex,proto3" json:"to_index,omitempty"`
}

func (x *RaftSnapshotEvent) Reset() {
	*x = RaftSnapshotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftSnapshotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftSnapshotEvent) ProtoMessage() {}

func (x *RaftSnapshotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftSnapshotEvent.ProtoReflect.Descriptor instead.
func (*RaftSnapshotEvent) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{3}
}

func (x *RaftSnapshotEvent) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftSnapshotEvent) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftSnapshotEvent) GetFromIndex() uint64 {
	if x != nil {
		return x.FromIndex
	}
	return 0
}

func (x *RaftSnapshotEvent) GetToIndex() uint64 {
	if x != nil {
		return x.ToIndex
	}
	return 0
}

type RaftConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IsSnapshot bool   `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot,proto3" json:"is_snapshot,omitempty"`
}

func (x *RaftConnectionEvent) Reset() {
	*x = RaftConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConnectionEvent) ProtoMessage() {}

func (x *RaftConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConnectionEvent.ProtoReflect.Descriptor instead.
func (*RaftConnectionEvent) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{4}
}

func (x *RaftConnectionEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RaftConnectionEvent) GetIsSnapshot() bool {
	if x != nil {
		return x.IsSnapshot
	}
	return false
}

type RaftNodeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
}

func (x *RaftNodeEvent) Reset() {
	*x = RaftNodeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftNodeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftNodeEvent) ProtoMessage() {}

func (x *RaftNodeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftNodeEvent.ProtoReflect.Descriptor instead.
func (*RaftNodeEvent) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{5}
}

func (x *RaftNodeEvent) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftNodeEvent) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type RaftHostShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RaftHostShutdown) Reset() {
	*x = RaftHostShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftHostShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftHostShutdown) ProtoMessage() {}

func (x *RaftHostShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftHostShutdown.ProtoReflect.Descriptor instead.
func (*RaftHostShutdown) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_event_proto_rawDescGZIP(), []int{6}
}

var File_raft_v1_raft_event_proto protoreflect.FileDescriptor

var file_raft_v1_raft_event_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x03, 0x0a, 0x09, 0x52, 0x61, 0x66, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x50, 0x0a, 0x13, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x61, 0x66, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0xb4, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x46, 0x54, 0x10, 0x06, 0x2a, 0xf5, 0x03, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x44, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x10, 0x42, 0x7e, 0x0a, 0x13, 0x69, 0x6f, 0x2e, 0x61, 0x31, 0x33, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x52, 0x61, 0x66,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a, 0x61,
	0x31, 0x33, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2f,
	0x76, 0x31, 0x3b, 0x72, 0x61, 0x66, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa,
	0x02, 0x07, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x52, 0x61, 0x66, 0x74,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x66, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61, 0x66, 0x74,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raft_v1_raft_event_proto_rawDescOnce sync.Once
	file_raft_v1_raft_event_proto_rawDescData = file_raft_v1_raft_event_proto_rawDesc
)

func file_raft_v1_raft_event_proto_rawDescGZIP() []byte {
	file_raft_v1_raft_event_proto_rawDescOnce.Do(func() {
		file_raft_v1_raft_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_raft_v1_raft_event_proto_rawDescData)
	})
	return file_raft_v1_raft_event_proto_rawDescData
}

var file_raft_v1_raft_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_raft_v1_raft_event_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_raft_v1_raft_event_proto_goTypes = []interface{}{
	(EventType)(0),                // 0: raft.v1.EventType
	(Event)(0),                    // 1: raft.v1.Event
	(*RaftEvent)(nil),             // 2: raft.v1.RaftEvent
	(*RaftLeaderInfo)(nil),        // 3: raft.v1.RaftLeaderInfo
	(*RaftLogEntryEvent)(nil),     // 4: raft.v1.RaftLogEntryEvent
	(*RaftSnapshotEvent)(nil),     // 5: raft.v1.RaftSnapshotEvent
	(*RaftConnectionEvent)(nil),   // 6: raft.v1.RaftConnectionEvent
	(*RaftNodeEvent)(nil),         // 7: raft.v1.RaftNodeEvent
	(*RaftHostShutdown)(nil),      // 8: raft.v1.RaftHostShutdown
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_raft_v1_raft_event_proto_depIdxs = []int32{
	0, // 0: raft.v1.RaftEvent.typ:type_name -> raft.v1.EventType
	1, // 1: raft.v1.RaftEvent.action:type_name -> raft.v1.Event
	9, // 2: raft.v1.RaftEvent.timestamp:type_name -> google.protobuf.Timestamp
	4, // 3: raft.v1.RaftEvent.log_entry:type_name -> raft.v1.RaftLogEntryEvent
	5, // 4: raft.v1.RaftEvent.snapshot:type_name -> raft.v1.RaftSnapshotEvent
	6, // 5: raft.v1.RaftEvent.connection:type_name -> raft.v1.RaftConnectionEvent
	7, // 6: raft.v1.RaftEvent.node:type_name -> raft.v1.RaftNodeEvent
	8, // 7: raft.v1.RaftEvent.host_shutdown:type_name -> raft.v1.RaftHostShutdown
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_raft_v1_raft_event_proto_init() }
func file_raft_v1_raft_event_proto_init() {
	if File_raft_v1_raft_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raft_v1_raft_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftLeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftLogEntryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftSnapshotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftNodeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftHostShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_raft_v1_raft_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RaftEvent_LogEntry)(nil),
		(*RaftEvent_Snapshot)(nil),
		(*RaftEvent_Connection)(nil),
		(*RaftEvent_Node)(nil),
		(*RaftEvent_HostShutdown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raft_v1_raft_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raft_v1_raft_event_proto_goTypes,
		DependencyIndexes: file_raft_v1_raft_event_proto_depIdxs,
		EnumInfos:         file_raft_v1_raft_event_proto_enumTypes,
		MessageInfos:      file_raft_v1_raft_event_proto_msgTypes,
	}.Build()
	File_raft_v1_raft_event_proto = out.File
	file_raft_v1_raft_event_proto_rawDesc = nil
	file_raft_v1_raft_event_proto_goTypes = nil
	file_raft_v1_raft_event_proto_depIdxs = nil
}
