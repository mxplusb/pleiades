// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raft/v1/service.proto

package raftv1connect

import (
	v1 "a13s.io/api/raft/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShardServiceName is the fully-qualified name of the ShardService service.
	ShardServiceName = "raft.v1.ShardService"
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "raft.v1.HostService"
)

// ShardServiceClient is a client for the raft.v1.ShardService service.
type ShardServiceClient interface {
	AddReplica(context.Context, *connect_go.Request[v1.AddReplicaRequest]) (*connect_go.Response[v1.AddReplicaResponse], error)
	AddReplicaObserver(context.Context, *connect_go.Request[v1.AddReplicaObserverRequest]) (*connect_go.Response[v1.AddReplicaObserverResponse], error)
	AddReplicaWitness(context.Context, *connect_go.Request[v1.AddReplicaWitnessRequest]) (*connect_go.Response[v1.AddReplicaWitnessResponse], error)
	GetLeaderId(context.Context, *connect_go.Request[v1.GetLeaderIdRequest]) (*connect_go.Response[v1.GetLeaderIdResponse], error)
	GetShardMembers(context.Context, *connect_go.Request[v1.GetShardMembersRequest]) (*connect_go.Response[v1.GetShardMembersResponse], error)
	NewShard(context.Context, *connect_go.Request[v1.NewShardRequest]) (*connect_go.Response[v1.NewShardResponse], error)
	RemoveData(context.Context, *connect_go.Request[v1.RemoveDataRequest]) (*connect_go.Response[v1.RemoveDataResponse], error)
	RemoveReplica(context.Context, *connect_go.Request[v1.RemoveReplicaRequest]) (*connect_go.Response[v1.RemoveReplicaResponse], error)
	StartReplica(context.Context, *connect_go.Request[v1.StartReplicaRequest]) (*connect_go.Response[v1.StartReplicaResponse], error)
	StartReplicaObserver(context.Context, *connect_go.Request[v1.StartReplicaObserverRequest]) (*connect_go.Response[v1.StartReplicaObserverResponse], error)
	StopReplica(context.Context, *connect_go.Request[v1.StopReplicaRequest]) (*connect_go.Response[v1.StopReplicaResponse], error)
}

// NewShardServiceClient constructs a client for the raft.v1.ShardService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShardServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shardServiceClient{
		addReplica: connect_go.NewClient[v1.AddReplicaRequest, v1.AddReplicaResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/AddReplica",
			opts...,
		),
		addReplicaObserver: connect_go.NewClient[v1.AddReplicaObserverRequest, v1.AddReplicaObserverResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/AddReplicaObserver",
			opts...,
		),
		addReplicaWitness: connect_go.NewClient[v1.AddReplicaWitnessRequest, v1.AddReplicaWitnessResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/AddReplicaWitness",
			opts...,
		),
		getLeaderId: connect_go.NewClient[v1.GetLeaderIdRequest, v1.GetLeaderIdResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/GetLeaderId",
			opts...,
		),
		getShardMembers: connect_go.NewClient[v1.GetShardMembersRequest, v1.GetShardMembersResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/GetShardMembers",
			opts...,
		),
		newShard: connect_go.NewClient[v1.NewShardRequest, v1.NewShardResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/NewShard",
			opts...,
		),
		removeData: connect_go.NewClient[v1.RemoveDataRequest, v1.RemoveDataResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/RemoveData",
			opts...,
		),
		removeReplica: connect_go.NewClient[v1.RemoveReplicaRequest, v1.RemoveReplicaResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/RemoveReplica",
			opts...,
		),
		startReplica: connect_go.NewClient[v1.StartReplicaRequest, v1.StartReplicaResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/StartReplica",
			opts...,
		),
		startReplicaObserver: connect_go.NewClient[v1.StartReplicaObserverRequest, v1.StartReplicaObserverResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/StartReplicaObserver",
			opts...,
		),
		stopReplica: connect_go.NewClient[v1.StopReplicaRequest, v1.StopReplicaResponse](
			httpClient,
			baseURL+"/raft.v1.ShardService/StopReplica",
			opts...,
		),
	}
}

// shardServiceClient implements ShardServiceClient.
type shardServiceClient struct {
	addReplica           *connect_go.Client[v1.AddReplicaRequest, v1.AddReplicaResponse]
	addReplicaObserver   *connect_go.Client[v1.AddReplicaObserverRequest, v1.AddReplicaObserverResponse]
	addReplicaWitness    *connect_go.Client[v1.AddReplicaWitnessRequest, v1.AddReplicaWitnessResponse]
	getLeaderId          *connect_go.Client[v1.GetLeaderIdRequest, v1.GetLeaderIdResponse]
	getShardMembers      *connect_go.Client[v1.GetShardMembersRequest, v1.GetShardMembersResponse]
	newShard             *connect_go.Client[v1.NewShardRequest, v1.NewShardResponse]
	removeData           *connect_go.Client[v1.RemoveDataRequest, v1.RemoveDataResponse]
	removeReplica        *connect_go.Client[v1.RemoveReplicaRequest, v1.RemoveReplicaResponse]
	startReplica         *connect_go.Client[v1.StartReplicaRequest, v1.StartReplicaResponse]
	startReplicaObserver *connect_go.Client[v1.StartReplicaObserverRequest, v1.StartReplicaObserverResponse]
	stopReplica          *connect_go.Client[v1.StopReplicaRequest, v1.StopReplicaResponse]
}

// AddReplica calls raft.v1.ShardService.AddReplica.
func (c *shardServiceClient) AddReplica(ctx context.Context, req *connect_go.Request[v1.AddReplicaRequest]) (*connect_go.Response[v1.AddReplicaResponse], error) {
	return c.addReplica.CallUnary(ctx, req)
}

// AddReplicaObserver calls raft.v1.ShardService.AddReplicaObserver.
func (c *shardServiceClient) AddReplicaObserver(ctx context.Context, req *connect_go.Request[v1.AddReplicaObserverRequest]) (*connect_go.Response[v1.AddReplicaObserverResponse], error) {
	return c.addReplicaObserver.CallUnary(ctx, req)
}

// AddReplicaWitness calls raft.v1.ShardService.AddReplicaWitness.
func (c *shardServiceClient) AddReplicaWitness(ctx context.Context, req *connect_go.Request[v1.AddReplicaWitnessRequest]) (*connect_go.Response[v1.AddReplicaWitnessResponse], error) {
	return c.addReplicaWitness.CallUnary(ctx, req)
}

// GetLeaderId calls raft.v1.ShardService.GetLeaderId.
func (c *shardServiceClient) GetLeaderId(ctx context.Context, req *connect_go.Request[v1.GetLeaderIdRequest]) (*connect_go.Response[v1.GetLeaderIdResponse], error) {
	return c.getLeaderId.CallUnary(ctx, req)
}

// GetShardMembers calls raft.v1.ShardService.GetShardMembers.
func (c *shardServiceClient) GetShardMembers(ctx context.Context, req *connect_go.Request[v1.GetShardMembersRequest]) (*connect_go.Response[v1.GetShardMembersResponse], error) {
	return c.getShardMembers.CallUnary(ctx, req)
}

// NewShard calls raft.v1.ShardService.NewShard.
func (c *shardServiceClient) NewShard(ctx context.Context, req *connect_go.Request[v1.NewShardRequest]) (*connect_go.Response[v1.NewShardResponse], error) {
	return c.newShard.CallUnary(ctx, req)
}

// RemoveData calls raft.v1.ShardService.RemoveData.
func (c *shardServiceClient) RemoveData(ctx context.Context, req *connect_go.Request[v1.RemoveDataRequest]) (*connect_go.Response[v1.RemoveDataResponse], error) {
	return c.removeData.CallUnary(ctx, req)
}

// RemoveReplica calls raft.v1.ShardService.RemoveReplica.
func (c *shardServiceClient) RemoveReplica(ctx context.Context, req *connect_go.Request[v1.RemoveReplicaRequest]) (*connect_go.Response[v1.RemoveReplicaResponse], error) {
	return c.removeReplica.CallUnary(ctx, req)
}

// StartReplica calls raft.v1.ShardService.StartReplica.
func (c *shardServiceClient) StartReplica(ctx context.Context, req *connect_go.Request[v1.StartReplicaRequest]) (*connect_go.Response[v1.StartReplicaResponse], error) {
	return c.startReplica.CallUnary(ctx, req)
}

// StartReplicaObserver calls raft.v1.ShardService.StartReplicaObserver.
func (c *shardServiceClient) StartReplicaObserver(ctx context.Context, req *connect_go.Request[v1.StartReplicaObserverRequest]) (*connect_go.Response[v1.StartReplicaObserverResponse], error) {
	return c.startReplicaObserver.CallUnary(ctx, req)
}

// StopReplica calls raft.v1.ShardService.StopReplica.
func (c *shardServiceClient) StopReplica(ctx context.Context, req *connect_go.Request[v1.StopReplicaRequest]) (*connect_go.Response[v1.StopReplicaResponse], error) {
	return c.stopReplica.CallUnary(ctx, req)
}

// ShardServiceHandler is an implementation of the raft.v1.ShardService service.
type ShardServiceHandler interface {
	AddReplica(context.Context, *connect_go.Request[v1.AddReplicaRequest]) (*connect_go.Response[v1.AddReplicaResponse], error)
	AddReplicaObserver(context.Context, *connect_go.Request[v1.AddReplicaObserverRequest]) (*connect_go.Response[v1.AddReplicaObserverResponse], error)
	AddReplicaWitness(context.Context, *connect_go.Request[v1.AddReplicaWitnessRequest]) (*connect_go.Response[v1.AddReplicaWitnessResponse], error)
	GetLeaderId(context.Context, *connect_go.Request[v1.GetLeaderIdRequest]) (*connect_go.Response[v1.GetLeaderIdResponse], error)
	GetShardMembers(context.Context, *connect_go.Request[v1.GetShardMembersRequest]) (*connect_go.Response[v1.GetShardMembersResponse], error)
	NewShard(context.Context, *connect_go.Request[v1.NewShardRequest]) (*connect_go.Response[v1.NewShardResponse], error)
	RemoveData(context.Context, *connect_go.Request[v1.RemoveDataRequest]) (*connect_go.Response[v1.RemoveDataResponse], error)
	RemoveReplica(context.Context, *connect_go.Request[v1.RemoveReplicaRequest]) (*connect_go.Response[v1.RemoveReplicaResponse], error)
	StartReplica(context.Context, *connect_go.Request[v1.StartReplicaRequest]) (*connect_go.Response[v1.StartReplicaResponse], error)
	StartReplicaObserver(context.Context, *connect_go.Request[v1.StartReplicaObserverRequest]) (*connect_go.Response[v1.StartReplicaObserverResponse], error)
	StopReplica(context.Context, *connect_go.Request[v1.StopReplicaRequest]) (*connect_go.Response[v1.StopReplicaResponse], error)
}

// NewShardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShardServiceHandler(svc ShardServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/raft.v1.ShardService/AddReplica", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/AddReplica",
		svc.AddReplica,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/AddReplicaObserver", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/AddReplicaObserver",
		svc.AddReplicaObserver,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/AddReplicaWitness", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/AddReplicaWitness",
		svc.AddReplicaWitness,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/GetLeaderId", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/GetLeaderId",
		svc.GetLeaderId,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/GetShardMembers", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/GetShardMembers",
		svc.GetShardMembers,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/NewShard", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/NewShard",
		svc.NewShard,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/RemoveData", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/RemoveData",
		svc.RemoveData,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/RemoveReplica", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/RemoveReplica",
		svc.RemoveReplica,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/StartReplica", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/StartReplica",
		svc.StartReplica,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/StartReplicaObserver", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/StartReplicaObserver",
		svc.StartReplicaObserver,
		opts...,
	))
	mux.Handle("/raft.v1.ShardService/StopReplica", connect_go.NewUnaryHandler(
		"/raft.v1.ShardService/StopReplica",
		svc.StopReplica,
		opts...,
	))
	return "/raft.v1.ShardService/", mux
}

// UnimplementedShardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShardServiceHandler struct{}

func (UnimplementedShardServiceHandler) AddReplica(context.Context, *connect_go.Request[v1.AddReplicaRequest]) (*connect_go.Response[v1.AddReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.AddReplica is not implemented"))
}

func (UnimplementedShardServiceHandler) AddReplicaObserver(context.Context, *connect_go.Request[v1.AddReplicaObserverRequest]) (*connect_go.Response[v1.AddReplicaObserverResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.AddReplicaObserver is not implemented"))
}

func (UnimplementedShardServiceHandler) AddReplicaWitness(context.Context, *connect_go.Request[v1.AddReplicaWitnessRequest]) (*connect_go.Response[v1.AddReplicaWitnessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.AddReplicaWitness is not implemented"))
}

func (UnimplementedShardServiceHandler) GetLeaderId(context.Context, *connect_go.Request[v1.GetLeaderIdRequest]) (*connect_go.Response[v1.GetLeaderIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.GetLeaderId is not implemented"))
}

func (UnimplementedShardServiceHandler) GetShardMembers(context.Context, *connect_go.Request[v1.GetShardMembersRequest]) (*connect_go.Response[v1.GetShardMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.GetShardMembers is not implemented"))
}

func (UnimplementedShardServiceHandler) NewShard(context.Context, *connect_go.Request[v1.NewShardRequest]) (*connect_go.Response[v1.NewShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.NewShard is not implemented"))
}

func (UnimplementedShardServiceHandler) RemoveData(context.Context, *connect_go.Request[v1.RemoveDataRequest]) (*connect_go.Response[v1.RemoveDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.RemoveData is not implemented"))
}

func (UnimplementedShardServiceHandler) RemoveReplica(context.Context, *connect_go.Request[v1.RemoveReplicaRequest]) (*connect_go.Response[v1.RemoveReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.RemoveReplica is not implemented"))
}

func (UnimplementedShardServiceHandler) StartReplica(context.Context, *connect_go.Request[v1.StartReplicaRequest]) (*connect_go.Response[v1.StartReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.StartReplica is not implemented"))
}

func (UnimplementedShardServiceHandler) StartReplicaObserver(context.Context, *connect_go.Request[v1.StartReplicaObserverRequest]) (*connect_go.Response[v1.StartReplicaObserverResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.StartReplicaObserver is not implemented"))
}

func (UnimplementedShardServiceHandler) StopReplica(context.Context, *connect_go.Request[v1.StopReplicaRequest]) (*connect_go.Response[v1.StopReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.ShardService.StopReplica is not implemented"))
}

// HostServiceClient is a client for the raft.v1.HostService service.
type HostServiceClient interface {
	Compact(context.Context, *connect_go.Request[v1.CompactRequest]) (*connect_go.Response[v1.CompactResponse], error)
	GetHostConfig(context.Context, *connect_go.Request[v1.GetHostConfigRequest]) (*connect_go.Response[v1.GetHostConfigResponse], error)
	// rpc LeaderTransfer(LeaderTransferRequest) returns (LeaderTransferResponse);
	Snapshot(context.Context, *connect_go.Request[v1.SnapshotRequest]) (*connect_go.Response[v1.SnapshotResponse], error)
	Stop(context.Context, *connect_go.Request[v1.StopRequest]) (*connect_go.Response[v1.StopResponse], error)
}

// NewHostServiceClient constructs a client for the raft.v1.HostService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &hostServiceClient{
		compact: connect_go.NewClient[v1.CompactRequest, v1.CompactResponse](
			httpClient,
			baseURL+"/raft.v1.HostService/Compact",
			opts...,
		),
		getHostConfig: connect_go.NewClient[v1.GetHostConfigRequest, v1.GetHostConfigResponse](
			httpClient,
			baseURL+"/raft.v1.HostService/GetHostConfig",
			opts...,
		),
		snapshot: connect_go.NewClient[v1.SnapshotRequest, v1.SnapshotResponse](
			httpClient,
			baseURL+"/raft.v1.HostService/Snapshot",
			opts...,
		),
		stop: connect_go.NewClient[v1.StopRequest, v1.StopResponse](
			httpClient,
			baseURL+"/raft.v1.HostService/Stop",
			opts...,
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	compact       *connect_go.Client[v1.CompactRequest, v1.CompactResponse]
	getHostConfig *connect_go.Client[v1.GetHostConfigRequest, v1.GetHostConfigResponse]
	snapshot      *connect_go.Client[v1.SnapshotRequest, v1.SnapshotResponse]
	stop          *connect_go.Client[v1.StopRequest, v1.StopResponse]
}

// Compact calls raft.v1.HostService.Compact.
func (c *hostServiceClient) Compact(ctx context.Context, req *connect_go.Request[v1.CompactRequest]) (*connect_go.Response[v1.CompactResponse], error) {
	return c.compact.CallUnary(ctx, req)
}

// GetHostConfig calls raft.v1.HostService.GetHostConfig.
func (c *hostServiceClient) GetHostConfig(ctx context.Context, req *connect_go.Request[v1.GetHostConfigRequest]) (*connect_go.Response[v1.GetHostConfigResponse], error) {
	return c.getHostConfig.CallUnary(ctx, req)
}

// Snapshot calls raft.v1.HostService.Snapshot.
func (c *hostServiceClient) Snapshot(ctx context.Context, req *connect_go.Request[v1.SnapshotRequest]) (*connect_go.Response[v1.SnapshotResponse], error) {
	return c.snapshot.CallUnary(ctx, req)
}

// Stop calls raft.v1.HostService.Stop.
func (c *hostServiceClient) Stop(ctx context.Context, req *connect_go.Request[v1.StopRequest]) (*connect_go.Response[v1.StopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the raft.v1.HostService service.
type HostServiceHandler interface {
	Compact(context.Context, *connect_go.Request[v1.CompactRequest]) (*connect_go.Response[v1.CompactResponse], error)
	GetHostConfig(context.Context, *connect_go.Request[v1.GetHostConfigRequest]) (*connect_go.Response[v1.GetHostConfigResponse], error)
	// rpc LeaderTransfer(LeaderTransferRequest) returns (LeaderTransferResponse);
	Snapshot(context.Context, *connect_go.Request[v1.SnapshotRequest]) (*connect_go.Response[v1.SnapshotResponse], error)
	Stop(context.Context, *connect_go.Request[v1.StopRequest]) (*connect_go.Response[v1.StopResponse], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/raft.v1.HostService/Compact", connect_go.NewUnaryHandler(
		"/raft.v1.HostService/Compact",
		svc.Compact,
		opts...,
	))
	mux.Handle("/raft.v1.HostService/GetHostConfig", connect_go.NewUnaryHandler(
		"/raft.v1.HostService/GetHostConfig",
		svc.GetHostConfig,
		opts...,
	))
	mux.Handle("/raft.v1.HostService/Snapshot", connect_go.NewUnaryHandler(
		"/raft.v1.HostService/Snapshot",
		svc.Snapshot,
		opts...,
	))
	mux.Handle("/raft.v1.HostService/Stop", connect_go.NewUnaryHandler(
		"/raft.v1.HostService/Stop",
		svc.Stop,
		opts...,
	))
	return "/raft.v1.HostService/", mux
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) Compact(context.Context, *connect_go.Request[v1.CompactRequest]) (*connect_go.Response[v1.CompactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.HostService.Compact is not implemented"))
}

func (UnimplementedHostServiceHandler) GetHostConfig(context.Context, *connect_go.Request[v1.GetHostConfigRequest]) (*connect_go.Response[v1.GetHostConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.HostService.GetHostConfig is not implemented"))
}

func (UnimplementedHostServiceHandler) Snapshot(context.Context, *connect_go.Request[v1.SnapshotRequest]) (*connect_go.Response[v1.SnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.HostService.Snapshot is not implemented"))
}

func (UnimplementedHostServiceHandler) Stop(context.Context, *connect_go.Request[v1.StopRequest]) (*connect_go.Response[v1.StopResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.HostService.Stop is not implemented"))
}
