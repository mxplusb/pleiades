// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvstore/v1/kv.proto

package io.a13s.api.kvstore.v1;

public interface EventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kvstore.v1.Event)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * type is the kind of event. If type is a PUT, it indicates
   * new data has been stored to the key. If type is a DELETE,
   * it indicates the key was deleted.
   * </pre>
   *
   * <code>.kvstore.v1.KeyOperationType type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * type is the kind of event. If type is a PUT, it indicates
   * new data has been stored to the key. If type is a DELETE,
   * it indicates the key was deleted.
   * </pre>
   *
   * <code>.kvstore.v1.KeyOperationType type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  io.a13s.api.kvstore.v1.KeyOperationType getType();

  /**
   * <pre>
   * kv holds the KeyValue for the event.
   * A PUT event contains current kv pair.
   * A PUT event with kv.Version=1 indicates the creation of a key.
   * A DELETE/EXPIRE event contains the deleted key with
   * its modification revision set to the revision of deletion.
   * </pre>
   *
   * <code>.kvstore.v1.KeyValue kv = 2 [json_name = "kv"];</code>
   * @return Whether the kv field is set.
   */
  boolean hasKv();
  /**
   * <pre>
   * kv holds the KeyValue for the event.
   * A PUT event contains current kv pair.
   * A PUT event with kv.Version=1 indicates the creation of a key.
   * A DELETE/EXPIRE event contains the deleted key with
   * its modification revision set to the revision of deletion.
   * </pre>
   *
   * <code>.kvstore.v1.KeyValue kv = 2 [json_name = "kv"];</code>
   * @return The kv.
   */
  io.a13s.api.kvstore.v1.KeyValue getKv();
  /**
   * <pre>
   * kv holds the KeyValue for the event.
   * A PUT event contains current kv pair.
   * A PUT event with kv.Version=1 indicates the creation of a key.
   * A DELETE/EXPIRE event contains the deleted key with
   * its modification revision set to the revision of deletion.
   * </pre>
   *
   * <code>.kvstore.v1.KeyValue kv = 2 [json_name = "kv"];</code>
   */
  io.a13s.api.kvstore.v1.KeyValueOrBuilder getKvOrBuilder();

  /**
   * <pre>
   * prev_kv holds the key-value pair before the event happens.
   * </pre>
   *
   * <code>optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];</code>
   * @return Whether the prevKv field is set.
   */
  boolean hasPrevKv();
  /**
   * <pre>
   * prev_kv holds the key-value pair before the event happens.
   * </pre>
   *
   * <code>optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];</code>
   * @return The prevKv.
   */
  io.a13s.api.kvstore.v1.KeyValue getPrevKv();
  /**
   * <pre>
   * prev_kv holds the key-value pair before the event happens.
   * </pre>
   *
   * <code>optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];</code>
   */
  io.a13s.api.kvstore.v1.KeyValueOrBuilder getPrevKvOrBuilder();
}
