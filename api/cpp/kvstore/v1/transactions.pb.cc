// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvstore/v1/transactions.proto

#include "kvstore/v1/transactions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kvstore {
namespace v1 {
PROTOBUF_CONSTEXPR CloseTransactionRequest::CloseTransactionRequest(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr)
  , timeout_(int64_t{0}){}
struct CloseTransactionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseTransactionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseTransactionRequestDefaultTypeInternal() {}
  union {
    CloseTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseTransactionRequestDefaultTypeInternal _CloseTransactionRequest_default_instance_;
PROTOBUF_CONSTEXPR CloseTransactionResponse::CloseTransactionResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr)
  , timeout_(int64_t{0}){}
struct CloseTransactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseTransactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseTransactionResponseDefaultTypeInternal() {}
  union {
    CloseTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseTransactionResponseDefaultTypeInternal _CloseTransactionResponse_default_instance_;
PROTOBUF_CONSTEXPR CommitRequest::CommitRequest(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr){}
struct CommitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitRequestDefaultTypeInternal() {}
  union {
    CommitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
PROTOBUF_CONSTEXPR CommitResponse::CommitResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr){}
struct CommitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitResponseDefaultTypeInternal() {}
  union {
    CommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
PROTOBUF_CONSTEXPR Transaction::Transaction(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , client_id_(uint64_t{0u})
  , transaction_id_(uint64_t{0u})
  , responded_to_(uint64_t{0u}){}
struct TransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionDefaultTypeInternal _Transaction_default_instance_;
PROTOBUF_CONSTEXPR NewTransactionRequest::NewTransactionRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , client_id_(uint64_t{0u}){}
struct NewTransactionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewTransactionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewTransactionRequestDefaultTypeInternal() {}
  union {
    NewTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewTransactionRequestDefaultTypeInternal _NewTransactionRequest_default_instance_;
PROTOBUF_CONSTEXPR NewTransactionResponse::NewTransactionResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr){}
struct NewTransactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewTransactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewTransactionResponseDefaultTypeInternal() {}
  union {
    NewTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewTransactionResponseDefaultTypeInternal _NewTransactionResponse_default_instance_;
}  // namespace v1
}  // namespace kvstore
static ::_pb::Metadata file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_kvstore_2fv1_2ftransactions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kvstore_2fv1_2ftransactions_2eproto = nullptr;

const uint32_t TableStruct_kvstore_2fv1_2ftransactions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionRequest, transaction_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CloseTransactionResponse, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CommitRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CommitResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Transaction, shard_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Transaction, client_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Transaction, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Transaction, responded_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::NewTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::NewTransactionRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::NewTransactionRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::NewTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::NewTransactionResponse, transaction_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kvstore::v1::CloseTransactionRequest)},
  { 8, -1, -1, sizeof(::kvstore::v1::CloseTransactionResponse)},
  { 16, -1, -1, sizeof(::kvstore::v1::CommitRequest)},
  { 23, -1, -1, sizeof(::kvstore::v1::CommitResponse)},
  { 30, -1, -1, sizeof(::kvstore::v1::Transaction)},
  { 40, -1, -1, sizeof(::kvstore::v1::NewTransactionRequest)},
  { 48, -1, -1, sizeof(::kvstore::v1::NewTransactionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kvstore::v1::_CloseTransactionRequest_default_instance_._instance,
  &::kvstore::v1::_CloseTransactionResponse_default_instance_._instance,
  &::kvstore::v1::_CommitRequest_default_instance_._instance,
  &::kvstore::v1::_CommitResponse_default_instance_._instance,
  &::kvstore::v1::_Transaction_default_instance_._instance,
  &::kvstore::v1::_NewTransactionRequest_default_instance_._instance,
  &::kvstore::v1::_NewTransactionResponse_default_instance_._instance,
};

const char descriptor_table_protodef_kvstore_2fv1_2ftransactions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035kvstore/v1/transactions.proto\022\nkvstore"
  ".v1\"n\n\027CloseTransactionRequest\0229\n\013transa"
  "ction\030\001 \001(\0132\027.kvstore.v1.TransactionR\013tr"
  "ansaction\022\030\n\007timeout\030\002 \001(\003R\007timeout\"o\n\030C"
  "loseTransactionResponse\0229\n\013transaction\030\001"
  " \001(\0132\027.kvstore.v1.TransactionR\013transacti"
  "on\022\030\n\007timeout\030\002 \001(\003R\007timeout\"J\n\rCommitRe"
  "quest\0229\n\013transaction\030\001 \001(\0132\027.kvstore.v1."
  "TransactionR\013transaction\"K\n\016CommitRespon"
  "se\0229\n\013transaction\030\001 \001(\0132\027.kvstore.v1.Tra"
  "nsactionR\013transaction\"\217\001\n\013Transaction\022\031\n"
  "\010shard_id\030\001 \001(\004R\007shardId\022\033\n\tclient_id\030\002 "
  "\001(\004R\010clientId\022%\n\016transaction_id\030\003 \001(\004R\rt"
  "ransactionId\022!\n\014responded_to\030\004 \001(\004R\013resp"
  "ondedTo\"O\n\025NewTransactionRequest\022\031\n\010shar"
  "d_id\030\001 \001(\004R\007shardId\022\033\n\tclient_id\030\002 \001(\004R\010"
  "clientId\"S\n\026NewTransactionResponse\0229\n\013tr"
  "ansaction\030\001 \001(\0132\027.kvstore.v1.Transaction"
  "R\013transactionB\226\001\n\026io.a13s.api.kvstore.v1"
  "B\021TransactionsProtoP\001Z a13s.io/api/kvsto"
  "re/v1;kvstorev1\242\002\003KXX\252\002\nKvstore.V1\312\002\nKvs"
  "tore\\V1\342\002\026Kvstore\\V1\\GPBMetadata\352\002\013Kvsto"
  "re::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kvstore_2fv1_2ftransactions_2eproto = {
    false, false, 894, descriptor_table_protodef_kvstore_2fv1_2ftransactions_2eproto,
    "kvstore/v1/transactions.proto",
    &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_kvstore_2fv1_2ftransactions_2eproto::offsets,
    file_level_metadata_kvstore_2fv1_2ftransactions_2eproto, file_level_enum_descriptors_kvstore_2fv1_2ftransactions_2eproto,
    file_level_service_descriptors_kvstore_2fv1_2ftransactions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter() {
  return &descriptor_table_kvstore_2fv1_2ftransactions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kvstore_2fv1_2ftransactions_2eproto(&descriptor_table_kvstore_2fv1_2ftransactions_2eproto);
namespace kvstore {
namespace v1 {

// ===================================================================

class CloseTransactionRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CloseTransactionRequest* msg);
};

const ::kvstore::v1::Transaction&
CloseTransactionRequest::_Internal::transaction(const CloseTransactionRequest* msg) {
  return *msg->transaction_;
}
CloseTransactionRequest::CloseTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CloseTransactionRequest)
}
CloseTransactionRequest::CloseTransactionRequest(const CloseTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CloseTransactionRequest)
}

inline void CloseTransactionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(timeout_));
}

CloseTransactionRequest::~CloseTransactionRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CloseTransactionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void CloseTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CloseTransactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  timeout_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseTransactionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 2 [json_name = "timeout"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseTransactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CloseTransactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CloseTransactionRequest)
  return target;
}

size_t CloseTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CloseTransactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseTransactionRequest::GetClassData() const { return &_class_data_; }

void CloseTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseTransactionRequest *>(to)->MergeFrom(
      static_cast<const CloseTransactionRequest &>(from));
}


void CloseTransactionRequest::MergeFrom(const CloseTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CloseTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseTransactionRequest::CopyFrom(const CloseTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CloseTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseTransactionRequest::IsInitialized() const {
  return true;
}

void CloseTransactionRequest::InternalSwap(CloseTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseTransactionRequest, timeout_)
      + sizeof(CloseTransactionRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(CloseTransactionRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseTransactionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[0]);
}

// ===================================================================

class CloseTransactionResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CloseTransactionResponse* msg);
};

const ::kvstore::v1::Transaction&
CloseTransactionResponse::_Internal::transaction(const CloseTransactionResponse* msg) {
  return *msg->transaction_;
}
CloseTransactionResponse::CloseTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CloseTransactionResponse)
}
CloseTransactionResponse::CloseTransactionResponse(const CloseTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CloseTransactionResponse)
}

inline void CloseTransactionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(timeout_));
}

CloseTransactionResponse::~CloseTransactionResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CloseTransactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void CloseTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CloseTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  timeout_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseTransactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 2 [json_name = "timeout"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CloseTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CloseTransactionResponse)
  return target;
}

size_t CloseTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CloseTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseTransactionResponse::GetClassData() const { return &_class_data_; }

void CloseTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseTransactionResponse *>(to)->MergeFrom(
      static_cast<const CloseTransactionResponse &>(from));
}


void CloseTransactionResponse::MergeFrom(const CloseTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CloseTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseTransactionResponse::CopyFrom(const CloseTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CloseTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseTransactionResponse::IsInitialized() const {
  return true;
}

void CloseTransactionResponse::InternalSwap(CloseTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseTransactionResponse, timeout_)
      + sizeof(CloseTransactionResponse::timeout_)
      - PROTOBUF_FIELD_OFFSET(CloseTransactionResponse, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseTransactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[1]);
}

// ===================================================================

class CommitRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CommitRequest* msg);
};

const ::kvstore::v1::Transaction&
CommitRequest::_Internal::transaction(const CommitRequest* msg) {
  return *msg->transaction_;
}
CommitRequest::CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CommitRequest)
}

inline void CommitRequest::SharedCtor() {
transaction_ = nullptr;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CommitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CommitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CommitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CommitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitRequest::GetClassData() const { return &_class_data_; }

void CommitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitRequest *>(to)->MergeFrom(
      static_cast<const CommitRequest &>(from));
}


void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[2]);
}

// ===================================================================

class CommitResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CommitResponse* msg);
};

const ::kvstore::v1::Transaction&
CommitResponse::_Internal::transaction(const CommitResponse* msg) {
  return *msg->transaction_;
}
CommitResponse::CommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CommitResponse)
}

inline void CommitResponse::SharedCtor() {
transaction_ = nullptr;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CommitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CommitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CommitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CommitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitResponse::GetClassData() const { return &_class_data_; }

void CommitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitResponse *>(to)->MergeFrom(
      static_cast<const CommitResponse &>(from));
}


void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[3]);
}

// ===================================================================

class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&responded_to_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(responded_to_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.Transaction)
}

inline void Transaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&responded_to_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(responded_to_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:kvstore.v1.Transaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responded_to_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(responded_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 transaction_id = 3 [json_name = "transactionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 responded_to = 4 [json_name = "respondedTo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          responded_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  // uint64 transaction_id = 3 [json_name = "transactionId"];
  if (this->_internal_transaction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_transaction_id(), target);
  }

  // uint64 responded_to = 4 [json_name = "respondedTo"];
  if (this->_internal_responded_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_responded_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  // uint64 transaction_id = 3 [json_name = "transactionId"];
  if (this->_internal_transaction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transaction_id());
  }

  // uint64 responded_to = 4 [json_name = "respondedTo"];
  if (this->_internal_responded_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_responded_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_transaction_id() != 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_responded_to() != 0) {
    _internal_set_responded_to(from._internal_responded_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, responded_to_)
      + sizeof(Transaction::responded_to_)
      - PROTOBUF_FIELD_OFFSET(Transaction, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[4]);
}

// ===================================================================

class NewTransactionRequest::_Internal {
 public:
};

NewTransactionRequest::NewTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.NewTransactionRequest)
}
NewTransactionRequest::NewTransactionRequest(const NewTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.NewTransactionRequest)
}

inline void NewTransactionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(client_id_));
}

NewTransactionRequest::~NewTransactionRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.NewTransactionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.NewTransactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(client_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewTransactionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewTransactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.NewTransactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.NewTransactionRequest)
  return target;
}

size_t NewTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.NewTransactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewTransactionRequest::GetClassData() const { return &_class_data_; }

void NewTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewTransactionRequest *>(to)->MergeFrom(
      static_cast<const NewTransactionRequest &>(from));
}


void NewTransactionRequest::MergeFrom(const NewTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.NewTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewTransactionRequest::CopyFrom(const NewTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.NewTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTransactionRequest::IsInitialized() const {
  return true;
}

void NewTransactionRequest::InternalSwap(NewTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewTransactionRequest, client_id_)
      + sizeof(NewTransactionRequest::client_id_)
      - PROTOBUF_FIELD_OFFSET(NewTransactionRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTransactionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[5]);
}

// ===================================================================

class NewTransactionResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const NewTransactionResponse* msg);
};

const ::kvstore::v1::Transaction&
NewTransactionResponse::_Internal::transaction(const NewTransactionResponse* msg) {
  return *msg->transaction_;
}
NewTransactionResponse::NewTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.NewTransactionResponse)
}
NewTransactionResponse::NewTransactionResponse(const NewTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.NewTransactionResponse)
}

inline void NewTransactionResponse::SharedCtor() {
transaction_ = nullptr;
}

NewTransactionResponse::~NewTransactionResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.NewTransactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void NewTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.NewTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewTransactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.NewTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.NewTransactionResponse)
  return target;
}

size_t NewTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.NewTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewTransactionResponse::GetClassData() const { return &_class_data_; }

void NewTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewTransactionResponse *>(to)->MergeFrom(
      static_cast<const NewTransactionResponse &>(from));
}


void NewTransactionResponse::MergeFrom(const NewTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.NewTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewTransactionResponse::CopyFrom(const NewTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.NewTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTransactionResponse::IsInitialized() const {
  return true;
}

void NewTransactionResponse::InternalSwap(NewTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTransactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_getter, &descriptor_table_kvstore_2fv1_2ftransactions_2eproto_once,
      file_level_metadata_kvstore_2fv1_2ftransactions_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace kvstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kvstore::v1::CloseTransactionRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::CloseTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CloseTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CloseTransactionResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::CloseTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CloseTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CommitRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::CommitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CommitResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::CommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::Transaction*
Arena::CreateMaybeMessage< ::kvstore::v1::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::NewTransactionRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::NewTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::NewTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::NewTransactionResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::NewTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::NewTransactionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
