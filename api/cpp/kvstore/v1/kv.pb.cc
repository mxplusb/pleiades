// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvstore/v1/kv.proto

#include "kvstore/v1/kv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kvstore {
namespace v1 {
PROTOBUF_CONSTEXPR KVStoreWrapper::KVStoreWrapper(
    ::_pbi::ConstantInitialized)
  : bucket_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_(uint64_t{0u})
  , typ_(0)

  , _oneof_case_{}{}
struct KVStoreWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVStoreWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVStoreWrapperDefaultTypeInternal() {}
  union {
    KVStoreWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVStoreWrapperDefaultTypeInternal _KVStoreWrapper_default_instance_;
PROTOBUF_CONSTEXPR CreateAccountRequest::CreateAccountRequest(
    ::_pbi::ConstantInitialized)
  : owner_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct CreateAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAccountRequestDefaultTypeInternal() {}
  union {
    CreateAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAccountRequestDefaultTypeInternal _CreateAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateAccountResponse::CreateAccountResponse(
    ::_pbi::ConstantInitialized)
  : account_descriptor_(nullptr)
  , transaction_(nullptr){}
struct CreateAccountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAccountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAccountResponseDefaultTypeInternal() {}
  union {
    CreateAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAccountResponseDefaultTypeInternal _CreateAccountResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteAccountRequest::DeleteAccountRequest(
    ::_pbi::ConstantInitialized)
  : owner_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct DeleteAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAccountRequestDefaultTypeInternal() {}
  union {
    DeleteAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAccountRequestDefaultTypeInternal _DeleteAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteAccountResponse::DeleteAccountResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr)
  , ok_(false){}
struct DeleteAccountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAccountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAccountResponseDefaultTypeInternal() {}
  union {
    DeleteAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAccountResponseDefaultTypeInternal _DeleteAccountResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAccountDescriptorRequest::GetAccountDescriptorRequest(
    ::_pbi::ConstantInitialized)
  : account_id_(uint64_t{0u}){}
struct GetAccountDescriptorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDescriptorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDescriptorRequestDefaultTypeInternal() {}
  union {
    GetAccountDescriptorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDescriptorRequestDefaultTypeInternal _GetAccountDescriptorRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAccountDescriptorResponse::GetAccountDescriptorResponse(
    ::_pbi::ConstantInitialized)
  : account_descriptor_(nullptr){}
struct GetAccountDescriptorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDescriptorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDescriptorResponseDefaultTypeInternal() {}
  union {
    GetAccountDescriptorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDescriptorResponseDefaultTypeInternal _GetAccountDescriptorResponse_default_instance_;
PROTOBUF_CONSTEXPR AccountDescriptor::AccountDescriptor(
    ::_pbi::ConstantInitialized)
  : buckets_()
  , owner_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , created_(nullptr)
  , last_updated_(nullptr)
  , account_id_(uint64_t{0u})
  , bucket_count_(uint64_t{0u}){}
struct AccountDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDescriptorDefaultTypeInternal() {}
  union {
    AccountDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDescriptorDefaultTypeInternal _AccountDescriptor_default_instance_;
PROTOBUF_CONSTEXPR CreateBucketRequest::CreateBucketRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , owner_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct CreateBucketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateBucketRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateBucketRequestDefaultTypeInternal() {}
  union {
    CreateBucketRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateBucketRequestDefaultTypeInternal _CreateBucketRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateBucketResponse::CreateBucketResponse(
    ::_pbi::ConstantInitialized)
  : bucket_descriptor_(nullptr)
  , transaction_(nullptr){}
struct CreateBucketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateBucketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateBucketResponseDefaultTypeInternal() {}
  union {
    CreateBucketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateBucketResponseDefaultTypeInternal _CreateBucketResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteBucketRequest::DeleteBucketRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct DeleteBucketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBucketRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBucketRequestDefaultTypeInternal() {}
  union {
    DeleteBucketRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBucketRequestDefaultTypeInternal _DeleteBucketRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteBucketResponse::DeleteBucketResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr)
  , ok_(false){}
struct DeleteBucketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBucketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBucketResponseDefaultTypeInternal() {}
  union {
    DeleteBucketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBucketResponseDefaultTypeInternal _DeleteBucketResponse_default_instance_;
PROTOBUF_CONSTEXPR BucketDescriptor::BucketDescriptor(
    ::_pbi::ConstantInitialized)
  : owner_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , created_(nullptr)
  , last_updated_(nullptr)
  , size_(uint64_t{0u})
  , key_count_(uint64_t{0u}){}
struct BucketDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BucketDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BucketDescriptorDefaultTypeInternal() {}
  union {
    BucketDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BucketDescriptorDefaultTypeInternal _BucketDescriptor_default_instance_;
PROTOBUF_CONSTEXPR GetBucketDescriptorRequest::GetBucketDescriptorRequest(
    ::_pbi::ConstantInitialized)
  : bucket_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_id_(uint64_t{0u}){}
struct GetBucketDescriptorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBucketDescriptorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBucketDescriptorRequestDefaultTypeInternal() {}
  union {
    GetBucketDescriptorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBucketDescriptorRequestDefaultTypeInternal _GetBucketDescriptorRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBucketDescriptorResponse::GetBucketDescriptorResponse(
    ::_pbi::ConstantInitialized)
  : bucket_descriptor_(nullptr){}
struct GetBucketDescriptorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBucketDescriptorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBucketDescriptorResponseDefaultTypeInternal() {}
  union {
    GetBucketDescriptorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBucketDescriptorResponseDefaultTypeInternal _GetBucketDescriptorResponse_default_instance_;
PROTOBUF_CONSTEXPR GetKeyRequest::GetKeyRequest(
    ::_pbi::ConstantInitialized)
  : bucket_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_id_(uint64_t{0u})
  , version_(0u){}
struct GetKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyRequestDefaultTypeInternal() {}
  union {
    GetKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR GetKeyResponse::GetKeyResponse(
    ::_pbi::ConstantInitialized)
  : key_value_pair_(nullptr){}
struct GetKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyResponseDefaultTypeInternal() {}
  union {
    GetKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyResponseDefaultTypeInternal _GetKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR PutKeyRequest::PutKeyRequest(
    ::_pbi::ConstantInitialized)
  : bucket_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_value_pair_(nullptr)
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct PutKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutKeyRequestDefaultTypeInternal() {}
  union {
    PutKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutKeyRequestDefaultTypeInternal _PutKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR PutKeyResponse::PutKeyResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr){}
struct PutKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutKeyResponseDefaultTypeInternal() {}
  union {
    PutKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutKeyResponseDefaultTypeInternal _PutKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteKeyRequest::DeleteKeyRequest(
    ::_pbi::ConstantInitialized)
  : bucket_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_(nullptr)
  , account_id_(uint64_t{0u}){}
struct DeleteKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteKeyRequestDefaultTypeInternal() {}
  union {
    DeleteKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteKeyResponse::DeleteKeyResponse(
    ::_pbi::ConstantInitialized)
  : transaction_(nullptr)
  , ok_(false){}
struct DeleteKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteKeyResponseDefaultTypeInternal() {}
  union {
    DeleteKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteKeyResponseDefaultTypeInternal _DeleteKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyValueDescriptor::KeyValueDescriptor(
    ::_pbi::ConstantInitialized)
  : versions_()
  , _versions_cached_byte_size_(0)
  , current_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct KeyValueDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueDescriptorDefaultTypeInternal() {}
  union {
    KeyValueDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueDescriptorDefaultTypeInternal _KeyValueDescriptor_default_instance_;
PROTOBUF_CONSTEXPR ListKeyVersionsRequest::ListKeyVersionsRequest(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListKeyVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListKeyVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListKeyVersionsRequestDefaultTypeInternal() {}
  union {
    ListKeyVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListKeyVersionsRequestDefaultTypeInternal _ListKeyVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListKeyVersionsResponse::ListKeyVersionsResponse(
    ::_pbi::ConstantInitialized)
  : versions_()
  , _versions_cached_byte_size_(0){}
struct ListKeyVersionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListKeyVersionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListKeyVersionsResponseDefaultTypeInternal() {}
  union {
    ListKeyVersionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListKeyVersionsResponseDefaultTypeInternal _ListKeyVersionsResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyValue::KeyValue(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , create_revision_(int64_t{0})
  , mod_revision_(int64_t{0})
  , version_(uint64_t{0u})
  , lease_(int64_t{0}){}
struct KeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueDefaultTypeInternal() {}
  union {
    KeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueDefaultTypeInternal _KeyValue_default_instance_;
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized)
  : kv_(nullptr)
  , prev_kv_(nullptr)
  , type_(0)
{}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
}  // namespace v1
}  // namespace kvstore
static ::_pb::Metadata file_level_metadata_kvstore_2fv1_2fkv_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kvstore_2fv1_2fkv_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kvstore_2fv1_2fkv_2eproto = nullptr;

const uint32_t TableStruct_kvstore_2fv1_2fkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, account_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, bucket_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, typ_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KVStoreWrapper, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountResponse, account_descriptor_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateAccountResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteAccountResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetAccountDescriptorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetAccountDescriptorRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetAccountDescriptorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetAccountDescriptorResponse, account_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, owner_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, created_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, last_updated_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, bucket_count_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::AccountDescriptor, buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketRequest, name_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketResponse, bucket_descriptor_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::CreateBucketResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketRequest, name_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteBucketResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, owner_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, size_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, key_count_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, created_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::BucketDescriptor, last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetBucketDescriptorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetBucketDescriptorRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetBucketDescriptorRequest, bucket_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetBucketDescriptorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetBucketDescriptorResponse, bucket_descriptor_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, bucket_name_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyRequest, version_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::GetKeyResponse, key_value_pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyRequest, bucket_name_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyRequest, key_value_pair_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::PutKeyResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyRequest, bucket_name_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::DeleteKeyResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValueDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValueDescriptor, versions_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValueDescriptor, current_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::ListKeyVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::ListKeyVersionsRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::ListKeyVersionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::ListKeyVersionsResponse, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, create_revision_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, mod_revision_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, version_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, value_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::KeyValue, lease_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Event, type_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Event, kv_),
  PROTOBUF_FIELD_OFFSET(::kvstore::v1::Event, prev_kv_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kvstore::v1::KVStoreWrapper)},
  { 29, -1, -1, sizeof(::kvstore::v1::CreateAccountRequest)},
  { 38, -1, -1, sizeof(::kvstore::v1::CreateAccountResponse)},
  { 46, -1, -1, sizeof(::kvstore::v1::DeleteAccountRequest)},
  { 55, -1, -1, sizeof(::kvstore::v1::DeleteAccountResponse)},
  { 63, -1, -1, sizeof(::kvstore::v1::GetAccountDescriptorRequest)},
  { 70, -1, -1, sizeof(::kvstore::v1::GetAccountDescriptorResponse)},
  { 77, -1, -1, sizeof(::kvstore::v1::AccountDescriptor)},
  { 89, -1, -1, sizeof(::kvstore::v1::CreateBucketRequest)},
  { 99, -1, -1, sizeof(::kvstore::v1::CreateBucketResponse)},
  { 107, -1, -1, sizeof(::kvstore::v1::DeleteBucketRequest)},
  { 116, -1, -1, sizeof(::kvstore::v1::DeleteBucketResponse)},
  { 124, -1, -1, sizeof(::kvstore::v1::BucketDescriptor)},
  { 135, -1, -1, sizeof(::kvstore::v1::GetBucketDescriptorRequest)},
  { 143, -1, -1, sizeof(::kvstore::v1::GetBucketDescriptorResponse)},
  { 150, 160, -1, sizeof(::kvstore::v1::GetKeyRequest)},
  { 164, -1, -1, sizeof(::kvstore::v1::GetKeyResponse)},
  { 171, -1, -1, sizeof(::kvstore::v1::PutKeyRequest)},
  { 181, -1, -1, sizeof(::kvstore::v1::PutKeyResponse)},
  { 188, -1, -1, sizeof(::kvstore::v1::DeleteKeyRequest)},
  { 198, -1, -1, sizeof(::kvstore::v1::DeleteKeyResponse)},
  { 206, -1, -1, sizeof(::kvstore::v1::KeyValueDescriptor)},
  { 214, -1, -1, sizeof(::kvstore::v1::ListKeyVersionsRequest)},
  { 221, -1, -1, sizeof(::kvstore::v1::ListKeyVersionsResponse)},
  { 228, -1, -1, sizeof(::kvstore::v1::KeyValue)},
  { 240, 249, -1, sizeof(::kvstore::v1::Event)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kvstore::v1::_KVStoreWrapper_default_instance_._instance,
  &::kvstore::v1::_CreateAccountRequest_default_instance_._instance,
  &::kvstore::v1::_CreateAccountResponse_default_instance_._instance,
  &::kvstore::v1::_DeleteAccountRequest_default_instance_._instance,
  &::kvstore::v1::_DeleteAccountResponse_default_instance_._instance,
  &::kvstore::v1::_GetAccountDescriptorRequest_default_instance_._instance,
  &::kvstore::v1::_GetAccountDescriptorResponse_default_instance_._instance,
  &::kvstore::v1::_AccountDescriptor_default_instance_._instance,
  &::kvstore::v1::_CreateBucketRequest_default_instance_._instance,
  &::kvstore::v1::_CreateBucketResponse_default_instance_._instance,
  &::kvstore::v1::_DeleteBucketRequest_default_instance_._instance,
  &::kvstore::v1::_DeleteBucketResponse_default_instance_._instance,
  &::kvstore::v1::_BucketDescriptor_default_instance_._instance,
  &::kvstore::v1::_GetBucketDescriptorRequest_default_instance_._instance,
  &::kvstore::v1::_GetBucketDescriptorResponse_default_instance_._instance,
  &::kvstore::v1::_GetKeyRequest_default_instance_._instance,
  &::kvstore::v1::_GetKeyResponse_default_instance_._instance,
  &::kvstore::v1::_PutKeyRequest_default_instance_._instance,
  &::kvstore::v1::_PutKeyResponse_default_instance_._instance,
  &::kvstore::v1::_DeleteKeyRequest_default_instance_._instance,
  &::kvstore::v1::_DeleteKeyResponse_default_instance_._instance,
  &::kvstore::v1::_KeyValueDescriptor_default_instance_._instance,
  &::kvstore::v1::_ListKeyVersionsRequest_default_instance_._instance,
  &::kvstore::v1::_ListKeyVersionsResponse_default_instance_._instance,
  &::kvstore::v1::_KeyValue_default_instance_._instance,
  &::kvstore::v1::_Event_default_instance_._instance,
};

const char descriptor_table_protodef_kvstore_2fv1_2fkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023kvstore/v1/kv.proto\022\nkvstore.v1\032\026error"
  "s/v1/errors.proto\032\037google/protobuf/times"
  "tamp.proto\032\035kvstore/v1/transactions.prot"
  "o\"\334\023\n\016KVStoreWrapper\022\030\n\007account\030\001 \001(\004R\007a"
  "ccount\022\026\n\006bucket\030\002 \001(\tR\006bucket\0228\n\003typ\030\003 "
  "\001(\0162&.kvstore.v1.KVStoreWrapper.RequestT"
  "ypeR\003typ\022X\n\026create_account_request\030\004 \001(\013"
  "2 .kvstore.v1.CreateAccountRequestH\000R\024cr"
  "eateAccountRequest\022U\n\024create_account_rep"
  "ly\030\005 \001(\0132!.kvstore.v1.CreateAccountRespo"
  "nseH\000R\022createAccountReply\022X\n\026delete_acco"
  "unt_request\030\006 \001(\0132 .kvstore.v1.DeleteAcc"
  "ountRequestH\000R\024deleteAccountRequest\022U\n\024d"
  "elete_account_reply\030\007 \001(\0132!.kvstore.v1.D"
  "eleteAccountResponseH\000R\022deleteAccountRep"
  "ly\022n\n\036get_account_descriptor_request\030\010 \001"
  "(\0132\'.kvstore.v1.GetAccountDescriptorRequ"
  "estH\000R\033getAccountDescriptorRequest\022k\n\034ge"
  "t_account_descriptor_reply\030\t \001(\0132(.kvsto"
  "re.v1.GetAccountDescriptorResponseH\000R\031ge"
  "tAccountDescriptorReply\022U\n\025create_bucket"
  "_request\030\n \001(\0132\037.kvstore.v1.CreateBucket"
  "RequestH\000R\023createBucketRequest\022R\n\023create"
  "_bucket_reply\030\013 \001(\0132 .kvstore.v1.CreateB"
  "ucketResponseH\000R\021createBucketReply\022U\n\025de"
  "lete_bucket_request\030\014 \001(\0132\037.kvstore.v1.D"
  "eleteBucketRequestH\000R\023deleteBucketReques"
  "t\022R\n\023delete_bucket_reply\030\r \001(\0132 .kvstore"
  ".v1.DeleteBucketResponseH\000R\021deleteBucket"
  "Reply\022C\n\017get_key_request\030\016 \001(\0132\031.kvstore"
  ".v1.GetKeyRequestH\000R\rgetKeyRequest\022@\n\rge"
  "t_key_reply\030\017 \001(\0132\032.kvstore.v1.GetKeyRes"
  "ponseH\000R\013getKeyReply\022C\n\017put_key_request\030"
  "\020 \001(\0132\031.kvstore.v1.PutKeyRequestH\000R\rputK"
  "eyRequest\022@\n\rput_key_reply\030\021 \001(\0132\032.kvsto"
  "re.v1.PutKeyResponseH\000R\013putKeyReply\022L\n\022d"
  "elete_key_request\030\022 \001(\0132\034.kvstore.v1.Del"
  "eteKeyRequestH\000R\020deleteKeyRequest\022I\n\020del"
  "ete_key_reply\030\023 \001(\0132\035.kvstore.v1.DeleteK"
  "eyResponseH\000R\016deleteKeyReply\022k\n\035get_buck"
  "et_descriptor_request\030\024 \001(\0132&.kvstore.v1"
  ".GetBucketDescriptorRequestH\000R\032getBucket"
  "DescriptorRequest\022h\n\033get_bucket_descript"
  "or_reply\030\025 \001(\0132\'.kvstore.v1.GetBucketDes"
  "criptorResponseH\000R\030getBucketDescriptorRe"
  "ply\022(\n\005error\030\026 \001(\0132\020.errors.v1.ErrorH\000R\005"
  "error\"\225\006\n\013RequestType\022\034\n\030REQUEST_TYPE_UN"
  "SPECIFIED\020\000\022\'\n#REQUEST_TYPE_CREATE_ACCOU"
  "NT_REQUEST\020\001\022%\n!REQUEST_TYPE_CREATE_ACCO"
  "UNT_REPLY\020\002\022\'\n#REQUEST_TYPE_DELETE_ACCOU"
  "NT_REQUEST\020\003\022%\n!REQUEST_TYPE_DELETE_ACCO"
  "UNT_REPLY\020\004\022/\n+REQUEST_TYPE_GET_ACCOUNT_"
  "DESCRIPTOR_REQUEST\020\005\022-\n)REQUEST_TYPE_GET"
  "_ACCOUNT_DESCRIPTOR_REPLY\020\006\022&\n\"REQUEST_T"
  "YPE_CREATE_BUCKET_REQUEST\020\007\022$\n REQUEST_T"
  "YPE_CREATE_BUCKET_REPLY\020\010\022&\n\"REQUEST_TYP"
  "E_DELETE_BUCKET_REQUEST\020\t\022$\n REQUEST_TYP"
  "E_DELETE_BUCKET_REPLY\020\n\022 \n\034REQUEST_TYPE_"
  "GET_KEY_REQUEST\020\013\022\036\n\032REQUEST_TYPE_GET_KE"
  "Y_REPLY\020\014\022 \n\034REQUEST_TYPE_PUT_KEY_REQUES"
  "T\020\r\022\036\n\032REQUEST_TYPE_PUT_KEY_REPLY\020\016\022#\n\037R"
  "EQUEST_TYPE_DELETE_KEY_REQUEST\020\017\022!\n\035REQU"
  "EST_TYPE_DELETE_KEY_REPLY\020\020\022.\n*REQUEST_T"
  "YPE_GET_BUCKET_DESCRIPTOR_REQUEST\020\021\022,\n(R"
  "EQUEST_TYPE_GET_BUCKET_DESCRIPTOR_REPLY\020"
  "\022\022\"\n\036REQUEST_TYPE_RECOVERABLE_ERROR\020\023B\t\n"
  "\007payload\"\206\001\n\024CreateAccountRequest\022\035\n\nacc"
  "ount_id\030\001 \001(\004R\taccountId\022\024\n\005owner\030\002 \001(\tR"
  "\005owner\0229\n\013transaction\030\003 \001(\0132\027.kvstore.v1"
  ".TransactionR\013transaction\"\240\001\n\025CreateAcco"
  "untResponse\022L\n\022account_descriptor\030\001 \001(\0132"
  "\035.kvstore.v1.AccountDescriptorR\021accountD"
  "escriptor\0229\n\013transaction\030\002 \001(\0132\027.kvstore"
  ".v1.TransactionR\013transaction\"\206\001\n\024DeleteA"
  "ccountRequest\022\035\n\naccount_id\030\001 \001(\004R\taccou"
  "ntId\022\024\n\005owner\030\002 \001(\tR\005owner\0229\n\013transactio"
  "n\030\003 \001(\0132\027.kvstore.v1.TransactionR\013transa"
  "ction\"b\n\025DeleteAccountResponse\022\016\n\002ok\030\001 \001"
  "(\010R\002ok\0229\n\013transaction\030\002 \001(\0132\027.kvstore.v1"
  ".TransactionR\013transaction\"<\n\033GetAccountD"
  "escriptorRequest\022\035\n\naccount_id\030\001 \001(\004R\tac"
  "countId\"l\n\034GetAccountDescriptorResponse\022"
  "L\n\022account_descriptor\030\001 \001(\0132\035.kvstore.v1"
  ".AccountDescriptorR\021accountDescriptor\"\372\001"
  "\n\021AccountDescriptor\022\035\n\naccount_id\030\001 \001(\004R"
  "\taccountId\022\024\n\005owner\030\002 \001(\tR\005owner\0224\n\007crea"
  "ted\030\003 \001(\0132\032.google.protobuf.TimestampR\007c"
  "reated\022=\n\014last_updated\030\004 \001(\0132\032.google.pr"
  "otobuf.TimestampR\013lastUpdated\022!\n\014bucket_"
  "count\030\005 \001(\004R\013bucketCount\022\030\n\007buckets\030\006 \003("
  "\tR\007buckets\"\231\001\n\023CreateBucketRequest\022\035\n\nac"
  "count_id\030\001 \001(\004R\taccountId\022\022\n\004name\030\002 \001(\tR"
  "\004name\022\024\n\005owner\030\003 \001(\tR\005owner\0229\n\013transacti"
  "on\030\004 \001(\0132\027.kvstore.v1.TransactionR\013trans"
  "action\"\234\001\n\024CreateBucketResponse\022I\n\021bucke"
  "t_descriptor\030\001 \001(\0132\034.kvstore.v1.BucketDe"
  "scriptorR\020bucketDescriptor\0229\n\013transactio"
  "n\030\002 \001(\0132\027.kvstore.v1.TransactionR\013transa"
  "ction\"\203\001\n\023DeleteBucketRequest\022\035\n\naccount"
  "_id\030\001 \001(\004R\taccountId\022\022\n\004name\030\002 \001(\tR\004name"
  "\0229\n\013transaction\030\003 \001(\0132\027.kvstore.v1.Trans"
  "actionR\013transaction\"a\n\024DeleteBucketRespo"
  "nse\022\016\n\002ok\030\001 \001(\010R\002ok\0229\n\013transaction\030\002 \001(\013"
  "2\027.kvstore.v1.TransactionR\013transaction\"\316"
  "\001\n\020BucketDescriptor\022\024\n\005owner\030\001 \001(\tR\005owne"
  "r\022\022\n\004size\030\002 \001(\004R\004size\022\033\n\tkey_count\030\003 \001(\004"
  "R\010keyCount\0224\n\007created\030\004 \001(\0132\032.google.pro"
  "tobuf.TimestampR\007created\022=\n\014last_updated"
  "\030\005 \001(\0132\032.google.protobuf.TimestampR\013last"
  "Updated\"\\\n\032GetBucketDescriptorRequest\022\035\n"
  "\naccount_id\030\001 \001(\004R\taccountId\022\037\n\013bucket_n"
  "ame\030\002 \001(\tR\nbucketName\"h\n\033GetBucketDescri"
  "ptorResponse\022I\n\021bucket_descriptor\030\001 \001(\0132"
  "\034.kvstore.v1.BucketDescriptorR\020bucketDes"
  "criptor\"\214\001\n\rGetKeyRequest\022\035\n\naccount_id\030"
  "\001 \001(\004R\taccountId\022\037\n\013bucket_name\030\002 \001(\tR\nb"
  "ucketName\022\020\n\003key\030\003 \001(\tR\003key\022\035\n\007version\030\004"
  " \001(\rH\000R\007version\210\001\001B\n\n\010_version\"L\n\016GetKey"
  "Response\022:\n\016key_value_pair\030\001 \001(\0132\024.kvsto"
  "re.v1.KeyValueR\014keyValuePair\"\306\001\n\rPutKeyR"
  "equest\022\035\n\naccount_id\030\001 \001(\004R\taccountId\022\037\n"
  "\013bucket_name\030\002 \001(\tR\nbucketName\022:\n\016key_va"
  "lue_pair\030\003 \001(\0132\024.kvstore.v1.KeyValueR\014ke"
  "yValuePair\0229\n\013transaction\030\004 \001(\0132\027.kvstor"
  "e.v1.TransactionR\013transaction\"K\n\016PutKeyR"
  "esponse\0229\n\013transaction\030\001 \001(\0132\027.kvstore.v"
  "1.TransactionR\013transaction\"\237\001\n\020DeleteKey"
  "Request\022\035\n\naccount_id\030\001 \001(\004R\taccountId\022\037"
  "\n\013bucket_name\030\002 \001(\tR\nbucketName\022\020\n\003key\030\003"
  " \001(\tR\003key\0229\n\013transaction\030\004 \001(\0132\027.kvstore"
  ".v1.TransactionR\013transaction\"^\n\021DeleteKe"
  "yResponse\022\016\n\002ok\030\001 \001(\010R\002ok\0229\n\013transaction"
  "\030\003 \001(\0132\027.kvstore.v1.TransactionR\013transac"
  "tion\"Q\n\022KeyValueDescriptor\022\032\n\010versions\030\001"
  " \003(\rR\010versions\022\037\n\013current_key\030\002 \001(\014R\ncur"
  "rentKey\"*\n\026ListKeyVersionsRequest\022\020\n\003key"
  "\030\001 \001(\014R\003key\"5\n\027ListKeyVersionsResponse\022\032"
  "\n\010versions\030\001 \003(\rR\010versions\"\256\001\n\010KeyValue\022"
  "\020\n\003key\030\001 \001(\014R\003key\022\'\n\017create_revision\030\002 \001"
  "(\003R\016createRevision\022!\n\014mod_revision\030\003 \001(\003"
  "R\013modRevision\022\030\n\007version\030\004 \001(\004R\007version\022"
  "\024\n\005value\030\005 \001(\014R\005value\022\024\n\005lease\030\006 \001(\003R\005le"
  "ase\"\237\001\n\005Event\0220\n\004type\030\001 \001(\0162\034.kvstore.v1"
  ".KeyOperationTypeR\004type\022$\n\002kv\030\002 \001(\0132\024.kv"
  "store.v1.KeyValueR\002kv\0222\n\007prev_kv\030\003 \001(\0132\024"
  ".kvstore.v1.KeyValueH\000R\006prevKv\210\001\001B\n\n\010_pr"
  "ev_kv*\215\001\n\020KeyOperationType\022\"\n\036KEY_OPERAT"
  "ION_TYPE_UNSPECIFIED\020\000\022\032\n\026KEY_OPERATION_"
  "TYPE_GET\020\001\022\032\n\026KEY_OPERATION_TYPE_PUT\020\002\022\035"
  "\n\031KEY_OPERATION_TYPE_DELETE\020\003B\214\001\n\026io.a13"
  "s.api.kvstore.v1B\007KvProtoP\001Z a13s.io/api"
  "/kvstore/v1;kvstorev1\242\002\003KXX\252\002\nKvstore.V1"
  "\312\002\nKvstore\\V1\342\002\026Kvstore\\V1\\GPBMetadata\352\002"
  "\013Kvstore::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_kvstore_2fv1_2fkv_2eproto_deps[3] = {
  &::descriptor_table_errors_2fv1_2ferrors_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kvstore_2fv1_2ftransactions_2eproto,
};
static ::_pbi::once_flag descriptor_table_kvstore_2fv1_2fkv_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kvstore_2fv1_2fkv_2eproto = {
    false, false, 6140, descriptor_table_protodef_kvstore_2fv1_2fkv_2eproto,
    "kvstore/v1/kv.proto",
    &descriptor_table_kvstore_2fv1_2fkv_2eproto_once, descriptor_table_kvstore_2fv1_2fkv_2eproto_deps, 3, 26,
    schemas, file_default_instances, TableStruct_kvstore_2fv1_2fkv_2eproto::offsets,
    file_level_metadata_kvstore_2fv1_2fkv_2eproto, file_level_enum_descriptors_kvstore_2fv1_2fkv_2eproto,
    file_level_service_descriptors_kvstore_2fv1_2fkv_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kvstore_2fv1_2fkv_2eproto_getter() {
  return &descriptor_table_kvstore_2fv1_2fkv_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kvstore_2fv1_2fkv_2eproto(&descriptor_table_kvstore_2fv1_2fkv_2eproto);
namespace kvstore {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVStoreWrapper_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvstore_2fv1_2fkv_2eproto);
  return file_level_enum_descriptors_kvstore_2fv1_2fkv_2eproto[0];
}
bool KVStoreWrapper_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_UNSPECIFIED;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_CREATE_ACCOUNT_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_CREATE_ACCOUNT_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_ACCOUNT_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_ACCOUNT_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_ACCOUNT_DESCRIPTOR_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_ACCOUNT_DESCRIPTOR_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_CREATE_BUCKET_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_CREATE_BUCKET_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_BUCKET_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_BUCKET_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_KEY_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_KEY_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_PUT_KEY_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_PUT_KEY_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_KEY_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_DELETE_KEY_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_BUCKET_DESCRIPTOR_REQUEST;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_GET_BUCKET_DESCRIPTOR_REPLY;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::REQUEST_TYPE_RECOVERABLE_ERROR;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::RequestType_MIN;
constexpr KVStoreWrapper_RequestType KVStoreWrapper::RequestType_MAX;
constexpr int KVStoreWrapper::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyOperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvstore_2fv1_2fkv_2eproto);
  return file_level_enum_descriptors_kvstore_2fv1_2fkv_2eproto[1];
}
bool KeyOperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KVStoreWrapper::_Internal {
 public:
  static const ::kvstore::v1::CreateAccountRequest& create_account_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::CreateAccountResponse& create_account_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteAccountRequest& delete_account_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteAccountResponse& delete_account_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetAccountDescriptorRequest& get_account_descriptor_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetAccountDescriptorResponse& get_account_descriptor_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::CreateBucketRequest& create_bucket_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::CreateBucketResponse& create_bucket_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteBucketRequest& delete_bucket_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteBucketResponse& delete_bucket_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetKeyRequest& get_key_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetKeyResponse& get_key_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::PutKeyRequest& put_key_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::PutKeyResponse& put_key_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteKeyRequest& delete_key_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::DeleteKeyResponse& delete_key_reply(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetBucketDescriptorRequest& get_bucket_descriptor_request(const KVStoreWrapper* msg);
  static const ::kvstore::v1::GetBucketDescriptorResponse& get_bucket_descriptor_reply(const KVStoreWrapper* msg);
  static const ::errors::v1::Error& error(const KVStoreWrapper* msg);
};

const ::kvstore::v1::CreateAccountRequest&
KVStoreWrapper::_Internal::create_account_request(const KVStoreWrapper* msg) {
  return *msg->payload_.create_account_request_;
}
const ::kvstore::v1::CreateAccountResponse&
KVStoreWrapper::_Internal::create_account_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.create_account_reply_;
}
const ::kvstore::v1::DeleteAccountRequest&
KVStoreWrapper::_Internal::delete_account_request(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_account_request_;
}
const ::kvstore::v1::DeleteAccountResponse&
KVStoreWrapper::_Internal::delete_account_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_account_reply_;
}
const ::kvstore::v1::GetAccountDescriptorRequest&
KVStoreWrapper::_Internal::get_account_descriptor_request(const KVStoreWrapper* msg) {
  return *msg->payload_.get_account_descriptor_request_;
}
const ::kvstore::v1::GetAccountDescriptorResponse&
KVStoreWrapper::_Internal::get_account_descriptor_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.get_account_descriptor_reply_;
}
const ::kvstore::v1::CreateBucketRequest&
KVStoreWrapper::_Internal::create_bucket_request(const KVStoreWrapper* msg) {
  return *msg->payload_.create_bucket_request_;
}
const ::kvstore::v1::CreateBucketResponse&
KVStoreWrapper::_Internal::create_bucket_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.create_bucket_reply_;
}
const ::kvstore::v1::DeleteBucketRequest&
KVStoreWrapper::_Internal::delete_bucket_request(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_bucket_request_;
}
const ::kvstore::v1::DeleteBucketResponse&
KVStoreWrapper::_Internal::delete_bucket_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_bucket_reply_;
}
const ::kvstore::v1::GetKeyRequest&
KVStoreWrapper::_Internal::get_key_request(const KVStoreWrapper* msg) {
  return *msg->payload_.get_key_request_;
}
const ::kvstore::v1::GetKeyResponse&
KVStoreWrapper::_Internal::get_key_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.get_key_reply_;
}
const ::kvstore::v1::PutKeyRequest&
KVStoreWrapper::_Internal::put_key_request(const KVStoreWrapper* msg) {
  return *msg->payload_.put_key_request_;
}
const ::kvstore::v1::PutKeyResponse&
KVStoreWrapper::_Internal::put_key_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.put_key_reply_;
}
const ::kvstore::v1::DeleteKeyRequest&
KVStoreWrapper::_Internal::delete_key_request(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_key_request_;
}
const ::kvstore::v1::DeleteKeyResponse&
KVStoreWrapper::_Internal::delete_key_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.delete_key_reply_;
}
const ::kvstore::v1::GetBucketDescriptorRequest&
KVStoreWrapper::_Internal::get_bucket_descriptor_request(const KVStoreWrapper* msg) {
  return *msg->payload_.get_bucket_descriptor_request_;
}
const ::kvstore::v1::GetBucketDescriptorResponse&
KVStoreWrapper::_Internal::get_bucket_descriptor_reply(const KVStoreWrapper* msg) {
  return *msg->payload_.get_bucket_descriptor_reply_;
}
const ::errors::v1::Error&
KVStoreWrapper::_Internal::error(const KVStoreWrapper* msg) {
  return *msg->payload_.error_;
}
void KVStoreWrapper::set_allocated_create_account_request(::kvstore::v1::CreateAccountRequest* create_account_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_account_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_account_request);
    if (message_arena != submessage_arena) {
      create_account_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account_request, submessage_arena);
    }
    set_has_create_account_request();
    payload_.create_account_request_ = create_account_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.create_account_request)
}
void KVStoreWrapper::set_allocated_create_account_reply(::kvstore::v1::CreateAccountResponse* create_account_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_account_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_account_reply);
    if (message_arena != submessage_arena) {
      create_account_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account_reply, submessage_arena);
    }
    set_has_create_account_reply();
    payload_.create_account_reply_ = create_account_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.create_account_reply)
}
void KVStoreWrapper::set_allocated_delete_account_request(::kvstore::v1::DeleteAccountRequest* delete_account_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_account_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_account_request);
    if (message_arena != submessage_arena) {
      delete_account_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_account_request, submessage_arena);
    }
    set_has_delete_account_request();
    payload_.delete_account_request_ = delete_account_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_account_request)
}
void KVStoreWrapper::set_allocated_delete_account_reply(::kvstore::v1::DeleteAccountResponse* delete_account_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_account_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_account_reply);
    if (message_arena != submessage_arena) {
      delete_account_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_account_reply, submessage_arena);
    }
    set_has_delete_account_reply();
    payload_.delete_account_reply_ = delete_account_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_account_reply)
}
void KVStoreWrapper::set_allocated_get_account_descriptor_request(::kvstore::v1::GetAccountDescriptorRequest* get_account_descriptor_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_account_descriptor_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_descriptor_request);
    if (message_arena != submessage_arena) {
      get_account_descriptor_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_descriptor_request, submessage_arena);
    }
    set_has_get_account_descriptor_request();
    payload_.get_account_descriptor_request_ = get_account_descriptor_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_account_descriptor_request)
}
void KVStoreWrapper::set_allocated_get_account_descriptor_reply(::kvstore::v1::GetAccountDescriptorResponse* get_account_descriptor_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_account_descriptor_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_descriptor_reply);
    if (message_arena != submessage_arena) {
      get_account_descriptor_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_descriptor_reply, submessage_arena);
    }
    set_has_get_account_descriptor_reply();
    payload_.get_account_descriptor_reply_ = get_account_descriptor_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_account_descriptor_reply)
}
void KVStoreWrapper::set_allocated_create_bucket_request(::kvstore::v1::CreateBucketRequest* create_bucket_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_bucket_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_bucket_request);
    if (message_arena != submessage_arena) {
      create_bucket_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_bucket_request, submessage_arena);
    }
    set_has_create_bucket_request();
    payload_.create_bucket_request_ = create_bucket_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.create_bucket_request)
}
void KVStoreWrapper::set_allocated_create_bucket_reply(::kvstore::v1::CreateBucketResponse* create_bucket_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_bucket_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_bucket_reply);
    if (message_arena != submessage_arena) {
      create_bucket_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_bucket_reply, submessage_arena);
    }
    set_has_create_bucket_reply();
    payload_.create_bucket_reply_ = create_bucket_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.create_bucket_reply)
}
void KVStoreWrapper::set_allocated_delete_bucket_request(::kvstore::v1::DeleteBucketRequest* delete_bucket_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_bucket_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_bucket_request);
    if (message_arena != submessage_arena) {
      delete_bucket_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_bucket_request, submessage_arena);
    }
    set_has_delete_bucket_request();
    payload_.delete_bucket_request_ = delete_bucket_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_bucket_request)
}
void KVStoreWrapper::set_allocated_delete_bucket_reply(::kvstore::v1::DeleteBucketResponse* delete_bucket_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_bucket_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_bucket_reply);
    if (message_arena != submessage_arena) {
      delete_bucket_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_bucket_reply, submessage_arena);
    }
    set_has_delete_bucket_reply();
    payload_.delete_bucket_reply_ = delete_bucket_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_bucket_reply)
}
void KVStoreWrapper::set_allocated_get_key_request(::kvstore::v1::GetKeyRequest* get_key_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_key_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_key_request);
    if (message_arena != submessage_arena) {
      get_key_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_key_request, submessage_arena);
    }
    set_has_get_key_request();
    payload_.get_key_request_ = get_key_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_key_request)
}
void KVStoreWrapper::set_allocated_get_key_reply(::kvstore::v1::GetKeyResponse* get_key_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_key_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_key_reply);
    if (message_arena != submessage_arena) {
      get_key_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_key_reply, submessage_arena);
    }
    set_has_get_key_reply();
    payload_.get_key_reply_ = get_key_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_key_reply)
}
void KVStoreWrapper::set_allocated_put_key_request(::kvstore::v1::PutKeyRequest* put_key_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (put_key_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(put_key_request);
    if (message_arena != submessage_arena) {
      put_key_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put_key_request, submessage_arena);
    }
    set_has_put_key_request();
    payload_.put_key_request_ = put_key_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.put_key_request)
}
void KVStoreWrapper::set_allocated_put_key_reply(::kvstore::v1::PutKeyResponse* put_key_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (put_key_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(put_key_reply);
    if (message_arena != submessage_arena) {
      put_key_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put_key_reply, submessage_arena);
    }
    set_has_put_key_reply();
    payload_.put_key_reply_ = put_key_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.put_key_reply)
}
void KVStoreWrapper::set_allocated_delete_key_request(::kvstore::v1::DeleteKeyRequest* delete_key_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_key_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_key_request);
    if (message_arena != submessage_arena) {
      delete_key_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_key_request, submessage_arena);
    }
    set_has_delete_key_request();
    payload_.delete_key_request_ = delete_key_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_key_request)
}
void KVStoreWrapper::set_allocated_delete_key_reply(::kvstore::v1::DeleteKeyResponse* delete_key_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_key_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_key_reply);
    if (message_arena != submessage_arena) {
      delete_key_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_key_reply, submessage_arena);
    }
    set_has_delete_key_reply();
    payload_.delete_key_reply_ = delete_key_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.delete_key_reply)
}
void KVStoreWrapper::set_allocated_get_bucket_descriptor_request(::kvstore::v1::GetBucketDescriptorRequest* get_bucket_descriptor_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_bucket_descriptor_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_bucket_descriptor_request);
    if (message_arena != submessage_arena) {
      get_bucket_descriptor_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_bucket_descriptor_request, submessage_arena);
    }
    set_has_get_bucket_descriptor_request();
    payload_.get_bucket_descriptor_request_ = get_bucket_descriptor_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_bucket_descriptor_request)
}
void KVStoreWrapper::set_allocated_get_bucket_descriptor_reply(::kvstore::v1::GetBucketDescriptorResponse* get_bucket_descriptor_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_bucket_descriptor_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_bucket_descriptor_reply);
    if (message_arena != submessage_arena) {
      get_bucket_descriptor_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_bucket_descriptor_reply, submessage_arena);
    }
    set_has_get_bucket_descriptor_reply();
    payload_.get_bucket_descriptor_reply_ = get_bucket_descriptor_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.get_bucket_descriptor_reply)
}
void KVStoreWrapper::set_allocated_error(::errors::v1::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.KVStoreWrapper.error)
}
void KVStoreWrapper::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.error_;
    }
    clear_has_payload();
  }
}
KVStoreWrapper::KVStoreWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.KVStoreWrapper)
}
KVStoreWrapper::KVStoreWrapper(const KVStoreWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    bucket_.Set(from._internal_bucket(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&typ_) -
    reinterpret_cast<char*>(&account_)) + sizeof(typ_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kCreateAccountRequest: {
      _internal_mutable_create_account_request()->::kvstore::v1::CreateAccountRequest::MergeFrom(from._internal_create_account_request());
      break;
    }
    case kCreateAccountReply: {
      _internal_mutable_create_account_reply()->::kvstore::v1::CreateAccountResponse::MergeFrom(from._internal_create_account_reply());
      break;
    }
    case kDeleteAccountRequest: {
      _internal_mutable_delete_account_request()->::kvstore::v1::DeleteAccountRequest::MergeFrom(from._internal_delete_account_request());
      break;
    }
    case kDeleteAccountReply: {
      _internal_mutable_delete_account_reply()->::kvstore::v1::DeleteAccountResponse::MergeFrom(from._internal_delete_account_reply());
      break;
    }
    case kGetAccountDescriptorRequest: {
      _internal_mutable_get_account_descriptor_request()->::kvstore::v1::GetAccountDescriptorRequest::MergeFrom(from._internal_get_account_descriptor_request());
      break;
    }
    case kGetAccountDescriptorReply: {
      _internal_mutable_get_account_descriptor_reply()->::kvstore::v1::GetAccountDescriptorResponse::MergeFrom(from._internal_get_account_descriptor_reply());
      break;
    }
    case kCreateBucketRequest: {
      _internal_mutable_create_bucket_request()->::kvstore::v1::CreateBucketRequest::MergeFrom(from._internal_create_bucket_request());
      break;
    }
    case kCreateBucketReply: {
      _internal_mutable_create_bucket_reply()->::kvstore::v1::CreateBucketResponse::MergeFrom(from._internal_create_bucket_reply());
      break;
    }
    case kDeleteBucketRequest: {
      _internal_mutable_delete_bucket_request()->::kvstore::v1::DeleteBucketRequest::MergeFrom(from._internal_delete_bucket_request());
      break;
    }
    case kDeleteBucketReply: {
      _internal_mutable_delete_bucket_reply()->::kvstore::v1::DeleteBucketResponse::MergeFrom(from._internal_delete_bucket_reply());
      break;
    }
    case kGetKeyRequest: {
      _internal_mutable_get_key_request()->::kvstore::v1::GetKeyRequest::MergeFrom(from._internal_get_key_request());
      break;
    }
    case kGetKeyReply: {
      _internal_mutable_get_key_reply()->::kvstore::v1::GetKeyResponse::MergeFrom(from._internal_get_key_reply());
      break;
    }
    case kPutKeyRequest: {
      _internal_mutable_put_key_request()->::kvstore::v1::PutKeyRequest::MergeFrom(from._internal_put_key_request());
      break;
    }
    case kPutKeyReply: {
      _internal_mutable_put_key_reply()->::kvstore::v1::PutKeyResponse::MergeFrom(from._internal_put_key_reply());
      break;
    }
    case kDeleteKeyRequest: {
      _internal_mutable_delete_key_request()->::kvstore::v1::DeleteKeyRequest::MergeFrom(from._internal_delete_key_request());
      break;
    }
    case kDeleteKeyReply: {
      _internal_mutable_delete_key_reply()->::kvstore::v1::DeleteKeyResponse::MergeFrom(from._internal_delete_key_reply());
      break;
    }
    case kGetBucketDescriptorRequest: {
      _internal_mutable_get_bucket_descriptor_request()->::kvstore::v1::GetBucketDescriptorRequest::MergeFrom(from._internal_get_bucket_descriptor_request());
      break;
    }
    case kGetBucketDescriptorReply: {
      _internal_mutable_get_bucket_descriptor_reply()->::kvstore::v1::GetBucketDescriptorResponse::MergeFrom(from._internal_get_bucket_descriptor_reply());
      break;
    }
    case kError: {
      _internal_mutable_error()->::errors::v1::Error::MergeFrom(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.KVStoreWrapper)
}

inline void KVStoreWrapper::SharedCtor() {
bucket_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&typ_) -
    reinterpret_cast<char*>(&account_)) + sizeof(typ_));
clear_has_payload();
}

KVStoreWrapper::~KVStoreWrapper() {
  // @@protoc_insertion_point(destructor:kvstore.v1.KVStoreWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVStoreWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_.Destroy();
  if (has_payload()) {
    clear_payload();
  }
}

void KVStoreWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KVStoreWrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:kvstore.v1.KVStoreWrapper)
  switch (payload_case()) {
    case kCreateAccountRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_account_request_;
      }
      break;
    }
    case kCreateAccountReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_account_reply_;
      }
      break;
    }
    case kDeleteAccountRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_account_request_;
      }
      break;
    }
    case kDeleteAccountReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_account_reply_;
      }
      break;
    }
    case kGetAccountDescriptorRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_account_descriptor_request_;
      }
      break;
    }
    case kGetAccountDescriptorReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_account_descriptor_reply_;
      }
      break;
    }
    case kCreateBucketRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_bucket_request_;
      }
      break;
    }
    case kCreateBucketReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_bucket_reply_;
      }
      break;
    }
    case kDeleteBucketRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_bucket_request_;
      }
      break;
    }
    case kDeleteBucketReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_bucket_reply_;
      }
      break;
    }
    case kGetKeyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_key_request_;
      }
      break;
    }
    case kGetKeyReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_key_reply_;
      }
      break;
    }
    case kPutKeyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.put_key_request_;
      }
      break;
    }
    case kPutKeyReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.put_key_reply_;
      }
      break;
    }
    case kDeleteKeyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_key_request_;
      }
      break;
    }
    case kDeleteKeyReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_key_reply_;
      }
      break;
    }
    case kGetBucketDescriptorRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_bucket_descriptor_request_;
      }
      break;
    }
    case kGetBucketDescriptorReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_bucket_descriptor_reply_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.error_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void KVStoreWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.KVStoreWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmpty();
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typ_) -
      reinterpret_cast<char*>(&account_)) + sizeof(typ_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVStoreWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2 [json_name = "bucket"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.KVStoreWrapper.bucket"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.KVStoreWrapper.RequestType typ = 3 [json_name = "typ"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_typ(static_cast<::kvstore::v1::KVStoreWrapper_RequestType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.CreateAccountRequest create_account_request = 4 [json_name = "createAccountRequest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.CreateAccountResponse create_account_reply = 5 [json_name = "createAccountReply"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteAccountRequest delete_account_request = 6 [json_name = "deleteAccountRequest"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_account_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteAccountResponse delete_account_reply = 7 [json_name = "deleteAccountReply"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_account_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetAccountDescriptorRequest get_account_descriptor_request = 8 [json_name = "getAccountDescriptorRequest"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_descriptor_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetAccountDescriptorResponse get_account_descriptor_reply = 9 [json_name = "getAccountDescriptorReply"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_descriptor_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.CreateBucketRequest create_bucket_request = 10 [json_name = "createBucketRequest"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_bucket_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.CreateBucketResponse create_bucket_reply = 11 [json_name = "createBucketReply"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_bucket_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteBucketRequest delete_bucket_request = 12 [json_name = "deleteBucketRequest"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_bucket_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteBucketResponse delete_bucket_reply = 13 [json_name = "deleteBucketReply"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_bucket_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetKeyRequest get_key_request = 14 [json_name = "getKeyRequest"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_key_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetKeyResponse get_key_reply = 15 [json_name = "getKeyReply"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_key_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.PutKeyRequest put_key_request = 16 [json_name = "putKeyRequest"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_put_key_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.PutKeyResponse put_key_reply = 17 [json_name = "putKeyReply"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_put_key_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteKeyRequest delete_key_request = 18 [json_name = "deleteKeyRequest"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_key_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.DeleteKeyResponse delete_key_reply = 19 [json_name = "deleteKeyReply"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_key_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetBucketDescriptorRequest get_bucket_descriptor_request = 20 [json_name = "getBucketDescriptorRequest"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_bucket_descriptor_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.GetBucketDescriptorResponse get_bucket_descriptor_reply = 21 [json_name = "getBucketDescriptorReply"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_bucket_descriptor_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .errors.v1.Error error = 22 [json_name = "error"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVStoreWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.KVStoreWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account = 1 [json_name = "account"];
  if (this->_internal_account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account(), target);
  }

  // string bucket = 2 [json_name = "bucket"];
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.KVStoreWrapper.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // .kvstore.v1.KVStoreWrapper.RequestType typ = 3 [json_name = "typ"];
  if (this->_internal_typ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_typ(), target);
  }

  // .kvstore.v1.CreateAccountRequest create_account_request = 4 [json_name = "createAccountRequest"];
  if (_internal_has_create_account_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::create_account_request(this),
        _Internal::create_account_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.CreateAccountResponse create_account_reply = 5 [json_name = "createAccountReply"];
  if (_internal_has_create_account_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::create_account_reply(this),
        _Internal::create_account_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteAccountRequest delete_account_request = 6 [json_name = "deleteAccountRequest"];
  if (_internal_has_delete_account_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::delete_account_request(this),
        _Internal::delete_account_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteAccountResponse delete_account_reply = 7 [json_name = "deleteAccountReply"];
  if (_internal_has_delete_account_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::delete_account_reply(this),
        _Internal::delete_account_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetAccountDescriptorRequest get_account_descriptor_request = 8 [json_name = "getAccountDescriptorRequest"];
  if (_internal_has_get_account_descriptor_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::get_account_descriptor_request(this),
        _Internal::get_account_descriptor_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetAccountDescriptorResponse get_account_descriptor_reply = 9 [json_name = "getAccountDescriptorReply"];
  if (_internal_has_get_account_descriptor_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::get_account_descriptor_reply(this),
        _Internal::get_account_descriptor_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.CreateBucketRequest create_bucket_request = 10 [json_name = "createBucketRequest"];
  if (_internal_has_create_bucket_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::create_bucket_request(this),
        _Internal::create_bucket_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.CreateBucketResponse create_bucket_reply = 11 [json_name = "createBucketReply"];
  if (_internal_has_create_bucket_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::create_bucket_reply(this),
        _Internal::create_bucket_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteBucketRequest delete_bucket_request = 12 [json_name = "deleteBucketRequest"];
  if (_internal_has_delete_bucket_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::delete_bucket_request(this),
        _Internal::delete_bucket_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteBucketResponse delete_bucket_reply = 13 [json_name = "deleteBucketReply"];
  if (_internal_has_delete_bucket_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::delete_bucket_reply(this),
        _Internal::delete_bucket_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetKeyRequest get_key_request = 14 [json_name = "getKeyRequest"];
  if (_internal_has_get_key_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::get_key_request(this),
        _Internal::get_key_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetKeyResponse get_key_reply = 15 [json_name = "getKeyReply"];
  if (_internal_has_get_key_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::get_key_reply(this),
        _Internal::get_key_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.PutKeyRequest put_key_request = 16 [json_name = "putKeyRequest"];
  if (_internal_has_put_key_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::put_key_request(this),
        _Internal::put_key_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.PutKeyResponse put_key_reply = 17 [json_name = "putKeyReply"];
  if (_internal_has_put_key_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::put_key_reply(this),
        _Internal::put_key_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteKeyRequest delete_key_request = 18 [json_name = "deleteKeyRequest"];
  if (_internal_has_delete_key_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::delete_key_request(this),
        _Internal::delete_key_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.DeleteKeyResponse delete_key_reply = 19 [json_name = "deleteKeyReply"];
  if (_internal_has_delete_key_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::delete_key_reply(this),
        _Internal::delete_key_reply(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetBucketDescriptorRequest get_bucket_descriptor_request = 20 [json_name = "getBucketDescriptorRequest"];
  if (_internal_has_get_bucket_descriptor_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::get_bucket_descriptor_request(this),
        _Internal::get_bucket_descriptor_request(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.GetBucketDescriptorResponse get_bucket_descriptor_reply = 21 [json_name = "getBucketDescriptorReply"];
  if (_internal_has_get_bucket_descriptor_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::get_bucket_descriptor_reply(this),
        _Internal::get_bucket_descriptor_reply(this).GetCachedSize(), target, stream);
  }

  // .errors.v1.Error error = 22 [json_name = "error"];
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.KVStoreWrapper)
  return target;
}

size_t KVStoreWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.KVStoreWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 2 [json_name = "bucket"];
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // uint64 account = 1 [json_name = "account"];
  if (this->_internal_account() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account());
  }

  // .kvstore.v1.KVStoreWrapper.RequestType typ = 3 [json_name = "typ"];
  if (this->_internal_typ() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_typ());
  }

  switch (payload_case()) {
    // .kvstore.v1.CreateAccountRequest create_account_request = 4 [json_name = "createAccountRequest"];
    case kCreateAccountRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_account_request_);
      break;
    }
    // .kvstore.v1.CreateAccountResponse create_account_reply = 5 [json_name = "createAccountReply"];
    case kCreateAccountReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_account_reply_);
      break;
    }
    // .kvstore.v1.DeleteAccountRequest delete_account_request = 6 [json_name = "deleteAccountRequest"];
    case kDeleteAccountRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_account_request_);
      break;
    }
    // .kvstore.v1.DeleteAccountResponse delete_account_reply = 7 [json_name = "deleteAccountReply"];
    case kDeleteAccountReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_account_reply_);
      break;
    }
    // .kvstore.v1.GetAccountDescriptorRequest get_account_descriptor_request = 8 [json_name = "getAccountDescriptorRequest"];
    case kGetAccountDescriptorRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_account_descriptor_request_);
      break;
    }
    // .kvstore.v1.GetAccountDescriptorResponse get_account_descriptor_reply = 9 [json_name = "getAccountDescriptorReply"];
    case kGetAccountDescriptorReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_account_descriptor_reply_);
      break;
    }
    // .kvstore.v1.CreateBucketRequest create_bucket_request = 10 [json_name = "createBucketRequest"];
    case kCreateBucketRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_bucket_request_);
      break;
    }
    // .kvstore.v1.CreateBucketResponse create_bucket_reply = 11 [json_name = "createBucketReply"];
    case kCreateBucketReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_bucket_reply_);
      break;
    }
    // .kvstore.v1.DeleteBucketRequest delete_bucket_request = 12 [json_name = "deleteBucketRequest"];
    case kDeleteBucketRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_bucket_request_);
      break;
    }
    // .kvstore.v1.DeleteBucketResponse delete_bucket_reply = 13 [json_name = "deleteBucketReply"];
    case kDeleteBucketReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_bucket_reply_);
      break;
    }
    // .kvstore.v1.GetKeyRequest get_key_request = 14 [json_name = "getKeyRequest"];
    case kGetKeyRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_key_request_);
      break;
    }
    // .kvstore.v1.GetKeyResponse get_key_reply = 15 [json_name = "getKeyReply"];
    case kGetKeyReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_key_reply_);
      break;
    }
    // .kvstore.v1.PutKeyRequest put_key_request = 16 [json_name = "putKeyRequest"];
    case kPutKeyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.put_key_request_);
      break;
    }
    // .kvstore.v1.PutKeyResponse put_key_reply = 17 [json_name = "putKeyReply"];
    case kPutKeyReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.put_key_reply_);
      break;
    }
    // .kvstore.v1.DeleteKeyRequest delete_key_request = 18 [json_name = "deleteKeyRequest"];
    case kDeleteKeyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_key_request_);
      break;
    }
    // .kvstore.v1.DeleteKeyResponse delete_key_reply = 19 [json_name = "deleteKeyReply"];
    case kDeleteKeyReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_key_reply_);
      break;
    }
    // .kvstore.v1.GetBucketDescriptorRequest get_bucket_descriptor_request = 20 [json_name = "getBucketDescriptorRequest"];
    case kGetBucketDescriptorRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_bucket_descriptor_request_);
      break;
    }
    // .kvstore.v1.GetBucketDescriptorResponse get_bucket_descriptor_reply = 21 [json_name = "getBucketDescriptorReply"];
    case kGetBucketDescriptorReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_bucket_descriptor_reply_);
      break;
    }
    // .errors.v1.Error error = 22 [json_name = "error"];
    case kError: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.error_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVStoreWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KVStoreWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVStoreWrapper::GetClassData() const { return &_class_data_; }

void KVStoreWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KVStoreWrapper *>(to)->MergeFrom(
      static_cast<const KVStoreWrapper &>(from));
}


void KVStoreWrapper::MergeFrom(const KVStoreWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.KVStoreWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (from._internal_account() != 0) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_typ() != 0) {
    _internal_set_typ(from._internal_typ());
  }
  switch (from.payload_case()) {
    case kCreateAccountRequest: {
      _internal_mutable_create_account_request()->::kvstore::v1::CreateAccountRequest::MergeFrom(from._internal_create_account_request());
      break;
    }
    case kCreateAccountReply: {
      _internal_mutable_create_account_reply()->::kvstore::v1::CreateAccountResponse::MergeFrom(from._internal_create_account_reply());
      break;
    }
    case kDeleteAccountRequest: {
      _internal_mutable_delete_account_request()->::kvstore::v1::DeleteAccountRequest::MergeFrom(from._internal_delete_account_request());
      break;
    }
    case kDeleteAccountReply: {
      _internal_mutable_delete_account_reply()->::kvstore::v1::DeleteAccountResponse::MergeFrom(from._internal_delete_account_reply());
      break;
    }
    case kGetAccountDescriptorRequest: {
      _internal_mutable_get_account_descriptor_request()->::kvstore::v1::GetAccountDescriptorRequest::MergeFrom(from._internal_get_account_descriptor_request());
      break;
    }
    case kGetAccountDescriptorReply: {
      _internal_mutable_get_account_descriptor_reply()->::kvstore::v1::GetAccountDescriptorResponse::MergeFrom(from._internal_get_account_descriptor_reply());
      break;
    }
    case kCreateBucketRequest: {
      _internal_mutable_create_bucket_request()->::kvstore::v1::CreateBucketRequest::MergeFrom(from._internal_create_bucket_request());
      break;
    }
    case kCreateBucketReply: {
      _internal_mutable_create_bucket_reply()->::kvstore::v1::CreateBucketResponse::MergeFrom(from._internal_create_bucket_reply());
      break;
    }
    case kDeleteBucketRequest: {
      _internal_mutable_delete_bucket_request()->::kvstore::v1::DeleteBucketRequest::MergeFrom(from._internal_delete_bucket_request());
      break;
    }
    case kDeleteBucketReply: {
      _internal_mutable_delete_bucket_reply()->::kvstore::v1::DeleteBucketResponse::MergeFrom(from._internal_delete_bucket_reply());
      break;
    }
    case kGetKeyRequest: {
      _internal_mutable_get_key_request()->::kvstore::v1::GetKeyRequest::MergeFrom(from._internal_get_key_request());
      break;
    }
    case kGetKeyReply: {
      _internal_mutable_get_key_reply()->::kvstore::v1::GetKeyResponse::MergeFrom(from._internal_get_key_reply());
      break;
    }
    case kPutKeyRequest: {
      _internal_mutable_put_key_request()->::kvstore::v1::PutKeyRequest::MergeFrom(from._internal_put_key_request());
      break;
    }
    case kPutKeyReply: {
      _internal_mutable_put_key_reply()->::kvstore::v1::PutKeyResponse::MergeFrom(from._internal_put_key_reply());
      break;
    }
    case kDeleteKeyRequest: {
      _internal_mutable_delete_key_request()->::kvstore::v1::DeleteKeyRequest::MergeFrom(from._internal_delete_key_request());
      break;
    }
    case kDeleteKeyReply: {
      _internal_mutable_delete_key_reply()->::kvstore::v1::DeleteKeyResponse::MergeFrom(from._internal_delete_key_reply());
      break;
    }
    case kGetBucketDescriptorRequest: {
      _internal_mutable_get_bucket_descriptor_request()->::kvstore::v1::GetBucketDescriptorRequest::MergeFrom(from._internal_get_bucket_descriptor_request());
      break;
    }
    case kGetBucketDescriptorReply: {
      _internal_mutable_get_bucket_descriptor_reply()->::kvstore::v1::GetBucketDescriptorResponse::MergeFrom(from._internal_get_bucket_descriptor_reply());
      break;
    }
    case kError: {
      _internal_mutable_error()->::errors::v1::Error::MergeFrom(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVStoreWrapper::CopyFrom(const KVStoreWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.KVStoreWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVStoreWrapper::IsInitialized() const {
  return true;
}

void KVStoreWrapper::InternalSwap(KVStoreWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_, lhs_arena,
      &other->bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVStoreWrapper, typ_)
      + sizeof(KVStoreWrapper::typ_)
      - PROTOBUF_FIELD_OFFSET(KVStoreWrapper, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVStoreWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[0]);
}

// ===================================================================

class CreateAccountRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CreateAccountRequest* msg);
};

const ::kvstore::v1::Transaction&
CreateAccountRequest::_Internal::transaction(const CreateAccountRequest* msg) {
  return *msg->transaction_;
}
void CreateAccountRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
CreateAccountRequest::CreateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CreateAccountRequest)
}
CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(from._internal_owner(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CreateAccountRequest)
}

inline void CreateAccountRequest::SharedCtor() {
owner_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(account_id_));
}

CreateAccountRequest::~CreateAccountRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CreateAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.Destroy();
  if (this != internal_default_instance()) delete transaction_;
}

void CreateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CreateAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.CreateAccountRequest.owner"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CreateAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.CreateAccountRequest.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CreateAccountRequest)
  return target;
}

size_t CreateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CreateAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountRequest::GetClassData() const { return &_class_data_; }

void CreateAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountRequest *>(to)->MergeFrom(
      static_cast<const CreateAccountRequest &>(from));
}


void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {
  return true;
}

void CreateAccountRequest::InternalSwap(CreateAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAccountRequest, account_id_)
      + sizeof(CreateAccountRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(CreateAccountRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[1]);
}

// ===================================================================

class CreateAccountResponse::_Internal {
 public:
  static const ::kvstore::v1::AccountDescriptor& account_descriptor(const CreateAccountResponse* msg);
  static const ::kvstore::v1::Transaction& transaction(const CreateAccountResponse* msg);
};

const ::kvstore::v1::AccountDescriptor&
CreateAccountResponse::_Internal::account_descriptor(const CreateAccountResponse* msg) {
  return *msg->account_descriptor_;
}
const ::kvstore::v1::Transaction&
CreateAccountResponse::_Internal::transaction(const CreateAccountResponse* msg) {
  return *msg->transaction_;
}
void CreateAccountResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
CreateAccountResponse::CreateAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CreateAccountResponse)
}
CreateAccountResponse::CreateAccountResponse(const CreateAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account_descriptor()) {
    account_descriptor_ = new ::kvstore::v1::AccountDescriptor(*from.account_descriptor_);
  } else {
    account_descriptor_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CreateAccountResponse)
}

inline void CreateAccountResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&account_descriptor_)) + sizeof(transaction_));
}

CreateAccountResponse::~CreateAccountResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CreateAccountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_descriptor_;
  if (this != internal_default_instance()) delete transaction_;
}

void CreateAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CreateAccountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_descriptor_ != nullptr) {
    delete account_descriptor_;
  }
  account_descriptor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CreateAccountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
  if (this->_internal_has_account_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account_descriptor(this),
        _Internal::account_descriptor(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CreateAccountResponse)
  return target;
}

size_t CreateAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CreateAccountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
  if (this->_internal_has_account_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_descriptor_);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountResponse::GetClassData() const { return &_class_data_; }

void CreateAccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountResponse *>(to)->MergeFrom(
      static_cast<const CreateAccountResponse &>(from));
}


void CreateAccountResponse::MergeFrom(const CreateAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CreateAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_descriptor()) {
    _internal_mutable_account_descriptor()->::kvstore::v1::AccountDescriptor::MergeFrom(from._internal_account_descriptor());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountResponse::CopyFrom(const CreateAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CreateAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountResponse::IsInitialized() const {
  return true;
}

void CreateAccountResponse::InternalSwap(CreateAccountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAccountResponse, transaction_)
      + sizeof(CreateAccountResponse::transaction_)
      - PROTOBUF_FIELD_OFFSET(CreateAccountResponse, account_descriptor_)>(
          reinterpret_cast<char*>(&account_descriptor_),
          reinterpret_cast<char*>(&other->account_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[2]);
}

// ===================================================================

class DeleteAccountRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteAccountRequest* msg);
};

const ::kvstore::v1::Transaction&
DeleteAccountRequest::_Internal::transaction(const DeleteAccountRequest* msg) {
  return *msg->transaction_;
}
void DeleteAccountRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteAccountRequest::DeleteAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteAccountRequest)
}
DeleteAccountRequest::DeleteAccountRequest(const DeleteAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(from._internal_owner(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteAccountRequest)
}

inline void DeleteAccountRequest::SharedCtor() {
owner_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(account_id_));
}

DeleteAccountRequest::~DeleteAccountRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.Destroy();
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.DeleteAccountRequest.owner"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.DeleteAccountRequest.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteAccountRequest)
  return target;
}

size_t DeleteAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAccountRequest::GetClassData() const { return &_class_data_; }

void DeleteAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAccountRequest *>(to)->MergeFrom(
      static_cast<const DeleteAccountRequest &>(from));
}


void DeleteAccountRequest::MergeFrom(const DeleteAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAccountRequest::CopyFrom(const DeleteAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccountRequest::IsInitialized() const {
  return true;
}

void DeleteAccountRequest::InternalSwap(DeleteAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteAccountRequest, account_id_)
      + sizeof(DeleteAccountRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteAccountRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[3]);
}

// ===================================================================

class DeleteAccountResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteAccountResponse* msg);
};

const ::kvstore::v1::Transaction&
DeleteAccountResponse::_Internal::transaction(const DeleteAccountResponse* msg) {
  return *msg->transaction_;
}
void DeleteAccountResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteAccountResponse::DeleteAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteAccountResponse)
}
DeleteAccountResponse::DeleteAccountResponse(const DeleteAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteAccountResponse)
}

inline void DeleteAccountResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(ok_));
}

DeleteAccountResponse::~DeleteAccountResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteAccountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteAccountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAccountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1 [json_name = "ok"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAccountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteAccountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteAccountResponse)
  return target;
}

size_t DeleteAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteAccountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAccountResponse::GetClassData() const { return &_class_data_; }

void DeleteAccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAccountResponse *>(to)->MergeFrom(
      static_cast<const DeleteAccountResponse &>(from));
}


void DeleteAccountResponse::MergeFrom(const DeleteAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAccountResponse::CopyFrom(const DeleteAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccountResponse::IsInitialized() const {
  return true;
}

void DeleteAccountResponse::InternalSwap(DeleteAccountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteAccountResponse, ok_)
      + sizeof(DeleteAccountResponse::ok_)
      - PROTOBUF_FIELD_OFFSET(DeleteAccountResponse, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAccountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[4]);
}

// ===================================================================

class GetAccountDescriptorRequest::_Internal {
 public:
};

GetAccountDescriptorRequest::GetAccountDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetAccountDescriptorRequest)
}
GetAccountDescriptorRequest::GetAccountDescriptorRequest(const GetAccountDescriptorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetAccountDescriptorRequest)
}

inline void GetAccountDescriptorRequest::SharedCtor() {
account_id_ = uint64_t{0u};
}

GetAccountDescriptorRequest::~GetAccountDescriptorRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetAccountDescriptorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDescriptorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetAccountDescriptorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountDescriptorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetAccountDescriptorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDescriptorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDescriptorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetAccountDescriptorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetAccountDescriptorRequest)
  return target;
}

size_t GetAccountDescriptorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetAccountDescriptorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDescriptorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountDescriptorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDescriptorRequest::GetClassData() const { return &_class_data_; }

void GetAccountDescriptorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountDescriptorRequest *>(to)->MergeFrom(
      static_cast<const GetAccountDescriptorRequest &>(from));
}


void GetAccountDescriptorRequest::MergeFrom(const GetAccountDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetAccountDescriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDescriptorRequest::CopyFrom(const GetAccountDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetAccountDescriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDescriptorRequest::IsInitialized() const {
  return true;
}

void GetAccountDescriptorRequest::InternalSwap(GetAccountDescriptorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDescriptorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[5]);
}

// ===================================================================

class GetAccountDescriptorResponse::_Internal {
 public:
  static const ::kvstore::v1::AccountDescriptor& account_descriptor(const GetAccountDescriptorResponse* msg);
};

const ::kvstore::v1::AccountDescriptor&
GetAccountDescriptorResponse::_Internal::account_descriptor(const GetAccountDescriptorResponse* msg) {
  return *msg->account_descriptor_;
}
GetAccountDescriptorResponse::GetAccountDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetAccountDescriptorResponse)
}
GetAccountDescriptorResponse::GetAccountDescriptorResponse(const GetAccountDescriptorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account_descriptor()) {
    account_descriptor_ = new ::kvstore::v1::AccountDescriptor(*from.account_descriptor_);
  } else {
    account_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetAccountDescriptorResponse)
}

inline void GetAccountDescriptorResponse::SharedCtor() {
account_descriptor_ = nullptr;
}

GetAccountDescriptorResponse::~GetAccountDescriptorResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetAccountDescriptorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDescriptorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_descriptor_;
}

void GetAccountDescriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetAccountDescriptorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_descriptor_ != nullptr) {
    delete account_descriptor_;
  }
  account_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDescriptorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDescriptorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetAccountDescriptorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
  if (this->_internal_has_account_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account_descriptor(this),
        _Internal::account_descriptor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetAccountDescriptorResponse)
  return target;
}

size_t GetAccountDescriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetAccountDescriptorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.AccountDescriptor account_descriptor = 1 [json_name = "accountDescriptor"];
  if (this->_internal_has_account_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_descriptor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDescriptorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountDescriptorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDescriptorResponse::GetClassData() const { return &_class_data_; }

void GetAccountDescriptorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountDescriptorResponse *>(to)->MergeFrom(
      static_cast<const GetAccountDescriptorResponse &>(from));
}


void GetAccountDescriptorResponse::MergeFrom(const GetAccountDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetAccountDescriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_descriptor()) {
    _internal_mutable_account_descriptor()->::kvstore::v1::AccountDescriptor::MergeFrom(from._internal_account_descriptor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDescriptorResponse::CopyFrom(const GetAccountDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetAccountDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDescriptorResponse::IsInitialized() const {
  return true;
}

void GetAccountDescriptorResponse::InternalSwap(GetAccountDescriptorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_descriptor_, other->account_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDescriptorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[6]);
}

// ===================================================================

class AccountDescriptor::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created(const AccountDescriptor* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const AccountDescriptor* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AccountDescriptor::_Internal::created(const AccountDescriptor* msg) {
  return *msg->created_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AccountDescriptor::_Internal::last_updated(const AccountDescriptor* msg) {
  return *msg->last_updated_;
}
void AccountDescriptor::clear_created() {
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void AccountDescriptor::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
AccountDescriptor::AccountDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buckets_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.AccountDescriptor)
}
AccountDescriptor::AccountDescriptor(const AccountDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(from._internal_owner(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created()) {
    created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_count_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(bucket_count_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.AccountDescriptor)
}

inline void AccountDescriptor::SharedCtor() {
owner_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bucket_count_) -
    reinterpret_cast<char*>(&created_)) + sizeof(bucket_count_));
}

AccountDescriptor::~AccountDescriptor() {
  // @@protoc_insertion_point(destructor:kvstore.v1.AccountDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.Destroy();
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete last_updated_;
}

void AccountDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.AccountDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_count_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(bucket_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.AccountDescriptor.owner"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 3 [json_name = "created"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 4 [json_name = "lastUpdated"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bucket_count = 5 [json_name = "bucketCount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string buckets = 6 [json_name = "buckets"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buckets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.AccountDescriptor.buckets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.AccountDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.AccountDescriptor.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // .google.protobuf.Timestamp created = 3 [json_name = "created"];
  if (this->_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_updated = 4 [json_name = "lastUpdated"];
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  // uint64 bucket_count = 5 [json_name = "bucketCount"];
  if (this->_internal_bucket_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bucket_count(), target);
  }

  // repeated string buckets = 6 [json_name = "buckets"];
  for (int i = 0, n = this->_internal_buckets_size(); i < n; i++) {
    const auto& s = this->_internal_buckets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.AccountDescriptor.buckets");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.AccountDescriptor)
  return target;
}

size_t AccountDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.AccountDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buckets = 6 [json_name = "buckets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buckets_.size());
  for (int i = 0, n = buckets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buckets_.Get(i));
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .google.protobuf.Timestamp created = 3 [json_name = "created"];
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp last_updated = 4 [json_name = "lastUpdated"];
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  // uint64 bucket_count = 5 [json_name = "bucketCount"];
  if (this->_internal_bucket_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bucket_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountDescriptor::GetClassData() const { return &_class_data_; }

void AccountDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountDescriptor *>(to)->MergeFrom(
      static_cast<const AccountDescriptor &>(from));
}


void AccountDescriptor::MergeFrom(const AccountDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.AccountDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_created()) {
    _internal_mutable_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from._internal_has_last_updated()) {
    _internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_bucket_count() != 0) {
    _internal_set_bucket_count(from._internal_bucket_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountDescriptor::CopyFrom(const AccountDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.AccountDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDescriptor::IsInitialized() const {
  return true;
}

void AccountDescriptor::InternalSwap(AccountDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buckets_.InternalSwap(&other->buckets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountDescriptor, bucket_count_)
      + sizeof(AccountDescriptor::bucket_count_)
      - PROTOBUF_FIELD_OFFSET(AccountDescriptor, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[7]);
}

// ===================================================================

class CreateBucketRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const CreateBucketRequest* msg);
};

const ::kvstore::v1::Transaction&
CreateBucketRequest::_Internal::transaction(const CreateBucketRequest* msg) {
  return *msg->transaction_;
}
void CreateBucketRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
CreateBucketRequest::CreateBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CreateBucketRequest)
}
CreateBucketRequest::CreateBucketRequest(const CreateBucketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(from._internal_owner(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CreateBucketRequest)
}

inline void CreateBucketRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(account_id_));
}

CreateBucketRequest::~CreateBucketRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CreateBucketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateBucketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  owner_.Destroy();
  if (this != internal_default_instance()) delete transaction_;
}

void CreateBucketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateBucketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CreateBucketRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBucketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.CreateBucketRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string owner = 3 [json_name = "owner"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.CreateBucketRequest.owner"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateBucketRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CreateBucketRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.CreateBucketRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.CreateBucketRequest.owner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner(), target);
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CreateBucketRequest)
  return target;
}

size_t CreateBucketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CreateBucketRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateBucketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateBucketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateBucketRequest::GetClassData() const { return &_class_data_; }

void CreateBucketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateBucketRequest *>(to)->MergeFrom(
      static_cast<const CreateBucketRequest &>(from));
}


void CreateBucketRequest::MergeFrom(const CreateBucketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CreateBucketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateBucketRequest::CopyFrom(const CreateBucketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CreateBucketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBucketRequest::IsInitialized() const {
  return true;
}

void CreateBucketRequest::InternalSwap(CreateBucketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateBucketRequest, account_id_)
      + sizeof(CreateBucketRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(CreateBucketRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBucketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[8]);
}

// ===================================================================

class CreateBucketResponse::_Internal {
 public:
  static const ::kvstore::v1::BucketDescriptor& bucket_descriptor(const CreateBucketResponse* msg);
  static const ::kvstore::v1::Transaction& transaction(const CreateBucketResponse* msg);
};

const ::kvstore::v1::BucketDescriptor&
CreateBucketResponse::_Internal::bucket_descriptor(const CreateBucketResponse* msg) {
  return *msg->bucket_descriptor_;
}
const ::kvstore::v1::Transaction&
CreateBucketResponse::_Internal::transaction(const CreateBucketResponse* msg) {
  return *msg->transaction_;
}
void CreateBucketResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
CreateBucketResponse::CreateBucketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.CreateBucketResponse)
}
CreateBucketResponse::CreateBucketResponse(const CreateBucketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bucket_descriptor()) {
    bucket_descriptor_ = new ::kvstore::v1::BucketDescriptor(*from.bucket_descriptor_);
  } else {
    bucket_descriptor_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.CreateBucketResponse)
}

inline void CreateBucketResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bucket_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&bucket_descriptor_)) + sizeof(transaction_));
}

CreateBucketResponse::~CreateBucketResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.CreateBucketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateBucketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bucket_descriptor_;
  if (this != internal_default_instance()) delete transaction_;
}

void CreateBucketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateBucketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.CreateBucketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bucket_descriptor_ != nullptr) {
    delete bucket_descriptor_;
  }
  bucket_descriptor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBucketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bucket_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateBucketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.CreateBucketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
  if (this->_internal_has_bucket_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bucket_descriptor(this),
        _Internal::bucket_descriptor(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.CreateBucketResponse)
  return target;
}

size_t CreateBucketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.CreateBucketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
  if (this->_internal_has_bucket_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bucket_descriptor_);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateBucketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateBucketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateBucketResponse::GetClassData() const { return &_class_data_; }

void CreateBucketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateBucketResponse *>(to)->MergeFrom(
      static_cast<const CreateBucketResponse &>(from));
}


void CreateBucketResponse::MergeFrom(const CreateBucketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.CreateBucketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bucket_descriptor()) {
    _internal_mutable_bucket_descriptor()->::kvstore::v1::BucketDescriptor::MergeFrom(from._internal_bucket_descriptor());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateBucketResponse::CopyFrom(const CreateBucketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.CreateBucketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBucketResponse::IsInitialized() const {
  return true;
}

void CreateBucketResponse::InternalSwap(CreateBucketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateBucketResponse, transaction_)
      + sizeof(CreateBucketResponse::transaction_)
      - PROTOBUF_FIELD_OFFSET(CreateBucketResponse, bucket_descriptor_)>(
          reinterpret_cast<char*>(&bucket_descriptor_),
          reinterpret_cast<char*>(&other->bucket_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBucketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[9]);
}

// ===================================================================

class DeleteBucketRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteBucketRequest* msg);
};

const ::kvstore::v1::Transaction&
DeleteBucketRequest::_Internal::transaction(const DeleteBucketRequest* msg) {
  return *msg->transaction_;
}
void DeleteBucketRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteBucketRequest::DeleteBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteBucketRequest)
}
DeleteBucketRequest::DeleteBucketRequest(const DeleteBucketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteBucketRequest)
}

inline void DeleteBucketRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(account_id_));
}

DeleteBucketRequest::~DeleteBucketRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteBucketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBucketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteBucketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBucketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteBucketRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBucketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.DeleteBucketRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBucketRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteBucketRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.DeleteBucketRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteBucketRequest)
  return target;
}

size_t DeleteBucketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteBucketRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBucketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBucketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBucketRequest::GetClassData() const { return &_class_data_; }

void DeleteBucketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBucketRequest *>(to)->MergeFrom(
      static_cast<const DeleteBucketRequest &>(from));
}


void DeleteBucketRequest::MergeFrom(const DeleteBucketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteBucketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBucketRequest::CopyFrom(const DeleteBucketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteBucketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBucketRequest::IsInitialized() const {
  return true;
}

void DeleteBucketRequest::InternalSwap(DeleteBucketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteBucketRequest, account_id_)
      + sizeof(DeleteBucketRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteBucketRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBucketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[10]);
}

// ===================================================================

class DeleteBucketResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteBucketResponse* msg);
};

const ::kvstore::v1::Transaction&
DeleteBucketResponse::_Internal::transaction(const DeleteBucketResponse* msg) {
  return *msg->transaction_;
}
void DeleteBucketResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteBucketResponse::DeleteBucketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteBucketResponse)
}
DeleteBucketResponse::DeleteBucketResponse(const DeleteBucketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteBucketResponse)
}

inline void DeleteBucketResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(ok_));
}

DeleteBucketResponse::~DeleteBucketResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteBucketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBucketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteBucketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBucketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteBucketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBucketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1 [json_name = "ok"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBucketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteBucketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteBucketResponse)
  return target;
}

size_t DeleteBucketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteBucketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 2 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBucketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBucketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBucketResponse::GetClassData() const { return &_class_data_; }

void DeleteBucketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBucketResponse *>(to)->MergeFrom(
      static_cast<const DeleteBucketResponse &>(from));
}


void DeleteBucketResponse::MergeFrom(const DeleteBucketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteBucketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBucketResponse::CopyFrom(const DeleteBucketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteBucketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBucketResponse::IsInitialized() const {
  return true;
}

void DeleteBucketResponse::InternalSwap(DeleteBucketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteBucketResponse, ok_)
      + sizeof(DeleteBucketResponse::ok_)
      - PROTOBUF_FIELD_OFFSET(DeleteBucketResponse, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBucketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[11]);
}

// ===================================================================

class BucketDescriptor::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created(const BucketDescriptor* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const BucketDescriptor* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BucketDescriptor::_Internal::created(const BucketDescriptor* msg) {
  return *msg->created_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BucketDescriptor::_Internal::last_updated(const BucketDescriptor* msg) {
  return *msg->last_updated_;
}
void BucketDescriptor::clear_created() {
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void BucketDescriptor::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
BucketDescriptor::BucketDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.BucketDescriptor)
}
BucketDescriptor::BucketDescriptor(const BucketDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(from._internal_owner(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created()) {
    created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_count_) -
    reinterpret_cast<char*>(&size_)) + sizeof(key_count_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.BucketDescriptor)
}

inline void BucketDescriptor::SharedCtor() {
owner_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_count_) -
    reinterpret_cast<char*>(&created_)) + sizeof(key_count_));
}

BucketDescriptor::~BucketDescriptor() {
  // @@protoc_insertion_point(destructor:kvstore.v1.BucketDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BucketDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.Destroy();
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete last_updated_;
}

void BucketDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.BucketDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_count_) -
      reinterpret_cast<char*>(&size_)) + sizeof(key_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.BucketDescriptor.owner"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2 [json_name = "size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key_count = 3 [json_name = "keyCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          key_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 4 [json_name = "created"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 5 [json_name = "lastUpdated"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BucketDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.BucketDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.BucketDescriptor.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // uint64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // uint64 key_count = 3 [json_name = "keyCount"];
  if (this->_internal_key_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_key_count(), target);
  }

  // .google.protobuf.Timestamp created = 4 [json_name = "created"];
  if (this->_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_updated = 5 [json_name = "lastUpdated"];
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.BucketDescriptor)
  return target;
}

size_t BucketDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.BucketDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .google.protobuf.Timestamp created = 4 [json_name = "created"];
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp last_updated = 5 [json_name = "lastUpdated"];
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // uint64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 key_count = 3 [json_name = "keyCount"];
  if (this->_internal_key_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_key_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketDescriptor::GetClassData() const { return &_class_data_; }

void BucketDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BucketDescriptor *>(to)->MergeFrom(
      static_cast<const BucketDescriptor &>(from));
}


void BucketDescriptor::MergeFrom(const BucketDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.BucketDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_created()) {
    _internal_mutable_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from._internal_has_last_updated()) {
    _internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_key_count() != 0) {
    _internal_set_key_count(from._internal_key_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketDescriptor::CopyFrom(const BucketDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.BucketDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketDescriptor::IsInitialized() const {
  return true;
}

void BucketDescriptor::InternalSwap(BucketDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketDescriptor, key_count_)
      + sizeof(BucketDescriptor::key_count_)
      - PROTOBUF_FIELD_OFFSET(BucketDescriptor, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[12]);
}

// ===================================================================

class GetBucketDescriptorRequest::_Internal {
 public:
};

GetBucketDescriptorRequest::GetBucketDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetBucketDescriptorRequest)
}
GetBucketDescriptorRequest::GetBucketDescriptorRequest(const GetBucketDescriptorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    bucket_name_.Set(from._internal_bucket_name(), 
      GetArenaForAllocation());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetBucketDescriptorRequest)
}

inline void GetBucketDescriptorRequest::SharedCtor() {
bucket_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_id_ = uint64_t{0u};
}

GetBucketDescriptorRequest::~GetBucketDescriptorRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetBucketDescriptorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBucketDescriptorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_name_.Destroy();
}

void GetBucketDescriptorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBucketDescriptorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetBucketDescriptorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_name_.ClearToEmpty();
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBucketDescriptorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 2 [json_name = "bucketName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.GetBucketDescriptorRequest.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBucketDescriptorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetBucketDescriptorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.GetBucketDescriptorRequest.bucket_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetBucketDescriptorRequest)
  return target;
}

size_t GetBucketDescriptorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetBucketDescriptorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBucketDescriptorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBucketDescriptorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBucketDescriptorRequest::GetClassData() const { return &_class_data_; }

void GetBucketDescriptorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBucketDescriptorRequest *>(to)->MergeFrom(
      static_cast<const GetBucketDescriptorRequest &>(from));
}


void GetBucketDescriptorRequest::MergeFrom(const GetBucketDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetBucketDescriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _internal_set_bucket_name(from._internal_bucket_name());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBucketDescriptorRequest::CopyFrom(const GetBucketDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetBucketDescriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBucketDescriptorRequest::IsInitialized() const {
  return true;
}

void GetBucketDescriptorRequest::InternalSwap(GetBucketDescriptorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_name_, lhs_arena,
      &other->bucket_name_, rhs_arena
  );
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBucketDescriptorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[13]);
}

// ===================================================================

class GetBucketDescriptorResponse::_Internal {
 public:
  static const ::kvstore::v1::BucketDescriptor& bucket_descriptor(const GetBucketDescriptorResponse* msg);
};

const ::kvstore::v1::BucketDescriptor&
GetBucketDescriptorResponse::_Internal::bucket_descriptor(const GetBucketDescriptorResponse* msg) {
  return *msg->bucket_descriptor_;
}
GetBucketDescriptorResponse::GetBucketDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetBucketDescriptorResponse)
}
GetBucketDescriptorResponse::GetBucketDescriptorResponse(const GetBucketDescriptorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bucket_descriptor()) {
    bucket_descriptor_ = new ::kvstore::v1::BucketDescriptor(*from.bucket_descriptor_);
  } else {
    bucket_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetBucketDescriptorResponse)
}

inline void GetBucketDescriptorResponse::SharedCtor() {
bucket_descriptor_ = nullptr;
}

GetBucketDescriptorResponse::~GetBucketDescriptorResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetBucketDescriptorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBucketDescriptorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bucket_descriptor_;
}

void GetBucketDescriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBucketDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetBucketDescriptorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bucket_descriptor_ != nullptr) {
    delete bucket_descriptor_;
  }
  bucket_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBucketDescriptorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bucket_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBucketDescriptorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetBucketDescriptorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
  if (this->_internal_has_bucket_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bucket_descriptor(this),
        _Internal::bucket_descriptor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetBucketDescriptorResponse)
  return target;
}

size_t GetBucketDescriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetBucketDescriptorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.BucketDescriptor bucket_descriptor = 1 [json_name = "bucketDescriptor"];
  if (this->_internal_has_bucket_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bucket_descriptor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBucketDescriptorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBucketDescriptorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBucketDescriptorResponse::GetClassData() const { return &_class_data_; }

void GetBucketDescriptorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBucketDescriptorResponse *>(to)->MergeFrom(
      static_cast<const GetBucketDescriptorResponse &>(from));
}


void GetBucketDescriptorResponse::MergeFrom(const GetBucketDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetBucketDescriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bucket_descriptor()) {
    _internal_mutable_bucket_descriptor()->::kvstore::v1::BucketDescriptor::MergeFrom(from._internal_bucket_descriptor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBucketDescriptorResponse::CopyFrom(const GetBucketDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetBucketDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBucketDescriptorResponse::IsInitialized() const {
  return true;
}

void GetBucketDescriptorResponse::InternalSwap(GetBucketDescriptorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bucket_descriptor_, other->bucket_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBucketDescriptorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[14]);
}

// ===================================================================

class GetKeyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetKeyRequest>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetKeyRequest::GetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetKeyRequest)
}
GetKeyRequest::GetKeyRequest(const GetKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    bucket_name_.Set(from._internal_bucket_name(), 
      GetArenaForAllocation());
  }
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetKeyRequest)
}

inline void GetKeyRequest::SharedCtor() {
bucket_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(version_));
}

GetKeyRequest::~GetKeyRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_name_.Destroy();
  key_.Destroy();
}

void GetKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_name_.ClearToEmpty();
  key_.ClearToEmpty();
  account_id_ = uint64_t{0u};
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 2 [json_name = "bucketName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.GetKeyRequest.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // string key = 3 [json_name = "key"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.GetKeyRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.GetKeyRequest.bucket_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket_name(), target);
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.GetKeyRequest.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional uint32 version = 4 [json_name = "version"];
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetKeyRequest)
  return target;
}

size_t GetKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  // optional uint32 version = 4 [json_name = "version"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyRequest::GetClassData() const { return &_class_data_; }

void GetKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetKeyRequest *>(to)->MergeFrom(
      static_cast<const GetKeyRequest &>(from));
}


void GetKeyRequest::MergeFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _internal_set_bucket_name(from._internal_bucket_name());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyRequest::CopyFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyRequest::IsInitialized() const {
  return true;
}

void GetKeyRequest::InternalSwap(GetKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_name_, lhs_arena,
      &other->bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetKeyRequest, version_)
      + sizeof(GetKeyRequest::version_)
      - PROTOBUF_FIELD_OFFSET(GetKeyRequest, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[15]);
}

// ===================================================================

class GetKeyResponse::_Internal {
 public:
  static const ::kvstore::v1::KeyValue& key_value_pair(const GetKeyResponse* msg);
};

const ::kvstore::v1::KeyValue&
GetKeyResponse::_Internal::key_value_pair(const GetKeyResponse* msg) {
  return *msg->key_value_pair_;
}
GetKeyResponse::GetKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.GetKeyResponse)
}
GetKeyResponse::GetKeyResponse(const GetKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_value_pair()) {
    key_value_pair_ = new ::kvstore::v1::KeyValue(*from.key_value_pair_);
  } else {
    key_value_pair_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.GetKeyResponse)
}

inline void GetKeyResponse::SharedCtor() {
key_value_pair_ = nullptr;
}

GetKeyResponse::~GetKeyResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.GetKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_value_pair_;
}

void GetKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.GetKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_value_pair_ != nullptr) {
    delete key_value_pair_;
  }
  key_value_pair_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.KeyValue key_value_pair = 1 [json_name = "keyValuePair"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_value_pair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.GetKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.KeyValue key_value_pair = 1 [json_name = "keyValuePair"];
  if (this->_internal_has_key_value_pair()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_value_pair(this),
        _Internal::key_value_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.GetKeyResponse)
  return target;
}

size_t GetKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.GetKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.KeyValue key_value_pair = 1 [json_name = "keyValuePair"];
  if (this->_internal_has_key_value_pair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_value_pair_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyResponse::GetClassData() const { return &_class_data_; }

void GetKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetKeyResponse *>(to)->MergeFrom(
      static_cast<const GetKeyResponse &>(from));
}


void GetKeyResponse::MergeFrom(const GetKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.GetKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_value_pair()) {
    _internal_mutable_key_value_pair()->::kvstore::v1::KeyValue::MergeFrom(from._internal_key_value_pair());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyResponse::CopyFrom(const GetKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.GetKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyResponse::IsInitialized() const {
  return true;
}

void GetKeyResponse::InternalSwap(GetKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_value_pair_, other->key_value_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[16]);
}

// ===================================================================

class PutKeyRequest::_Internal {
 public:
  static const ::kvstore::v1::KeyValue& key_value_pair(const PutKeyRequest* msg);
  static const ::kvstore::v1::Transaction& transaction(const PutKeyRequest* msg);
};

const ::kvstore::v1::KeyValue&
PutKeyRequest::_Internal::key_value_pair(const PutKeyRequest* msg) {
  return *msg->key_value_pair_;
}
const ::kvstore::v1::Transaction&
PutKeyRequest::_Internal::transaction(const PutKeyRequest* msg) {
  return *msg->transaction_;
}
void PutKeyRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
PutKeyRequest::PutKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.PutKeyRequest)
}
PutKeyRequest::PutKeyRequest(const PutKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    bucket_name_.Set(from._internal_bucket_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_key_value_pair()) {
    key_value_pair_ = new ::kvstore::v1::KeyValue(*from.key_value_pair_);
  } else {
    key_value_pair_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.PutKeyRequest)
}

inline void PutKeyRequest::SharedCtor() {
bucket_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_value_pair_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&key_value_pair_)) + sizeof(account_id_));
}

PutKeyRequest::~PutKeyRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.PutKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_name_.Destroy();
  if (this != internal_default_instance()) delete key_value_pair_;
  if (this != internal_default_instance()) delete transaction_;
}

void PutKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.PutKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && key_value_pair_ != nullptr) {
    delete key_value_pair_;
  }
  key_value_pair_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 2 [json_name = "bucketName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.PutKeyRequest.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.KeyValue key_value_pair = 3 [json_name = "keyValuePair"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_value_pair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.PutKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.PutKeyRequest.bucket_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket_name(), target);
  }

  // .kvstore.v1.KeyValue key_value_pair = 3 [json_name = "keyValuePair"];
  if (this->_internal_has_key_value_pair()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key_value_pair(this),
        _Internal::key_value_pair(this).GetCachedSize(), target, stream);
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.PutKeyRequest)
  return target;
}

size_t PutKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.PutKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // .kvstore.v1.KeyValue key_value_pair = 3 [json_name = "keyValuePair"];
  if (this->_internal_has_key_value_pair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_value_pair_);
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PutKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutKeyRequest::GetClassData() const { return &_class_data_; }

void PutKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PutKeyRequest *>(to)->MergeFrom(
      static_cast<const PutKeyRequest &>(from));
}


void PutKeyRequest::MergeFrom(const PutKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.PutKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _internal_set_bucket_name(from._internal_bucket_name());
  }
  if (from._internal_has_key_value_pair()) {
    _internal_mutable_key_value_pair()->::kvstore::v1::KeyValue::MergeFrom(from._internal_key_value_pair());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutKeyRequest::CopyFrom(const PutKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.PutKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutKeyRequest::IsInitialized() const {
  return true;
}

void PutKeyRequest::InternalSwap(PutKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_name_, lhs_arena,
      &other->bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutKeyRequest, account_id_)
      + sizeof(PutKeyRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(PutKeyRequest, key_value_pair_)>(
          reinterpret_cast<char*>(&key_value_pair_),
          reinterpret_cast<char*>(&other->key_value_pair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[17]);
}

// ===================================================================

class PutKeyResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const PutKeyResponse* msg);
};

const ::kvstore::v1::Transaction&
PutKeyResponse::_Internal::transaction(const PutKeyResponse* msg) {
  return *msg->transaction_;
}
void PutKeyResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
PutKeyResponse::PutKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.PutKeyResponse)
}
PutKeyResponse::PutKeyResponse(const PutKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.PutKeyResponse)
}

inline void PutKeyResponse::SharedCtor() {
transaction_ = nullptr;
}

PutKeyResponse::~PutKeyResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.PutKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void PutKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.PutKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.PutKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.PutKeyResponse)
  return target;
}

size_t PutKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.PutKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PutKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutKeyResponse::GetClassData() const { return &_class_data_; }

void PutKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PutKeyResponse *>(to)->MergeFrom(
      static_cast<const PutKeyResponse &>(from));
}


void PutKeyResponse::MergeFrom(const PutKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.PutKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutKeyResponse::CopyFrom(const PutKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.PutKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutKeyResponse::IsInitialized() const {
  return true;
}

void PutKeyResponse::InternalSwap(PutKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[18]);
}

// ===================================================================

class DeleteKeyRequest::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteKeyRequest* msg);
};

const ::kvstore::v1::Transaction&
DeleteKeyRequest::_Internal::transaction(const DeleteKeyRequest* msg) {
  return *msg->transaction_;
}
void DeleteKeyRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteKeyRequest::DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteKeyRequest)
}
DeleteKeyRequest::DeleteKeyRequest(const DeleteKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    bucket_name_.Set(from._internal_bucket_name(), 
      GetArenaForAllocation());
  }
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteKeyRequest)
}

inline void DeleteKeyRequest::SharedCtor() {
bucket_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(account_id_));
}

DeleteKeyRequest::~DeleteKeyRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_name_.Destroy();
  key_.Destroy();
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_name_.ClearToEmpty();
  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1 [json_name = "accountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 2 [json_name = "bucketName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.DeleteKeyRequest.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // string key = 3 [json_name = "key"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kvstore.v1.DeleteKeyRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.DeleteKeyRequest.bucket_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket_name(), target);
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvstore.v1.DeleteKeyRequest.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteKeyRequest)
  return target;
}

size_t DeleteKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 2 [json_name = "bucketName"];
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .kvstore.v1.Transaction transaction = 4 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 account_id = 1 [json_name = "accountId"];
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyRequest::GetClassData() const { return &_class_data_; }

void DeleteKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteKeyRequest *>(to)->MergeFrom(
      static_cast<const DeleteKeyRequest &>(from));
}


void DeleteKeyRequest::MergeFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _internal_set_bucket_name(from._internal_bucket_name());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKeyRequest::CopyFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyRequest::IsInitialized() const {
  return true;
}

void DeleteKeyRequest::InternalSwap(DeleteKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_name_, lhs_arena,
      &other->bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteKeyRequest, account_id_)
      + sizeof(DeleteKeyRequest::account_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteKeyRequest, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[19]);
}

// ===================================================================

class DeleteKeyResponse::_Internal {
 public:
  static const ::kvstore::v1::Transaction& transaction(const DeleteKeyResponse* msg);
};

const ::kvstore::v1::Transaction&
DeleteKeyResponse::_Internal::transaction(const DeleteKeyResponse* msg) {
  return *msg->transaction_;
}
void DeleteKeyResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
DeleteKeyResponse::DeleteKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.DeleteKeyResponse)
}
DeleteKeyResponse::DeleteKeyResponse(const DeleteKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::kvstore::v1::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.DeleteKeyResponse)
}

inline void DeleteKeyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(ok_));
}

DeleteKeyResponse::~DeleteKeyResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.DeleteKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void DeleteKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.DeleteKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1 [json_name = "ok"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.DeleteKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transaction(this),
        _Internal::transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.DeleteKeyResponse)
  return target;
}

size_t DeleteKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.DeleteKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.Transaction transaction = 3 [json_name = "transaction"];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // bool ok = 1 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyResponse::GetClassData() const { return &_class_data_; }

void DeleteKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteKeyResponse *>(to)->MergeFrom(
      static_cast<const DeleteKeyResponse &>(from));
}


void DeleteKeyResponse::MergeFrom(const DeleteKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.DeleteKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::kvstore::v1::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKeyResponse::CopyFrom(const DeleteKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.DeleteKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyResponse::IsInitialized() const {
  return true;
}

void DeleteKeyResponse::InternalSwap(DeleteKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteKeyResponse, ok_)
      + sizeof(DeleteKeyResponse::ok_)
      - PROTOBUF_FIELD_OFFSET(DeleteKeyResponse, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[20]);
}

// ===================================================================

class KeyValueDescriptor::_Internal {
 public:
};

KeyValueDescriptor::KeyValueDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  versions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.KeyValueDescriptor)
}
KeyValueDescriptor::KeyValueDescriptor(const KeyValueDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_key().empty()) {
    current_key_.Set(from._internal_current_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.KeyValueDescriptor)
}

inline void KeyValueDescriptor::SharedCtor() {
current_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyValueDescriptor::~KeyValueDescriptor() {
  // @@protoc_insertion_point(destructor:kvstore.v1.KeyValueDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyValueDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_key_.Destroy();
}

void KeyValueDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValueDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.KeyValueDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  current_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValueDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 versions = 1 [json_name = "versions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes current_key = 2 [json_name = "currentKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_current_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyValueDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.KeyValueDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 versions = 1 [json_name = "versions"];
  {
    int byte_size = _versions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_versions(), byte_size, target);
    }
  }

  // bytes current_key = 2 [json_name = "currentKey"];
  if (!this->_internal_current_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_current_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.KeyValueDescriptor)
  return target;
}

size_t KeyValueDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.KeyValueDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 versions = 1 [json_name = "versions"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes current_key = 2 [json_name = "currentKey"];
  if (!this->_internal_current_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_current_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValueDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyValueDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValueDescriptor::GetClassData() const { return &_class_data_; }

void KeyValueDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyValueDescriptor *>(to)->MergeFrom(
      static_cast<const KeyValueDescriptor &>(from));
}


void KeyValueDescriptor::MergeFrom(const KeyValueDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.KeyValueDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  if (!from._internal_current_key().empty()) {
    _internal_set_current_key(from._internal_current_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValueDescriptor::CopyFrom(const KeyValueDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.KeyValueDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueDescriptor::IsInitialized() const {
  return true;
}

void KeyValueDescriptor::InternalSwap(KeyValueDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &current_key_, lhs_arena,
      &other->current_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValueDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[21]);
}

// ===================================================================

class ListKeyVersionsRequest::_Internal {
 public:
};

ListKeyVersionsRequest::ListKeyVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.ListKeyVersionsRequest)
}
ListKeyVersionsRequest::ListKeyVersionsRequest(const ListKeyVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.ListKeyVersionsRequest)
}

inline void ListKeyVersionsRequest::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListKeyVersionsRequest::~ListKeyVersionsRequest() {
  // @@protoc_insertion_point(destructor:kvstore.v1.ListKeyVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListKeyVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
}

void ListKeyVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListKeyVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.ListKeyVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKeyVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKeyVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.ListKeyVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.ListKeyVersionsRequest)
  return target;
}

size_t ListKeyVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.ListKeyVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKeyVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListKeyVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKeyVersionsRequest::GetClassData() const { return &_class_data_; }

void ListKeyVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListKeyVersionsRequest *>(to)->MergeFrom(
      static_cast<const ListKeyVersionsRequest &>(from));
}


void ListKeyVersionsRequest::MergeFrom(const ListKeyVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.ListKeyVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKeyVersionsRequest::CopyFrom(const ListKeyVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.ListKeyVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeyVersionsRequest::IsInitialized() const {
  return true;
}

void ListKeyVersionsRequest::InternalSwap(ListKeyVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeyVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[22]);
}

// ===================================================================

class ListKeyVersionsResponse::_Internal {
 public:
};

ListKeyVersionsResponse::ListKeyVersionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  versions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.ListKeyVersionsResponse)
}
ListKeyVersionsResponse::ListKeyVersionsResponse(const ListKeyVersionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.ListKeyVersionsResponse)
}

inline void ListKeyVersionsResponse::SharedCtor() {
}

ListKeyVersionsResponse::~ListKeyVersionsResponse() {
  // @@protoc_insertion_point(destructor:kvstore.v1.ListKeyVersionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListKeyVersionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListKeyVersionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListKeyVersionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.ListKeyVersionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKeyVersionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 versions = 1 [json_name = "versions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKeyVersionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.ListKeyVersionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 versions = 1 [json_name = "versions"];
  {
    int byte_size = _versions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_versions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.ListKeyVersionsResponse)
  return target;
}

size_t ListKeyVersionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.ListKeyVersionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 versions = 1 [json_name = "versions"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKeyVersionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListKeyVersionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKeyVersionsResponse::GetClassData() const { return &_class_data_; }

void ListKeyVersionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListKeyVersionsResponse *>(to)->MergeFrom(
      static_cast<const ListKeyVersionsResponse &>(from));
}


void ListKeyVersionsResponse::MergeFrom(const ListKeyVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.ListKeyVersionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKeyVersionsResponse::CopyFrom(const ListKeyVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.ListKeyVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeyVersionsResponse::IsInitialized() const {
  return true;
}

void ListKeyVersionsResponse::InternalSwap(ListKeyVersionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeyVersionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[23]);
}

// ===================================================================

class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&create_revision_, &from.create_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&create_revision_)) + sizeof(lease_));
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.KeyValue)
}

inline void KeyValue::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&create_revision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&create_revision_)) + sizeof(lease_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:kvstore.v1.KeyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.KeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&create_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&create_revision_)) + sizeof(lease_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_revision = 2 [json_name = "createRevision"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          create_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mod_revision = 3 [json_name = "modRevision"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mod_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 5 [json_name = "value"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lease = 6 [json_name = "lease"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.KeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 create_revision = 2 [json_name = "createRevision"];
  if (this->_internal_create_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_create_revision(), target);
  }

  // int64 mod_revision = 3 [json_name = "modRevision"];
  if (this->_internal_mod_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mod_revision(), target);
  }

  // uint64 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_version(), target);
  }

  // bytes value = 5 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_value(), target);
  }

  // int64 lease = 6 [json_name = "lease"];
  if (this->_internal_lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_lease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.KeyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 5 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int64 create_revision = 2 [json_name = "createRevision"];
  if (this->_internal_create_revision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_revision());
  }

  // int64 mod_revision = 3 [json_name = "modRevision"];
  if (this->_internal_mod_revision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mod_revision());
  }

  // uint64 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
  }

  // int64 lease = 6 [json_name = "lease"];
  if (this->_internal_lease() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lease());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValue::GetClassData() const { return &_class_data_; }

void KeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyValue *>(to)->MergeFrom(
      static_cast<const KeyValue &>(from));
}


void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_create_revision() != 0) {
    _internal_set_create_revision(from._internal_create_revision());
  }
  if (from._internal_mod_revision() != 0) {
    _internal_set_mod_revision(from._internal_mod_revision());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyValue, lease_)
      + sizeof(KeyValue::lease_)
      - PROTOBUF_FIELD_OFFSET(KeyValue, create_revision_)>(
          reinterpret_cast<char*>(&create_revision_),
          reinterpret_cast<char*>(&other->create_revision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[24]);
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static const ::kvstore::v1::KeyValue& kv(const Event* msg);
  static const ::kvstore::v1::KeyValue& prev_kv(const Event* msg);
  static void set_has_prev_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kvstore::v1::KeyValue&
Event::_Internal::kv(const Event* msg) {
  return *msg->kv_;
}
const ::kvstore::v1::KeyValue&
Event::_Internal::prev_kv(const Event* msg) {
  return *msg->prev_kv_;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kvstore.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    kv_ = new ::kvstore::v1::KeyValue(*from.kv_);
  } else {
    kv_ = nullptr;
  }
  if (from._internal_has_prev_kv()) {
    prev_kv_ = new ::kvstore::v1::KeyValue(*from.prev_kv_);
  } else {
    prev_kv_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kvstore.v1.Event)
}

inline void Event::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&kv_)) + sizeof(type_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:kvstore.v1.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kv_;
  if (this != internal_default_instance()) delete prev_kv_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:kvstore.v1.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && kv_ != nullptr) {
    delete kv_;
  }
  kv_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prev_kv_ != nullptr);
    prev_kv_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kvstore.v1.KeyOperationType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kvstore::v1::KeyOperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kvstore.v1.KeyValue kv = 2 [json_name = "kv"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvstore.v1.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvstore.v1.KeyOperationType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .kvstore.v1.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  // optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];
  if (_internal_has_prev_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prev_kv(this),
        _Internal::prev_kv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvstore.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvstore.v1.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvstore.v1.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kv_);
  }

  // optional .kvstore.v1.KeyValue prev_kv = 3 [json_name = "prevKv"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_kv_);
  }

  // .kvstore.v1.KeyOperationType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvstore.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _internal_mutable_kv()->::kvstore::v1::KeyValue::MergeFrom(from._internal_kv());
  }
  if (from._internal_has_prev_kv()) {
    _internal_mutable_prev_kv()->::kvstore::v1::KeyValue::MergeFrom(from._internal_prev_kv());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvstore.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, type_)
      + sizeof(Event::type_)
      - PROTOBUF_FIELD_OFFSET(Event, kv_)>(
          reinterpret_cast<char*>(&kv_),
          reinterpret_cast<char*>(&other->kv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2fv1_2fkv_2eproto_getter, &descriptor_table_kvstore_2fv1_2fkv_2eproto_once,
      file_level_metadata_kvstore_2fv1_2fkv_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace kvstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kvstore::v1::KVStoreWrapper*
Arena::CreateMaybeMessage< ::kvstore::v1::KVStoreWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::KVStoreWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CreateAccountRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::CreateAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CreateAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CreateAccountResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::CreateAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CreateAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteAccountRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteAccountResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetAccountDescriptorRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::GetAccountDescriptorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetAccountDescriptorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetAccountDescriptorResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::GetAccountDescriptorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetAccountDescriptorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::AccountDescriptor*
Arena::CreateMaybeMessage< ::kvstore::v1::AccountDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::AccountDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CreateBucketRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::CreateBucketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CreateBucketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::CreateBucketResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::CreateBucketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::CreateBucketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteBucketRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteBucketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteBucketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteBucketResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteBucketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteBucketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::BucketDescriptor*
Arena::CreateMaybeMessage< ::kvstore::v1::BucketDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::BucketDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetBucketDescriptorRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::GetBucketDescriptorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetBucketDescriptorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetBucketDescriptorResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::GetBucketDescriptorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetBucketDescriptorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetKeyRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::GetKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::GetKeyResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::GetKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::GetKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::PutKeyRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::PutKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::PutKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::PutKeyResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::PutKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::PutKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteKeyRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::DeleteKeyResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::DeleteKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::DeleteKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::KeyValueDescriptor*
Arena::CreateMaybeMessage< ::kvstore::v1::KeyValueDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::KeyValueDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::ListKeyVersionsRequest*
Arena::CreateMaybeMessage< ::kvstore::v1::ListKeyVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::ListKeyVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::ListKeyVersionsResponse*
Arena::CreateMaybeMessage< ::kvstore::v1::ListKeyVersionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::ListKeyVersionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::KeyValue*
Arena::CreateMaybeMessage< ::kvstore::v1::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::kvstore::v1::Event*
Arena::CreateMaybeMessage< ::kvstore::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvstore::v1::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
