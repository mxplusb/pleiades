// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvstore/v1/transactions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvstore_2fv1_2ftransactions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvstore_2fv1_2ftransactions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvstore_2fv1_2ftransactions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvstore_2fv1_2ftransactions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvstore_2fv1_2ftransactions_2eproto;
namespace kvstore {
namespace v1 {
class CloseTransactionRequest;
struct CloseTransactionRequestDefaultTypeInternal;
extern CloseTransactionRequestDefaultTypeInternal _CloseTransactionRequest_default_instance_;
class CloseTransactionResponse;
struct CloseTransactionResponseDefaultTypeInternal;
extern CloseTransactionResponseDefaultTypeInternal _CloseTransactionResponse_default_instance_;
class CommitRequest;
struct CommitRequestDefaultTypeInternal;
extern CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
class CommitResponse;
struct CommitResponseDefaultTypeInternal;
extern CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
class NewTransactionRequest;
struct NewTransactionRequestDefaultTypeInternal;
extern NewTransactionRequestDefaultTypeInternal _NewTransactionRequest_default_instance_;
class NewTransactionResponse;
struct NewTransactionResponseDefaultTypeInternal;
extern NewTransactionResponseDefaultTypeInternal _NewTransactionResponse_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace v1
}  // namespace kvstore
PROTOBUF_NAMESPACE_OPEN
template<> ::kvstore::v1::CloseTransactionRequest* Arena::CreateMaybeMessage<::kvstore::v1::CloseTransactionRequest>(Arena*);
template<> ::kvstore::v1::CloseTransactionResponse* Arena::CreateMaybeMessage<::kvstore::v1::CloseTransactionResponse>(Arena*);
template<> ::kvstore::v1::CommitRequest* Arena::CreateMaybeMessage<::kvstore::v1::CommitRequest>(Arena*);
template<> ::kvstore::v1::CommitResponse* Arena::CreateMaybeMessage<::kvstore::v1::CommitResponse>(Arena*);
template<> ::kvstore::v1::NewTransactionRequest* Arena::CreateMaybeMessage<::kvstore::v1::NewTransactionRequest>(Arena*);
template<> ::kvstore::v1::NewTransactionResponse* Arena::CreateMaybeMessage<::kvstore::v1::NewTransactionResponse>(Arena*);
template<> ::kvstore::v1::Transaction* Arena::CreateMaybeMessage<::kvstore::v1::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kvstore {
namespace v1 {

// ===================================================================

class CloseTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.CloseTransactionRequest) */ {
 public:
  inline CloseTransactionRequest() : CloseTransactionRequest(nullptr) {}
  ~CloseTransactionRequest() override;
  explicit PROTOBUF_CONSTEXPR CloseTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseTransactionRequest(const CloseTransactionRequest& from);
  CloseTransactionRequest(CloseTransactionRequest&& from) noexcept
    : CloseTransactionRequest() {
    *this = ::std::move(from);
  }

  inline CloseTransactionRequest& operator=(const CloseTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseTransactionRequest& operator=(CloseTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CloseTransactionRequest*>(
               &_CloseTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloseTransactionRequest& a, CloseTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseTransactionRequest& from) {
    CloseTransactionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseTransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.CloseTransactionRequest";
  }
  protected:
  explicit CloseTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::kvstore::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::kvstore::v1::Transaction* release_transaction();
  ::kvstore::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::kvstore::v1::Transaction* transaction);
  private:
  const ::kvstore::v1::Transaction& _internal_transaction() const;
  ::kvstore::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::kvstore::v1::Transaction* transaction);
  ::kvstore::v1::Transaction* unsafe_arena_release_transaction();

  // int64 timeout = 2 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kvstore.v1.CloseTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kvstore::v1::Transaction* transaction_;
    int64_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class CloseTransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.CloseTransactionResponse) */ {
 public:
  inline CloseTransactionResponse() : CloseTransactionResponse(nullptr) {}
  ~CloseTransactionResponse() override;
  explicit PROTOBUF_CONSTEXPR CloseTransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseTransactionResponse(const CloseTransactionResponse& from);
  CloseTransactionResponse(CloseTransactionResponse&& from) noexcept
    : CloseTransactionResponse() {
    *this = ::std::move(from);
  }

  inline CloseTransactionResponse& operator=(const CloseTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseTransactionResponse& operator=(CloseTransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseTransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const CloseTransactionResponse*>(
               &_CloseTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CloseTransactionResponse& a, CloseTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseTransactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseTransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseTransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseTransactionResponse& from) {
    CloseTransactionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseTransactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.CloseTransactionResponse";
  }
  protected:
  explicit CloseTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::kvstore::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::kvstore::v1::Transaction* release_transaction();
  ::kvstore::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::kvstore::v1::Transaction* transaction);
  private:
  const ::kvstore::v1::Transaction& _internal_transaction() const;
  ::kvstore::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::kvstore::v1::Transaction* transaction);
  ::kvstore::v1::Transaction* unsafe_arena_release_transaction();

  // int64 timeout = 2 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kvstore.v1.CloseTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kvstore::v1::Transaction* transaction_;
    int64_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class CommitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.CommitRequest) */ {
 public:
  inline CommitRequest() : CommitRequest(nullptr) {}
  ~CommitRequest() override;
  explicit PROTOBUF_CONSTEXPR CommitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitRequest(const CommitRequest& from);
  CommitRequest(CommitRequest&& from) noexcept
    : CommitRequest() {
    *this = ::std::move(from);
  }

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitRequest& operator=(CommitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitRequest* internal_default_instance() {
    return reinterpret_cast<const CommitRequest*>(
               &_CommitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommitRequest& a, CommitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitRequest& from) {
    CommitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.CommitRequest";
  }
  protected:
  explicit CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::kvstore::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::kvstore::v1::Transaction* release_transaction();
  ::kvstore::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::kvstore::v1::Transaction* transaction);
  private:
  const ::kvstore::v1::Transaction& _internal_transaction() const;
  ::kvstore::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::kvstore::v1::Transaction* transaction);
  ::kvstore::v1::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:kvstore.v1.CommitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kvstore::v1::Transaction* transaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class CommitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.CommitResponse) */ {
 public:
  inline CommitResponse() : CommitResponse(nullptr) {}
  ~CommitResponse() override;
  explicit PROTOBUF_CONSTEXPR CommitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitResponse(const CommitResponse& from);
  CommitResponse(CommitResponse&& from) noexcept
    : CommitResponse() {
    *this = ::std::move(from);
  }

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitResponse& operator=(CommitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitResponse* internal_default_instance() {
    return reinterpret_cast<const CommitResponse*>(
               &_CommitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommitResponse& a, CommitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitResponse& from) {
    CommitResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.CommitResponse";
  }
  protected:
  explicit CommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::kvstore::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::kvstore::v1::Transaction* release_transaction();
  ::kvstore::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::kvstore::v1::Transaction* transaction);
  private:
  const ::kvstore::v1::Transaction& _internal_transaction() const;
  ::kvstore::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::kvstore::v1::Transaction* transaction);
  ::kvstore::v1::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:kvstore.v1.CommitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kvstore::v1::Transaction* transaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit PROTOBUF_CONSTEXPR Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transaction& from) {
    Transaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kRespondedToFieldNumber = 4,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 client_id = 2 [json_name = "clientId"];
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // uint64 transaction_id = 3 [json_name = "transactionId"];
  void clear_transaction_id();
  uint64_t transaction_id() const;
  void set_transaction_id(uint64_t value);
  private:
  uint64_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint64_t value);
  public:

  // uint64 responded_to = 4 [json_name = "respondedTo"];
  void clear_responded_to();
  uint64_t responded_to() const;
  void set_responded_to(uint64_t value);
  private:
  uint64_t _internal_responded_to() const;
  void _internal_set_responded_to(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kvstore.v1.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t client_id_;
    uint64_t transaction_id_;
    uint64_t responded_to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class NewTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.NewTransactionRequest) */ {
 public:
  inline NewTransactionRequest() : NewTransactionRequest(nullptr) {}
  ~NewTransactionRequest() override;
  explicit PROTOBUF_CONSTEXPR NewTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewTransactionRequest(const NewTransactionRequest& from);
  NewTransactionRequest(NewTransactionRequest&& from) noexcept
    : NewTransactionRequest() {
    *this = ::std::move(from);
  }

  inline NewTransactionRequest& operator=(const NewTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTransactionRequest& operator=(NewTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const NewTransactionRequest*>(
               &_NewTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NewTransactionRequest& a, NewTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewTransactionRequest& from) {
    NewTransactionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.NewTransactionRequest";
  }
  protected:
  explicit NewTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 client_id = 2 [json_name = "clientId"];
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kvstore.v1.NewTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// -------------------------------------------------------------------

class NewTransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvstore.v1.NewTransactionResponse) */ {
 public:
  inline NewTransactionResponse() : NewTransactionResponse(nullptr) {}
  ~NewTransactionResponse() override;
  explicit PROTOBUF_CONSTEXPR NewTransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewTransactionResponse(const NewTransactionResponse& from);
  NewTransactionResponse(NewTransactionResponse&& from) noexcept
    : NewTransactionResponse() {
    *this = ::std::move(from);
  }

  inline NewTransactionResponse& operator=(const NewTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTransactionResponse& operator=(NewTransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewTransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const NewTransactionResponse*>(
               &_NewTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NewTransactionResponse& a, NewTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewTransactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewTransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewTransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewTransactionResponse& from) {
    NewTransactionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTransactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvstore.v1.NewTransactionResponse";
  }
  protected:
  explicit NewTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::kvstore::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::kvstore::v1::Transaction* release_transaction();
  ::kvstore::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::kvstore::v1::Transaction* transaction);
  private:
  const ::kvstore::v1::Transaction& _internal_transaction() const;
  ::kvstore::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::kvstore::v1::Transaction* transaction);
  ::kvstore::v1::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:kvstore.v1.NewTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kvstore::v1::Transaction* transaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvstore_2fv1_2ftransactions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloseTransactionRequest

// .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
inline bool CloseTransactionRequest::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool CloseTransactionRequest::has_transaction() const {
  return _internal_has_transaction();
}
inline void CloseTransactionRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_ != nullptr) {
    delete _impl_.transaction_;
  }
  _impl_.transaction_ = nullptr;
}
inline const ::kvstore::v1::Transaction& CloseTransactionRequest::_internal_transaction() const {
  const ::kvstore::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvstore::v1::Transaction&>(
      ::kvstore::v1::_Transaction_default_instance_);
}
inline const ::kvstore::v1::Transaction& CloseTransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CloseTransactionRequest.transaction)
  return _internal_transaction();
}
inline void CloseTransactionRequest::unsafe_arena_set_allocated_transaction(
    ::kvstore::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvstore.v1.CloseTransactionRequest.transaction)
}
inline ::kvstore::v1::Transaction* CloseTransactionRequest::release_transaction() {
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kvstore::v1::Transaction* CloseTransactionRequest::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:kvstore.v1.CloseTransactionRequest.transaction)
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::kvstore::v1::Transaction* CloseTransactionRequest::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvstore::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::kvstore::v1::Transaction* CloseTransactionRequest::mutable_transaction() {
  ::kvstore::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:kvstore.v1.CloseTransactionRequest.transaction)
  return _msg;
}
inline void CloseTransactionRequest::set_allocated_transaction(::kvstore::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.CloseTransactionRequest.transaction)
}

// int64 timeout = 2 [json_name = "timeout"];
inline void CloseTransactionRequest::clear_timeout() {
  _impl_.timeout_ = int64_t{0};
}
inline int64_t CloseTransactionRequest::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int64_t CloseTransactionRequest::timeout() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CloseTransactionRequest.timeout)
  return _internal_timeout();
}
inline void CloseTransactionRequest::_internal_set_timeout(int64_t value) {
  
  _impl_.timeout_ = value;
}
inline void CloseTransactionRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.CloseTransactionRequest.timeout)
}

// -------------------------------------------------------------------

// CloseTransactionResponse

// .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
inline bool CloseTransactionResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool CloseTransactionResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline void CloseTransactionResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_ != nullptr) {
    delete _impl_.transaction_;
  }
  _impl_.transaction_ = nullptr;
}
inline const ::kvstore::v1::Transaction& CloseTransactionResponse::_internal_transaction() const {
  const ::kvstore::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvstore::v1::Transaction&>(
      ::kvstore::v1::_Transaction_default_instance_);
}
inline const ::kvstore::v1::Transaction& CloseTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CloseTransactionResponse.transaction)
  return _internal_transaction();
}
inline void CloseTransactionResponse::unsafe_arena_set_allocated_transaction(
    ::kvstore::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvstore.v1.CloseTransactionResponse.transaction)
}
inline ::kvstore::v1::Transaction* CloseTransactionResponse::release_transaction() {
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kvstore::v1::Transaction* CloseTransactionResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:kvstore.v1.CloseTransactionResponse.transaction)
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::kvstore::v1::Transaction* CloseTransactionResponse::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvstore::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::kvstore::v1::Transaction* CloseTransactionResponse::mutable_transaction() {
  ::kvstore::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:kvstore.v1.CloseTransactionResponse.transaction)
  return _msg;
}
inline void CloseTransactionResponse::set_allocated_transaction(::kvstore::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.CloseTransactionResponse.transaction)
}

// int64 timeout = 2 [json_name = "timeout"];
inline void CloseTransactionResponse::clear_timeout() {
  _impl_.timeout_ = int64_t{0};
}
inline int64_t CloseTransactionResponse::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int64_t CloseTransactionResponse::timeout() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CloseTransactionResponse.timeout)
  return _internal_timeout();
}
inline void CloseTransactionResponse::_internal_set_timeout(int64_t value) {
  
  _impl_.timeout_ = value;
}
inline void CloseTransactionResponse::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.CloseTransactionResponse.timeout)
}

// -------------------------------------------------------------------

// CommitRequest

// .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
inline bool CommitRequest::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool CommitRequest::has_transaction() const {
  return _internal_has_transaction();
}
inline void CommitRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_ != nullptr) {
    delete _impl_.transaction_;
  }
  _impl_.transaction_ = nullptr;
}
inline const ::kvstore::v1::Transaction& CommitRequest::_internal_transaction() const {
  const ::kvstore::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvstore::v1::Transaction&>(
      ::kvstore::v1::_Transaction_default_instance_);
}
inline const ::kvstore::v1::Transaction& CommitRequest::transaction() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CommitRequest.transaction)
  return _internal_transaction();
}
inline void CommitRequest::unsafe_arena_set_allocated_transaction(
    ::kvstore::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvstore.v1.CommitRequest.transaction)
}
inline ::kvstore::v1::Transaction* CommitRequest::release_transaction() {
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kvstore::v1::Transaction* CommitRequest::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:kvstore.v1.CommitRequest.transaction)
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::kvstore::v1::Transaction* CommitRequest::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvstore::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::kvstore::v1::Transaction* CommitRequest::mutable_transaction() {
  ::kvstore::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:kvstore.v1.CommitRequest.transaction)
  return _msg;
}
inline void CommitRequest::set_allocated_transaction(::kvstore::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.CommitRequest.transaction)
}

// -------------------------------------------------------------------

// CommitResponse

// .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
inline bool CommitResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool CommitResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline void CommitResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_ != nullptr) {
    delete _impl_.transaction_;
  }
  _impl_.transaction_ = nullptr;
}
inline const ::kvstore::v1::Transaction& CommitResponse::_internal_transaction() const {
  const ::kvstore::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvstore::v1::Transaction&>(
      ::kvstore::v1::_Transaction_default_instance_);
}
inline const ::kvstore::v1::Transaction& CommitResponse::transaction() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.CommitResponse.transaction)
  return _internal_transaction();
}
inline void CommitResponse::unsafe_arena_set_allocated_transaction(
    ::kvstore::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvstore.v1.CommitResponse.transaction)
}
inline ::kvstore::v1::Transaction* CommitResponse::release_transaction() {
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kvstore::v1::Transaction* CommitResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:kvstore.v1.CommitResponse.transaction)
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::kvstore::v1::Transaction* CommitResponse::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvstore::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::kvstore::v1::Transaction* CommitResponse::mutable_transaction() {
  ::kvstore::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:kvstore.v1.CommitResponse.transaction)
  return _msg;
}
inline void CommitResponse::set_allocated_transaction(::kvstore::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.CommitResponse.transaction)
}

// -------------------------------------------------------------------

// Transaction

// uint64 shard_id = 1 [json_name = "shardId"];
inline void Transaction::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t Transaction::shard_id() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.Transaction.shard_id)
  return _internal_shard_id();
}
inline void Transaction::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void Transaction::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.Transaction.shard_id)
}

// uint64 client_id = 2 [json_name = "clientId"];
inline void Transaction::clear_client_id() {
  _impl_.client_id_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_client_id() const {
  return _impl_.client_id_;
}
inline uint64_t Transaction::client_id() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.Transaction.client_id)
  return _internal_client_id();
}
inline void Transaction::_internal_set_client_id(uint64_t value) {
  
  _impl_.client_id_ = value;
}
inline void Transaction::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.Transaction.client_id)
}

// uint64 transaction_id = 3 [json_name = "transactionId"];
inline void Transaction::clear_transaction_id() {
  _impl_.transaction_id_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint64_t Transaction::transaction_id() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.Transaction.transaction_id)
  return _internal_transaction_id();
}
inline void Transaction::_internal_set_transaction_id(uint64_t value) {
  
  _impl_.transaction_id_ = value;
}
inline void Transaction::set_transaction_id(uint64_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.Transaction.transaction_id)
}

// uint64 responded_to = 4 [json_name = "respondedTo"];
inline void Transaction::clear_responded_to() {
  _impl_.responded_to_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_responded_to() const {
  return _impl_.responded_to_;
}
inline uint64_t Transaction::responded_to() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.Transaction.responded_to)
  return _internal_responded_to();
}
inline void Transaction::_internal_set_responded_to(uint64_t value) {
  
  _impl_.responded_to_ = value;
}
inline void Transaction::set_responded_to(uint64_t value) {
  _internal_set_responded_to(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.Transaction.responded_to)
}

// -------------------------------------------------------------------

// NewTransactionRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void NewTransactionRequest::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t NewTransactionRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t NewTransactionRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.NewTransactionRequest.shard_id)
  return _internal_shard_id();
}
inline void NewTransactionRequest::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void NewTransactionRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.NewTransactionRequest.shard_id)
}

// uint64 client_id = 2 [json_name = "clientId"];
inline void NewTransactionRequest::clear_client_id() {
  _impl_.client_id_ = uint64_t{0u};
}
inline uint64_t NewTransactionRequest::_internal_client_id() const {
  return _impl_.client_id_;
}
inline uint64_t NewTransactionRequest::client_id() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.NewTransactionRequest.client_id)
  return _internal_client_id();
}
inline void NewTransactionRequest::_internal_set_client_id(uint64_t value) {
  
  _impl_.client_id_ = value;
}
inline void NewTransactionRequest::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:kvstore.v1.NewTransactionRequest.client_id)
}

// -------------------------------------------------------------------

// NewTransactionResponse

// .kvstore.v1.Transaction transaction = 1 [json_name = "transaction"];
inline bool NewTransactionResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool NewTransactionResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline void NewTransactionResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_ != nullptr) {
    delete _impl_.transaction_;
  }
  _impl_.transaction_ = nullptr;
}
inline const ::kvstore::v1::Transaction& NewTransactionResponse::_internal_transaction() const {
  const ::kvstore::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvstore::v1::Transaction&>(
      ::kvstore::v1::_Transaction_default_instance_);
}
inline const ::kvstore::v1::Transaction& NewTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:kvstore.v1.NewTransactionResponse.transaction)
  return _internal_transaction();
}
inline void NewTransactionResponse::unsafe_arena_set_allocated_transaction(
    ::kvstore::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvstore.v1.NewTransactionResponse.transaction)
}
inline ::kvstore::v1::Transaction* NewTransactionResponse::release_transaction() {
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kvstore::v1::Transaction* NewTransactionResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:kvstore.v1.NewTransactionResponse.transaction)
  
  ::kvstore::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::kvstore::v1::Transaction* NewTransactionResponse::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvstore::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::kvstore::v1::Transaction* NewTransactionResponse::mutable_transaction() {
  ::kvstore::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:kvstore.v1.NewTransactionResponse.transaction)
  return _msg;
}
inline void NewTransactionResponse::set_allocated_transaction(::kvstore::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:kvstore.v1.NewTransactionResponse.transaction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace kvstore

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvstore_2fv1_2ftransactions_2eproto
