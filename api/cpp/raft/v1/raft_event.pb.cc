// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_event.proto

#include "raft/v1/raft_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raft {
namespace v1 {
PROTOBUF_CONSTEXPR RaftEvent::RaftEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.typ_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RaftEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftEventDefaultTypeInternal() {}
  union {
    RaftEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftEventDefaultTypeInternal _RaftEvent_default_instance_;
PROTOBUF_CONSTEXPR RaftLeaderInfo::RaftLeaderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replica_id_)*/uint64_t{0u}
  , /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftLeaderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftLeaderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftLeaderInfoDefaultTypeInternal() {}
  union {
    RaftLeaderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftLeaderInfoDefaultTypeInternal _RaftLeaderInfo_default_instance_;
PROTOBUF_CONSTEXPR RaftLogEntryEvent::RaftLogEntryEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replica_id_)*/uint64_t{0u}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftLogEntryEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftLogEntryEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftLogEntryEventDefaultTypeInternal() {}
  union {
    RaftLogEntryEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftLogEntryEventDefaultTypeInternal _RaftLogEntryEvent_default_instance_;
PROTOBUF_CONSTEXPR RaftSnapshotEvent::RaftSnapshotEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replica_id_)*/uint64_t{0u}
  , /*decltype(_impl_.from_index_)*/uint64_t{0u}
  , /*decltype(_impl_.to_index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftSnapshotEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftSnapshotEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftSnapshotEventDefaultTypeInternal() {}
  union {
    RaftSnapshotEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftSnapshotEventDefaultTypeInternal _RaftSnapshotEvent_default_instance_;
PROTOBUF_CONSTEXPR RaftConnectionEvent::RaftConnectionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_snapshot_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftConnectionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftConnectionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftConnectionEventDefaultTypeInternal() {}
  union {
    RaftConnectionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftConnectionEventDefaultTypeInternal _RaftConnectionEvent_default_instance_;
PROTOBUF_CONSTEXPR RaftNodeEvent::RaftNodeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replica_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftNodeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftNodeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftNodeEventDefaultTypeInternal() {}
  union {
    RaftNodeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftNodeEventDefaultTypeInternal _RaftNodeEvent_default_instance_;
PROTOBUF_CONSTEXPR RaftHostShutdown::RaftHostShutdown(
    ::_pbi::ConstantInitialized) {}
struct RaftHostShutdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftHostShutdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftHostShutdownDefaultTypeInternal() {}
  union {
    RaftHostShutdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftHostShutdownDefaultTypeInternal _RaftHostShutdown_default_instance_;
}  // namespace v1
}  // namespace raft
static ::_pb::Metadata file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_raft_2fv1_2fraft_5fevent_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raft_2fv1_2fraft_5fevent_2eproto = nullptr;

const uint32_t TableStruct_raft_2fv1_2fraft_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _impl_.typ_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftEvent, _impl_.event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLeaderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLeaderInfo, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLeaderInfo, _impl_.replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLeaderInfo, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLeaderInfo, _impl_.leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLogEntryEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLogEntryEvent, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLogEntryEvent, _impl_.replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftLogEntryEvent, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftSnapshotEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftSnapshotEvent, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftSnapshotEvent, _impl_.replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftSnapshotEvent, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftSnapshotEvent, _impl_.to_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftConnectionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftConnectionEvent, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftConnectionEvent, _impl_.is_snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftNodeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftNodeEvent, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftNodeEvent, _impl_.replica_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RaftHostShutdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::v1::RaftEvent)},
  { 15, -1, -1, sizeof(::raft::v1::RaftLeaderInfo)},
  { 25, -1, -1, sizeof(::raft::v1::RaftLogEntryEvent)},
  { 34, -1, -1, sizeof(::raft::v1::RaftSnapshotEvent)},
  { 44, -1, -1, sizeof(::raft::v1::RaftConnectionEvent)},
  { 52, -1, -1, sizeof(::raft::v1::RaftNodeEvent)},
  { 60, -1, -1, sizeof(::raft::v1::RaftHostShutdown)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raft::v1::_RaftEvent_default_instance_._instance,
  &::raft::v1::_RaftLeaderInfo_default_instance_._instance,
  &::raft::v1::_RaftLogEntryEvent_default_instance_._instance,
  &::raft::v1::_RaftSnapshotEvent_default_instance_._instance,
  &::raft::v1::_RaftConnectionEvent_default_instance_._instance,
  &::raft::v1::_RaftNodeEvent_default_instance_._instance,
  &::raft::v1::_RaftHostShutdown_default_instance_._instance,
};

const char descriptor_table_protodef_raft_2fv1_2fraft_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030raft/v1/raft_event.proto\022\007raft.v1\032\037goo"
  "gle/protobuf/timestamp.proto\"\301\003\n\tRaftEve"
  "nt\022$\n\003typ\030\001 \001(\0162\022.raft.v1.EventTypeR\003typ"
  "\022&\n\006action\030\002 \001(\0162\016.raft.v1.EventR\006action"
  "\0228\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestampR\ttimestamp\0229\n\tlog_entry\030\004 \001(\0132\032."
  "raft.v1.RaftLogEntryEventH\000R\010logEntry\0228\n"
  "\010snapshot\030\005 \001(\0132\032.raft.v1.RaftSnapshotEv"
  "entH\000R\010snapshot\022>\n\nconnection\030\006 \001(\0132\034.ra"
  "ft.v1.RaftConnectionEventH\000R\nconnection\022"
  ",\n\004node\030\007 \001(\0132\026.raft.v1.RaftNodeEventH\000R"
  "\004node\022@\n\rhost_shutdown\030\010 \001(\0132\031.raft.v1.R"
  "aftHostShutdownH\000R\014hostShutdownB\007\n\005event"
  "\"{\n\016RaftLeaderInfo\022\031\n\010shard_id\030\001 \001(\004R\007sh"
  "ardId\022\035\n\nreplica_id\030\002 \001(\004R\treplicaId\022\022\n\004"
  "term\030\003 \001(\004R\004term\022\033\n\tleader_id\030\004 \001(\004R\010lea"
  "derId\"c\n\021RaftLogEntryEvent\022\031\n\010shard_id\030\001"
  " \001(\004R\007shardId\022\035\n\nreplica_id\030\002 \001(\004R\trepli"
  "caId\022\024\n\005index\030\003 \001(\004R\005index\"\207\001\n\021RaftSnaps"
  "hotEvent\022\031\n\010shard_id\030\001 \001(\004R\007shardId\022\035\n\nr"
  "eplica_id\030\002 \001(\004R\treplicaId\022\035\n\nfrom_index"
  "\030\003 \001(\004R\tfromIndex\022\031\n\010to_index\030\004 \001(\004R\007toI"
  "ndex\"P\n\023RaftConnectionEvent\022\030\n\007address\030\001"
  " \001(\tR\007address\022\037\n\013is_snapshot\030\002 \001(\010R\nisSn"
  "apshot\"I\n\rRaftNodeEvent\022\031\n\010shard_id\030\001 \001("
  "\004R\007shardId\022\035\n\nreplica_id\030\002 \001(\004R\treplicaI"
  "d\"\022\n\020RaftHostShutdown*\264\001\n\tEventType\022\032\n\026E"
  "VENT_TYPE_UNSPECIFIED\020\000\022\030\n\024EVENT_TYPE_LO"
  "G_ENTRY\020\001\022\027\n\023EVENT_TYPE_SNAPSHOT\020\002\022\031\n\025EV"
  "ENT_TYPE_CONNECTION\020\003\022\023\n\017EVENT_TYPE_HOST"
  "\020\004\022\023\n\017EVENT_TYPE_NODE\020\005\022\023\n\017EVENT_TYPE_RA"
  "FT\020\006*\365\003\n\005Event\022\025\n\021EVENT_UNSPECIFIED\020\000\022 \n"
  "\034EVENT_CONNECTION_ESTABLISHED\020\001\022\033\n\027EVENT"
  "_CONNECTION_FAILED\020\002\022\027\n\023EVENT_LOG_COMPAC"
  "TED\020\003\022\031\n\025EVENT_LOGDB_COMPACTED\020\004\022\034\n\030EVEN"
  "T_MEMBERSHIP_CHANGED\020\005\022!\n\035EVENT_NODE_HOS"
  "T_SHUTTING_DOWN\020\006\022\024\n\020EVENT_NODE_READY\020\007\022"
  "\027\n\023EVENT_NODE_UNLOADED\020\010\022\037\n\033EVENT_SEND_S"
  "NAPSHOT_ABORTED\020\t\022!\n\035EVENT_SEND_SNAPSHOT"
  "_COMPLETED\020\n\022\037\n\033EVENT_SEND_SNAPSHOT_STAR"
  "TED\020\013\022\034\n\030EVENT_SNAPSHOT_COMPACTED\020\014\022\032\n\026E"
  "VENT_SNAPSHOT_CREATED\020\r\022\033\n\027EVENT_SNAPSHO"
  "T_RECEIVED\020\016\022\034\n\030EVENT_SNAPSHOT_RECOVERED"
  "\020\017\022\030\n\024EVENT_LEADER_UPDATED\020\020B~\n\023io.a13s."
  "api.raft.v1B\016RaftEventProtoP\001Z\032a13s.io/a"
  "pi/raft/v1;raftv1\242\002\003RXX\252\002\007Raft.V1\312\002\007Raft"
  "\\V1\342\002\023Raft\\V1\\GPBMetadata\352\002\010Raft::V1b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fevent_2eproto = {
    false, false, 1884, descriptor_table_protodef_raft_2fv1_2fraft_5fevent_2eproto,
    "raft/v1/raft_event.proto",
    &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once, descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_raft_2fv1_2fraft_5fevent_2eproto::offsets,
    file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto, file_level_enum_descriptors_raft_2fv1_2fraft_5fevent_2eproto,
    file_level_service_descriptors_raft_2fv1_2fraft_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter() {
  return &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2fv1_2fraft_5fevent_2eproto(&descriptor_table_raft_2fv1_2fraft_5fevent_2eproto);
namespace raft {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2fv1_2fraft_5fevent_2eproto);
  return file_level_enum_descriptors_raft_2fv1_2fraft_5fevent_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2fv1_2fraft_5fevent_2eproto);
  return file_level_enum_descriptors_raft_2fv1_2fraft_5fevent_2eproto[1];
}
bool Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RaftEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RaftEvent* msg);
  static const ::raft::v1::RaftLogEntryEvent& log_entry(const RaftEvent* msg);
  static const ::raft::v1::RaftSnapshotEvent& snapshot(const RaftEvent* msg);
  static const ::raft::v1::RaftConnectionEvent& connection(const RaftEvent* msg);
  static const ::raft::v1::RaftNodeEvent& node(const RaftEvent* msg);
  static const ::raft::v1::RaftHostShutdown& host_shutdown(const RaftEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RaftEvent::_Internal::timestamp(const RaftEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::raft::v1::RaftLogEntryEvent&
RaftEvent::_Internal::log_entry(const RaftEvent* msg) {
  return *msg->_impl_.event_.log_entry_;
}
const ::raft::v1::RaftSnapshotEvent&
RaftEvent::_Internal::snapshot(const RaftEvent* msg) {
  return *msg->_impl_.event_.snapshot_;
}
const ::raft::v1::RaftConnectionEvent&
RaftEvent::_Internal::connection(const RaftEvent* msg) {
  return *msg->_impl_.event_.connection_;
}
const ::raft::v1::RaftNodeEvent&
RaftEvent::_Internal::node(const RaftEvent* msg) {
  return *msg->_impl_.event_.node_;
}
const ::raft::v1::RaftHostShutdown&
RaftEvent::_Internal::host_shutdown(const RaftEvent* msg) {
  return *msg->_impl_.event_.host_shutdown_;
}
void RaftEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void RaftEvent::set_allocated_log_entry(::raft::v1::RaftLogEntryEvent* log_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (log_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log_entry);
    if (message_arena != submessage_arena) {
      log_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_entry, submessage_arena);
    }
    set_has_log_entry();
    _impl_.event_.log_entry_ = log_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.log_entry)
}
void RaftEvent::set_allocated_snapshot(::raft::v1::RaftSnapshotEvent* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.event_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.snapshot)
}
void RaftEvent::set_allocated_connection(::raft::v1::RaftConnectionEvent* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
    _impl_.event_.connection_ = connection;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.connection)
}
void RaftEvent::set_allocated_node(::raft::v1::RaftNodeEvent* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    _impl_.event_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.node)
}
void RaftEvent::set_allocated_host_shutdown(::raft::v1::RaftHostShutdown* host_shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (host_shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host_shutdown);
    if (message_arena != submessage_arena) {
      host_shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_shutdown, submessage_arena);
    }
    set_has_host_shutdown();
    _impl_.event_.host_shutdown_ = host_shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.host_shutdown)
}
RaftEvent::RaftEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftEvent)
}
RaftEvent::RaftEvent(const RaftEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.typ_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.typ_, &from._impl_.typ_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.typ_)) + sizeof(_impl_.action_));
  clear_has_event();
  switch (from.event_case()) {
    case kLogEntry: {
      _this->_internal_mutable_log_entry()->::raft::v1::RaftLogEntryEvent::MergeFrom(
          from._internal_log_entry());
      break;
    }
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::raft::v1::RaftSnapshotEvent::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kConnection: {
      _this->_internal_mutable_connection()->::raft::v1::RaftConnectionEvent::MergeFrom(
          from._internal_connection());
      break;
    }
    case kNode: {
      _this->_internal_mutable_node()->::raft::v1::RaftNodeEvent::MergeFrom(
          from._internal_node());
      break;
    }
    case kHostShutdown: {
      _this->_internal_mutable_host_shutdown()->::raft::v1::RaftHostShutdown::MergeFrom(
          from._internal_host_shutdown());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftEvent)
}

inline void RaftEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.typ_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

RaftEvent::~RaftEvent() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_event()) {
    clear_event();
  }
}

void RaftEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:raft.v1.RaftEvent)
  switch (event_case()) {
    case kLogEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.log_entry_;
      }
      break;
    }
    case kSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.snapshot_;
      }
      break;
    }
    case kConnection: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.connection_;
      }
      break;
    }
    case kNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.node_;
      }
      break;
    }
    case kHostShutdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.host_shutdown_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void RaftEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.typ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.typ_)) + sizeof(_impl_.action_));
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .raft.v1.EventType typ = 1 [json_name = "typ"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_typ(static_cast<::raft::v1::EventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.Event action = 2 [json_name = "action"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::raft::v1::Event>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.RaftLogEntryEvent log_entry = 4 [json_name = "logEntry"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.RaftSnapshotEvent snapshot = 5 [json_name = "snapshot"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.RaftConnectionEvent connection = 6 [json_name = "connection"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.RaftNodeEvent node = 7 [json_name = "node"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.RaftHostShutdown host_shutdown = 8 [json_name = "hostShutdown"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_shutdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.v1.EventType typ = 1 [json_name = "typ"];
  if (this->_internal_typ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_typ(), target);
  }

  // .raft.v1.Event action = 2 [json_name = "action"];
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .raft.v1.RaftLogEntryEvent log_entry = 4 [json_name = "logEntry"];
  if (_internal_has_log_entry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::log_entry(this),
        _Internal::log_entry(this).GetCachedSize(), target, stream);
  }

  // .raft.v1.RaftSnapshotEvent snapshot = 5 [json_name = "snapshot"];
  if (_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  // .raft.v1.RaftConnectionEvent connection = 6 [json_name = "connection"];
  if (_internal_has_connection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::connection(this),
        _Internal::connection(this).GetCachedSize(), target, stream);
  }

  // .raft.v1.RaftNodeEvent node = 7 [json_name = "node"];
  if (_internal_has_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  // .raft.v1.RaftHostShutdown host_shutdown = 8 [json_name = "hostShutdown"];
  if (_internal_has_host_shutdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::host_shutdown(this),
        _Internal::host_shutdown(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftEvent)
  return target;
}

size_t RaftEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .raft.v1.EventType typ = 1 [json_name = "typ"];
  if (this->_internal_typ() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_typ());
  }

  // .raft.v1.Event action = 2 [json_name = "action"];
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  switch (event_case()) {
    // .raft.v1.RaftLogEntryEvent log_entry = 4 [json_name = "logEntry"];
    case kLogEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.log_entry_);
      break;
    }
    // .raft.v1.RaftSnapshotEvent snapshot = 5 [json_name = "snapshot"];
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.snapshot_);
      break;
    }
    // .raft.v1.RaftConnectionEvent connection = 6 [json_name = "connection"];
    case kConnection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.connection_);
      break;
    }
    // .raft.v1.RaftNodeEvent node = 7 [json_name = "node"];
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.node_);
      break;
    }
    // .raft.v1.RaftHostShutdown host_shutdown = 8 [json_name = "hostShutdown"];
    case kHostShutdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.host_shutdown_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftEvent::GetClassData() const { return &_class_data_; }


void RaftEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftEvent*>(&to_msg);
  auto& from = static_cast<const RaftEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_typ() != 0) {
    _this->_internal_set_typ(from._internal_typ());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  switch (from.event_case()) {
    case kLogEntry: {
      _this->_internal_mutable_log_entry()->::raft::v1::RaftLogEntryEvent::MergeFrom(
          from._internal_log_entry());
      break;
    }
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::raft::v1::RaftSnapshotEvent::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kConnection: {
      _this->_internal_mutable_connection()->::raft::v1::RaftConnectionEvent::MergeFrom(
          from._internal_connection());
      break;
    }
    case kNode: {
      _this->_internal_mutable_node()->::raft::v1::RaftNodeEvent::MergeFrom(
          from._internal_node());
      break;
    }
    case kHostShutdown: {
      _this->_internal_mutable_host_shutdown()->::raft::v1::RaftHostShutdown::MergeFrom(
          from._internal_host_shutdown());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftEvent::CopyFrom(const RaftEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftEvent::IsInitialized() const {
  return true;
}

void RaftEvent::InternalSwap(RaftEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftEvent, _impl_.action_)
      + sizeof(RaftEvent::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(RaftEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[0]);
}

// ===================================================================

class RaftLeaderInfo::_Internal {
 public:
};

RaftLeaderInfo::RaftLeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftLeaderInfo)
}
RaftLeaderInfo::RaftLeaderInfo(const RaftLeaderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftLeaderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.replica_id_){}
    , decltype(_impl_.term_){}
    , decltype(_impl_.leader_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leader_id_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.leader_id_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftLeaderInfo)
}

inline void RaftLeaderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.replica_id_){uint64_t{0u}}
    , decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.leader_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaftLeaderInfo::~RaftLeaderInfo() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftLeaderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftLeaderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftLeaderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftLeaderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftLeaderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leader_id_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.leader_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftLeaderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 3 [json_name = "term"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leader_id = 4 [json_name = "leaderId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftLeaderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftLeaderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // uint64 term = 3 [json_name = "term"];
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_term(), target);
  }

  // uint64 leader_id = 4 [json_name = "leaderId"];
  if (this->_internal_leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftLeaderInfo)
  return target;
}

size_t RaftLeaderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftLeaderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // uint64 term = 3 [json_name = "term"];
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 leader_id = 4 [json_name = "leaderId"];
  if (this->_internal_leader_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leader_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftLeaderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftLeaderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftLeaderInfo::GetClassData() const { return &_class_data_; }


void RaftLeaderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftLeaderInfo*>(&to_msg);
  auto& from = static_cast<const RaftLeaderInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftLeaderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_leader_id() != 0) {
    _this->_internal_set_leader_id(from._internal_leader_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftLeaderInfo::CopyFrom(const RaftLeaderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftLeaderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftLeaderInfo::IsInitialized() const {
  return true;
}

void RaftLeaderInfo::InternalSwap(RaftLeaderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftLeaderInfo, _impl_.leader_id_)
      + sizeof(RaftLeaderInfo::_impl_.leader_id_)
      - PROTOBUF_FIELD_OFFSET(RaftLeaderInfo, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftLeaderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[1]);
}

// ===================================================================

class RaftLogEntryEvent::_Internal {
 public:
};

RaftLogEntryEvent::RaftLogEntryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftLogEntryEvent)
}
RaftLogEntryEvent::RaftLogEntryEvent(const RaftLogEntryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftLogEntryEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.replica_id_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftLogEntryEvent)
}

inline void RaftLogEntryEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.replica_id_){uint64_t{0u}}
    , decltype(_impl_.index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaftLogEntryEvent::~RaftLogEntryEvent() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftLogEntryEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftLogEntryEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftLogEntryEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftLogEntryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftLogEntryEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftLogEntryEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftLogEntryEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftLogEntryEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // uint64 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftLogEntryEvent)
  return target;
}

size_t RaftLogEntryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftLogEntryEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // uint64 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftLogEntryEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftLogEntryEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftLogEntryEvent::GetClassData() const { return &_class_data_; }


void RaftLogEntryEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftLogEntryEvent*>(&to_msg);
  auto& from = static_cast<const RaftLogEntryEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftLogEntryEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftLogEntryEvent::CopyFrom(const RaftLogEntryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftLogEntryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftLogEntryEvent::IsInitialized() const {
  return true;
}

void RaftLogEntryEvent::InternalSwap(RaftLogEntryEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftLogEntryEvent, _impl_.index_)
      + sizeof(RaftLogEntryEvent::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(RaftLogEntryEvent, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftLogEntryEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[2]);
}

// ===================================================================

class RaftSnapshotEvent::_Internal {
 public:
};

RaftSnapshotEvent::RaftSnapshotEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftSnapshotEvent)
}
RaftSnapshotEvent::RaftSnapshotEvent(const RaftSnapshotEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftSnapshotEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.replica_id_){}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.to_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftSnapshotEvent)
}

inline void RaftSnapshotEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.replica_id_){uint64_t{0u}}
    , decltype(_impl_.from_index_){uint64_t{0u}}
    , decltype(_impl_.to_index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaftSnapshotEvent::~RaftSnapshotEvent() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftSnapshotEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftSnapshotEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftSnapshotEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftSnapshotEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftSnapshotEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_index_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.to_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftSnapshotEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 from_index = 3 [json_name = "fromIndex"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to_index = 4 [json_name = "toIndex"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftSnapshotEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftSnapshotEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // uint64 from_index = 3 [json_name = "fromIndex"];
  if (this->_internal_from_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_from_index(), target);
  }

  // uint64 to_index = 4 [json_name = "toIndex"];
  if (this->_internal_to_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftSnapshotEvent)
  return target;
}

size_t RaftSnapshotEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftSnapshotEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // uint64 from_index = 3 [json_name = "fromIndex"];
  if (this->_internal_from_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_from_index());
  }

  // uint64 to_index = 4 [json_name = "toIndex"];
  if (this->_internal_to_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftSnapshotEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftSnapshotEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftSnapshotEvent::GetClassData() const { return &_class_data_; }


void RaftSnapshotEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftSnapshotEvent*>(&to_msg);
  auto& from = static_cast<const RaftSnapshotEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftSnapshotEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_from_index() != 0) {
    _this->_internal_set_from_index(from._internal_from_index());
  }
  if (from._internal_to_index() != 0) {
    _this->_internal_set_to_index(from._internal_to_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftSnapshotEvent::CopyFrom(const RaftSnapshotEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftSnapshotEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotEvent::IsInitialized() const {
  return true;
}

void RaftSnapshotEvent::InternalSwap(RaftSnapshotEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftSnapshotEvent, _impl_.to_index_)
      + sizeof(RaftSnapshotEvent::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(RaftSnapshotEvent, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftSnapshotEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[3]);
}

// ===================================================================

class RaftConnectionEvent::_Internal {
 public:
};

RaftConnectionEvent::RaftConnectionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftConnectionEvent)
}
RaftConnectionEvent::RaftConnectionEvent(const RaftConnectionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftConnectionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.is_snapshot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_snapshot_ = from._impl_.is_snapshot_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftConnectionEvent)
}

inline void RaftConnectionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.is_snapshot_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RaftConnectionEvent::~RaftConnectionEvent() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftConnectionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftConnectionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void RaftConnectionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftConnectionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftConnectionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.is_snapshot_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftConnectionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.RaftConnectionEvent.address"));
        } else
          goto handle_unusual;
        continue;
      // bool is_snapshot = 2 [json_name = "isSnapshot"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftConnectionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftConnectionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.RaftConnectionEvent.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool is_snapshot = 2 [json_name = "isSnapshot"];
  if (this->_internal_is_snapshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_snapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftConnectionEvent)
  return target;
}

size_t RaftConnectionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftConnectionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool is_snapshot = 2 [json_name = "isSnapshot"];
  if (this->_internal_is_snapshot() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftConnectionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftConnectionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftConnectionEvent::GetClassData() const { return &_class_data_; }


void RaftConnectionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftConnectionEvent*>(&to_msg);
  auto& from = static_cast<const RaftConnectionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftConnectionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_is_snapshot() != 0) {
    _this->_internal_set_is_snapshot(from._internal_is_snapshot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftConnectionEvent::CopyFrom(const RaftConnectionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftConnectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftConnectionEvent::IsInitialized() const {
  return true;
}

void RaftConnectionEvent::InternalSwap(RaftConnectionEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.is_snapshot_, other->_impl_.is_snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftConnectionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[4]);
}

// ===================================================================

class RaftNodeEvent::_Internal {
 public:
};

RaftNodeEvent::RaftNodeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftNodeEvent)
}
RaftNodeEvent::RaftNodeEvent(const RaftNodeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftNodeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.replica_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replica_id_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.replica_id_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftNodeEvent)
}

inline void RaftNodeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.replica_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaftNodeEvent::~RaftNodeEvent() {
  // @@protoc_insertion_point(destructor:raft.v1.RaftNodeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftNodeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RaftNodeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftNodeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RaftNodeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.replica_id_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.replica_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftNodeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftNodeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RaftNodeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RaftNodeEvent)
  return target;
}

size_t RaftNodeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RaftNodeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftNodeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftNodeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftNodeEvent::GetClassData() const { return &_class_data_; }


void RaftNodeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftNodeEvent*>(&to_msg);
  auto& from = static_cast<const RaftNodeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RaftNodeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftNodeEvent::CopyFrom(const RaftNodeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RaftNodeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftNodeEvent::IsInitialized() const {
  return true;
}

void RaftNodeEvent::InternalSwap(RaftNodeEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftNodeEvent, _impl_.replica_id_)
      + sizeof(RaftNodeEvent::_impl_.replica_id_)
      - PROTOBUF_FIELD_OFFSET(RaftNodeEvent, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftNodeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[5]);
}

// ===================================================================

class RaftHostShutdown::_Internal {
 public:
};

RaftHostShutdown::RaftHostShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.RaftHostShutdown)
}
RaftHostShutdown::RaftHostShutdown(const RaftHostShutdown& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RaftHostShutdown* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.RaftHostShutdown)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftHostShutdown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftHostShutdown::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RaftHostShutdown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fevent_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fevent_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::v1::RaftEvent*
Arena::CreateMaybeMessage< ::raft::v1::RaftEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftLeaderInfo*
Arena::CreateMaybeMessage< ::raft::v1::RaftLeaderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftLeaderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftLogEntryEvent*
Arena::CreateMaybeMessage< ::raft::v1::RaftLogEntryEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftLogEntryEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftSnapshotEvent*
Arena::CreateMaybeMessage< ::raft::v1::RaftSnapshotEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftSnapshotEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftConnectionEvent*
Arena::CreateMaybeMessage< ::raft::v1::RaftConnectionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftConnectionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftNodeEvent*
Arena::CreateMaybeMessage< ::raft::v1::RaftNodeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftNodeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RaftHostShutdown*
Arena::CreateMaybeMessage< ::raft::v1::RaftHostShutdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RaftHostShutdown >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
