// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2fv1_2fraft_5fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2fv1_2fraft_5fhost_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fhost_2eproto;
namespace raft {
namespace v1 {
class CompactRequest;
struct CompactRequestDefaultTypeInternal;
extern CompactRequestDefaultTypeInternal _CompactRequest_default_instance_;
class CompactResponse;
struct CompactResponseDefaultTypeInternal;
extern CompactResponseDefaultTypeInternal _CompactResponse_default_instance_;
class GetHostConfigRequest;
struct GetHostConfigRequestDefaultTypeInternal;
extern GetHostConfigRequestDefaultTypeInternal _GetHostConfigRequest_default_instance_;
class GetHostConfigResponse;
struct GetHostConfigResponseDefaultTypeInternal;
extern GetHostConfigResponseDefaultTypeInternal _GetHostConfigResponse_default_instance_;
class GetShardMembershipRequest;
struct GetShardMembershipRequestDefaultTypeInternal;
extern GetShardMembershipRequestDefaultTypeInternal _GetShardMembershipRequest_default_instance_;
class HostConfig;
struct HostConfigDefaultTypeInternal;
extern HostConfigDefaultTypeInternal _HostConfig_default_instance_;
class LeaderTransferRequest;
struct LeaderTransferRequestDefaultTypeInternal;
extern LeaderTransferRequestDefaultTypeInternal _LeaderTransferRequest_default_instance_;
class LeaderTransferResponse;
struct LeaderTransferResponseDefaultTypeInternal;
extern LeaderTransferResponseDefaultTypeInternal _LeaderTransferResponse_default_instance_;
class SnapshotRequest;
struct SnapshotRequestDefaultTypeInternal;
extern SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
class SnapshotResponse;
struct SnapshotResponseDefaultTypeInternal;
extern SnapshotResponseDefaultTypeInternal _SnapshotResponse_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::v1::CompactRequest* Arena::CreateMaybeMessage<::raft::v1::CompactRequest>(Arena*);
template<> ::raft::v1::CompactResponse* Arena::CreateMaybeMessage<::raft::v1::CompactResponse>(Arena*);
template<> ::raft::v1::GetHostConfigRequest* Arena::CreateMaybeMessage<::raft::v1::GetHostConfigRequest>(Arena*);
template<> ::raft::v1::GetHostConfigResponse* Arena::CreateMaybeMessage<::raft::v1::GetHostConfigResponse>(Arena*);
template<> ::raft::v1::GetShardMembershipRequest* Arena::CreateMaybeMessage<::raft::v1::GetShardMembershipRequest>(Arena*);
template<> ::raft::v1::HostConfig* Arena::CreateMaybeMessage<::raft::v1::HostConfig>(Arena*);
template<> ::raft::v1::LeaderTransferRequest* Arena::CreateMaybeMessage<::raft::v1::LeaderTransferRequest>(Arena*);
template<> ::raft::v1::LeaderTransferResponse* Arena::CreateMaybeMessage<::raft::v1::LeaderTransferResponse>(Arena*);
template<> ::raft::v1::SnapshotRequest* Arena::CreateMaybeMessage<::raft::v1::SnapshotRequest>(Arena*);
template<> ::raft::v1::SnapshotResponse* Arena::CreateMaybeMessage<::raft::v1::SnapshotResponse>(Arena*);
template<> ::raft::v1::StopRequest* Arena::CreateMaybeMessage<::raft::v1::StopRequest>(Arena*);
template<> ::raft::v1::StopResponse* Arena::CreateMaybeMessage<::raft::v1::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {
namespace v1 {

// ===================================================================

class CompactRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.CompactRequest) */ {
 public:
  inline CompactRequest() : CompactRequest(nullptr) {}
  ~CompactRequest() override;
  explicit PROTOBUF_CONSTEXPR CompactRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactRequest(const CompactRequest& from);
  CompactRequest(CompactRequest&& from) noexcept
    : CompactRequest() {
    *this = ::std::move(from);
  }

  inline CompactRequest& operator=(const CompactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactRequest& operator=(CompactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactRequest* internal_default_instance() {
    return reinterpret_cast<const CompactRequest*>(
               &_CompactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompactRequest& a, CompactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactRequest& from) {
    CompactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.CompactRequest";
  }
  protected:
  explicit CompactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicaIdFieldNumber = 1,
    kShardIdFieldNumber = 2,
  };
  // uint64 replica_id = 1 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // uint64 shard_id = 2 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.CompactRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t replica_id_;
    uint64_t shard_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class CompactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.CompactResponse) */ {
 public:
  inline CompactResponse() : CompactResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CompactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactResponse(const CompactResponse& from);
  CompactResponse(CompactResponse&& from) noexcept
    : CompactResponse() {
    *this = ::std::move(from);
  }

  inline CompactResponse& operator=(const CompactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactResponse& operator=(CompactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactResponse* internal_default_instance() {
    return reinterpret_cast<const CompactResponse*>(
               &_CompactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompactResponse& a, CompactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CompactResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CompactResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.CompactResponse";
  }
  protected:
  explicit CompactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.CompactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class LeaderTransferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.LeaderTransferRequest) */ {
 public:
  inline LeaderTransferRequest() : LeaderTransferRequest(nullptr) {}
  ~LeaderTransferRequest() override;
  explicit PROTOBUF_CONSTEXPR LeaderTransferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderTransferRequest(const LeaderTransferRequest& from);
  LeaderTransferRequest(LeaderTransferRequest&& from) noexcept
    : LeaderTransferRequest() {
    *this = ::std::move(from);
  }

  inline LeaderTransferRequest& operator=(const LeaderTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderTransferRequest& operator=(LeaderTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderTransferRequest* internal_default_instance() {
    return reinterpret_cast<const LeaderTransferRequest*>(
               &_LeaderTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LeaderTransferRequest& a, LeaderTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderTransferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderTransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderTransferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderTransferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaderTransferRequest& from) {
    LeaderTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTransferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.LeaderTransferRequest";
  }
  protected:
  explicit LeaderTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNodeIdFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // string target_node_id = 2 [json_name = "targetNodeId"];
  void clear_target_node_id();
  const std::string& target_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_node_id();
  PROTOBUF_NODISCARD std::string* release_target_node_id();
  void set_allocated_target_node_id(std::string* target_node_id);
  private:
  const std::string& _internal_target_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_node_id(const std::string& value);
  std::string* _internal_mutable_target_node_id();
  public:

  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.LeaderTransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_node_id_;
    uint64_t shard_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class LeaderTransferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.LeaderTransferResponse) */ {
 public:
  inline LeaderTransferResponse() : LeaderTransferResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LeaderTransferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderTransferResponse(const LeaderTransferResponse& from);
  LeaderTransferResponse(LeaderTransferResponse&& from) noexcept
    : LeaderTransferResponse() {
    *this = ::std::move(from);
  }

  inline LeaderTransferResponse& operator=(const LeaderTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderTransferResponse& operator=(LeaderTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderTransferResponse* internal_default_instance() {
    return reinterpret_cast<const LeaderTransferResponse*>(
               &_LeaderTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LeaderTransferResponse& a, LeaderTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderTransferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderTransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderTransferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LeaderTransferResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LeaderTransferResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.LeaderTransferResponse";
  }
  protected:
  explicit LeaderTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.LeaderTransferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class SnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.SnapshotRequest) */ {
 public:
  inline SnapshotRequest() : SnapshotRequest(nullptr) {}
  ~SnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR SnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotRequest(const SnapshotRequest& from);
  SnapshotRequest(SnapshotRequest&& from) noexcept
    : SnapshotRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotRequest& operator=(const SnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRequest& operator=(SnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotRequest*>(
               &_SnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SnapshotRequest& a, SnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapshotRequest& from) {
    SnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.SnapshotRequest";
  }
  protected:
  explicit SnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // int64 timeout = 2 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.SnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    int64_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class SnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.SnapshotResponse) */ {
 public:
  inline SnapshotResponse() : SnapshotResponse(nullptr) {}
  ~SnapshotResponse() override;
  explicit PROTOBUF_CONSTEXPR SnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotResponse(const SnapshotResponse& from);
  SnapshotResponse(SnapshotResponse&& from) noexcept
    : SnapshotResponse() {
    *this = ::std::move(from);
  }

  inline SnapshotResponse& operator=(const SnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotResponse& operator=(SnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const SnapshotResponse*>(
               &_SnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SnapshotResponse& a, SnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapshotResponse& from) {
    SnapshotResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.SnapshotResponse";
  }
  protected:
  explicit SnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIndexCapturedFieldNumber = 1,
  };
  // uint64 snapshot_index_captured = 1 [json_name = "snapshotIndexCaptured"];
  void clear_snapshot_index_captured();
  uint64_t snapshot_index_captured() const;
  void set_snapshot_index_captured(uint64_t value);
  private:
  uint64_t _internal_snapshot_index_captured() const;
  void _internal_set_snapshot_index_captured(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.SnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t snapshot_index_captured_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class GetHostConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.GetHostConfigRequest) */ {
 public:
  inline GetHostConfigRequest() : GetHostConfigRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetHostConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHostConfigRequest(const GetHostConfigRequest& from);
  GetHostConfigRequest(GetHostConfigRequest&& from) noexcept
    : GetHostConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetHostConfigRequest& operator=(const GetHostConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostConfigRequest& operator=(GetHostConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHostConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHostConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetHostConfigRequest*>(
               &_GetHostConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetHostConfigRequest& a, GetHostConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHostConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHostConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHostConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetHostConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetHostConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetHostConfigRequest";
  }
  protected:
  explicit GetHostConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.GetHostConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class GetHostConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetHostConfigResponse) */ {
 public:
  inline GetHostConfigResponse() : GetHostConfigResponse(nullptr) {}
  ~GetHostConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR GetHostConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHostConfigResponse(const GetHostConfigResponse& from);
  GetHostConfigResponse(GetHostConfigResponse&& from) noexcept
    : GetHostConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetHostConfigResponse& operator=(const GetHostConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostConfigResponse& operator=(GetHostConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHostConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHostConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetHostConfigResponse*>(
               &_GetHostConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetHostConfigResponse& a, GetHostConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHostConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHostConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHostConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHostConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHostConfigResponse& from) {
    GetHostConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHostConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetHostConfigResponse";
  }
  protected:
  explicit GetHostConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .raft.v1.HostConfig config = 1 [json_name = "config"];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::raft::v1::HostConfig& config() const;
  PROTOBUF_NODISCARD ::raft::v1::HostConfig* release_config();
  ::raft::v1::HostConfig* mutable_config();
  void set_allocated_config(::raft::v1::HostConfig* config);
  private:
  const ::raft::v1::HostConfig& _internal_config() const;
  ::raft::v1::HostConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::raft::v1::HostConfig* config);
  ::raft::v1::HostConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:raft.v1.GetHostConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::raft::v1::HostConfig* config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class GetShardMembershipRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetShardMembershipRequest) */ {
 public:
  inline GetShardMembershipRequest() : GetShardMembershipRequest(nullptr) {}
  ~GetShardMembershipRequest() override;
  explicit PROTOBUF_CONSTEXPR GetShardMembershipRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetShardMembershipRequest(const GetShardMembershipRequest& from);
  GetShardMembershipRequest(GetShardMembershipRequest&& from) noexcept
    : GetShardMembershipRequest() {
    *this = ::std::move(from);
  }

  inline GetShardMembershipRequest& operator=(const GetShardMembershipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShardMembershipRequest& operator=(GetShardMembershipRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetShardMembershipRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetShardMembershipRequest* internal_default_instance() {
    return reinterpret_cast<const GetShardMembershipRequest*>(
               &_GetShardMembershipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetShardMembershipRequest& a, GetShardMembershipRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShardMembershipRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShardMembershipRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetShardMembershipRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetShardMembershipRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetShardMembershipRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetShardMembershipRequest& from) {
    GetShardMembershipRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShardMembershipRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetShardMembershipRequest";
  }
  protected:
  explicit GetShardMembershipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.GetShardMembershipRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// -------------------------------------------------------------------

class HostConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.HostConfig) */ {
 public:
  inline HostConfig() : HostConfig(nullptr) {}
  ~HostConfig() override;
  explicit PROTOBUF_CONSTEXPR HostConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostConfig(const HostConfig& from);
  HostConfig(HostConfig&& from) noexcept
    : HostConfig() {
    *this = ::std::move(from);
  }

  inline HostConfig& operator=(const HostConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostConfig& operator=(HostConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostConfig* internal_default_instance() {
    return reinterpret_cast<const HostConfig*>(
               &_HostConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HostConfig& a, HostConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HostConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostConfig& from) {
    HostConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.HostConfig";
  }
  protected:
  explicit HostConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalDirFieldNumber = 2,
    kHostDirFieldNumber = 3,
    kRaftAddressFieldNumber = 5,
    kListenAddressFieldNumber = 7,
    kCaFileFieldNumber = 9,
    kCertFileFieldNumber = 10,
    kKeyFileFieldNumber = 11,
    kDeploymentIdFieldNumber = 1,
    kRoundTripTimeInMillisecondsFieldNumber = 4,
    kAddressByHostIdFieldNumber = 6,
    kMutualTlsFieldNumber = 8,
    kEnableMetricsFieldNumber = 12,
    kNotifyCommitFieldNumber = 13,
  };
  // string wal_dir = 2 [json_name = "walDir"];
  void clear_wal_dir();
  const std::string& wal_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wal_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wal_dir();
  PROTOBUF_NODISCARD std::string* release_wal_dir();
  void set_allocated_wal_dir(std::string* wal_dir);
  private:
  const std::string& _internal_wal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wal_dir(const std::string& value);
  std::string* _internal_mutable_wal_dir();
  public:

  // string host_dir = 3 [json_name = "hostDir"];
  void clear_host_dir();
  const std::string& host_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_dir();
  PROTOBUF_NODISCARD std::string* release_host_dir();
  void set_allocated_host_dir(std::string* host_dir);
  private:
  const std::string& _internal_host_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_dir(const std::string& value);
  std::string* _internal_mutable_host_dir();
  public:

  // string raft_address = 5 [json_name = "raftAddress"];
  void clear_raft_address();
  const std::string& raft_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raft_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raft_address();
  PROTOBUF_NODISCARD std::string* release_raft_address();
  void set_allocated_raft_address(std::string* raft_address);
  private:
  const std::string& _internal_raft_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raft_address(const std::string& value);
  std::string* _internal_mutable_raft_address();
  public:

  // string listen_address = 7 [json_name = "listenAddress"];
  void clear_listen_address();
  const std::string& listen_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listen_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listen_address();
  PROTOBUF_NODISCARD std::string* release_listen_address();
  void set_allocated_listen_address(std::string* listen_address);
  private:
  const std::string& _internal_listen_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listen_address(const std::string& value);
  std::string* _internal_mutable_listen_address();
  public:

  // string ca_file = 9 [json_name = "caFile"];
  void clear_ca_file();
  const std::string& ca_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca_file();
  PROTOBUF_NODISCARD std::string* release_ca_file();
  void set_allocated_ca_file(std::string* ca_file);
  private:
  const std::string& _internal_ca_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca_file(const std::string& value);
  std::string* _internal_mutable_ca_file();
  public:

  // string cert_file = 10 [json_name = "certFile"];
  void clear_cert_file();
  const std::string& cert_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cert_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cert_file();
  PROTOBUF_NODISCARD std::string* release_cert_file();
  void set_allocated_cert_file(std::string* cert_file);
  private:
  const std::string& _internal_cert_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cert_file(const std::string& value);
  std::string* _internal_mutable_cert_file();
  public:

  // string key_file = 11 [json_name = "keyFile"];
  void clear_key_file();
  const std::string& key_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_file();
  PROTOBUF_NODISCARD std::string* release_key_file();
  void set_allocated_key_file(std::string* key_file);
  private:
  const std::string& _internal_key_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_file(const std::string& value);
  std::string* _internal_mutable_key_file();
  public:

  // uint64 deployment_id = 1 [json_name = "deploymentId"];
  void clear_deployment_id();
  uint64_t deployment_id() const;
  void set_deployment_id(uint64_t value);
  private:
  uint64_t _internal_deployment_id() const;
  void _internal_set_deployment_id(uint64_t value);
  public:

  // uint64 round_trip_time_in_milliseconds = 4 [json_name = "roundTripTimeInMilliseconds"];
  void clear_round_trip_time_in_milliseconds();
  uint64_t round_trip_time_in_milliseconds() const;
  void set_round_trip_time_in_milliseconds(uint64_t value);
  private:
  uint64_t _internal_round_trip_time_in_milliseconds() const;
  void _internal_set_round_trip_time_in_milliseconds(uint64_t value);
  public:

  // bool address_by_host_id = 6 [json_name = "addressByHostId"];
  void clear_address_by_host_id();
  bool address_by_host_id() const;
  void set_address_by_host_id(bool value);
  private:
  bool _internal_address_by_host_id() const;
  void _internal_set_address_by_host_id(bool value);
  public:

  // bool mutual_tls = 8 [json_name = "mutualTls"];
  void clear_mutual_tls();
  bool mutual_tls() const;
  void set_mutual_tls(bool value);
  private:
  bool _internal_mutual_tls() const;
  void _internal_set_mutual_tls(bool value);
  public:

  // bool enable_metrics = 12 [json_name = "enableMetrics"];
  void clear_enable_metrics();
  bool enable_metrics() const;
  void set_enable_metrics(bool value);
  private:
  bool _internal_enable_metrics() const;
  void _internal_set_enable_metrics(bool value);
  public:

  // bool notify_commit = 13 [json_name = "notifyCommit"];
  void clear_notify_commit();
  bool notify_commit() const;
  void set_notify_commit(bool value);
  private:
  bool _internal_notify_commit() const;
  void _internal_set_notify_commit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.HostConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wal_dir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_dir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raft_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listen_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_file_;
    uint64_t deployment_id_;
    uint64_t round_trip_time_in_milliseconds_;
    bool address_by_host_id_;
    bool mutual_tls_;
    bool enable_metrics_;
    bool notify_commit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompactRequest

// uint64 replica_id = 1 [json_name = "replicaId"];
inline void CompactRequest::clear_replica_id() {
  _impl_.replica_id_ = uint64_t{0u};
}
inline uint64_t CompactRequest::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline uint64_t CompactRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.CompactRequest.replica_id)
  return _internal_replica_id();
}
inline void CompactRequest::_internal_set_replica_id(uint64_t value) {
  
  _impl_.replica_id_ = value;
}
inline void CompactRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.CompactRequest.replica_id)
}

// uint64 shard_id = 2 [json_name = "shardId"];
inline void CompactRequest::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t CompactRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t CompactRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.CompactRequest.shard_id)
  return _internal_shard_id();
}
inline void CompactRequest::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void CompactRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.CompactRequest.shard_id)
}

// -------------------------------------------------------------------

// CompactResponse

// -------------------------------------------------------------------

// LeaderTransferRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void LeaderTransferRequest::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t LeaderTransferRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t LeaderTransferRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.LeaderTransferRequest.shard_id)
  return _internal_shard_id();
}
inline void LeaderTransferRequest::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void LeaderTransferRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.LeaderTransferRequest.shard_id)
}

// string target_node_id = 2 [json_name = "targetNodeId"];
inline void LeaderTransferRequest::clear_target_node_id() {
  _impl_.target_node_id_.ClearToEmpty();
}
inline const std::string& LeaderTransferRequest::target_node_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.LeaderTransferRequest.target_node_id)
  return _internal_target_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaderTransferRequest::set_target_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.LeaderTransferRequest.target_node_id)
}
inline std::string* LeaderTransferRequest::mutable_target_node_id() {
  std::string* _s = _internal_mutable_target_node_id();
  // @@protoc_insertion_point(field_mutable:raft.v1.LeaderTransferRequest.target_node_id)
  return _s;
}
inline const std::string& LeaderTransferRequest::_internal_target_node_id() const {
  return _impl_.target_node_id_.Get();
}
inline void LeaderTransferRequest::_internal_set_target_node_id(const std::string& value) {
  
  _impl_.target_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaderTransferRequest::_internal_mutable_target_node_id() {
  
  return _impl_.target_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaderTransferRequest::release_target_node_id() {
  // @@protoc_insertion_point(field_release:raft.v1.LeaderTransferRequest.target_node_id)
  return _impl_.target_node_id_.Release();
}
inline void LeaderTransferRequest::set_allocated_target_node_id(std::string* target_node_id) {
  if (target_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_node_id_.SetAllocated(target_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_node_id_.IsDefault()) {
    _impl_.target_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.LeaderTransferRequest.target_node_id)
}

// -------------------------------------------------------------------

// LeaderTransferResponse

// -------------------------------------------------------------------

// SnapshotRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void SnapshotRequest::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t SnapshotRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t SnapshotRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.SnapshotRequest.shard_id)
  return _internal_shard_id();
}
inline void SnapshotRequest::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void SnapshotRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.SnapshotRequest.shard_id)
}

// int64 timeout = 2 [json_name = "timeout"];
inline void SnapshotRequest::clear_timeout() {
  _impl_.timeout_ = int64_t{0};
}
inline int64_t SnapshotRequest::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int64_t SnapshotRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.SnapshotRequest.timeout)
  return _internal_timeout();
}
inline void SnapshotRequest::_internal_set_timeout(int64_t value) {
  
  _impl_.timeout_ = value;
}
inline void SnapshotRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.SnapshotRequest.timeout)
}

// -------------------------------------------------------------------

// SnapshotResponse

// uint64 snapshot_index_captured = 1 [json_name = "snapshotIndexCaptured"];
inline void SnapshotResponse::clear_snapshot_index_captured() {
  _impl_.snapshot_index_captured_ = uint64_t{0u};
}
inline uint64_t SnapshotResponse::_internal_snapshot_index_captured() const {
  return _impl_.snapshot_index_captured_;
}
inline uint64_t SnapshotResponse::snapshot_index_captured() const {
  // @@protoc_insertion_point(field_get:raft.v1.SnapshotResponse.snapshot_index_captured)
  return _internal_snapshot_index_captured();
}
inline void SnapshotResponse::_internal_set_snapshot_index_captured(uint64_t value) {
  
  _impl_.snapshot_index_captured_ = value;
}
inline void SnapshotResponse::set_snapshot_index_captured(uint64_t value) {
  _internal_set_snapshot_index_captured(value);
  // @@protoc_insertion_point(field_set:raft.v1.SnapshotResponse.snapshot_index_captured)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// GetHostConfigRequest

// -------------------------------------------------------------------

// GetHostConfigResponse

// .raft.v1.HostConfig config = 1 [json_name = "config"];
inline bool GetHostConfigResponse::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool GetHostConfigResponse::has_config() const {
  return _internal_has_config();
}
inline void GetHostConfigResponse::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::raft::v1::HostConfig& GetHostConfigResponse::_internal_config() const {
  const ::raft::v1::HostConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::raft::v1::HostConfig&>(
      ::raft::v1::_HostConfig_default_instance_);
}
inline const ::raft::v1::HostConfig& GetHostConfigResponse::config() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetHostConfigResponse.config)
  return _internal_config();
}
inline void GetHostConfigResponse::unsafe_arena_set_allocated_config(
    ::raft::v1::HostConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.GetHostConfigResponse.config)
}
inline ::raft::v1::HostConfig* GetHostConfigResponse::release_config() {
  
  ::raft::v1::HostConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raft::v1::HostConfig* GetHostConfigResponse::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:raft.v1.GetHostConfigResponse.config)
  
  ::raft::v1::HostConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::raft::v1::HostConfig* GetHostConfigResponse::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft::v1::HostConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::raft::v1::HostConfig* GetHostConfigResponse::mutable_config() {
  ::raft::v1::HostConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:raft.v1.GetHostConfigResponse.config)
  return _msg;
}
inline void GetHostConfigResponse::set_allocated_config(::raft::v1::HostConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:raft.v1.GetHostConfigResponse.config)
}

// -------------------------------------------------------------------

// GetShardMembershipRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void GetShardMembershipRequest::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t GetShardMembershipRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t GetShardMembershipRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetShardMembershipRequest.shard_id)
  return _internal_shard_id();
}
inline void GetShardMembershipRequest::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void GetShardMembershipRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetShardMembershipRequest.shard_id)
}

// -------------------------------------------------------------------

// HostConfig

// uint64 deployment_id = 1 [json_name = "deploymentId"];
inline void HostConfig::clear_deployment_id() {
  _impl_.deployment_id_ = uint64_t{0u};
}
inline uint64_t HostConfig::_internal_deployment_id() const {
  return _impl_.deployment_id_;
}
inline uint64_t HostConfig::deployment_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.deployment_id)
  return _internal_deployment_id();
}
inline void HostConfig::_internal_set_deployment_id(uint64_t value) {
  
  _impl_.deployment_id_ = value;
}
inline void HostConfig::set_deployment_id(uint64_t value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.deployment_id)
}

// string wal_dir = 2 [json_name = "walDir"];
inline void HostConfig::clear_wal_dir() {
  _impl_.wal_dir_.ClearToEmpty();
}
inline const std::string& HostConfig::wal_dir() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.wal_dir)
  return _internal_wal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_wal_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wal_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.wal_dir)
}
inline std::string* HostConfig::mutable_wal_dir() {
  std::string* _s = _internal_mutable_wal_dir();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.wal_dir)
  return _s;
}
inline const std::string& HostConfig::_internal_wal_dir() const {
  return _impl_.wal_dir_.Get();
}
inline void HostConfig::_internal_set_wal_dir(const std::string& value) {
  
  _impl_.wal_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_wal_dir() {
  
  return _impl_.wal_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_wal_dir() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.wal_dir)
  return _impl_.wal_dir_.Release();
}
inline void HostConfig::set_allocated_wal_dir(std::string* wal_dir) {
  if (wal_dir != nullptr) {
    
  } else {
    
  }
  _impl_.wal_dir_.SetAllocated(wal_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wal_dir_.IsDefault()) {
    _impl_.wal_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.wal_dir)
}

// string host_dir = 3 [json_name = "hostDir"];
inline void HostConfig::clear_host_dir() {
  _impl_.host_dir_.ClearToEmpty();
}
inline const std::string& HostConfig::host_dir() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.host_dir)
  return _internal_host_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_host_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.host_dir)
}
inline std::string* HostConfig::mutable_host_dir() {
  std::string* _s = _internal_mutable_host_dir();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.host_dir)
  return _s;
}
inline const std::string& HostConfig::_internal_host_dir() const {
  return _impl_.host_dir_.Get();
}
inline void HostConfig::_internal_set_host_dir(const std::string& value) {
  
  _impl_.host_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_host_dir() {
  
  return _impl_.host_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_host_dir() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.host_dir)
  return _impl_.host_dir_.Release();
}
inline void HostConfig::set_allocated_host_dir(std::string* host_dir) {
  if (host_dir != nullptr) {
    
  } else {
    
  }
  _impl_.host_dir_.SetAllocated(host_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_dir_.IsDefault()) {
    _impl_.host_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.host_dir)
}

// uint64 round_trip_time_in_milliseconds = 4 [json_name = "roundTripTimeInMilliseconds"];
inline void HostConfig::clear_round_trip_time_in_milliseconds() {
  _impl_.round_trip_time_in_milliseconds_ = uint64_t{0u};
}
inline uint64_t HostConfig::_internal_round_trip_time_in_milliseconds() const {
  return _impl_.round_trip_time_in_milliseconds_;
}
inline uint64_t HostConfig::round_trip_time_in_milliseconds() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.round_trip_time_in_milliseconds)
  return _internal_round_trip_time_in_milliseconds();
}
inline void HostConfig::_internal_set_round_trip_time_in_milliseconds(uint64_t value) {
  
  _impl_.round_trip_time_in_milliseconds_ = value;
}
inline void HostConfig::set_round_trip_time_in_milliseconds(uint64_t value) {
  _internal_set_round_trip_time_in_milliseconds(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.round_trip_time_in_milliseconds)
}

// string raft_address = 5 [json_name = "raftAddress"];
inline void HostConfig::clear_raft_address() {
  _impl_.raft_address_.ClearToEmpty();
}
inline const std::string& HostConfig::raft_address() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.raft_address)
  return _internal_raft_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_raft_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raft_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.raft_address)
}
inline std::string* HostConfig::mutable_raft_address() {
  std::string* _s = _internal_mutable_raft_address();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.raft_address)
  return _s;
}
inline const std::string& HostConfig::_internal_raft_address() const {
  return _impl_.raft_address_.Get();
}
inline void HostConfig::_internal_set_raft_address(const std::string& value) {
  
  _impl_.raft_address_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_raft_address() {
  
  return _impl_.raft_address_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_raft_address() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.raft_address)
  return _impl_.raft_address_.Release();
}
inline void HostConfig::set_allocated_raft_address(std::string* raft_address) {
  if (raft_address != nullptr) {
    
  } else {
    
  }
  _impl_.raft_address_.SetAllocated(raft_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raft_address_.IsDefault()) {
    _impl_.raft_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.raft_address)
}

// bool address_by_host_id = 6 [json_name = "addressByHostId"];
inline void HostConfig::clear_address_by_host_id() {
  _impl_.address_by_host_id_ = false;
}
inline bool HostConfig::_internal_address_by_host_id() const {
  return _impl_.address_by_host_id_;
}
inline bool HostConfig::address_by_host_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.address_by_host_id)
  return _internal_address_by_host_id();
}
inline void HostConfig::_internal_set_address_by_host_id(bool value) {
  
  _impl_.address_by_host_id_ = value;
}
inline void HostConfig::set_address_by_host_id(bool value) {
  _internal_set_address_by_host_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.address_by_host_id)
}

// string listen_address = 7 [json_name = "listenAddress"];
inline void HostConfig::clear_listen_address() {
  _impl_.listen_address_.ClearToEmpty();
}
inline const std::string& HostConfig::listen_address() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.listen_address)
  return _internal_listen_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_listen_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listen_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.listen_address)
}
inline std::string* HostConfig::mutable_listen_address() {
  std::string* _s = _internal_mutable_listen_address();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.listen_address)
  return _s;
}
inline const std::string& HostConfig::_internal_listen_address() const {
  return _impl_.listen_address_.Get();
}
inline void HostConfig::_internal_set_listen_address(const std::string& value) {
  
  _impl_.listen_address_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_listen_address() {
  
  return _impl_.listen_address_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_listen_address() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.listen_address)
  return _impl_.listen_address_.Release();
}
inline void HostConfig::set_allocated_listen_address(std::string* listen_address) {
  if (listen_address != nullptr) {
    
  } else {
    
  }
  _impl_.listen_address_.SetAllocated(listen_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listen_address_.IsDefault()) {
    _impl_.listen_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.listen_address)
}

// bool mutual_tls = 8 [json_name = "mutualTls"];
inline void HostConfig::clear_mutual_tls() {
  _impl_.mutual_tls_ = false;
}
inline bool HostConfig::_internal_mutual_tls() const {
  return _impl_.mutual_tls_;
}
inline bool HostConfig::mutual_tls() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.mutual_tls)
  return _internal_mutual_tls();
}
inline void HostConfig::_internal_set_mutual_tls(bool value) {
  
  _impl_.mutual_tls_ = value;
}
inline void HostConfig::set_mutual_tls(bool value) {
  _internal_set_mutual_tls(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.mutual_tls)
}

// string ca_file = 9 [json_name = "caFile"];
inline void HostConfig::clear_ca_file() {
  _impl_.ca_file_.ClearToEmpty();
}
inline const std::string& HostConfig::ca_file() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.ca_file)
  return _internal_ca_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_ca_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ca_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.ca_file)
}
inline std::string* HostConfig::mutable_ca_file() {
  std::string* _s = _internal_mutable_ca_file();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.ca_file)
  return _s;
}
inline const std::string& HostConfig::_internal_ca_file() const {
  return _impl_.ca_file_.Get();
}
inline void HostConfig::_internal_set_ca_file(const std::string& value) {
  
  _impl_.ca_file_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_ca_file() {
  
  return _impl_.ca_file_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_ca_file() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.ca_file)
  return _impl_.ca_file_.Release();
}
inline void HostConfig::set_allocated_ca_file(std::string* ca_file) {
  if (ca_file != nullptr) {
    
  } else {
    
  }
  _impl_.ca_file_.SetAllocated(ca_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ca_file_.IsDefault()) {
    _impl_.ca_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.ca_file)
}

// string cert_file = 10 [json_name = "certFile"];
inline void HostConfig::clear_cert_file() {
  _impl_.cert_file_.ClearToEmpty();
}
inline const std::string& HostConfig::cert_file() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.cert_file)
  return _internal_cert_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_cert_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cert_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.cert_file)
}
inline std::string* HostConfig::mutable_cert_file() {
  std::string* _s = _internal_mutable_cert_file();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.cert_file)
  return _s;
}
inline const std::string& HostConfig::_internal_cert_file() const {
  return _impl_.cert_file_.Get();
}
inline void HostConfig::_internal_set_cert_file(const std::string& value) {
  
  _impl_.cert_file_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_cert_file() {
  
  return _impl_.cert_file_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_cert_file() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.cert_file)
  return _impl_.cert_file_.Release();
}
inline void HostConfig::set_allocated_cert_file(std::string* cert_file) {
  if (cert_file != nullptr) {
    
  } else {
    
  }
  _impl_.cert_file_.SetAllocated(cert_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cert_file_.IsDefault()) {
    _impl_.cert_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.cert_file)
}

// string key_file = 11 [json_name = "keyFile"];
inline void HostConfig::clear_key_file() {
  _impl_.key_file_.ClearToEmpty();
}
inline const std::string& HostConfig::key_file() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.key_file)
  return _internal_key_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostConfig::set_key_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.key_file)
}
inline std::string* HostConfig::mutable_key_file() {
  std::string* _s = _internal_mutable_key_file();
  // @@protoc_insertion_point(field_mutable:raft.v1.HostConfig.key_file)
  return _s;
}
inline const std::string& HostConfig::_internal_key_file() const {
  return _impl_.key_file_.Get();
}
inline void HostConfig::_internal_set_key_file(const std::string& value) {
  
  _impl_.key_file_.Set(value, GetArenaForAllocation());
}
inline std::string* HostConfig::_internal_mutable_key_file() {
  
  return _impl_.key_file_.Mutable(GetArenaForAllocation());
}
inline std::string* HostConfig::release_key_file() {
  // @@protoc_insertion_point(field_release:raft.v1.HostConfig.key_file)
  return _impl_.key_file_.Release();
}
inline void HostConfig::set_allocated_key_file(std::string* key_file) {
  if (key_file != nullptr) {
    
  } else {
    
  }
  _impl_.key_file_.SetAllocated(key_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_file_.IsDefault()) {
    _impl_.key_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.HostConfig.key_file)
}

// bool enable_metrics = 12 [json_name = "enableMetrics"];
inline void HostConfig::clear_enable_metrics() {
  _impl_.enable_metrics_ = false;
}
inline bool HostConfig::_internal_enable_metrics() const {
  return _impl_.enable_metrics_;
}
inline bool HostConfig::enable_metrics() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.enable_metrics)
  return _internal_enable_metrics();
}
inline void HostConfig::_internal_set_enable_metrics(bool value) {
  
  _impl_.enable_metrics_ = value;
}
inline void HostConfig::set_enable_metrics(bool value) {
  _internal_set_enable_metrics(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.enable_metrics)
}

// bool notify_commit = 13 [json_name = "notifyCommit"];
inline void HostConfig::clear_notify_commit() {
  _impl_.notify_commit_ = false;
}
inline bool HostConfig::_internal_notify_commit() const {
  return _impl_.notify_commit_;
}
inline bool HostConfig::notify_commit() const {
  // @@protoc_insertion_point(field_get:raft.v1.HostConfig.notify_commit)
  return _internal_notify_commit();
}
inline void HostConfig::_internal_set_notify_commit(bool value) {
  
  _impl_.notify_commit_ = value;
}
inline void HostConfig::set_notify_commit(bool value) {
  _internal_set_notify_commit(value);
  // @@protoc_insertion_point(field_set:raft.v1.HostConfig.notify_commit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fhost_2eproto
