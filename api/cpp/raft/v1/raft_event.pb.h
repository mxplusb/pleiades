// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2fv1_2fraft_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2fv1_2fraft_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fevent_2eproto;
namespace raft {
namespace v1 {
class RaftConnectionEvent;
struct RaftConnectionEventDefaultTypeInternal;
extern RaftConnectionEventDefaultTypeInternal _RaftConnectionEvent_default_instance_;
class RaftEvent;
struct RaftEventDefaultTypeInternal;
extern RaftEventDefaultTypeInternal _RaftEvent_default_instance_;
class RaftHostShutdown;
struct RaftHostShutdownDefaultTypeInternal;
extern RaftHostShutdownDefaultTypeInternal _RaftHostShutdown_default_instance_;
class RaftLeaderInfo;
struct RaftLeaderInfoDefaultTypeInternal;
extern RaftLeaderInfoDefaultTypeInternal _RaftLeaderInfo_default_instance_;
class RaftLogEntryEvent;
struct RaftLogEntryEventDefaultTypeInternal;
extern RaftLogEntryEventDefaultTypeInternal _RaftLogEntryEvent_default_instance_;
class RaftNodeEvent;
struct RaftNodeEventDefaultTypeInternal;
extern RaftNodeEventDefaultTypeInternal _RaftNodeEvent_default_instance_;
class RaftSnapshotEvent;
struct RaftSnapshotEventDefaultTypeInternal;
extern RaftSnapshotEventDefaultTypeInternal _RaftSnapshotEvent_default_instance_;
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::v1::RaftConnectionEvent* Arena::CreateMaybeMessage<::raft::v1::RaftConnectionEvent>(Arena*);
template<> ::raft::v1::RaftEvent* Arena::CreateMaybeMessage<::raft::v1::RaftEvent>(Arena*);
template<> ::raft::v1::RaftHostShutdown* Arena::CreateMaybeMessage<::raft::v1::RaftHostShutdown>(Arena*);
template<> ::raft::v1::RaftLeaderInfo* Arena::CreateMaybeMessage<::raft::v1::RaftLeaderInfo>(Arena*);
template<> ::raft::v1::RaftLogEntryEvent* Arena::CreateMaybeMessage<::raft::v1::RaftLogEntryEvent>(Arena*);
template<> ::raft::v1::RaftNodeEvent* Arena::CreateMaybeMessage<::raft::v1::RaftNodeEvent>(Arena*);
template<> ::raft::v1::RaftSnapshotEvent* Arena::CreateMaybeMessage<::raft::v1::RaftSnapshotEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {
namespace v1 {

enum EventType : int {
  EVENT_TYPE_UNSPECIFIED = 0,
  EVENT_TYPE_LOG_ENTRY = 1,
  EVENT_TYPE_SNAPSHOT = 2,
  EVENT_TYPE_CONNECTION = 3,
  EVENT_TYPE_HOST = 4,
  EVENT_TYPE_NODE = 5,
  EVENT_TYPE_RAFT = 6,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = EVENT_TYPE_UNSPECIFIED;
constexpr EventType EventType_MAX = EVENT_TYPE_RAFT;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum Event : int {
  EVENT_UNSPECIFIED = 0,
  EVENT_CONNECTION_ESTABLISHED = 1,
  EVENT_CONNECTION_FAILED = 2,
  EVENT_LOG_COMPACTED = 3,
  EVENT_LOGDB_COMPACTED = 4,
  EVENT_MEMBERSHIP_CHANGED = 5,
  EVENT_NODE_HOST_SHUTTING_DOWN = 6,
  EVENT_NODE_READY = 7,
  EVENT_NODE_UNLOADED = 8,
  EVENT_SEND_SNAPSHOT_ABORTED = 9,
  EVENT_SEND_SNAPSHOT_COMPLETED = 10,
  EVENT_SEND_SNAPSHOT_STARTED = 11,
  EVENT_SNAPSHOT_COMPACTED = 12,
  EVENT_SNAPSHOT_CREATED = 13,
  EVENT_SNAPSHOT_RECEIVED = 14,
  EVENT_SNAPSHOT_RECOVERED = 15,
  EVENT_LEADER_UPDATED = 16,
  Event_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Event_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Event_IsValid(int value);
constexpr Event Event_MIN = EVENT_UNSPECIFIED;
constexpr Event Event_MAX = EVENT_LEADER_UPDATED;
constexpr int Event_ARRAYSIZE = Event_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor();
template<typename T>
inline const std::string& Event_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_descriptor(), enum_t_value);
}
inline bool Event_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Event* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event>(
    Event_descriptor(), name, value);
}
// ===================================================================

class RaftEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftEvent) */ {
 public:
  inline RaftEvent() : RaftEvent(nullptr) {}
  ~RaftEvent() override;
  explicit PROTOBUF_CONSTEXPR RaftEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftEvent(const RaftEvent& from);
  RaftEvent(RaftEvent&& from) noexcept
    : RaftEvent() {
    *this = ::std::move(from);
  }

  inline RaftEvent& operator=(const RaftEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftEvent& operator=(RaftEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kLogEntry = 4,
    kSnapshot = 5,
    kConnection = 6,
    kNode = 7,
    kHostShutdown = 8,
    kLeaderUpdate = 9,
    EVENT_NOT_SET = 0,
  };

  static inline const RaftEvent* internal_default_instance() {
    return reinterpret_cast<const RaftEvent*>(
               &_RaftEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaftEvent& a, RaftEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftEvent& from) {
    RaftEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftEvent";
  }
  protected:
  explicit RaftEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 3,
    kTypFieldNumber = 1,
    kActionFieldNumber = 2,
    kLogEntryFieldNumber = 4,
    kSnapshotFieldNumber = 5,
    kConnectionFieldNumber = 6,
    kNodeFieldNumber = 7,
    kHostShutdownFieldNumber = 8,
    kLeaderUpdateFieldNumber = 9,
  };
  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .raft.v1.EventType typ = 1 [json_name = "typ"];
  void clear_typ();
  ::raft::v1::EventType typ() const;
  void set_typ(::raft::v1::EventType value);
  private:
  ::raft::v1::EventType _internal_typ() const;
  void _internal_set_typ(::raft::v1::EventType value);
  public:

  // .raft.v1.Event action = 2 [json_name = "action"];
  void clear_action();
  ::raft::v1::Event action() const;
  void set_action(::raft::v1::Event value);
  private:
  ::raft::v1::Event _internal_action() const;
  void _internal_set_action(::raft::v1::Event value);
  public:

  // .raft.v1.RaftLogEntryEvent log_entry = 4 [json_name = "logEntry"];
  bool has_log_entry() const;
  private:
  bool _internal_has_log_entry() const;
  public:
  void clear_log_entry();
  const ::raft::v1::RaftLogEntryEvent& log_entry() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftLogEntryEvent* release_log_entry();
  ::raft::v1::RaftLogEntryEvent* mutable_log_entry();
  void set_allocated_log_entry(::raft::v1::RaftLogEntryEvent* log_entry);
  private:
  const ::raft::v1::RaftLogEntryEvent& _internal_log_entry() const;
  ::raft::v1::RaftLogEntryEvent* _internal_mutable_log_entry();
  public:
  void unsafe_arena_set_allocated_log_entry(
      ::raft::v1::RaftLogEntryEvent* log_entry);
  ::raft::v1::RaftLogEntryEvent* unsafe_arena_release_log_entry();

  // .raft.v1.RaftSnapshotEvent snapshot = 5 [json_name = "snapshot"];
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::raft::v1::RaftSnapshotEvent& snapshot() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftSnapshotEvent* release_snapshot();
  ::raft::v1::RaftSnapshotEvent* mutable_snapshot();
  void set_allocated_snapshot(::raft::v1::RaftSnapshotEvent* snapshot);
  private:
  const ::raft::v1::RaftSnapshotEvent& _internal_snapshot() const;
  ::raft::v1::RaftSnapshotEvent* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::raft::v1::RaftSnapshotEvent* snapshot);
  ::raft::v1::RaftSnapshotEvent* unsafe_arena_release_snapshot();

  // .raft.v1.RaftConnectionEvent connection = 6 [json_name = "connection"];
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::raft::v1::RaftConnectionEvent& connection() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftConnectionEvent* release_connection();
  ::raft::v1::RaftConnectionEvent* mutable_connection();
  void set_allocated_connection(::raft::v1::RaftConnectionEvent* connection);
  private:
  const ::raft::v1::RaftConnectionEvent& _internal_connection() const;
  ::raft::v1::RaftConnectionEvent* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::raft::v1::RaftConnectionEvent* connection);
  ::raft::v1::RaftConnectionEvent* unsafe_arena_release_connection();

  // .raft.v1.RaftNodeEvent node = 7 [json_name = "node"];
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::raft::v1::RaftNodeEvent& node() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftNodeEvent* release_node();
  ::raft::v1::RaftNodeEvent* mutable_node();
  void set_allocated_node(::raft::v1::RaftNodeEvent* node);
  private:
  const ::raft::v1::RaftNodeEvent& _internal_node() const;
  ::raft::v1::RaftNodeEvent* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::raft::v1::RaftNodeEvent* node);
  ::raft::v1::RaftNodeEvent* unsafe_arena_release_node();

  // .raft.v1.RaftHostShutdown host_shutdown = 8 [json_name = "hostShutdown"];
  bool has_host_shutdown() const;
  private:
  bool _internal_has_host_shutdown() const;
  public:
  void clear_host_shutdown();
  const ::raft::v1::RaftHostShutdown& host_shutdown() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftHostShutdown* release_host_shutdown();
  ::raft::v1::RaftHostShutdown* mutable_host_shutdown();
  void set_allocated_host_shutdown(::raft::v1::RaftHostShutdown* host_shutdown);
  private:
  const ::raft::v1::RaftHostShutdown& _internal_host_shutdown() const;
  ::raft::v1::RaftHostShutdown* _internal_mutable_host_shutdown();
  public:
  void unsafe_arena_set_allocated_host_shutdown(
      ::raft::v1::RaftHostShutdown* host_shutdown);
  ::raft::v1::RaftHostShutdown* unsafe_arena_release_host_shutdown();

  // .raft.v1.RaftLeaderInfo leader_update = 9 [json_name = "leaderUpdate"];
  bool has_leader_update() const;
  private:
  bool _internal_has_leader_update() const;
  public:
  void clear_leader_update();
  const ::raft::v1::RaftLeaderInfo& leader_update() const;
  PROTOBUF_NODISCARD ::raft::v1::RaftLeaderInfo* release_leader_update();
  ::raft::v1::RaftLeaderInfo* mutable_leader_update();
  void set_allocated_leader_update(::raft::v1::RaftLeaderInfo* leader_update);
  private:
  const ::raft::v1::RaftLeaderInfo& _internal_leader_update() const;
  ::raft::v1::RaftLeaderInfo* _internal_mutable_leader_update();
  public:
  void unsafe_arena_set_allocated_leader_update(
      ::raft::v1::RaftLeaderInfo* leader_update);
  ::raft::v1::RaftLeaderInfo* unsafe_arena_release_leader_update();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:raft.v1.RaftEvent)
 private:
  class _Internal;
  void set_has_log_entry();
  void set_has_snapshot();
  void set_has_connection();
  void set_has_node();
  void set_has_host_shutdown();
  void set_has_leader_update();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    int typ_;
    int action_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::raft::v1::RaftLogEntryEvent* log_entry_;
      ::raft::v1::RaftSnapshotEvent* snapshot_;
      ::raft::v1::RaftConnectionEvent* connection_;
      ::raft::v1::RaftNodeEvent* node_;
      ::raft::v1::RaftHostShutdown* host_shutdown_;
      ::raft::v1::RaftLeaderInfo* leader_update_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftLeaderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftLeaderInfo) */ {
 public:
  inline RaftLeaderInfo() : RaftLeaderInfo(nullptr) {}
  ~RaftLeaderInfo() override;
  explicit PROTOBUF_CONSTEXPR RaftLeaderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftLeaderInfo(const RaftLeaderInfo& from);
  RaftLeaderInfo(RaftLeaderInfo&& from) noexcept
    : RaftLeaderInfo() {
    *this = ::std::move(from);
  }

  inline RaftLeaderInfo& operator=(const RaftLeaderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftLeaderInfo& operator=(RaftLeaderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftLeaderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftLeaderInfo* internal_default_instance() {
    return reinterpret_cast<const RaftLeaderInfo*>(
               &_RaftLeaderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RaftLeaderInfo& a, RaftLeaderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftLeaderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftLeaderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftLeaderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftLeaderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftLeaderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftLeaderInfo& from) {
    RaftLeaderInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftLeaderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftLeaderInfo";
  }
  protected:
  explicit RaftLeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTermFieldNumber = 3,
    kLeaderIdFieldNumber = 4,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // uint64 term = 3 [json_name = "term"];
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 leader_id = 4 [json_name = "leaderId"];
  void clear_leader_id();
  uint64_t leader_id() const;
  void set_leader_id(uint64_t value);
  private:
  uint64_t _internal_leader_id() const;
  void _internal_set_leader_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RaftLeaderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t replica_id_;
    uint64_t term_;
    uint64_t leader_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftLogEntryEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftLogEntryEvent) */ {
 public:
  inline RaftLogEntryEvent() : RaftLogEntryEvent(nullptr) {}
  ~RaftLogEntryEvent() override;
  explicit PROTOBUF_CONSTEXPR RaftLogEntryEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftLogEntryEvent(const RaftLogEntryEvent& from);
  RaftLogEntryEvent(RaftLogEntryEvent&& from) noexcept
    : RaftLogEntryEvent() {
    *this = ::std::move(from);
  }

  inline RaftLogEntryEvent& operator=(const RaftLogEntryEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftLogEntryEvent& operator=(RaftLogEntryEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftLogEntryEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftLogEntryEvent* internal_default_instance() {
    return reinterpret_cast<const RaftLogEntryEvent*>(
               &_RaftLogEntryEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RaftLogEntryEvent& a, RaftLogEntryEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftLogEntryEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftLogEntryEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftLogEntryEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftLogEntryEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftLogEntryEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftLogEntryEvent& from) {
    RaftLogEntryEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftLogEntryEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftLogEntryEvent";
  }
  protected:
  explicit RaftLogEntryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // uint64 index = 3 [json_name = "index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RaftLogEntryEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t replica_id_;
    uint64_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftSnapshotEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftSnapshotEvent) */ {
 public:
  inline RaftSnapshotEvent() : RaftSnapshotEvent(nullptr) {}
  ~RaftSnapshotEvent() override;
  explicit PROTOBUF_CONSTEXPR RaftSnapshotEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftSnapshotEvent(const RaftSnapshotEvent& from);
  RaftSnapshotEvent(RaftSnapshotEvent&& from) noexcept
    : RaftSnapshotEvent() {
    *this = ::std::move(from);
  }

  inline RaftSnapshotEvent& operator=(const RaftSnapshotEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftSnapshotEvent& operator=(RaftSnapshotEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftSnapshotEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftSnapshotEvent* internal_default_instance() {
    return reinterpret_cast<const RaftSnapshotEvent*>(
               &_RaftSnapshotEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RaftSnapshotEvent& a, RaftSnapshotEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftSnapshotEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftSnapshotEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftSnapshotEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftSnapshotEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftSnapshotEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftSnapshotEvent& from) {
    RaftSnapshotEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftSnapshotEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftSnapshotEvent";
  }
  protected:
  explicit RaftSnapshotEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kFromIndexFieldNumber = 3,
    kToIndexFieldNumber = 4,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // uint64 from_index = 3 [json_name = "fromIndex"];
  void clear_from_index();
  uint64_t from_index() const;
  void set_from_index(uint64_t value);
  private:
  uint64_t _internal_from_index() const;
  void _internal_set_from_index(uint64_t value);
  public:

  // uint64 to_index = 4 [json_name = "toIndex"];
  void clear_to_index();
  uint64_t to_index() const;
  void set_to_index(uint64_t value);
  private:
  uint64_t _internal_to_index() const;
  void _internal_set_to_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RaftSnapshotEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t replica_id_;
    uint64_t from_index_;
    uint64_t to_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftConnectionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftConnectionEvent) */ {
 public:
  inline RaftConnectionEvent() : RaftConnectionEvent(nullptr) {}
  ~RaftConnectionEvent() override;
  explicit PROTOBUF_CONSTEXPR RaftConnectionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftConnectionEvent(const RaftConnectionEvent& from);
  RaftConnectionEvent(RaftConnectionEvent&& from) noexcept
    : RaftConnectionEvent() {
    *this = ::std::move(from);
  }

  inline RaftConnectionEvent& operator=(const RaftConnectionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftConnectionEvent& operator=(RaftConnectionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftConnectionEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftConnectionEvent* internal_default_instance() {
    return reinterpret_cast<const RaftConnectionEvent*>(
               &_RaftConnectionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RaftConnectionEvent& a, RaftConnectionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftConnectionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftConnectionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftConnectionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftConnectionEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftConnectionEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftConnectionEvent& from) {
    RaftConnectionEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftConnectionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftConnectionEvent";
  }
  protected:
  explicit RaftConnectionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kIsSnapshotFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool is_snapshot = 2 [json_name = "isSnapshot"];
  void clear_is_snapshot();
  bool is_snapshot() const;
  void set_is_snapshot(bool value);
  private:
  bool _internal_is_snapshot() const;
  void _internal_set_is_snapshot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RaftConnectionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    bool is_snapshot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftNodeEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RaftNodeEvent) */ {
 public:
  inline RaftNodeEvent() : RaftNodeEvent(nullptr) {}
  ~RaftNodeEvent() override;
  explicit PROTOBUF_CONSTEXPR RaftNodeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftNodeEvent(const RaftNodeEvent& from);
  RaftNodeEvent(RaftNodeEvent&& from) noexcept
    : RaftNodeEvent() {
    *this = ::std::move(from);
  }

  inline RaftNodeEvent& operator=(const RaftNodeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftNodeEvent& operator=(RaftNodeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftNodeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftNodeEvent* internal_default_instance() {
    return reinterpret_cast<const RaftNodeEvent*>(
               &_RaftNodeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RaftNodeEvent& a, RaftNodeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftNodeEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftNodeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftNodeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftNodeEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftNodeEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftNodeEvent& from) {
    RaftNodeEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftNodeEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftNodeEvent";
  }
  protected:
  explicit RaftNodeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RaftNodeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t shard_id_;
    uint64_t replica_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// -------------------------------------------------------------------

class RaftHostShutdown final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.RaftHostShutdown) */ {
 public:
  inline RaftHostShutdown() : RaftHostShutdown(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RaftHostShutdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftHostShutdown(const RaftHostShutdown& from);
  RaftHostShutdown(RaftHostShutdown&& from) noexcept
    : RaftHostShutdown() {
    *this = ::std::move(from);
  }

  inline RaftHostShutdown& operator=(const RaftHostShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftHostShutdown& operator=(RaftHostShutdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftHostShutdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftHostShutdown* internal_default_instance() {
    return reinterpret_cast<const RaftHostShutdown*>(
               &_RaftHostShutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RaftHostShutdown& a, RaftHostShutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftHostShutdown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftHostShutdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftHostShutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftHostShutdown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RaftHostShutdown& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RaftHostShutdown& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RaftHostShutdown";
  }
  protected:
  explicit RaftHostShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.RaftHostShutdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_raft_2fv1_2fraft_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaftEvent

// .raft.v1.EventType typ = 1 [json_name = "typ"];
inline void RaftEvent::clear_typ() {
  _impl_.typ_ = 0;
}
inline ::raft::v1::EventType RaftEvent::_internal_typ() const {
  return static_cast< ::raft::v1::EventType >(_impl_.typ_);
}
inline ::raft::v1::EventType RaftEvent::typ() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.typ)
  return _internal_typ();
}
inline void RaftEvent::_internal_set_typ(::raft::v1::EventType value) {
  
  _impl_.typ_ = value;
}
inline void RaftEvent::set_typ(::raft::v1::EventType value) {
  _internal_set_typ(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftEvent.typ)
}

// .raft.v1.Event action = 2 [json_name = "action"];
inline void RaftEvent::clear_action() {
  _impl_.action_ = 0;
}
inline ::raft::v1::Event RaftEvent::_internal_action() const {
  return static_cast< ::raft::v1::Event >(_impl_.action_);
}
inline ::raft::v1::Event RaftEvent::action() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.action)
  return _internal_action();
}
inline void RaftEvent::_internal_set_action(::raft::v1::Event value) {
  
  _impl_.action_ = value;
}
inline void RaftEvent::set_action(::raft::v1::Event value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftEvent.action)
}

// .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp"];
inline bool RaftEvent::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool RaftEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RaftEvent::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RaftEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.timestamp)
  return _internal_timestamp();
}
inline void RaftEvent::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RaftEvent::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RaftEvent::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RaftEvent::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RaftEvent::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.timestamp)
  return _msg;
}
inline void RaftEvent::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftEvent.timestamp)
}

// .raft.v1.RaftLogEntryEvent log_entry = 4 [json_name = "logEntry"];
inline bool RaftEvent::_internal_has_log_entry() const {
  return event_case() == kLogEntry;
}
inline bool RaftEvent::has_log_entry() const {
  return _internal_has_log_entry();
}
inline void RaftEvent::set_has_log_entry() {
  _impl_._oneof_case_[0] = kLogEntry;
}
inline void RaftEvent::clear_log_entry() {
  if (_internal_has_log_entry()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.log_entry_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftLogEntryEvent* RaftEvent::release_log_entry() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.log_entry)
  if (_internal_has_log_entry()) {
    clear_has_event();
    ::raft::v1::RaftLogEntryEvent* temp = _impl_.event_.log_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.log_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftLogEntryEvent& RaftEvent::_internal_log_entry() const {
  return _internal_has_log_entry()
      ? *_impl_.event_.log_entry_
      : reinterpret_cast< ::raft::v1::RaftLogEntryEvent&>(::raft::v1::_RaftLogEntryEvent_default_instance_);
}
inline const ::raft::v1::RaftLogEntryEvent& RaftEvent::log_entry() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.log_entry)
  return _internal_log_entry();
}
inline ::raft::v1::RaftLogEntryEvent* RaftEvent::unsafe_arena_release_log_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.log_entry)
  if (_internal_has_log_entry()) {
    clear_has_event();
    ::raft::v1::RaftLogEntryEvent* temp = _impl_.event_.log_entry_;
    _impl_.event_.log_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_log_entry(::raft::v1::RaftLogEntryEvent* log_entry) {
  clear_event();
  if (log_entry) {
    set_has_log_entry();
    _impl_.event_.log_entry_ = log_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.log_entry)
}
inline ::raft::v1::RaftLogEntryEvent* RaftEvent::_internal_mutable_log_entry() {
  if (!_internal_has_log_entry()) {
    clear_event();
    set_has_log_entry();
    _impl_.event_.log_entry_ = CreateMaybeMessage< ::raft::v1::RaftLogEntryEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.log_entry_;
}
inline ::raft::v1::RaftLogEntryEvent* RaftEvent::mutable_log_entry() {
  ::raft::v1::RaftLogEntryEvent* _msg = _internal_mutable_log_entry();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.log_entry)
  return _msg;
}

// .raft.v1.RaftSnapshotEvent snapshot = 5 [json_name = "snapshot"];
inline bool RaftEvent::_internal_has_snapshot() const {
  return event_case() == kSnapshot;
}
inline bool RaftEvent::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void RaftEvent::set_has_snapshot() {
  _impl_._oneof_case_[0] = kSnapshot;
}
inline void RaftEvent::clear_snapshot() {
  if (_internal_has_snapshot()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.snapshot_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftSnapshotEvent* RaftEvent::release_snapshot() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_event();
    ::raft::v1::RaftSnapshotEvent* temp = _impl_.event_.snapshot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftSnapshotEvent& RaftEvent::_internal_snapshot() const {
  return _internal_has_snapshot()
      ? *_impl_.event_.snapshot_
      : reinterpret_cast< ::raft::v1::RaftSnapshotEvent&>(::raft::v1::_RaftSnapshotEvent_default_instance_);
}
inline const ::raft::v1::RaftSnapshotEvent& RaftEvent::snapshot() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.snapshot)
  return _internal_snapshot();
}
inline ::raft::v1::RaftSnapshotEvent* RaftEvent::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_event();
    ::raft::v1::RaftSnapshotEvent* temp = _impl_.event_.snapshot_;
    _impl_.event_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_snapshot(::raft::v1::RaftSnapshotEvent* snapshot) {
  clear_event();
  if (snapshot) {
    set_has_snapshot();
    _impl_.event_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.snapshot)
}
inline ::raft::v1::RaftSnapshotEvent* RaftEvent::_internal_mutable_snapshot() {
  if (!_internal_has_snapshot()) {
    clear_event();
    set_has_snapshot();
    _impl_.event_.snapshot_ = CreateMaybeMessage< ::raft::v1::RaftSnapshotEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.snapshot_;
}
inline ::raft::v1::RaftSnapshotEvent* RaftEvent::mutable_snapshot() {
  ::raft::v1::RaftSnapshotEvent* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.snapshot)
  return _msg;
}

// .raft.v1.RaftConnectionEvent connection = 6 [json_name = "connection"];
inline bool RaftEvent::_internal_has_connection() const {
  return event_case() == kConnection;
}
inline bool RaftEvent::has_connection() const {
  return _internal_has_connection();
}
inline void RaftEvent::set_has_connection() {
  _impl_._oneof_case_[0] = kConnection;
}
inline void RaftEvent::clear_connection() {
  if (_internal_has_connection()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.connection_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftConnectionEvent* RaftEvent::release_connection() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.connection)
  if (_internal_has_connection()) {
    clear_has_event();
    ::raft::v1::RaftConnectionEvent* temp = _impl_.event_.connection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftConnectionEvent& RaftEvent::_internal_connection() const {
  return _internal_has_connection()
      ? *_impl_.event_.connection_
      : reinterpret_cast< ::raft::v1::RaftConnectionEvent&>(::raft::v1::_RaftConnectionEvent_default_instance_);
}
inline const ::raft::v1::RaftConnectionEvent& RaftEvent::connection() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.connection)
  return _internal_connection();
}
inline ::raft::v1::RaftConnectionEvent* RaftEvent::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.connection)
  if (_internal_has_connection()) {
    clear_has_event();
    ::raft::v1::RaftConnectionEvent* temp = _impl_.event_.connection_;
    _impl_.event_.connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_connection(::raft::v1::RaftConnectionEvent* connection) {
  clear_event();
  if (connection) {
    set_has_connection();
    _impl_.event_.connection_ = connection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.connection)
}
inline ::raft::v1::RaftConnectionEvent* RaftEvent::_internal_mutable_connection() {
  if (!_internal_has_connection()) {
    clear_event();
    set_has_connection();
    _impl_.event_.connection_ = CreateMaybeMessage< ::raft::v1::RaftConnectionEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.connection_;
}
inline ::raft::v1::RaftConnectionEvent* RaftEvent::mutable_connection() {
  ::raft::v1::RaftConnectionEvent* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.connection)
  return _msg;
}

// .raft.v1.RaftNodeEvent node = 7 [json_name = "node"];
inline bool RaftEvent::_internal_has_node() const {
  return event_case() == kNode;
}
inline bool RaftEvent::has_node() const {
  return _internal_has_node();
}
inline void RaftEvent::set_has_node() {
  _impl_._oneof_case_[0] = kNode;
}
inline void RaftEvent::clear_node() {
  if (_internal_has_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.node_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftNodeEvent* RaftEvent::release_node() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.node)
  if (_internal_has_node()) {
    clear_has_event();
    ::raft::v1::RaftNodeEvent* temp = _impl_.event_.node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftNodeEvent& RaftEvent::_internal_node() const {
  return _internal_has_node()
      ? *_impl_.event_.node_
      : reinterpret_cast< ::raft::v1::RaftNodeEvent&>(::raft::v1::_RaftNodeEvent_default_instance_);
}
inline const ::raft::v1::RaftNodeEvent& RaftEvent::node() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.node)
  return _internal_node();
}
inline ::raft::v1::RaftNodeEvent* RaftEvent::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.node)
  if (_internal_has_node()) {
    clear_has_event();
    ::raft::v1::RaftNodeEvent* temp = _impl_.event_.node_;
    _impl_.event_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_node(::raft::v1::RaftNodeEvent* node) {
  clear_event();
  if (node) {
    set_has_node();
    _impl_.event_.node_ = node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.node)
}
inline ::raft::v1::RaftNodeEvent* RaftEvent::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_event();
    set_has_node();
    _impl_.event_.node_ = CreateMaybeMessage< ::raft::v1::RaftNodeEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.node_;
}
inline ::raft::v1::RaftNodeEvent* RaftEvent::mutable_node() {
  ::raft::v1::RaftNodeEvent* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.node)
  return _msg;
}

// .raft.v1.RaftHostShutdown host_shutdown = 8 [json_name = "hostShutdown"];
inline bool RaftEvent::_internal_has_host_shutdown() const {
  return event_case() == kHostShutdown;
}
inline bool RaftEvent::has_host_shutdown() const {
  return _internal_has_host_shutdown();
}
inline void RaftEvent::set_has_host_shutdown() {
  _impl_._oneof_case_[0] = kHostShutdown;
}
inline void RaftEvent::clear_host_shutdown() {
  if (_internal_has_host_shutdown()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.host_shutdown_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftHostShutdown* RaftEvent::release_host_shutdown() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.host_shutdown)
  if (_internal_has_host_shutdown()) {
    clear_has_event();
    ::raft::v1::RaftHostShutdown* temp = _impl_.event_.host_shutdown_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.host_shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftHostShutdown& RaftEvent::_internal_host_shutdown() const {
  return _internal_has_host_shutdown()
      ? *_impl_.event_.host_shutdown_
      : reinterpret_cast< ::raft::v1::RaftHostShutdown&>(::raft::v1::_RaftHostShutdown_default_instance_);
}
inline const ::raft::v1::RaftHostShutdown& RaftEvent::host_shutdown() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.host_shutdown)
  return _internal_host_shutdown();
}
inline ::raft::v1::RaftHostShutdown* RaftEvent::unsafe_arena_release_host_shutdown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.host_shutdown)
  if (_internal_has_host_shutdown()) {
    clear_has_event();
    ::raft::v1::RaftHostShutdown* temp = _impl_.event_.host_shutdown_;
    _impl_.event_.host_shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_host_shutdown(::raft::v1::RaftHostShutdown* host_shutdown) {
  clear_event();
  if (host_shutdown) {
    set_has_host_shutdown();
    _impl_.event_.host_shutdown_ = host_shutdown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.host_shutdown)
}
inline ::raft::v1::RaftHostShutdown* RaftEvent::_internal_mutable_host_shutdown() {
  if (!_internal_has_host_shutdown()) {
    clear_event();
    set_has_host_shutdown();
    _impl_.event_.host_shutdown_ = CreateMaybeMessage< ::raft::v1::RaftHostShutdown >(GetArenaForAllocation());
  }
  return _impl_.event_.host_shutdown_;
}
inline ::raft::v1::RaftHostShutdown* RaftEvent::mutable_host_shutdown() {
  ::raft::v1::RaftHostShutdown* _msg = _internal_mutable_host_shutdown();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.host_shutdown)
  return _msg;
}

// .raft.v1.RaftLeaderInfo leader_update = 9 [json_name = "leaderUpdate"];
inline bool RaftEvent::_internal_has_leader_update() const {
  return event_case() == kLeaderUpdate;
}
inline bool RaftEvent::has_leader_update() const {
  return _internal_has_leader_update();
}
inline void RaftEvent::set_has_leader_update() {
  _impl_._oneof_case_[0] = kLeaderUpdate;
}
inline void RaftEvent::clear_leader_update() {
  if (_internal_has_leader_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.leader_update_;
    }
    clear_has_event();
  }
}
inline ::raft::v1::RaftLeaderInfo* RaftEvent::release_leader_update() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftEvent.leader_update)
  if (_internal_has_leader_update()) {
    clear_has_event();
    ::raft::v1::RaftLeaderInfo* temp = _impl_.event_.leader_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.leader_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::raft::v1::RaftLeaderInfo& RaftEvent::_internal_leader_update() const {
  return _internal_has_leader_update()
      ? *_impl_.event_.leader_update_
      : reinterpret_cast< ::raft::v1::RaftLeaderInfo&>(::raft::v1::_RaftLeaderInfo_default_instance_);
}
inline const ::raft::v1::RaftLeaderInfo& RaftEvent::leader_update() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftEvent.leader_update)
  return _internal_leader_update();
}
inline ::raft::v1::RaftLeaderInfo* RaftEvent::unsafe_arena_release_leader_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.v1.RaftEvent.leader_update)
  if (_internal_has_leader_update()) {
    clear_has_event();
    ::raft::v1::RaftLeaderInfo* temp = _impl_.event_.leader_update_;
    _impl_.event_.leader_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftEvent::unsafe_arena_set_allocated_leader_update(::raft::v1::RaftLeaderInfo* leader_update) {
  clear_event();
  if (leader_update) {
    set_has_leader_update();
    _impl_.event_.leader_update_ = leader_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.v1.RaftEvent.leader_update)
}
inline ::raft::v1::RaftLeaderInfo* RaftEvent::_internal_mutable_leader_update() {
  if (!_internal_has_leader_update()) {
    clear_event();
    set_has_leader_update();
    _impl_.event_.leader_update_ = CreateMaybeMessage< ::raft::v1::RaftLeaderInfo >(GetArenaForAllocation());
  }
  return _impl_.event_.leader_update_;
}
inline ::raft::v1::RaftLeaderInfo* RaftEvent::mutable_leader_update() {
  ::raft::v1::RaftLeaderInfo* _msg = _internal_mutable_leader_update();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftEvent.leader_update)
  return _msg;
}

inline bool RaftEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void RaftEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline RaftEvent::EventCase RaftEvent::event_case() const {
  return RaftEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RaftLeaderInfo

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RaftLeaderInfo::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t RaftLeaderInfo::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t RaftLeaderInfo::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLeaderInfo.shard_id)
  return _internal_shard_id();
}
inline void RaftLeaderInfo::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void RaftLeaderInfo::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLeaderInfo.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RaftLeaderInfo::clear_replica_id() {
  _impl_.replica_id_ = uint64_t{0u};
}
inline uint64_t RaftLeaderInfo::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline uint64_t RaftLeaderInfo::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLeaderInfo.replica_id)
  return _internal_replica_id();
}
inline void RaftLeaderInfo::_internal_set_replica_id(uint64_t value) {
  
  _impl_.replica_id_ = value;
}
inline void RaftLeaderInfo::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLeaderInfo.replica_id)
}

// uint64 term = 3 [json_name = "term"];
inline void RaftLeaderInfo::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t RaftLeaderInfo::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t RaftLeaderInfo::term() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLeaderInfo.term)
  return _internal_term();
}
inline void RaftLeaderInfo::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void RaftLeaderInfo::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLeaderInfo.term)
}

// uint64 leader_id = 4 [json_name = "leaderId"];
inline void RaftLeaderInfo::clear_leader_id() {
  _impl_.leader_id_ = uint64_t{0u};
}
inline uint64_t RaftLeaderInfo::_internal_leader_id() const {
  return _impl_.leader_id_;
}
inline uint64_t RaftLeaderInfo::leader_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLeaderInfo.leader_id)
  return _internal_leader_id();
}
inline void RaftLeaderInfo::_internal_set_leader_id(uint64_t value) {
  
  _impl_.leader_id_ = value;
}
inline void RaftLeaderInfo::set_leader_id(uint64_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLeaderInfo.leader_id)
}

// -------------------------------------------------------------------

// RaftLogEntryEvent

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RaftLogEntryEvent::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t RaftLogEntryEvent::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t RaftLogEntryEvent::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLogEntryEvent.shard_id)
  return _internal_shard_id();
}
inline void RaftLogEntryEvent::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void RaftLogEntryEvent::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLogEntryEvent.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RaftLogEntryEvent::clear_replica_id() {
  _impl_.replica_id_ = uint64_t{0u};
}
inline uint64_t RaftLogEntryEvent::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline uint64_t RaftLogEntryEvent::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLogEntryEvent.replica_id)
  return _internal_replica_id();
}
inline void RaftLogEntryEvent::_internal_set_replica_id(uint64_t value) {
  
  _impl_.replica_id_ = value;
}
inline void RaftLogEntryEvent::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLogEntryEvent.replica_id)
}

// uint64 index = 3 [json_name = "index"];
inline void RaftLogEntryEvent::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t RaftLogEntryEvent::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t RaftLogEntryEvent::index() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftLogEntryEvent.index)
  return _internal_index();
}
inline void RaftLogEntryEvent::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void RaftLogEntryEvent::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftLogEntryEvent.index)
}

// -------------------------------------------------------------------

// RaftSnapshotEvent

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RaftSnapshotEvent::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t RaftSnapshotEvent::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t RaftSnapshotEvent::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftSnapshotEvent.shard_id)
  return _internal_shard_id();
}
inline void RaftSnapshotEvent::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void RaftSnapshotEvent::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftSnapshotEvent.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RaftSnapshotEvent::clear_replica_id() {
  _impl_.replica_id_ = uint64_t{0u};
}
inline uint64_t RaftSnapshotEvent::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline uint64_t RaftSnapshotEvent::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftSnapshotEvent.replica_id)
  return _internal_replica_id();
}
inline void RaftSnapshotEvent::_internal_set_replica_id(uint64_t value) {
  
  _impl_.replica_id_ = value;
}
inline void RaftSnapshotEvent::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftSnapshotEvent.replica_id)
}

// uint64 from_index = 3 [json_name = "fromIndex"];
inline void RaftSnapshotEvent::clear_from_index() {
  _impl_.from_index_ = uint64_t{0u};
}
inline uint64_t RaftSnapshotEvent::_internal_from_index() const {
  return _impl_.from_index_;
}
inline uint64_t RaftSnapshotEvent::from_index() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftSnapshotEvent.from_index)
  return _internal_from_index();
}
inline void RaftSnapshotEvent::_internal_set_from_index(uint64_t value) {
  
  _impl_.from_index_ = value;
}
inline void RaftSnapshotEvent::set_from_index(uint64_t value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftSnapshotEvent.from_index)
}

// uint64 to_index = 4 [json_name = "toIndex"];
inline void RaftSnapshotEvent::clear_to_index() {
  _impl_.to_index_ = uint64_t{0u};
}
inline uint64_t RaftSnapshotEvent::_internal_to_index() const {
  return _impl_.to_index_;
}
inline uint64_t RaftSnapshotEvent::to_index() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftSnapshotEvent.to_index)
  return _internal_to_index();
}
inline void RaftSnapshotEvent::_internal_set_to_index(uint64_t value) {
  
  _impl_.to_index_ = value;
}
inline void RaftSnapshotEvent::set_to_index(uint64_t value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftSnapshotEvent.to_index)
}

// -------------------------------------------------------------------

// RaftConnectionEvent

// string address = 1 [json_name = "address"];
inline void RaftConnectionEvent::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& RaftConnectionEvent::address() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftConnectionEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftConnectionEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.RaftConnectionEvent.address)
}
inline std::string* RaftConnectionEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:raft.v1.RaftConnectionEvent.address)
  return _s;
}
inline const std::string& RaftConnectionEvent::_internal_address() const {
  return _impl_.address_.Get();
}
inline void RaftConnectionEvent::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftConnectionEvent::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftConnectionEvent::release_address() {
  // @@protoc_insertion_point(field_release:raft.v1.RaftConnectionEvent.address)
  return _impl_.address_.Release();
}
inline void RaftConnectionEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.RaftConnectionEvent.address)
}

// bool is_snapshot = 2 [json_name = "isSnapshot"];
inline void RaftConnectionEvent::clear_is_snapshot() {
  _impl_.is_snapshot_ = false;
}
inline bool RaftConnectionEvent::_internal_is_snapshot() const {
  return _impl_.is_snapshot_;
}
inline bool RaftConnectionEvent::is_snapshot() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftConnectionEvent.is_snapshot)
  return _internal_is_snapshot();
}
inline void RaftConnectionEvent::_internal_set_is_snapshot(bool value) {
  
  _impl_.is_snapshot_ = value;
}
inline void RaftConnectionEvent::set_is_snapshot(bool value) {
  _internal_set_is_snapshot(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftConnectionEvent.is_snapshot)
}

// -------------------------------------------------------------------

// RaftNodeEvent

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RaftNodeEvent::clear_shard_id() {
  _impl_.shard_id_ = uint64_t{0u};
}
inline uint64_t RaftNodeEvent::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint64_t RaftNodeEvent::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftNodeEvent.shard_id)
  return _internal_shard_id();
}
inline void RaftNodeEvent::_internal_set_shard_id(uint64_t value) {
  
  _impl_.shard_id_ = value;
}
inline void RaftNodeEvent::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftNodeEvent.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RaftNodeEvent::clear_replica_id() {
  _impl_.replica_id_ = uint64_t{0u};
}
inline uint64_t RaftNodeEvent::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline uint64_t RaftNodeEvent::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RaftNodeEvent.replica_id)
  return _internal_replica_id();
}
inline void RaftNodeEvent::_internal_set_replica_id(uint64_t value) {
  
  _impl_.replica_id_ = value;
}
inline void RaftNodeEvent::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RaftNodeEvent.replica_id)
}

// -------------------------------------------------------------------

// RaftHostShutdown

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace raft

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raft::v1::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::v1::EventType>() {
  return ::raft::v1::EventType_descriptor();
}
template <> struct is_proto_enum< ::raft::v1::Event> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::v1::Event>() {
  return ::raft::v1::Event_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fevent_2eproto
