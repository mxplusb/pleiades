// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_shard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fshard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fshard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2fv1_2fraft_5fshard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2fv1_2fraft_5fshard_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fshard_2eproto;
namespace raft {
namespace v1 {
class AddReplicaObserverRequest;
struct AddReplicaObserverRequestDefaultTypeInternal;
extern AddReplicaObserverRequestDefaultTypeInternal _AddReplicaObserverRequest_default_instance_;
class AddReplicaObserverResponse;
struct AddReplicaObserverResponseDefaultTypeInternal;
extern AddReplicaObserverResponseDefaultTypeInternal _AddReplicaObserverResponse_default_instance_;
class AddReplicaRequest;
struct AddReplicaRequestDefaultTypeInternal;
extern AddReplicaRequestDefaultTypeInternal _AddReplicaRequest_default_instance_;
class AddReplicaResponse;
struct AddReplicaResponseDefaultTypeInternal;
extern AddReplicaResponseDefaultTypeInternal _AddReplicaResponse_default_instance_;
class AddReplicaWitnessRequest;
struct AddReplicaWitnessRequestDefaultTypeInternal;
extern AddReplicaWitnessRequestDefaultTypeInternal _AddReplicaWitnessRequest_default_instance_;
class AddReplicaWitnessResponse;
struct AddReplicaWitnessResponseDefaultTypeInternal;
extern AddReplicaWitnessResponseDefaultTypeInternal _AddReplicaWitnessResponse_default_instance_;
class GetLeaderIdRequest;
struct GetLeaderIdRequestDefaultTypeInternal;
extern GetLeaderIdRequestDefaultTypeInternal _GetLeaderIdRequest_default_instance_;
class GetLeaderIdResponse;
struct GetLeaderIdResponseDefaultTypeInternal;
extern GetLeaderIdResponseDefaultTypeInternal _GetLeaderIdResponse_default_instance_;
class GetShardMembersRequest;
struct GetShardMembersRequestDefaultTypeInternal;
extern GetShardMembersRequestDefaultTypeInternal _GetShardMembersRequest_default_instance_;
class GetShardMembersResponse;
struct GetShardMembersResponseDefaultTypeInternal;
extern GetShardMembersResponseDefaultTypeInternal _GetShardMembersResponse_default_instance_;
class GetShardMembersResponse_ObserversEntry_DoNotUse;
struct GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal;
extern GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_ObserversEntry_DoNotUse_default_instance_;
class GetShardMembersResponse_RemovedEntry_DoNotUse;
struct GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal;
extern GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_RemovedEntry_DoNotUse_default_instance_;
class GetShardMembersResponse_ReplicasEntry_DoNotUse;
struct GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal;
extern GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_ReplicasEntry_DoNotUse_default_instance_;
class GetShardMembersResponse_WitnessesEntry_DoNotUse;
struct GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal;
extern GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_WitnessesEntry_DoNotUse_default_instance_;
class NewShardRequest;
struct NewShardRequestDefaultTypeInternal;
extern NewShardRequestDefaultTypeInternal _NewShardRequest_default_instance_;
class NewShardResponse;
struct NewShardResponseDefaultTypeInternal;
extern NewShardResponseDefaultTypeInternal _NewShardResponse_default_instance_;
class RemoveDataRequest;
struct RemoveDataRequestDefaultTypeInternal;
extern RemoveDataRequestDefaultTypeInternal _RemoveDataRequest_default_instance_;
class RemoveDataResponse;
struct RemoveDataResponseDefaultTypeInternal;
extern RemoveDataResponseDefaultTypeInternal _RemoveDataResponse_default_instance_;
class RemoveReplicaRequest;
struct RemoveReplicaRequestDefaultTypeInternal;
extern RemoveReplicaRequestDefaultTypeInternal _RemoveReplicaRequest_default_instance_;
class RemoveReplicaResponse;
struct RemoveReplicaResponseDefaultTypeInternal;
extern RemoveReplicaResponseDefaultTypeInternal _RemoveReplicaResponse_default_instance_;
class StartReplicaObserverRequest;
struct StartReplicaObserverRequestDefaultTypeInternal;
extern StartReplicaObserverRequestDefaultTypeInternal _StartReplicaObserverRequest_default_instance_;
class StartReplicaObserverResponse;
struct StartReplicaObserverResponseDefaultTypeInternal;
extern StartReplicaObserverResponseDefaultTypeInternal _StartReplicaObserverResponse_default_instance_;
class StartReplicaRequest;
struct StartReplicaRequestDefaultTypeInternal;
extern StartReplicaRequestDefaultTypeInternal _StartReplicaRequest_default_instance_;
class StartReplicaResponse;
struct StartReplicaResponseDefaultTypeInternal;
extern StartReplicaResponseDefaultTypeInternal _StartReplicaResponse_default_instance_;
class StopReplicaRequest;
struct StopReplicaRequestDefaultTypeInternal;
extern StopReplicaRequestDefaultTypeInternal _StopReplicaRequest_default_instance_;
class StopReplicaResponse;
struct StopReplicaResponseDefaultTypeInternal;
extern StopReplicaResponseDefaultTypeInternal _StopReplicaResponse_default_instance_;
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::v1::AddReplicaObserverRequest* Arena::CreateMaybeMessage<::raft::v1::AddReplicaObserverRequest>(Arena*);
template<> ::raft::v1::AddReplicaObserverResponse* Arena::CreateMaybeMessage<::raft::v1::AddReplicaObserverResponse>(Arena*);
template<> ::raft::v1::AddReplicaRequest* Arena::CreateMaybeMessage<::raft::v1::AddReplicaRequest>(Arena*);
template<> ::raft::v1::AddReplicaResponse* Arena::CreateMaybeMessage<::raft::v1::AddReplicaResponse>(Arena*);
template<> ::raft::v1::AddReplicaWitnessRequest* Arena::CreateMaybeMessage<::raft::v1::AddReplicaWitnessRequest>(Arena*);
template<> ::raft::v1::AddReplicaWitnessResponse* Arena::CreateMaybeMessage<::raft::v1::AddReplicaWitnessResponse>(Arena*);
template<> ::raft::v1::GetLeaderIdRequest* Arena::CreateMaybeMessage<::raft::v1::GetLeaderIdRequest>(Arena*);
template<> ::raft::v1::GetLeaderIdResponse* Arena::CreateMaybeMessage<::raft::v1::GetLeaderIdResponse>(Arena*);
template<> ::raft::v1::GetShardMembersRequest* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersRequest>(Arena*);
template<> ::raft::v1::GetShardMembersResponse* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersResponse>(Arena*);
template<> ::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse>(Arena*);
template<> ::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse>(Arena*);
template<> ::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse>(Arena*);
template<> ::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse* Arena::CreateMaybeMessage<::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse>(Arena*);
template<> ::raft::v1::NewShardRequest* Arena::CreateMaybeMessage<::raft::v1::NewShardRequest>(Arena*);
template<> ::raft::v1::NewShardResponse* Arena::CreateMaybeMessage<::raft::v1::NewShardResponse>(Arena*);
template<> ::raft::v1::RemoveDataRequest* Arena::CreateMaybeMessage<::raft::v1::RemoveDataRequest>(Arena*);
template<> ::raft::v1::RemoveDataResponse* Arena::CreateMaybeMessage<::raft::v1::RemoveDataResponse>(Arena*);
template<> ::raft::v1::RemoveReplicaRequest* Arena::CreateMaybeMessage<::raft::v1::RemoveReplicaRequest>(Arena*);
template<> ::raft::v1::RemoveReplicaResponse* Arena::CreateMaybeMessage<::raft::v1::RemoveReplicaResponse>(Arena*);
template<> ::raft::v1::StartReplicaObserverRequest* Arena::CreateMaybeMessage<::raft::v1::StartReplicaObserverRequest>(Arena*);
template<> ::raft::v1::StartReplicaObserverResponse* Arena::CreateMaybeMessage<::raft::v1::StartReplicaObserverResponse>(Arena*);
template<> ::raft::v1::StartReplicaRequest* Arena::CreateMaybeMessage<::raft::v1::StartReplicaRequest>(Arena*);
template<> ::raft::v1::StartReplicaResponse* Arena::CreateMaybeMessage<::raft::v1::StartReplicaResponse>(Arena*);
template<> ::raft::v1::StopReplicaRequest* Arena::CreateMaybeMessage<::raft::v1::StopReplicaRequest>(Arena*);
template<> ::raft::v1::StopReplicaResponse* Arena::CreateMaybeMessage<::raft::v1::StopReplicaResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {
namespace v1 {

enum StateMachineType : int {
  STATE_MACHINE_TYPE_UNSPECIFIED = 0,
  STATE_MACHINE_TYPE_TEST = 0,
  STATE_MACHINE_TYPE_KV = 1,
  StateMachineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StateMachineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StateMachineType_IsValid(int value);
constexpr StateMachineType StateMachineType_MIN = STATE_MACHINE_TYPE_UNSPECIFIED;
constexpr StateMachineType StateMachineType_MAX = STATE_MACHINE_TYPE_KV;
constexpr int StateMachineType_ARRAYSIZE = StateMachineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateMachineType_descriptor();
template<typename T>
inline const std::string& StateMachineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateMachineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateMachineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateMachineType_descriptor(), enum_t_value);
}
inline bool StateMachineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateMachineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateMachineType>(
    StateMachineType_descriptor(), name, value);
}
// ===================================================================

class AddReplicaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaRequest) */ {
 public:
  inline AddReplicaRequest() : AddReplicaRequest(nullptr) {}
  ~AddReplicaRequest() override;
  explicit PROTOBUF_CONSTEXPR AddReplicaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaRequest(const AddReplicaRequest& from);
  AddReplicaRequest(AddReplicaRequest&& from) noexcept
    : AddReplicaRequest() {
    *this = ::std::move(from);
  }

  inline AddReplicaRequest& operator=(const AddReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaRequest& operator=(AddReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const AddReplicaRequest*>(
               &_AddReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddReplicaRequest& a, AddReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddReplicaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddReplicaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaRequest";
  }
  protected:
  explicit AddReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 4,
    kReplicaIdFieldNumber = 1,
    kShardIdFieldNumber = 2,
    kTimeoutFieldNumber = 5,
  };
  // string hostname = 4 [json_name = "hostname"];
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint64 replica_id = 1 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // uint64 shard_id = 2 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // int64 timeout = 5 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint64_t replica_id_;
  uint64_t shard_id_;
  int64_t timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class AddReplicaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaResponse) */ {
 public:
  inline AddReplicaResponse() : AddReplicaResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddReplicaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaResponse(const AddReplicaResponse& from);
  AddReplicaResponse(AddReplicaResponse&& from) noexcept
    : AddReplicaResponse() {
    *this = ::std::move(from);
  }

  inline AddReplicaResponse& operator=(const AddReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaResponse& operator=(AddReplicaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const AddReplicaResponse*>(
               &_AddReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddReplicaResponse& a, AddReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaResponse";
  }
  protected:
  explicit AddReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class AddReplicaObserverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaObserverRequest) */ {
 public:
  inline AddReplicaObserverRequest() : AddReplicaObserverRequest(nullptr) {}
  ~AddReplicaObserverRequest() override;
  explicit PROTOBUF_CONSTEXPR AddReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaObserverRequest(const AddReplicaObserverRequest& from);
  AddReplicaObserverRequest(AddReplicaObserverRequest&& from) noexcept
    : AddReplicaObserverRequest() {
    *this = ::std::move(from);
  }

  inline AddReplicaObserverRequest& operator=(const AddReplicaObserverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaObserverRequest& operator=(AddReplicaObserverRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaObserverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaObserverRequest* internal_default_instance() {
    return reinterpret_cast<const AddReplicaObserverRequest*>(
               &_AddReplicaObserverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddReplicaObserverRequest& a, AddReplicaObserverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaObserverRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaObserverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaObserverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaObserverRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddReplicaObserverRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddReplicaObserverRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaObserverRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaObserverRequest";
  }
  protected:
  explicit AddReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 3,
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTimeoutFieldNumber = 4,
  };
  // string hostname = 3 [json_name = "hostname"];
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // int64 timeout = 4 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaObserverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int64_t timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class AddReplicaObserverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaObserverResponse) */ {
 public:
  inline AddReplicaObserverResponse() : AddReplicaObserverResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaObserverResponse(const AddReplicaObserverResponse& from);
  AddReplicaObserverResponse(AddReplicaObserverResponse&& from) noexcept
    : AddReplicaObserverResponse() {
    *this = ::std::move(from);
  }

  inline AddReplicaObserverResponse& operator=(const AddReplicaObserverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaObserverResponse& operator=(AddReplicaObserverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaObserverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaObserverResponse* internal_default_instance() {
    return reinterpret_cast<const AddReplicaObserverResponse*>(
               &_AddReplicaObserverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddReplicaObserverResponse& a, AddReplicaObserverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaObserverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaObserverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaObserverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaObserverResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddReplicaObserverResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddReplicaObserverResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaObserverResponse";
  }
  protected:
  explicit AddReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaObserverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class AddReplicaWitnessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaWitnessRequest) */ {
 public:
  inline AddReplicaWitnessRequest() : AddReplicaWitnessRequest(nullptr) {}
  ~AddReplicaWitnessRequest() override;
  explicit PROTOBUF_CONSTEXPR AddReplicaWitnessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaWitnessRequest(const AddReplicaWitnessRequest& from);
  AddReplicaWitnessRequest(AddReplicaWitnessRequest&& from) noexcept
    : AddReplicaWitnessRequest() {
    *this = ::std::move(from);
  }

  inline AddReplicaWitnessRequest& operator=(const AddReplicaWitnessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaWitnessRequest& operator=(AddReplicaWitnessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaWitnessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaWitnessRequest* internal_default_instance() {
    return reinterpret_cast<const AddReplicaWitnessRequest*>(
               &_AddReplicaWitnessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddReplicaWitnessRequest& a, AddReplicaWitnessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaWitnessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaWitnessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaWitnessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaWitnessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddReplicaWitnessRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddReplicaWitnessRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaWitnessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaWitnessRequest";
  }
  protected:
  explicit AddReplicaWitnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 3,
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTimeoutFieldNumber = 4,
  };
  // string hostname = 3 [json_name = "hostname"];
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // int64 timeout = 4 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaWitnessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int64_t timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class AddReplicaWitnessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.AddReplicaWitnessResponse) */ {
 public:
  inline AddReplicaWitnessResponse() : AddReplicaWitnessResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddReplicaWitnessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddReplicaWitnessResponse(const AddReplicaWitnessResponse& from);
  AddReplicaWitnessResponse(AddReplicaWitnessResponse&& from) noexcept
    : AddReplicaWitnessResponse() {
    *this = ::std::move(from);
  }

  inline AddReplicaWitnessResponse& operator=(const AddReplicaWitnessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReplicaWitnessResponse& operator=(AddReplicaWitnessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReplicaWitnessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReplicaWitnessResponse* internal_default_instance() {
    return reinterpret_cast<const AddReplicaWitnessResponse*>(
               &_AddReplicaWitnessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddReplicaWitnessResponse& a, AddReplicaWitnessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReplicaWitnessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReplicaWitnessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReplicaWitnessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddReplicaWitnessResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddReplicaWitnessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddReplicaWitnessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.AddReplicaWitnessResponse";
  }
  protected:
  explicit AddReplicaWitnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.AddReplicaWitnessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class RemoveReplicaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RemoveReplicaRequest) */ {
 public:
  inline RemoveReplicaRequest() : RemoveReplicaRequest(nullptr) {}
  ~RemoveReplicaRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveReplicaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveReplicaRequest(const RemoveReplicaRequest& from);
  RemoveReplicaRequest(RemoveReplicaRequest&& from) noexcept
    : RemoveReplicaRequest() {
    *this = ::std::move(from);
  }

  inline RemoveReplicaRequest& operator=(const RemoveReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReplicaRequest& operator=(RemoveReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveReplicaRequest*>(
               &_RemoveReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoveReplicaRequest& a, RemoveReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReplicaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveReplicaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveReplicaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveReplicaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReplicaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RemoveReplicaRequest";
  }
  protected:
  explicit RemoveReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // int64 timeout = 3 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RemoveReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int64_t timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class RemoveReplicaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.RemoveReplicaResponse) */ {
 public:
  inline RemoveReplicaResponse() : RemoveReplicaResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveReplicaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveReplicaResponse(const RemoveReplicaResponse& from);
  RemoveReplicaResponse(RemoveReplicaResponse&& from) noexcept
    : RemoveReplicaResponse() {
    *this = ::std::move(from);
  }

  inline RemoveReplicaResponse& operator=(const RemoveReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReplicaResponse& operator=(RemoveReplicaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveReplicaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveReplicaResponse*>(
               &_RemoveReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoveReplicaResponse& a, RemoveReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReplicaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveReplicaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RemoveReplicaResponse";
  }
  protected:
  explicit RemoveReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.RemoveReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class GetLeaderIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetLeaderIdRequest) */ {
 public:
  inline GetLeaderIdRequest() : GetLeaderIdRequest(nullptr) {}
  ~GetLeaderIdRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLeaderIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLeaderIdRequest(const GetLeaderIdRequest& from);
  GetLeaderIdRequest(GetLeaderIdRequest&& from) noexcept
    : GetLeaderIdRequest() {
    *this = ::std::move(from);
  }

  inline GetLeaderIdRequest& operator=(const GetLeaderIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaderIdRequest& operator=(GetLeaderIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLeaderIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLeaderIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetLeaderIdRequest*>(
               &_GetLeaderIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetLeaderIdRequest& a, GetLeaderIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaderIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLeaderIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLeaderIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLeaderIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLeaderIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLeaderIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetLeaderIdRequest";
  }
  protected:
  explicit GetLeaderIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // int64 timeout = 3 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.GetLeaderIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int64_t timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class GetLeaderIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetLeaderIdResponse) */ {
 public:
  inline GetLeaderIdResponse() : GetLeaderIdResponse(nullptr) {}
  ~GetLeaderIdResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLeaderIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLeaderIdResponse(const GetLeaderIdResponse& from);
  GetLeaderIdResponse(GetLeaderIdResponse&& from) noexcept
    : GetLeaderIdResponse() {
    *this = ::std::move(from);
  }

  inline GetLeaderIdResponse& operator=(const GetLeaderIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaderIdResponse& operator=(GetLeaderIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLeaderIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLeaderIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetLeaderIdResponse*>(
               &_GetLeaderIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetLeaderIdResponse& a, GetLeaderIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaderIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLeaderIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLeaderIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLeaderIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLeaderIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLeaderIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetLeaderIdResponse";
  }
  protected:
  explicit GetLeaderIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderFieldNumber = 1,
    kAvailableFieldNumber = 2,
  };
  // uint64 leader = 1 [json_name = "leader"];
  void clear_leader();
  uint64_t leader() const;
  void set_leader(uint64_t value);
  private:
  uint64_t _internal_leader() const;
  void _internal_set_leader(uint64_t value);
  public:

  // bool available = 2 [json_name = "available"];
  void clear_available();
  bool available() const;
  void set_available(bool value);
  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.GetLeaderIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t leader_;
  bool available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class GetShardMembersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetShardMembersRequest) */ {
 public:
  inline GetShardMembersRequest() : GetShardMembersRequest(nullptr) {}
  ~GetShardMembersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetShardMembersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetShardMembersRequest(const GetShardMembersRequest& from);
  GetShardMembersRequest(GetShardMembersRequest&& from) noexcept
    : GetShardMembersRequest() {
    *this = ::std::move(from);
  }

  inline GetShardMembersRequest& operator=(const GetShardMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShardMembersRequest& operator=(GetShardMembersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetShardMembersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetShardMembersRequest* internal_default_instance() {
    return reinterpret_cast<const GetShardMembersRequest*>(
               &_GetShardMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetShardMembersRequest& a, GetShardMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShardMembersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShardMembersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetShardMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetShardMembersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetShardMembersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetShardMembersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShardMembersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetShardMembersRequest";
  }
  protected:
  explicit GetShardMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.GetShardMembersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class GetShardMembersResponse_ReplicasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_ReplicasEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_ReplicasEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetShardMembersResponse_ReplicasEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetShardMembersResponse_ReplicasEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetShardMembersResponse_ReplicasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetShardMembersResponse_ReplicasEntry_DoNotUse& other);
  static const GetShardMembersResponse_ReplicasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetShardMembersResponse_ReplicasEntry_DoNotUse*>(&_GetShardMembersResponse_ReplicasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raft.v1.GetShardMembersResponse.ReplicasEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};

// -------------------------------------------------------------------

class GetShardMembersResponse_ObserversEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_ObserversEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_ObserversEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetShardMembersResponse_ObserversEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetShardMembersResponse_ObserversEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetShardMembersResponse_ObserversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetShardMembersResponse_ObserversEntry_DoNotUse& other);
  static const GetShardMembersResponse_ObserversEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetShardMembersResponse_ObserversEntry_DoNotUse*>(&_GetShardMembersResponse_ObserversEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raft.v1.GetShardMembersResponse.ObserversEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};

// -------------------------------------------------------------------

class GetShardMembersResponse_WitnessesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_WitnessesEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_WitnessesEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetShardMembersResponse_WitnessesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetShardMembersResponse_WitnessesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetShardMembersResponse_WitnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetShardMembersResponse_WitnessesEntry_DoNotUse& other);
  static const GetShardMembersResponse_WitnessesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetShardMembersResponse_WitnessesEntry_DoNotUse*>(&_GetShardMembersResponse_WitnessesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raft.v1.GetShardMembersResponse.WitnessesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};

// -------------------------------------------------------------------

class GetShardMembersResponse_RemovedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_RemovedEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetShardMembersResponse_RemovedEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetShardMembersResponse_RemovedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetShardMembersResponse_RemovedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetShardMembersResponse_RemovedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetShardMembersResponse_RemovedEntry_DoNotUse& other);
  static const GetShardMembersResponse_RemovedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetShardMembersResponse_RemovedEntry_DoNotUse*>(&_GetShardMembersResponse_RemovedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raft.v1.GetShardMembersResponse.RemovedEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};

// -------------------------------------------------------------------

class GetShardMembersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.GetShardMembersResponse) */ {
 public:
  inline GetShardMembersResponse() : GetShardMembersResponse(nullptr) {}
  ~GetShardMembersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetShardMembersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetShardMembersResponse(const GetShardMembersResponse& from);
  GetShardMembersResponse(GetShardMembersResponse&& from) noexcept
    : GetShardMembersResponse() {
    *this = ::std::move(from);
  }

  inline GetShardMembersResponse& operator=(const GetShardMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShardMembersResponse& operator=(GetShardMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetShardMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetShardMembersResponse* internal_default_instance() {
    return reinterpret_cast<const GetShardMembersResponse*>(
               &_GetShardMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetShardMembersResponse& a, GetShardMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShardMembersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShardMembersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetShardMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetShardMembersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetShardMembersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetShardMembersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShardMembersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.GetShardMembersResponse";
  }
  protected:
  explicit GetShardMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReplicasFieldNumber = 2,
    kObserversFieldNumber = 3,
    kWitnessesFieldNumber = 4,
    kRemovedFieldNumber = 5,
    kConfigChangeIdFieldNumber = 1,
  };
  // map<uint64, string> replicas = 2 [json_name = "replicas"];
  int replicas_size() const;
  private:
  int _internal_replicas_size() const;
  public:
  void clear_replicas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_replicas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_replicas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      replicas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_replicas();

  // map<uint64, string> observers = 3 [json_name = "observers"];
  int observers_size() const;
  private:
  int _internal_observers_size() const;
  public:
  void clear_observers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_observers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_observers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      observers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_observers();

  // map<uint64, string> witnesses = 4 [json_name = "witnesses"];
  int witnesses_size() const;
  private:
  int _internal_witnesses_size() const;
  public:
  void clear_witnesses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_witnesses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_witnesses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      witnesses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_witnesses();

  // map<uint64, string> removed = 5 [json_name = "removed"];
  int removed_size() const;
  private:
  int _internal_removed_size() const;
  public:
  void clear_removed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_removed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_removed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      removed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_removed();

  // uint64 config_change_id = 1 [json_name = "configChangeId"];
  void clear_config_change_id();
  uint64_t config_change_id() const;
  void set_config_change_id(uint64_t value);
  private:
  uint64_t _internal_config_change_id() const;
  void _internal_set_config_change_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.GetShardMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetShardMembersResponse_ReplicasEntry_DoNotUse,
      uint64_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> replicas_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetShardMembersResponse_ObserversEntry_DoNotUse,
      uint64_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> observers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetShardMembersResponse_WitnessesEntry_DoNotUse,
      uint64_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> witnesses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetShardMembersResponse_RemovedEntry_DoNotUse,
      uint64_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> removed_;
  uint64_t config_change_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class NewShardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.NewShardRequest) */ {
 public:
  inline NewShardRequest() : NewShardRequest(nullptr) {}
  ~NewShardRequest() override;
  explicit PROTOBUF_CONSTEXPR NewShardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewShardRequest(const NewShardRequest& from);
  NewShardRequest(NewShardRequest&& from) noexcept
    : NewShardRequest() {
    *this = ::std::move(from);
  }

  inline NewShardRequest& operator=(const NewShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewShardRequest& operator=(NewShardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewShardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewShardRequest* internal_default_instance() {
    return reinterpret_cast<const NewShardRequest*>(
               &_NewShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NewShardRequest& a, NewShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewShardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewShardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewShardRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewShardRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewShardRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.NewShardRequest";
  }
  protected:
  explicit NewShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 4,
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTimeoutFieldNumber = 5,
    kTypeFieldNumber = 3,
  };
  // string hostname = 4 [json_name = "hostname"];
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // int64 timeout = 5 [json_name = "timeout"];
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  void clear_type();
  ::raft::v1::StateMachineType type() const;
  void set_type(::raft::v1::StateMachineType value);
  private:
  ::raft::v1::StateMachineType _internal_type() const;
  void _internal_set_type(::raft::v1::StateMachineType value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.NewShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int64_t timeout_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class NewShardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.NewShardResponse) */ {
 public:
  inline NewShardResponse() : NewShardResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NewShardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewShardResponse(const NewShardResponse& from);
  NewShardResponse(NewShardResponse&& from) noexcept
    : NewShardResponse() {
    *this = ::std::move(from);
  }

  inline NewShardResponse& operator=(const NewShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewShardResponse& operator=(NewShardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewShardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewShardResponse* internal_default_instance() {
    return reinterpret_cast<const NewShardResponse*>(
               &_NewShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NewShardResponse& a, NewShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewShardResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewShardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NewShardResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NewShardResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.NewShardResponse";
  }
  protected:
  explicit NewShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.NewShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class RemoveDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.RemoveDataRequest) */ {
 public:
  inline RemoveDataRequest() : RemoveDataRequest(nullptr) {}
  ~RemoveDataRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDataRequest(const RemoveDataRequest& from);
  RemoveDataRequest(RemoveDataRequest&& from) noexcept
    : RemoveDataRequest() {
    *this = ::std::move(from);
  }

  inline RemoveDataRequest& operator=(const RemoveDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDataRequest& operator=(RemoveDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDataRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveDataRequest*>(
               &_RemoveDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemoveDataRequest& a, RemoveDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RemoveDataRequest";
  }
  protected:
  explicit RemoveDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.RemoveDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class RemoveDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.RemoveDataResponse) */ {
 public:
  inline RemoveDataResponse() : RemoveDataResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDataResponse(const RemoveDataResponse& from);
  RemoveDataResponse(RemoveDataResponse&& from) noexcept
    : RemoveDataResponse() {
    *this = ::std::move(from);
  }

  inline RemoveDataResponse& operator=(const RemoveDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDataResponse& operator=(RemoveDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDataResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveDataResponse*>(
               &_RemoveDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveDataResponse& a, RemoveDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveDataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveDataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.RemoveDataResponse";
  }
  protected:
  explicit RemoveDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.RemoveDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StartReplicaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.StartReplicaRequest) */ {
 public:
  inline StartReplicaRequest() : StartReplicaRequest(nullptr) {}
  ~StartReplicaRequest() override;
  explicit PROTOBUF_CONSTEXPR StartReplicaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartReplicaRequest(const StartReplicaRequest& from);
  StartReplicaRequest(StartReplicaRequest&& from) noexcept
    : StartReplicaRequest() {
    *this = ::std::move(from);
  }

  inline StartReplicaRequest& operator=(const StartReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReplicaRequest& operator=(StartReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const StartReplicaRequest*>(
               &_StartReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StartReplicaRequest& a, StartReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReplicaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartReplicaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartReplicaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartReplicaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartReplicaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StartReplicaRequest";
  }
  protected:
  explicit StartReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  void clear_type();
  ::raft::v1::StateMachineType type() const;
  void set_type(::raft::v1::StateMachineType value);
  private:
  ::raft::v1::StateMachineType _internal_type() const;
  void _internal_set_type(::raft::v1::StateMachineType value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.StartReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StartReplicaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.StartReplicaResponse) */ {
 public:
  inline StartReplicaResponse() : StartReplicaResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartReplicaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartReplicaResponse(const StartReplicaResponse& from);
  StartReplicaResponse(StartReplicaResponse&& from) noexcept
    : StartReplicaResponse() {
    *this = ::std::move(from);
  }

  inline StartReplicaResponse& operator=(const StartReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReplicaResponse& operator=(StartReplicaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartReplicaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const StartReplicaResponse*>(
               &_StartReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StartReplicaResponse& a, StartReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReplicaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartReplicaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StartReplicaResponse";
  }
  protected:
  explicit StartReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.StartReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StartReplicaObserverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.StartReplicaObserverRequest) */ {
 public:
  inline StartReplicaObserverRequest() : StartReplicaObserverRequest(nullptr) {}
  ~StartReplicaObserverRequest() override;
  explicit PROTOBUF_CONSTEXPR StartReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartReplicaObserverRequest(const StartReplicaObserverRequest& from);
  StartReplicaObserverRequest(StartReplicaObserverRequest&& from) noexcept
    : StartReplicaObserverRequest() {
    *this = ::std::move(from);
  }

  inline StartReplicaObserverRequest& operator=(const StartReplicaObserverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReplicaObserverRequest& operator=(StartReplicaObserverRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartReplicaObserverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartReplicaObserverRequest* internal_default_instance() {
    return reinterpret_cast<const StartReplicaObserverRequest*>(
               &_StartReplicaObserverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StartReplicaObserverRequest& a, StartReplicaObserverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReplicaObserverRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartReplicaObserverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartReplicaObserverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartReplicaObserverRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartReplicaObserverRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartReplicaObserverRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartReplicaObserverRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StartReplicaObserverRequest";
  }
  protected:
  explicit StartReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // uint64 replica_id = 2 [json_name = "replicaId"];
  void clear_replica_id();
  uint64_t replica_id() const;
  void set_replica_id(uint64_t value);
  private:
  uint64_t _internal_replica_id() const;
  void _internal_set_replica_id(uint64_t value);
  public:

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  void clear_type();
  ::raft::v1::StateMachineType type() const;
  void set_type(::raft::v1::StateMachineType value);
  private:
  ::raft::v1::StateMachineType _internal_type() const;
  void _internal_set_type(::raft::v1::StateMachineType value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.StartReplicaObserverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  uint64_t replica_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StartReplicaObserverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.StartReplicaObserverResponse) */ {
 public:
  inline StartReplicaObserverResponse() : StartReplicaObserverResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartReplicaObserverResponse(const StartReplicaObserverResponse& from);
  StartReplicaObserverResponse(StartReplicaObserverResponse&& from) noexcept
    : StartReplicaObserverResponse() {
    *this = ::std::move(from);
  }

  inline StartReplicaObserverResponse& operator=(const StartReplicaObserverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReplicaObserverResponse& operator=(StartReplicaObserverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartReplicaObserverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartReplicaObserverResponse* internal_default_instance() {
    return reinterpret_cast<const StartReplicaObserverResponse*>(
               &_StartReplicaObserverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StartReplicaObserverResponse& a, StartReplicaObserverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReplicaObserverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartReplicaObserverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartReplicaObserverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartReplicaObserverResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartReplicaObserverResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartReplicaObserverResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StartReplicaObserverResponse";
  }
  protected:
  explicit StartReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.StartReplicaObserverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StopReplicaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.v1.StopReplicaRequest) */ {
 public:
  inline StopReplicaRequest() : StopReplicaRequest(nullptr) {}
  ~StopReplicaRequest() override;
  explicit PROTOBUF_CONSTEXPR StopReplicaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopReplicaRequest(const StopReplicaRequest& from);
  StopReplicaRequest(StopReplicaRequest&& from) noexcept
    : StopReplicaRequest() {
    *this = ::std::move(from);
  }

  inline StopReplicaRequest& operator=(const StopReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopReplicaRequest& operator=(StopReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const StopReplicaRequest*>(
               &_StopReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StopReplicaRequest& a, StopReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopReplicaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopReplicaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopReplicaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopReplicaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopReplicaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StopReplicaRequest";
  }
  protected:
  explicit StopReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // uint64 shard_id = 1 [json_name = "shardId"];
  void clear_shard_id();
  uint64_t shard_id() const;
  void set_shard_id(uint64_t value);
  private:
  uint64_t _internal_shard_id() const;
  void _internal_set_shard_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.v1.StopReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// -------------------------------------------------------------------

class StopReplicaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:raft.v1.StopReplicaResponse) */ {
 public:
  inline StopReplicaResponse() : StopReplicaResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopReplicaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopReplicaResponse(const StopReplicaResponse& from);
  StopReplicaResponse(StopReplicaResponse&& from) noexcept
    : StopReplicaResponse() {
    *this = ::std::move(from);
  }

  inline StopReplicaResponse& operator=(const StopReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopReplicaResponse& operator=(StopReplicaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopReplicaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const StopReplicaResponse*>(
               &_StopReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StopReplicaResponse& a, StopReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopReplicaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopReplicaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopReplicaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.v1.StopReplicaResponse";
  }
  protected:
  explicit StopReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft.v1.StopReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_raft_2fv1_2fraft_5fshard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddReplicaRequest

// uint64 replica_id = 1 [json_name = "replicaId"];
inline void AddReplicaRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t AddReplicaRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaRequest.replica_id)
  return _internal_replica_id();
}
inline void AddReplicaRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void AddReplicaRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaRequest.replica_id)
}

// uint64 shard_id = 2 [json_name = "shardId"];
inline void AddReplicaRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t AddReplicaRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaRequest.shard_id)
  return _internal_shard_id();
}
inline void AddReplicaRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void AddReplicaRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaRequest.shard_id)
}

// string hostname = 4 [json_name = "hostname"];
inline void AddReplicaRequest::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& AddReplicaRequest::hostname() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddReplicaRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaRequest.hostname)
}
inline std::string* AddReplicaRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:raft.v1.AddReplicaRequest.hostname)
  return _s;
}
inline const std::string& AddReplicaRequest::_internal_hostname() const {
  return hostname_.Get();
}
inline void AddReplicaRequest::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* AddReplicaRequest::_internal_mutable_hostname() {
  
  return hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* AddReplicaRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:raft.v1.AddReplicaRequest.hostname)
  return hostname_.Release();
}
inline void AddReplicaRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault()) {
    hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.AddReplicaRequest.hostname)
}

// int64 timeout = 5 [json_name = "timeout"];
inline void AddReplicaRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t AddReplicaRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t AddReplicaRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaRequest.timeout)
  return _internal_timeout();
}
inline void AddReplicaRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void AddReplicaRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaRequest.timeout)
}

// -------------------------------------------------------------------

// AddReplicaResponse

// -------------------------------------------------------------------

// AddReplicaObserverRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void AddReplicaObserverRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaObserverRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t AddReplicaObserverRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaObserverRequest.shard_id)
  return _internal_shard_id();
}
inline void AddReplicaObserverRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void AddReplicaObserverRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaObserverRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void AddReplicaObserverRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaObserverRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t AddReplicaObserverRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaObserverRequest.replica_id)
  return _internal_replica_id();
}
inline void AddReplicaObserverRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void AddReplicaObserverRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaObserverRequest.replica_id)
}

// string hostname = 3 [json_name = "hostname"];
inline void AddReplicaObserverRequest::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& AddReplicaObserverRequest::hostname() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaObserverRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddReplicaObserverRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaObserverRequest.hostname)
}
inline std::string* AddReplicaObserverRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:raft.v1.AddReplicaObserverRequest.hostname)
  return _s;
}
inline const std::string& AddReplicaObserverRequest::_internal_hostname() const {
  return hostname_.Get();
}
inline void AddReplicaObserverRequest::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* AddReplicaObserverRequest::_internal_mutable_hostname() {
  
  return hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* AddReplicaObserverRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:raft.v1.AddReplicaObserverRequest.hostname)
  return hostname_.Release();
}
inline void AddReplicaObserverRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault()) {
    hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.AddReplicaObserverRequest.hostname)
}

// int64 timeout = 4 [json_name = "timeout"];
inline void AddReplicaObserverRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t AddReplicaObserverRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t AddReplicaObserverRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaObserverRequest.timeout)
  return _internal_timeout();
}
inline void AddReplicaObserverRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void AddReplicaObserverRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaObserverRequest.timeout)
}

// -------------------------------------------------------------------

// AddReplicaObserverResponse

// -------------------------------------------------------------------

// AddReplicaWitnessRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void AddReplicaWitnessRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaWitnessRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t AddReplicaWitnessRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaWitnessRequest.shard_id)
  return _internal_shard_id();
}
inline void AddReplicaWitnessRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void AddReplicaWitnessRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaWitnessRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void AddReplicaWitnessRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t AddReplicaWitnessRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t AddReplicaWitnessRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaWitnessRequest.replica_id)
  return _internal_replica_id();
}
inline void AddReplicaWitnessRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void AddReplicaWitnessRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaWitnessRequest.replica_id)
}

// string hostname = 3 [json_name = "hostname"];
inline void AddReplicaWitnessRequest::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& AddReplicaWitnessRequest::hostname() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaWitnessRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddReplicaWitnessRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaWitnessRequest.hostname)
}
inline std::string* AddReplicaWitnessRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:raft.v1.AddReplicaWitnessRequest.hostname)
  return _s;
}
inline const std::string& AddReplicaWitnessRequest::_internal_hostname() const {
  return hostname_.Get();
}
inline void AddReplicaWitnessRequest::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* AddReplicaWitnessRequest::_internal_mutable_hostname() {
  
  return hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* AddReplicaWitnessRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:raft.v1.AddReplicaWitnessRequest.hostname)
  return hostname_.Release();
}
inline void AddReplicaWitnessRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault()) {
    hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.AddReplicaWitnessRequest.hostname)
}

// int64 timeout = 4 [json_name = "timeout"];
inline void AddReplicaWitnessRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t AddReplicaWitnessRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t AddReplicaWitnessRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.AddReplicaWitnessRequest.timeout)
  return _internal_timeout();
}
inline void AddReplicaWitnessRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void AddReplicaWitnessRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.AddReplicaWitnessRequest.timeout)
}

// -------------------------------------------------------------------

// AddReplicaWitnessResponse

// -------------------------------------------------------------------

// RemoveReplicaRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RemoveReplicaRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t RemoveReplicaRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t RemoveReplicaRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RemoveReplicaRequest.shard_id)
  return _internal_shard_id();
}
inline void RemoveReplicaRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void RemoveReplicaRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RemoveReplicaRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RemoveReplicaRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t RemoveReplicaRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t RemoveReplicaRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RemoveReplicaRequest.replica_id)
  return _internal_replica_id();
}
inline void RemoveReplicaRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void RemoveReplicaRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RemoveReplicaRequest.replica_id)
}

// int64 timeout = 3 [json_name = "timeout"];
inline void RemoveReplicaRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t RemoveReplicaRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t RemoveReplicaRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.RemoveReplicaRequest.timeout)
  return _internal_timeout();
}
inline void RemoveReplicaRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void RemoveReplicaRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.RemoveReplicaRequest.timeout)
}

// -------------------------------------------------------------------

// RemoveReplicaResponse

// -------------------------------------------------------------------

// GetLeaderIdRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void GetLeaderIdRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t GetLeaderIdRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t GetLeaderIdRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetLeaderIdRequest.shard_id)
  return _internal_shard_id();
}
inline void GetLeaderIdRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void GetLeaderIdRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetLeaderIdRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void GetLeaderIdRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t GetLeaderIdRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t GetLeaderIdRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetLeaderIdRequest.replica_id)
  return _internal_replica_id();
}
inline void GetLeaderIdRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void GetLeaderIdRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetLeaderIdRequest.replica_id)
}

// int64 timeout = 3 [json_name = "timeout"];
inline void GetLeaderIdRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t GetLeaderIdRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t GetLeaderIdRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetLeaderIdRequest.timeout)
  return _internal_timeout();
}
inline void GetLeaderIdRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void GetLeaderIdRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetLeaderIdRequest.timeout)
}

// -------------------------------------------------------------------

// GetLeaderIdResponse

// uint64 leader = 1 [json_name = "leader"];
inline void GetLeaderIdResponse::clear_leader() {
  leader_ = uint64_t{0u};
}
inline uint64_t GetLeaderIdResponse::_internal_leader() const {
  return leader_;
}
inline uint64_t GetLeaderIdResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetLeaderIdResponse.leader)
  return _internal_leader();
}
inline void GetLeaderIdResponse::_internal_set_leader(uint64_t value) {
  
  leader_ = value;
}
inline void GetLeaderIdResponse::set_leader(uint64_t value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetLeaderIdResponse.leader)
}

// bool available = 2 [json_name = "available"];
inline void GetLeaderIdResponse::clear_available() {
  available_ = false;
}
inline bool GetLeaderIdResponse::_internal_available() const {
  return available_;
}
inline bool GetLeaderIdResponse::available() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetLeaderIdResponse.available)
  return _internal_available();
}
inline void GetLeaderIdResponse::_internal_set_available(bool value) {
  
  available_ = value;
}
inline void GetLeaderIdResponse::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetLeaderIdResponse.available)
}

// -------------------------------------------------------------------

// GetShardMembersRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void GetShardMembersRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t GetShardMembersRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t GetShardMembersRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetShardMembersRequest.shard_id)
  return _internal_shard_id();
}
inline void GetShardMembersRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void GetShardMembersRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetShardMembersRequest.shard_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetShardMembersResponse

// uint64 config_change_id = 1 [json_name = "configChangeId"];
inline void GetShardMembersResponse::clear_config_change_id() {
  config_change_id_ = uint64_t{0u};
}
inline uint64_t GetShardMembersResponse::_internal_config_change_id() const {
  return config_change_id_;
}
inline uint64_t GetShardMembersResponse::config_change_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.GetShardMembersResponse.config_change_id)
  return _internal_config_change_id();
}
inline void GetShardMembersResponse::_internal_set_config_change_id(uint64_t value) {
  
  config_change_id_ = value;
}
inline void GetShardMembersResponse::set_config_change_id(uint64_t value) {
  _internal_set_config_change_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.GetShardMembersResponse.config_change_id)
}

// map<uint64, string> replicas = 2 [json_name = "replicas"];
inline int GetShardMembersResponse::_internal_replicas_size() const {
  return replicas_.size();
}
inline int GetShardMembersResponse::replicas_size() const {
  return _internal_replicas_size();
}
inline void GetShardMembersResponse::clear_replicas() {
  replicas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::_internal_replicas() const {
  return replicas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::replicas() const {
  // @@protoc_insertion_point(field_map:raft.v1.GetShardMembersResponse.replicas)
  return _internal_replicas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::_internal_mutable_replicas() {
  return replicas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_map:raft.v1.GetShardMembersResponse.replicas)
  return _internal_mutable_replicas();
}

// map<uint64, string> observers = 3 [json_name = "observers"];
inline int GetShardMembersResponse::_internal_observers_size() const {
  return observers_.size();
}
inline int GetShardMembersResponse::observers_size() const {
  return _internal_observers_size();
}
inline void GetShardMembersResponse::clear_observers() {
  observers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::_internal_observers() const {
  return observers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::observers() const {
  // @@protoc_insertion_point(field_map:raft.v1.GetShardMembersResponse.observers)
  return _internal_observers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::_internal_mutable_observers() {
  return observers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::mutable_observers() {
  // @@protoc_insertion_point(field_mutable_map:raft.v1.GetShardMembersResponse.observers)
  return _internal_mutable_observers();
}

// map<uint64, string> witnesses = 4 [json_name = "witnesses"];
inline int GetShardMembersResponse::_internal_witnesses_size() const {
  return witnesses_.size();
}
inline int GetShardMembersResponse::witnesses_size() const {
  return _internal_witnesses_size();
}
inline void GetShardMembersResponse::clear_witnesses() {
  witnesses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::_internal_witnesses() const {
  return witnesses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::witnesses() const {
  // @@protoc_insertion_point(field_map:raft.v1.GetShardMembersResponse.witnesses)
  return _internal_witnesses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::_internal_mutable_witnesses() {
  return witnesses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::mutable_witnesses() {
  // @@protoc_insertion_point(field_mutable_map:raft.v1.GetShardMembersResponse.witnesses)
  return _internal_mutable_witnesses();
}

// map<uint64, string> removed = 5 [json_name = "removed"];
inline int GetShardMembersResponse::_internal_removed_size() const {
  return removed_.size();
}
inline int GetShardMembersResponse::removed_size() const {
  return _internal_removed_size();
}
inline void GetShardMembersResponse::clear_removed() {
  removed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::_internal_removed() const {
  return removed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
GetShardMembersResponse::removed() const {
  // @@protoc_insertion_point(field_map:raft.v1.GetShardMembersResponse.removed)
  return _internal_removed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::_internal_mutable_removed() {
  return removed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
GetShardMembersResponse::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_map:raft.v1.GetShardMembersResponse.removed)
  return _internal_mutable_removed();
}

// -------------------------------------------------------------------

// NewShardRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void NewShardRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t NewShardRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t NewShardRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.NewShardRequest.shard_id)
  return _internal_shard_id();
}
inline void NewShardRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void NewShardRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.NewShardRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void NewShardRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t NewShardRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t NewShardRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.NewShardRequest.replica_id)
  return _internal_replica_id();
}
inline void NewShardRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void NewShardRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.NewShardRequest.replica_id)
}

// .raft.v1.StateMachineType type = 3 [json_name = "type"];
inline void NewShardRequest::clear_type() {
  type_ = 0;
}
inline ::raft::v1::StateMachineType NewShardRequest::_internal_type() const {
  return static_cast< ::raft::v1::StateMachineType >(type_);
}
inline ::raft::v1::StateMachineType NewShardRequest::type() const {
  // @@protoc_insertion_point(field_get:raft.v1.NewShardRequest.type)
  return _internal_type();
}
inline void NewShardRequest::_internal_set_type(::raft::v1::StateMachineType value) {
  
  type_ = value;
}
inline void NewShardRequest::set_type(::raft::v1::StateMachineType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raft.v1.NewShardRequest.type)
}

// string hostname = 4 [json_name = "hostname"];
inline void NewShardRequest::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& NewShardRequest::hostname() const {
  // @@protoc_insertion_point(field_get:raft.v1.NewShardRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewShardRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.v1.NewShardRequest.hostname)
}
inline std::string* NewShardRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:raft.v1.NewShardRequest.hostname)
  return _s;
}
inline const std::string& NewShardRequest::_internal_hostname() const {
  return hostname_.Get();
}
inline void NewShardRequest::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* NewShardRequest::_internal_mutable_hostname() {
  
  return hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* NewShardRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:raft.v1.NewShardRequest.hostname)
  return hostname_.Release();
}
inline void NewShardRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault()) {
    hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.v1.NewShardRequest.hostname)
}

// int64 timeout = 5 [json_name = "timeout"];
inline void NewShardRequest::clear_timeout() {
  timeout_ = int64_t{0};
}
inline int64_t NewShardRequest::_internal_timeout() const {
  return timeout_;
}
inline int64_t NewShardRequest::timeout() const {
  // @@protoc_insertion_point(field_get:raft.v1.NewShardRequest.timeout)
  return _internal_timeout();
}
inline void NewShardRequest::_internal_set_timeout(int64_t value) {
  
  timeout_ = value;
}
inline void NewShardRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:raft.v1.NewShardRequest.timeout)
}

// -------------------------------------------------------------------

// NewShardResponse

// -------------------------------------------------------------------

// RemoveDataRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void RemoveDataRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t RemoveDataRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t RemoveDataRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RemoveDataRequest.shard_id)
  return _internal_shard_id();
}
inline void RemoveDataRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void RemoveDataRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RemoveDataRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void RemoveDataRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t RemoveDataRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t RemoveDataRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.RemoveDataRequest.replica_id)
  return _internal_replica_id();
}
inline void RemoveDataRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void RemoveDataRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.RemoveDataRequest.replica_id)
}

// -------------------------------------------------------------------

// RemoveDataResponse

// -------------------------------------------------------------------

// StartReplicaRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void StartReplicaRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t StartReplicaRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t StartReplicaRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaRequest.shard_id)
  return _internal_shard_id();
}
inline void StartReplicaRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void StartReplicaRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void StartReplicaRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t StartReplicaRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t StartReplicaRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaRequest.replica_id)
  return _internal_replica_id();
}
inline void StartReplicaRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void StartReplicaRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaRequest.replica_id)
}

// .raft.v1.StateMachineType type = 3 [json_name = "type"];
inline void StartReplicaRequest::clear_type() {
  type_ = 0;
}
inline ::raft::v1::StateMachineType StartReplicaRequest::_internal_type() const {
  return static_cast< ::raft::v1::StateMachineType >(type_);
}
inline ::raft::v1::StateMachineType StartReplicaRequest::type() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaRequest.type)
  return _internal_type();
}
inline void StartReplicaRequest::_internal_set_type(::raft::v1::StateMachineType value) {
  
  type_ = value;
}
inline void StartReplicaRequest::set_type(::raft::v1::StateMachineType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaRequest.type)
}

// -------------------------------------------------------------------

// StartReplicaResponse

// -------------------------------------------------------------------

// StartReplicaObserverRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void StartReplicaObserverRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t StartReplicaObserverRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t StartReplicaObserverRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaObserverRequest.shard_id)
  return _internal_shard_id();
}
inline void StartReplicaObserverRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void StartReplicaObserverRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaObserverRequest.shard_id)
}

// uint64 replica_id = 2 [json_name = "replicaId"];
inline void StartReplicaObserverRequest::clear_replica_id() {
  replica_id_ = uint64_t{0u};
}
inline uint64_t StartReplicaObserverRequest::_internal_replica_id() const {
  return replica_id_;
}
inline uint64_t StartReplicaObserverRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaObserverRequest.replica_id)
  return _internal_replica_id();
}
inline void StartReplicaObserverRequest::_internal_set_replica_id(uint64_t value) {
  
  replica_id_ = value;
}
inline void StartReplicaObserverRequest::set_replica_id(uint64_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaObserverRequest.replica_id)
}

// .raft.v1.StateMachineType type = 3 [json_name = "type"];
inline void StartReplicaObserverRequest::clear_type() {
  type_ = 0;
}
inline ::raft::v1::StateMachineType StartReplicaObserverRequest::_internal_type() const {
  return static_cast< ::raft::v1::StateMachineType >(type_);
}
inline ::raft::v1::StateMachineType StartReplicaObserverRequest::type() const {
  // @@protoc_insertion_point(field_get:raft.v1.StartReplicaObserverRequest.type)
  return _internal_type();
}
inline void StartReplicaObserverRequest::_internal_set_type(::raft::v1::StateMachineType value) {
  
  type_ = value;
}
inline void StartReplicaObserverRequest::set_type(::raft::v1::StateMachineType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raft.v1.StartReplicaObserverRequest.type)
}

// -------------------------------------------------------------------

// StartReplicaObserverResponse

// -------------------------------------------------------------------

// StopReplicaRequest

// uint64 shard_id = 1 [json_name = "shardId"];
inline void StopReplicaRequest::clear_shard_id() {
  shard_id_ = uint64_t{0u};
}
inline uint64_t StopReplicaRequest::_internal_shard_id() const {
  return shard_id_;
}
inline uint64_t StopReplicaRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:raft.v1.StopReplicaRequest.shard_id)
  return _internal_shard_id();
}
inline void StopReplicaRequest::_internal_set_shard_id(uint64_t value) {
  
  shard_id_ = value;
}
inline void StopReplicaRequest::set_shard_id(uint64_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:raft.v1.StopReplicaRequest.shard_id)
}

// -------------------------------------------------------------------

// StopReplicaResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace raft

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raft::v1::StateMachineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::v1::StateMachineType>() {
  return ::raft::v1::StateMachineType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2fv1_2fraft_5fshard_2eproto
