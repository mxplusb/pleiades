// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_host.proto

#include "raft/v1/raft_host.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raft {
namespace v1 {
PROTOBUF_CONSTEXPR CompactRequest::CompactRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replica_id_)*/uint64_t{0u}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactRequestDefaultTypeInternal() {}
  union {
    CompactRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactRequestDefaultTypeInternal _CompactRequest_default_instance_;
PROTOBUF_CONSTEXPR CompactResponse::CompactResponse(
    ::_pbi::ConstantInitialized) {}
struct CompactResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactResponseDefaultTypeInternal() {}
  union {
    CompactResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactResponseDefaultTypeInternal _CompactResponse_default_instance_;
PROTOBUF_CONSTEXPR LeaderTransferRequest::LeaderTransferRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaderTransferRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderTransferRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderTransferRequestDefaultTypeInternal() {}
  union {
    LeaderTransferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderTransferRequestDefaultTypeInternal _LeaderTransferRequest_default_instance_;
PROTOBUF_CONSTEXPR LeaderTransferResponse::LeaderTransferResponse(
    ::_pbi::ConstantInitialized) {}
struct LeaderTransferResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderTransferResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderTransferResponseDefaultTypeInternal() {}
  union {
    LeaderTransferResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderTransferResponseDefaultTypeInternal _LeaderTransferResponse_default_instance_;
PROTOBUF_CONSTEXPR SnapshotRequest::SnapshotRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotRequestDefaultTypeInternal() {}
  union {
    SnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
PROTOBUF_CONSTEXPR SnapshotResponse::SnapshotResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snapshot_index_captured_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotResponseDefaultTypeInternal() {}
  union {
    SnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotResponseDefaultTypeInternal _SnapshotResponse_default_instance_;
PROTOBUF_CONSTEXPR StopRequest::StopRequest(
    ::_pbi::ConstantInitialized) {}
struct StopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopRequestDefaultTypeInternal() {}
  union {
    StopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopRequestDefaultTypeInternal _StopRequest_default_instance_;
PROTOBUF_CONSTEXPR StopResponse::StopResponse(
    ::_pbi::ConstantInitialized) {}
struct StopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopResponseDefaultTypeInternal() {}
  union {
    StopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopResponseDefaultTypeInternal _StopResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHostConfigRequest::GetHostConfigRequest(
    ::_pbi::ConstantInitialized) {}
struct GetHostConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHostConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHostConfigRequestDefaultTypeInternal() {}
  union {
    GetHostConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHostConfigRequestDefaultTypeInternal _GetHostConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR GetHostConfigResponse::GetHostConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHostConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHostConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHostConfigResponseDefaultTypeInternal() {}
  union {
    GetHostConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHostConfigResponseDefaultTypeInternal _GetHostConfigResponse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembershipRequest::GetShardMembershipRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardMembershipRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembershipRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembershipRequestDefaultTypeInternal() {}
  union {
    GetShardMembershipRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembershipRequestDefaultTypeInternal _GetShardMembershipRequest_default_instance_;
PROTOBUF_CONSTEXPR HostConfig::HostConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wal_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raft_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listen_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cert_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deployment_id_)*/uint64_t{0u}
  , /*decltype(_impl_.round_trip_time_in_milliseconds_)*/uint64_t{0u}
  , /*decltype(_impl_.address_by_host_id_)*/false
  , /*decltype(_impl_.mutual_tls_)*/false
  , /*decltype(_impl_.enable_metrics_)*/false
  , /*decltype(_impl_.notify_commit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostConfigDefaultTypeInternal() {}
  union {
    HostConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostConfigDefaultTypeInternal _HostConfig_default_instance_;
}  // namespace v1
}  // namespace raft
static ::_pb::Metadata file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_raft_2fv1_2fraft_5fhost_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raft_2fv1_2fraft_5fhost_2eproto = nullptr;

const uint32_t TableStruct_raft_2fv1_2fraft_5fhost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::CompactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::CompactRequest, _impl_.replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::CompactRequest, _impl_.shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::CompactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::LeaderTransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::LeaderTransferRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::LeaderTransferRequest, _impl_.target_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::LeaderTransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::SnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::SnapshotRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::SnapshotRequest, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::SnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::SnapshotResponse, _impl_.snapshot_index_captured_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetHostConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetHostConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetHostConfigResponse, _impl_.config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembershipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembershipRequest, _impl_.shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.deployment_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.wal_dir_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.host_dir_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.round_trip_time_in_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.raft_address_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.address_by_host_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.listen_address_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.mutual_tls_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.ca_file_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.cert_file_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.key_file_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.enable_metrics_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::HostConfig, _impl_.notify_commit_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::v1::CompactRequest)},
  { 8, -1, -1, sizeof(::raft::v1::CompactResponse)},
  { 14, -1, -1, sizeof(::raft::v1::LeaderTransferRequest)},
  { 22, -1, -1, sizeof(::raft::v1::LeaderTransferResponse)},
  { 28, -1, -1, sizeof(::raft::v1::SnapshotRequest)},
  { 36, -1, -1, sizeof(::raft::v1::SnapshotResponse)},
  { 43, -1, -1, sizeof(::raft::v1::StopRequest)},
  { 49, -1, -1, sizeof(::raft::v1::StopResponse)},
  { 55, -1, -1, sizeof(::raft::v1::GetHostConfigRequest)},
  { 61, -1, -1, sizeof(::raft::v1::GetHostConfigResponse)},
  { 68, -1, -1, sizeof(::raft::v1::GetShardMembershipRequest)},
  { 75, -1, -1, sizeof(::raft::v1::HostConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raft::v1::_CompactRequest_default_instance_._instance,
  &::raft::v1::_CompactResponse_default_instance_._instance,
  &::raft::v1::_LeaderTransferRequest_default_instance_._instance,
  &::raft::v1::_LeaderTransferResponse_default_instance_._instance,
  &::raft::v1::_SnapshotRequest_default_instance_._instance,
  &::raft::v1::_SnapshotResponse_default_instance_._instance,
  &::raft::v1::_StopRequest_default_instance_._instance,
  &::raft::v1::_StopResponse_default_instance_._instance,
  &::raft::v1::_GetHostConfigRequest_default_instance_._instance,
  &::raft::v1::_GetHostConfigResponse_default_instance_._instance,
  &::raft::v1::_GetShardMembershipRequest_default_instance_._instance,
  &::raft::v1::_HostConfig_default_instance_._instance,
};

const char descriptor_table_protodef_raft_2fv1_2fraft_5fhost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027raft/v1/raft_host.proto\022\007raft.v1\"J\n\016Co"
  "mpactRequest\022\035\n\nreplica_id\030\001 \001(\004R\treplic"
  "aId\022\031\n\010shard_id\030\002 \001(\004R\007shardId\"\021\n\017Compac"
  "tResponse\"X\n\025LeaderTransferRequest\022\031\n\010sh"
  "ard_id\030\001 \001(\004R\007shardId\022$\n\016target_node_id\030"
  "\002 \001(\tR\014targetNodeId\"\030\n\026LeaderTransferRes"
  "ponse\"F\n\017SnapshotRequest\022\031\n\010shard_id\030\001 \001"
  "(\004R\007shardId\022\030\n\007timeout\030\002 \001(\003R\007timeout\"J\n"
  "\020SnapshotResponse\0226\n\027snapshot_index_capt"
  "ured\030\001 \001(\004R\025snapshotIndexCaptured\"\r\n\013Sto"
  "pRequest\"\016\n\014StopResponse\"\026\n\024GetHostConfi"
  "gRequest\"D\n\025GetHostConfigResponse\022+\n\006con"
  "fig\030\001 \001(\0132\023.raft.v1.HostConfigR\006config\"6"
  "\n\031GetShardMembershipRequest\022\031\n\010shard_id\030"
  "\001 \001(\004R\007shardId\"\336\003\n\nHostConfig\022#\n\rdeploym"
  "ent_id\030\001 \001(\004R\014deploymentId\022\027\n\007wal_dir\030\002 "
  "\001(\tR\006walDir\022\031\n\010host_dir\030\003 \001(\tR\007hostDir\022D"
  "\n\037round_trip_time_in_milliseconds\030\004 \001(\004R"
  "\033roundTripTimeInMilliseconds\022!\n\014raft_add"
  "ress\030\005 \001(\tR\013raftAddress\022+\n\022address_by_ho"
  "st_id\030\006 \001(\010R\017addressByHostId\022%\n\016listen_a"
  "ddress\030\007 \001(\tR\rlistenAddress\022\035\n\nmutual_tl"
  "s\030\010 \001(\010R\tmutualTls\022\027\n\007ca_file\030\t \001(\tR\006caF"
  "ile\022\033\n\tcert_file\030\n \001(\tR\010certFile\022\031\n\010key_"
  "file\030\013 \001(\tR\007keyFile\022%\n\016enable_metrics\030\014 "
  "\001(\010R\renableMetrics\022#\n\rnotify_commit\030\r \001("
  "\010R\014notifyCommitB}\n\023io.a13s.api.raft.v1B\r"
  "RaftHostProtoP\001Z\032a13s.io/api/raft/v1;raf"
  "tv1\242\002\003RXX\252\002\007Raft.V1\312\002\007Raft\\V1\342\002\023Raft\\V1\\"
  "GPBMetadata\352\002\010Raft::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fhost_2eproto = {
    false, false, 1190, descriptor_table_protodef_raft_2fv1_2fraft_5fhost_2eproto,
    "raft/v1/raft_host.proto",
    &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_raft_2fv1_2fraft_5fhost_2eproto::offsets,
    file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto, file_level_enum_descriptors_raft_2fv1_2fraft_5fhost_2eproto,
    file_level_service_descriptors_raft_2fv1_2fraft_5fhost_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter() {
  return &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2fv1_2fraft_5fhost_2eproto(&descriptor_table_raft_2fv1_2fraft_5fhost_2eproto);
namespace raft {
namespace v1 {

// ===================================================================

class CompactRequest::_Internal {
 public:
};

CompactRequest::CompactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.CompactRequest)
}
CompactRequest::CompactRequest(const CompactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_id_){}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.replica_id_, &from._impl_.replica_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_id_) -
    reinterpret_cast<char*>(&_impl_.replica_id_)) + sizeof(_impl_.shard_id_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.CompactRequest)
}

inline void CompactRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_id_){uint64_t{0u}}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompactRequest::~CompactRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.CompactRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompactRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.CompactRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.replica_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shard_id_) -
      reinterpret_cast<char*>(&_impl_.replica_id_)) + sizeof(_impl_.shard_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 replica_id = 1 [json_name = "replicaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shard_id = 2 [json_name = "shardId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.CompactRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 replica_id = 1 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_replica_id(), target);
  }

  // uint64 shard_id = 2 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.CompactRequest)
  return target;
}

size_t CompactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.CompactRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 replica_id = 1 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // uint64 shard_id = 2 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactRequest::GetClassData() const { return &_class_data_; }


void CompactRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactRequest*>(&to_msg);
  auto& from = static_cast<const CompactRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.CompactRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactRequest::CopyFrom(const CompactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.CompactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactRequest::IsInitialized() const {
  return true;
}

void CompactRequest::InternalSwap(CompactRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompactRequest, _impl_.shard_id_)
      + sizeof(CompactRequest::_impl_.shard_id_)
      - PROTOBUF_FIELD_OFFSET(CompactRequest, _impl_.replica_id_)>(
          reinterpret_cast<char*>(&_impl_.replica_id_),
          reinterpret_cast<char*>(&other->_impl_.replica_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[0]);
}

// ===================================================================

class CompactResponse::_Internal {
 public:
};

CompactResponse::CompactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.CompactResponse)
}
CompactResponse::CompactResponse(const CompactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CompactResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.CompactResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CompactResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[1]);
}

// ===================================================================

class LeaderTransferRequest::_Internal {
 public:
};

LeaderTransferRequest::LeaderTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.LeaderTransferRequest)
}
LeaderTransferRequest::LeaderTransferRequest(const LeaderTransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaderTransferRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_node_id_){}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_node_id().empty()) {
    _this->_impl_.target_node_id_.Set(from._internal_target_node_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.LeaderTransferRequest)
}

inline void LeaderTransferRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_node_id_){}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaderTransferRequest::~LeaderTransferRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.LeaderTransferRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaderTransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_node_id_.Destroy();
}

void LeaderTransferRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaderTransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.LeaderTransferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_node_id_.ClearToEmpty();
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderTransferRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_node_id = 2 [json_name = "targetNodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.LeaderTransferRequest.target_node_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderTransferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.LeaderTransferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // string target_node_id = 2 [json_name = "targetNodeId"];
  if (!this->_internal_target_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_node_id().data(), static_cast<int>(this->_internal_target_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.LeaderTransferRequest.target_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.LeaderTransferRequest)
  return target;
}

size_t LeaderTransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.LeaderTransferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_node_id = 2 [json_name = "targetNodeId"];
  if (!this->_internal_target_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_node_id());
  }

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderTransferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaderTransferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderTransferRequest::GetClassData() const { return &_class_data_; }


void LeaderTransferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaderTransferRequest*>(&to_msg);
  auto& from = static_cast<const LeaderTransferRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.LeaderTransferRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_node_id().empty()) {
    _this->_internal_set_target_node_id(from._internal_target_node_id());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderTransferRequest::CopyFrom(const LeaderTransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.LeaderTransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTransferRequest::IsInitialized() const {
  return true;
}

void LeaderTransferRequest::InternalSwap(LeaderTransferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_node_id_, lhs_arena,
      &other->_impl_.target_node_id_, rhs_arena
  );
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderTransferRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[2]);
}

// ===================================================================

class LeaderTransferResponse::_Internal {
 public:
};

LeaderTransferResponse::LeaderTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.LeaderTransferResponse)
}
LeaderTransferResponse::LeaderTransferResponse(const LeaderTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LeaderTransferResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.LeaderTransferResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderTransferResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LeaderTransferResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[3]);
}

// ===================================================================

class SnapshotRequest::_Internal {
 public:
};

SnapshotRequest::SnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.SnapshotRequest)
}
SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.SnapshotRequest)
}

inline void SnapshotRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.timeout_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotRequest::~SnapshotRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.SnapshotRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnapshotRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.SnapshotRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 2 [json_name = "timeout"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.SnapshotRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.SnapshotRequest)
  return target;
}

size_t SnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.SnapshotRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // int64 timeout = 2 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotRequest::GetClassData() const { return &_class_data_; }


void SnapshotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotRequest*>(&to_msg);
  auto& from = static_cast<const SnapshotRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  return true;
}

void SnapshotRequest::InternalSwap(SnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotRequest, _impl_.timeout_)
      + sizeof(SnapshotRequest::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(SnapshotRequest, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[4]);
}

// ===================================================================

class SnapshotResponse::_Internal {
 public:
};

SnapshotResponse::SnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.SnapshotResponse)
}
SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_index_captured_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.snapshot_index_captured_ = from._impl_.snapshot_index_captured_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.SnapshotResponse)
}

inline void SnapshotResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_index_captured_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotResponse::~SnapshotResponse() {
  // @@protoc_insertion_point(destructor:raft.v1.SnapshotResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnapshotResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.SnapshotResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snapshot_index_captured_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 snapshot_index_captured = 1 [json_name = "snapshotIndexCaptured"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.snapshot_index_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.SnapshotResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 snapshot_index_captured = 1 [json_name = "snapshotIndexCaptured"];
  if (this->_internal_snapshot_index_captured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_snapshot_index_captured(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.SnapshotResponse)
  return target;
}

size_t SnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.SnapshotResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 snapshot_index_captured = 1 [json_name = "snapshotIndexCaptured"];
  if (this->_internal_snapshot_index_captured() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_snapshot_index_captured());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotResponse::GetClassData() const { return &_class_data_; }


void SnapshotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotResponse*>(&to_msg);
  auto& from = static_cast<const SnapshotResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_snapshot_index_captured() != 0) {
    _this->_internal_set_snapshot_index_captured(from._internal_snapshot_index_captured());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  return true;
}

void SnapshotResponse::InternalSwap(SnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.snapshot_index_captured_, other->_impl_.snapshot_index_captured_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[5]);
}

// ===================================================================

class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StopRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.StopRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[6]);
}

// ===================================================================

class StopResponse::_Internal {
 public:
};

StopResponse::StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StopResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.StopResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[7]);
}

// ===================================================================

class GetHostConfigRequest::_Internal {
 public:
};

GetHostConfigRequest::GetHostConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetHostConfigRequest)
}
GetHostConfigRequest::GetHostConfigRequest(const GetHostConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetHostConfigRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetHostConfigRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHostConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHostConfigRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetHostConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[8]);
}

// ===================================================================

class GetHostConfigResponse::_Internal {
 public:
  static const ::raft::v1::HostConfig& config(const GetHostConfigResponse* msg);
};

const ::raft::v1::HostConfig&
GetHostConfigResponse::_Internal::config(const GetHostConfigResponse* msg) {
  return *msg->_impl_.config_;
}
GetHostConfigResponse::GetHostConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetHostConfigResponse)
}
GetHostConfigResponse::GetHostConfigResponse(const GetHostConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHostConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::raft::v1::HostConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetHostConfigResponse)
}

inline void GetHostConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHostConfigResponse::~GetHostConfigResponse() {
  // @@protoc_insertion_point(destructor:raft.v1.GetHostConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHostConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.config_;
}

void GetHostConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHostConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetHostConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHostConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .raft.v1.HostConfig config = 1 [json_name = "config"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHostConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetHostConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.v1.HostConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetHostConfigResponse)
  return target;
}

size_t GetHostConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetHostConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft.v1.HostConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHostConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHostConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHostConfigResponse::GetClassData() const { return &_class_data_; }


void GetHostConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHostConfigResponse*>(&to_msg);
  auto& from = static_cast<const GetHostConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetHostConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::raft::v1::HostConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHostConfigResponse::CopyFrom(const GetHostConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetHostConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostConfigResponse::IsInitialized() const {
  return true;
}

void GetHostConfigResponse::InternalSwap(GetHostConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.config_, other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHostConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[9]);
}

// ===================================================================

class GetShardMembershipRequest::_Internal {
 public:
};

GetShardMembershipRequest::GetShardMembershipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetShardMembershipRequest)
}
GetShardMembershipRequest::GetShardMembershipRequest(const GetShardMembershipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardMembershipRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetShardMembershipRequest)
}

inline void GetShardMembershipRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetShardMembershipRequest::~GetShardMembershipRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.GetShardMembershipRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardMembershipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetShardMembershipRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardMembershipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetShardMembershipRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardMembershipRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardMembershipRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetShardMembershipRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetShardMembershipRequest)
  return target;
}

size_t GetShardMembershipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetShardMembershipRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardMembershipRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardMembershipRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardMembershipRequest::GetClassData() const { return &_class_data_; }


void GetShardMembershipRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardMembershipRequest*>(&to_msg);
  auto& from = static_cast<const GetShardMembershipRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetShardMembershipRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardMembershipRequest::CopyFrom(const GetShardMembershipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetShardMembershipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardMembershipRequest::IsInitialized() const {
  return true;
}

void GetShardMembershipRequest::InternalSwap(GetShardMembershipRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembershipRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[10]);
}

// ===================================================================

class HostConfig::_Internal {
 public:
};

HostConfig::HostConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.v1.HostConfig)
}
HostConfig::HostConfig(const HostConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wal_dir_){}
    , decltype(_impl_.host_dir_){}
    , decltype(_impl_.raft_address_){}
    , decltype(_impl_.listen_address_){}
    , decltype(_impl_.ca_file_){}
    , decltype(_impl_.cert_file_){}
    , decltype(_impl_.key_file_){}
    , decltype(_impl_.deployment_id_){}
    , decltype(_impl_.round_trip_time_in_milliseconds_){}
    , decltype(_impl_.address_by_host_id_){}
    , decltype(_impl_.mutual_tls_){}
    , decltype(_impl_.enable_metrics_){}
    , decltype(_impl_.notify_commit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wal_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wal_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wal_dir().empty()) {
    _this->_impl_.wal_dir_.Set(from._internal_wal_dir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_dir().empty()) {
    _this->_impl_.host_dir_.Set(from._internal_host_dir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.raft_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raft_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raft_address().empty()) {
    _this->_impl_.raft_address_.Set(from._internal_raft_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listen_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listen_address().empty()) {
    _this->_impl_.listen_address_.Set(from._internal_listen_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ca_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ca_file().empty()) {
    _this->_impl_.ca_file_.Set(from._internal_ca_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cert_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cert_file().empty()) {
    _this->_impl_.cert_file_.Set(from._internal_cert_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_file().empty()) {
    _this->_impl_.key_file_.Set(from._internal_key_file(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.deployment_id_, &from._impl_.deployment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notify_commit_) -
    reinterpret_cast<char*>(&_impl_.deployment_id_)) + sizeof(_impl_.notify_commit_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.HostConfig)
}

inline void HostConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wal_dir_){}
    , decltype(_impl_.host_dir_){}
    , decltype(_impl_.raft_address_){}
    , decltype(_impl_.listen_address_){}
    , decltype(_impl_.ca_file_){}
    , decltype(_impl_.cert_file_){}
    , decltype(_impl_.key_file_){}
    , decltype(_impl_.deployment_id_){uint64_t{0u}}
    , decltype(_impl_.round_trip_time_in_milliseconds_){uint64_t{0u}}
    , decltype(_impl_.address_by_host_id_){false}
    , decltype(_impl_.mutual_tls_){false}
    , decltype(_impl_.enable_metrics_){false}
    , decltype(_impl_.notify_commit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.wal_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wal_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raft_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raft_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listen_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ca_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cert_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostConfig::~HostConfig() {
  // @@protoc_insertion_point(destructor:raft.v1.HostConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wal_dir_.Destroy();
  _impl_.host_dir_.Destroy();
  _impl_.raft_address_.Destroy();
  _impl_.listen_address_.Destroy();
  _impl_.ca_file_.Destroy();
  _impl_.cert_file_.Destroy();
  _impl_.key_file_.Destroy();
}

void HostConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.HostConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wal_dir_.ClearToEmpty();
  _impl_.host_dir_.ClearToEmpty();
  _impl_.raft_address_.ClearToEmpty();
  _impl_.listen_address_.ClearToEmpty();
  _impl_.ca_file_.ClearToEmpty();
  _impl_.cert_file_.ClearToEmpty();
  _impl_.key_file_.ClearToEmpty();
  ::memset(&_impl_.deployment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.notify_commit_) -
      reinterpret_cast<char*>(&_impl_.deployment_id_)) + sizeof(_impl_.notify_commit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deployment_id = 1 [json_name = "deploymentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wal_dir = 2 [json_name = "walDir"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wal_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.wal_dir"));
        } else
          goto handle_unusual;
        continue;
      // string host_dir = 3 [json_name = "hostDir"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.host_dir"));
        } else
          goto handle_unusual;
        continue;
      // uint64 round_trip_time_in_milliseconds = 4 [json_name = "roundTripTimeInMilliseconds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.round_trip_time_in_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raft_address = 5 [json_name = "raftAddress"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_raft_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.raft_address"));
        } else
          goto handle_unusual;
        continue;
      // bool address_by_host_id = 6 [json_name = "addressByHostId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.address_by_host_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string listen_address = 7 [json_name = "listenAddress"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_listen_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.listen_address"));
        } else
          goto handle_unusual;
        continue;
      // bool mutual_tls = 8 [json_name = "mutualTls"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mutual_tls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ca_file = 9 [json_name = "caFile"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ca_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.ca_file"));
        } else
          goto handle_unusual;
        continue;
      // string cert_file = 10 [json_name = "certFile"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_cert_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.cert_file"));
        } else
          goto handle_unusual;
        continue;
      // string key_file = 11 [json_name = "keyFile"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_key_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.HostConfig.key_file"));
        } else
          goto handle_unusual;
        continue;
      // bool enable_metrics = 12 [json_name = "enableMetrics"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.enable_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool notify_commit = 13 [json_name = "notifyCommit"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.notify_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.HostConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deployment_id = 1 [json_name = "deploymentId"];
  if (this->_internal_deployment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deployment_id(), target);
  }

  // string wal_dir = 2 [json_name = "walDir"];
  if (!this->_internal_wal_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wal_dir().data(), static_cast<int>(this->_internal_wal_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.wal_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wal_dir(), target);
  }

  // string host_dir = 3 [json_name = "hostDir"];
  if (!this->_internal_host_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_dir().data(), static_cast<int>(this->_internal_host_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.host_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host_dir(), target);
  }

  // uint64 round_trip_time_in_milliseconds = 4 [json_name = "roundTripTimeInMilliseconds"];
  if (this->_internal_round_trip_time_in_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_round_trip_time_in_milliseconds(), target);
  }

  // string raft_address = 5 [json_name = "raftAddress"];
  if (!this->_internal_raft_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raft_address().data(), static_cast<int>(this->_internal_raft_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.raft_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_raft_address(), target);
  }

  // bool address_by_host_id = 6 [json_name = "addressByHostId"];
  if (this->_internal_address_by_host_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_address_by_host_id(), target);
  }

  // string listen_address = 7 [json_name = "listenAddress"];
  if (!this->_internal_listen_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listen_address().data(), static_cast<int>(this->_internal_listen_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.listen_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_listen_address(), target);
  }

  // bool mutual_tls = 8 [json_name = "mutualTls"];
  if (this->_internal_mutual_tls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_mutual_tls(), target);
  }

  // string ca_file = 9 [json_name = "caFile"];
  if (!this->_internal_ca_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ca_file().data(), static_cast<int>(this->_internal_ca_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.ca_file");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ca_file(), target);
  }

  // string cert_file = 10 [json_name = "certFile"];
  if (!this->_internal_cert_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cert_file().data(), static_cast<int>(this->_internal_cert_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.cert_file");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cert_file(), target);
  }

  // string key_file = 11 [json_name = "keyFile"];
  if (!this->_internal_key_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_file().data(), static_cast<int>(this->_internal_key_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.HostConfig.key_file");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_key_file(), target);
  }

  // bool enable_metrics = 12 [json_name = "enableMetrics"];
  if (this->_internal_enable_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_metrics(), target);
  }

  // bool notify_commit = 13 [json_name = "notifyCommit"];
  if (this->_internal_notify_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_notify_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.HostConfig)
  return target;
}

size_t HostConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.HostConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wal_dir = 2 [json_name = "walDir"];
  if (!this->_internal_wal_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wal_dir());
  }

  // string host_dir = 3 [json_name = "hostDir"];
  if (!this->_internal_host_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_dir());
  }

  // string raft_address = 5 [json_name = "raftAddress"];
  if (!this->_internal_raft_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raft_address());
  }

  // string listen_address = 7 [json_name = "listenAddress"];
  if (!this->_internal_listen_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listen_address());
  }

  // string ca_file = 9 [json_name = "caFile"];
  if (!this->_internal_ca_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ca_file());
  }

  // string cert_file = 10 [json_name = "certFile"];
  if (!this->_internal_cert_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cert_file());
  }

  // string key_file = 11 [json_name = "keyFile"];
  if (!this->_internal_key_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_file());
  }

  // uint64 deployment_id = 1 [json_name = "deploymentId"];
  if (this->_internal_deployment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deployment_id());
  }

  // uint64 round_trip_time_in_milliseconds = 4 [json_name = "roundTripTimeInMilliseconds"];
  if (this->_internal_round_trip_time_in_milliseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round_trip_time_in_milliseconds());
  }

  // bool address_by_host_id = 6 [json_name = "addressByHostId"];
  if (this->_internal_address_by_host_id() != 0) {
    total_size += 1 + 1;
  }

  // bool mutual_tls = 8 [json_name = "mutualTls"];
  if (this->_internal_mutual_tls() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_metrics = 12 [json_name = "enableMetrics"];
  if (this->_internal_enable_metrics() != 0) {
    total_size += 1 + 1;
  }

  // bool notify_commit = 13 [json_name = "notifyCommit"];
  if (this->_internal_notify_commit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostConfig::GetClassData() const { return &_class_data_; }


void HostConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostConfig*>(&to_msg);
  auto& from = static_cast<const HostConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.HostConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wal_dir().empty()) {
    _this->_internal_set_wal_dir(from._internal_wal_dir());
  }
  if (!from._internal_host_dir().empty()) {
    _this->_internal_set_host_dir(from._internal_host_dir());
  }
  if (!from._internal_raft_address().empty()) {
    _this->_internal_set_raft_address(from._internal_raft_address());
  }
  if (!from._internal_listen_address().empty()) {
    _this->_internal_set_listen_address(from._internal_listen_address());
  }
  if (!from._internal_ca_file().empty()) {
    _this->_internal_set_ca_file(from._internal_ca_file());
  }
  if (!from._internal_cert_file().empty()) {
    _this->_internal_set_cert_file(from._internal_cert_file());
  }
  if (!from._internal_key_file().empty()) {
    _this->_internal_set_key_file(from._internal_key_file());
  }
  if (from._internal_deployment_id() != 0) {
    _this->_internal_set_deployment_id(from._internal_deployment_id());
  }
  if (from._internal_round_trip_time_in_milliseconds() != 0) {
    _this->_internal_set_round_trip_time_in_milliseconds(from._internal_round_trip_time_in_milliseconds());
  }
  if (from._internal_address_by_host_id() != 0) {
    _this->_internal_set_address_by_host_id(from._internal_address_by_host_id());
  }
  if (from._internal_mutual_tls() != 0) {
    _this->_internal_set_mutual_tls(from._internal_mutual_tls());
  }
  if (from._internal_enable_metrics() != 0) {
    _this->_internal_set_enable_metrics(from._internal_enable_metrics());
  }
  if (from._internal_notify_commit() != 0) {
    _this->_internal_set_notify_commit(from._internal_notify_commit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostConfig::CopyFrom(const HostConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.HostConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostConfig::IsInitialized() const {
  return true;
}

void HostConfig::InternalSwap(HostConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wal_dir_, lhs_arena,
      &other->_impl_.wal_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_dir_, lhs_arena,
      &other->_impl_.host_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raft_address_, lhs_arena,
      &other->_impl_.raft_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listen_address_, lhs_arena,
      &other->_impl_.listen_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ca_file_, lhs_arena,
      &other->_impl_.ca_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cert_file_, lhs_arena,
      &other->_impl_.cert_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_file_, lhs_arena,
      &other->_impl_.key_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostConfig, _impl_.notify_commit_)
      + sizeof(HostConfig::_impl_.notify_commit_)
      - PROTOBUF_FIELD_OFFSET(HostConfig, _impl_.deployment_id_)>(
          reinterpret_cast<char*>(&_impl_.deployment_id_),
          reinterpret_cast<char*>(&other->_impl_.deployment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fhost_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fhost_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::v1::CompactRequest*
Arena::CreateMaybeMessage< ::raft::v1::CompactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::CompactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::CompactResponse*
Arena::CreateMaybeMessage< ::raft::v1::CompactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::CompactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::LeaderTransferRequest*
Arena::CreateMaybeMessage< ::raft::v1::LeaderTransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::LeaderTransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::LeaderTransferResponse*
Arena::CreateMaybeMessage< ::raft::v1::LeaderTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::LeaderTransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::SnapshotRequest*
Arena::CreateMaybeMessage< ::raft::v1::SnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::SnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::SnapshotResponse*
Arena::CreateMaybeMessage< ::raft::v1::SnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::SnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StopRequest*
Arena::CreateMaybeMessage< ::raft::v1::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StopResponse*
Arena::CreateMaybeMessage< ::raft::v1::StopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetHostConfigRequest*
Arena::CreateMaybeMessage< ::raft::v1::GetHostConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetHostConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetHostConfigResponse*
Arena::CreateMaybeMessage< ::raft::v1::GetHostConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetHostConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembershipRequest*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembershipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembershipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::HostConfig*
Arena::CreateMaybeMessage< ::raft::v1::HostConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::HostConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
