// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/raft_shard.proto

#include "raft/v1/raft_shard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raft {
namespace v1 {
PROTOBUF_CONSTEXPR AddReplicaRequest::AddReplicaRequest(
    ::_pbi::ConstantInitialized)
  : hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , replica_id_(uint64_t{0u})
  , shard_id_(uint64_t{0u})
  , timeout_(int64_t{0}){}
struct AddReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaRequestDefaultTypeInternal() {}
  union {
    AddReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaRequestDefaultTypeInternal _AddReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR AddReplicaResponse::AddReplicaResponse(
    ::_pbi::ConstantInitialized){}
struct AddReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaResponseDefaultTypeInternal() {}
  union {
    AddReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaResponseDefaultTypeInternal _AddReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR AddReplicaObserverRequest::AddReplicaObserverRequest(
    ::_pbi::ConstantInitialized)
  : hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , timeout_(int64_t{0}){}
struct AddReplicaObserverRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaObserverRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaObserverRequestDefaultTypeInternal() {}
  union {
    AddReplicaObserverRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaObserverRequestDefaultTypeInternal _AddReplicaObserverRequest_default_instance_;
PROTOBUF_CONSTEXPR AddReplicaObserverResponse::AddReplicaObserverResponse(
    ::_pbi::ConstantInitialized){}
struct AddReplicaObserverResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaObserverResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaObserverResponseDefaultTypeInternal() {}
  union {
    AddReplicaObserverResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaObserverResponseDefaultTypeInternal _AddReplicaObserverResponse_default_instance_;
PROTOBUF_CONSTEXPR AddReplicaWitnessRequest::AddReplicaWitnessRequest(
    ::_pbi::ConstantInitialized)
  : hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , timeout_(int64_t{0}){}
struct AddReplicaWitnessRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaWitnessRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaWitnessRequestDefaultTypeInternal() {}
  union {
    AddReplicaWitnessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaWitnessRequestDefaultTypeInternal _AddReplicaWitnessRequest_default_instance_;
PROTOBUF_CONSTEXPR AddReplicaWitnessResponse::AddReplicaWitnessResponse(
    ::_pbi::ConstantInitialized){}
struct AddReplicaWitnessResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplicaWitnessResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplicaWitnessResponseDefaultTypeInternal() {}
  union {
    AddReplicaWitnessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplicaWitnessResponseDefaultTypeInternal _AddReplicaWitnessResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveReplicaRequest::RemoveReplicaRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , timeout_(int64_t{0}){}
struct RemoveReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveReplicaRequestDefaultTypeInternal() {}
  union {
    RemoveReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveReplicaRequestDefaultTypeInternal _RemoveReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveReplicaResponse::RemoveReplicaResponse(
    ::_pbi::ConstantInitialized){}
struct RemoveReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveReplicaResponseDefaultTypeInternal() {}
  union {
    RemoveReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveReplicaResponseDefaultTypeInternal _RemoveReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLeaderIdRequest::GetLeaderIdRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , timeout_(int64_t{0}){}
struct GetLeaderIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLeaderIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLeaderIdRequestDefaultTypeInternal() {}
  union {
    GetLeaderIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLeaderIdRequestDefaultTypeInternal _GetLeaderIdRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLeaderIdResponse::GetLeaderIdResponse(
    ::_pbi::ConstantInitialized)
  : leader_(uint64_t{0u})
  , available_(false){}
struct GetLeaderIdResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLeaderIdResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLeaderIdResponseDefaultTypeInternal() {}
  union {
    GetLeaderIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLeaderIdResponseDefaultTypeInternal _GetLeaderIdResponse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersRequest::GetShardMembersRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u}){}
struct GetShardMembersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersRequestDefaultTypeInternal() {}
  union {
    GetShardMembersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersRequestDefaultTypeInternal _GetShardMembersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersResponse_ReplicasEntry_DoNotUse::GetShardMembersResponse_ReplicasEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetShardMembersResponse_ReplicasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersResponse_ReplicasEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_ReplicasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersResponse_ObserversEntry_DoNotUse::GetShardMembersResponse_ObserversEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetShardMembersResponse_ObserversEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersResponse_ObserversEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_ObserversEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersResponse_WitnessesEntry_DoNotUse::GetShardMembersResponse_WitnessesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetShardMembersResponse_WitnessesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersResponse_WitnessesEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_WitnessesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersResponse_RemovedEntry_DoNotUse::GetShardMembersResponse_RemovedEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetShardMembersResponse_RemovedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersResponse_RemovedEntry_DoNotUseDefaultTypeInternal _GetShardMembersResponse_RemovedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetShardMembersResponse::GetShardMembersResponse(
    ::_pbi::ConstantInitialized)
  : replicas_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , observers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , witnesses_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , removed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , config_change_id_(uint64_t{0u}){}
struct GetShardMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardMembersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardMembersResponseDefaultTypeInternal() {}
  union {
    GetShardMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardMembersResponseDefaultTypeInternal _GetShardMembersResponse_default_instance_;
PROTOBUF_CONSTEXPR NewShardRequest::NewShardRequest(
    ::_pbi::ConstantInitialized)
  : hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , timeout_(int64_t{0})
  , type_(0)
{}
struct NewShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewShardRequestDefaultTypeInternal() {}
  union {
    NewShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewShardRequestDefaultTypeInternal _NewShardRequest_default_instance_;
PROTOBUF_CONSTEXPR NewShardResponse::NewShardResponse(
    ::_pbi::ConstantInitialized){}
struct NewShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewShardResponseDefaultTypeInternal() {}
  union {
    NewShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewShardResponseDefaultTypeInternal _NewShardResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveDataRequest::RemoveDataRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u}){}
struct RemoveDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDataRequestDefaultTypeInternal() {}
  union {
    RemoveDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDataRequestDefaultTypeInternal _RemoveDataRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveDataResponse::RemoveDataResponse(
    ::_pbi::ConstantInitialized){}
struct RemoveDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDataResponseDefaultTypeInternal() {}
  union {
    RemoveDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDataResponseDefaultTypeInternal _RemoveDataResponse_default_instance_;
PROTOBUF_CONSTEXPR StartReplicaRequest::StartReplicaRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , type_(0)
{}
struct StartReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartReplicaRequestDefaultTypeInternal() {}
  union {
    StartReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartReplicaRequestDefaultTypeInternal _StartReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR StartReplicaResponse::StartReplicaResponse(
    ::_pbi::ConstantInitialized){}
struct StartReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartReplicaResponseDefaultTypeInternal() {}
  union {
    StartReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartReplicaResponseDefaultTypeInternal _StartReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR StartReplicaObserverRequest::StartReplicaObserverRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u})
  , replica_id_(uint64_t{0u})
  , type_(0)
{}
struct StartReplicaObserverRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartReplicaObserverRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartReplicaObserverRequestDefaultTypeInternal() {}
  union {
    StartReplicaObserverRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartReplicaObserverRequestDefaultTypeInternal _StartReplicaObserverRequest_default_instance_;
PROTOBUF_CONSTEXPR StartReplicaObserverResponse::StartReplicaObserverResponse(
    ::_pbi::ConstantInitialized){}
struct StartReplicaObserverResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartReplicaObserverResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartReplicaObserverResponseDefaultTypeInternal() {}
  union {
    StartReplicaObserverResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartReplicaObserverResponseDefaultTypeInternal _StartReplicaObserverResponse_default_instance_;
PROTOBUF_CONSTEXPR StopReplicaRequest::StopReplicaRequest(
    ::_pbi::ConstantInitialized)
  : shard_id_(uint64_t{0u}){}
struct StopReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopReplicaRequestDefaultTypeInternal() {}
  union {
    StopReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopReplicaRequestDefaultTypeInternal _StopReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR StopReplicaResponse::StopReplicaResponse(
    ::_pbi::ConstantInitialized){}
struct StopReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopReplicaResponseDefaultTypeInternal() {}
  union {
    StopReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopReplicaResponseDefaultTypeInternal _StopReplicaResponse_default_instance_;
}  // namespace v1
}  // namespace raft
static ::_pb::Metadata file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_raft_2fv1_2fraft_5fshard_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raft_2fv1_2fraft_5fshard_2eproto = nullptr;

const uint32_t TableStruct_raft_2fv1_2fraft_5fshard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaObserverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::AddReplicaWitnessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveReplicaRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveReplicaRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveReplicaRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdResponse, leader_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetLeaderIdResponse, available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, config_change_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, replicas_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, observers_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, witnesses_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::GetShardMembersResponse, removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, type_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::NewShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveDataRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveDataRequest, replica_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::RemoveDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaObserverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaObserverRequest, shard_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaObserverRequest, replica_id_),
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaObserverRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StartReplicaObserverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StopReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StopReplicaRequest, shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::v1::StopReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::v1::AddReplicaRequest)},
  { 10, -1, -1, sizeof(::raft::v1::AddReplicaResponse)},
  { 16, -1, -1, sizeof(::raft::v1::AddReplicaObserverRequest)},
  { 26, -1, -1, sizeof(::raft::v1::AddReplicaObserverResponse)},
  { 32, -1, -1, sizeof(::raft::v1::AddReplicaWitnessRequest)},
  { 42, -1, -1, sizeof(::raft::v1::AddReplicaWitnessResponse)},
  { 48, -1, -1, sizeof(::raft::v1::RemoveReplicaRequest)},
  { 57, -1, -1, sizeof(::raft::v1::RemoveReplicaResponse)},
  { 63, -1, -1, sizeof(::raft::v1::GetLeaderIdRequest)},
  { 72, -1, -1, sizeof(::raft::v1::GetLeaderIdResponse)},
  { 80, -1, -1, sizeof(::raft::v1::GetShardMembersRequest)},
  { 87, 95, -1, sizeof(::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse)},
  { 97, 105, -1, sizeof(::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse)},
  { 107, 115, -1, sizeof(::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse)},
  { 117, 125, -1, sizeof(::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse)},
  { 127, -1, -1, sizeof(::raft::v1::GetShardMembersResponse)},
  { 138, -1, -1, sizeof(::raft::v1::NewShardRequest)},
  { 149, -1, -1, sizeof(::raft::v1::NewShardResponse)},
  { 155, -1, -1, sizeof(::raft::v1::RemoveDataRequest)},
  { 163, -1, -1, sizeof(::raft::v1::RemoveDataResponse)},
  { 169, -1, -1, sizeof(::raft::v1::StartReplicaRequest)},
  { 178, -1, -1, sizeof(::raft::v1::StartReplicaResponse)},
  { 184, -1, -1, sizeof(::raft::v1::StartReplicaObserverRequest)},
  { 193, -1, -1, sizeof(::raft::v1::StartReplicaObserverResponse)},
  { 199, -1, -1, sizeof(::raft::v1::StopReplicaRequest)},
  { 206, -1, -1, sizeof(::raft::v1::StopReplicaResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raft::v1::_AddReplicaRequest_default_instance_._instance,
  &::raft::v1::_AddReplicaResponse_default_instance_._instance,
  &::raft::v1::_AddReplicaObserverRequest_default_instance_._instance,
  &::raft::v1::_AddReplicaObserverResponse_default_instance_._instance,
  &::raft::v1::_AddReplicaWitnessRequest_default_instance_._instance,
  &::raft::v1::_AddReplicaWitnessResponse_default_instance_._instance,
  &::raft::v1::_RemoveReplicaRequest_default_instance_._instance,
  &::raft::v1::_RemoveReplicaResponse_default_instance_._instance,
  &::raft::v1::_GetLeaderIdRequest_default_instance_._instance,
  &::raft::v1::_GetLeaderIdResponse_default_instance_._instance,
  &::raft::v1::_GetShardMembersRequest_default_instance_._instance,
  &::raft::v1::_GetShardMembersResponse_ReplicasEntry_DoNotUse_default_instance_._instance,
  &::raft::v1::_GetShardMembersResponse_ObserversEntry_DoNotUse_default_instance_._instance,
  &::raft::v1::_GetShardMembersResponse_WitnessesEntry_DoNotUse_default_instance_._instance,
  &::raft::v1::_GetShardMembersResponse_RemovedEntry_DoNotUse_default_instance_._instance,
  &::raft::v1::_GetShardMembersResponse_default_instance_._instance,
  &::raft::v1::_NewShardRequest_default_instance_._instance,
  &::raft::v1::_NewShardResponse_default_instance_._instance,
  &::raft::v1::_RemoveDataRequest_default_instance_._instance,
  &::raft::v1::_RemoveDataResponse_default_instance_._instance,
  &::raft::v1::_StartReplicaRequest_default_instance_._instance,
  &::raft::v1::_StartReplicaResponse_default_instance_._instance,
  &::raft::v1::_StartReplicaObserverRequest_default_instance_._instance,
  &::raft::v1::_StartReplicaObserverResponse_default_instance_._instance,
  &::raft::v1::_StopReplicaRequest_default_instance_._instance,
  &::raft::v1::_StopReplicaResponse_default_instance_._instance,
};

const char descriptor_table_protodef_raft_2fv1_2fraft_5fshard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030raft/v1/raft_shard.proto\022\007raft.v1\"\203\001\n\021"
  "AddReplicaRequest\022\035\n\nreplica_id\030\001 \001(\004R\tr"
  "eplicaId\022\031\n\010shard_id\030\002 \001(\004R\007shardId\022\032\n\010h"
  "ostname\030\004 \001(\tR\010hostname\022\030\n\007timeout\030\005 \001(\003"
  "R\007timeout\"\024\n\022AddReplicaResponse\"\213\001\n\031AddR"
  "eplicaObserverRequest\022\031\n\010shard_id\030\001 \001(\004R"
  "\007shardId\022\035\n\nreplica_id\030\002 \001(\004R\treplicaId\022"
  "\032\n\010hostname\030\003 \001(\tR\010hostname\022\030\n\007timeout\030\004"
  " \001(\003R\007timeout\"\034\n\032AddReplicaObserverRespo"
  "nse\"\212\001\n\030AddReplicaWitnessRequest\022\031\n\010shar"
  "d_id\030\001 \001(\004R\007shardId\022\035\n\nreplica_id\030\002 \001(\004R"
  "\treplicaId\022\032\n\010hostname\030\003 \001(\tR\010hostname\022\030"
  "\n\007timeout\030\004 \001(\003R\007timeout\"\033\n\031AddReplicaWi"
  "tnessResponse\"j\n\024RemoveReplicaRequest\022\031\n"
  "\010shard_id\030\001 \001(\004R\007shardId\022\035\n\nreplica_id\030\002"
  " \001(\004R\treplicaId\022\030\n\007timeout\030\003 \001(\003R\007timeou"
  "t\"\027\n\025RemoveReplicaResponse\"h\n\022GetLeaderI"
  "dRequest\022\031\n\010shard_id\030\001 \001(\004R\007shardId\022\035\n\nr"
  "eplica_id\030\002 \001(\004R\treplicaId\022\030\n\007timeout\030\003 "
  "\001(\003R\007timeout\"K\n\023GetLeaderIdResponse\022\026\n\006l"
  "eader\030\001 \001(\004R\006leader\022\034\n\tavailable\030\002 \001(\010R\t"
  "available\"3\n\026GetShardMembersRequest\022\031\n\010s"
  "hard_id\030\001 \001(\004R\007shardId\"\353\004\n\027GetShardMembe"
  "rsResponse\022(\n\020config_change_id\030\001 \001(\004R\016co"
  "nfigChangeId\022J\n\010replicas\030\002 \003(\0132..raft.v1"
  ".GetShardMembersResponse.ReplicasEntryR\010"
  "replicas\022M\n\tobservers\030\003 \003(\0132/.raft.v1.Ge"
  "tShardMembersResponse.ObserversEntryR\tob"
  "servers\022M\n\twitnesses\030\004 \003(\0132/.raft.v1.Get"
  "ShardMembersResponse.WitnessesEntryR\twit"
  "nesses\022G\n\007removed\030\005 \003(\0132-.raft.v1.GetSha"
  "rdMembersResponse.RemovedEntryR\007removed\032"
  ";\n\rReplicasEntry\022\020\n\003key\030\001 \001(\004R\003key\022\024\n\005va"
  "lue\030\002 \001(\tR\005value:\0028\001\032<\n\016ObserversEntry\022\020"
  "\n\003key\030\001 \001(\004R\003key\022\024\n\005value\030\002 \001(\tR\005value:\002"
  "8\001\032<\n\016WitnessesEntry\022\020\n\003key\030\001 \001(\004R\003key\022\024"
  "\n\005value\030\002 \001(\tR\005value:\0028\001\032:\n\014RemovedEntry"
  "\022\020\n\003key\030\001 \001(\004R\003key\022\024\n\005value\030\002 \001(\tR\005value"
  ":\0028\001\"\260\001\n\017NewShardRequest\022\031\n\010shard_id\030\001 \001"
  "(\004R\007shardId\022\035\n\nreplica_id\030\002 \001(\004R\treplica"
  "Id\022-\n\004type\030\003 \001(\0162\031.raft.v1.StateMachineT"
  "ypeR\004type\022\032\n\010hostname\030\004 \001(\tR\010hostname\022\030\n"
  "\007timeout\030\005 \001(\003R\007timeout\"\022\n\020NewShardRespo"
  "nse\"M\n\021RemoveDataRequest\022\031\n\010shard_id\030\001 \001"
  "(\004R\007shardId\022\035\n\nreplica_id\030\002 \001(\004R\treplica"
  "Id\"\024\n\022RemoveDataResponse\"~\n\023StartReplica"
  "Request\022\031\n\010shard_id\030\001 \001(\004R\007shardId\022\035\n\nre"
  "plica_id\030\002 \001(\004R\treplicaId\022-\n\004type\030\003 \001(\0162"
  "\031.raft.v1.StateMachineTypeR\004type\"\026\n\024Star"
  "tReplicaResponse\"\206\001\n\033StartReplicaObserve"
  "rRequest\022\031\n\010shard_id\030\001 \001(\004R\007shardId\022\035\n\nr"
  "eplica_id\030\002 \001(\004R\treplicaId\022-\n\004type\030\003 \001(\016"
  "2\031.raft.v1.StateMachineTypeR\004type\"\036\n\034Sta"
  "rtReplicaObserverResponse\"/\n\022StopReplica"
  "Request\022\031\n\010shard_id\030\001 \001(\004R\007shardId\"\025\n\023St"
  "opReplicaResponse*n\n\020StateMachineType\022\"\n"
  "\036STATE_MACHINE_TYPE_UNSPECIFIED\020\000\022\033\n\027STA"
  "TE_MACHINE_TYPE_TEST\020\001\022\031\n\025STATE_MACHINE_"
  "TYPE_KV\020\002B~\n\023io.a13s.api.raft.v1B\016RaftSh"
  "ardProtoP\001Z\032a13s.io/api/raft/v1;raftv1\242\002"
  "\003RXX\252\002\007Raft.V1\312\002\007Raft\\V1\342\002\023Raft\\V1\\GPBMe"
  "tadata\352\002\010Raft::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2fv1_2fraft_5fshard_2eproto = {
    false, false, 2465, descriptor_table_protodef_raft_2fv1_2fraft_5fshard_2eproto,
    "raft/v1/raft_shard.proto",
    &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once, nullptr, 0, 26,
    schemas, file_default_instances, TableStruct_raft_2fv1_2fraft_5fshard_2eproto::offsets,
    file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto, file_level_enum_descriptors_raft_2fv1_2fraft_5fshard_2eproto,
    file_level_service_descriptors_raft_2fv1_2fraft_5fshard_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter() {
  return &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2fv1_2fraft_5fshard_2eproto(&descriptor_table_raft_2fv1_2fraft_5fshard_2eproto);
namespace raft {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateMachineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2fv1_2fraft_5fshard_2eproto);
  return file_level_enum_descriptors_raft_2fv1_2fraft_5fshard_2eproto[0];
}
bool StateMachineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AddReplicaRequest::_Internal {
 public:
};

AddReplicaRequest::AddReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaRequest)
}
AddReplicaRequest::AddReplicaRequest(const AddReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&replica_id_, &from.replica_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&replica_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaRequest)
}

inline void AddReplicaRequest::SharedCtor() {
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replica_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&replica_id_)) + sizeof(timeout_));
}

AddReplicaRequest::~AddReplicaRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.AddReplicaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.Destroy();
}

void AddReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.AddReplicaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  ::memset(&replica_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&replica_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReplicaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 replica_id = 1 [json_name = "replicaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shard_id = 2 [json_name = "shardId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hostname = 4 [json_name = "hostname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.AddReplicaRequest.hostname"));
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 5 [json_name = "timeout"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReplicaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.AddReplicaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 replica_id = 1 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_replica_id(), target);
  }

  // uint64 shard_id = 2 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_shard_id(), target);
  }

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.AddReplicaRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // int64 timeout = 5 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.AddReplicaRequest)
  return target;
}

size_t AddReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.AddReplicaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // uint64 replica_id = 1 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // uint64 shard_id = 2 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // int64 timeout = 5 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddReplicaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaRequest::GetClassData() const { return &_class_data_; }

void AddReplicaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddReplicaRequest *>(to)->MergeFrom(
      static_cast<const AddReplicaRequest &>(from));
}


void AddReplicaRequest::MergeFrom(const AddReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.AddReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReplicaRequest::CopyFrom(const AddReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.AddReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReplicaRequest::IsInitialized() const {
  return true;
}

void AddReplicaRequest::InternalSwap(AddReplicaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddReplicaRequest, timeout_)
      + sizeof(AddReplicaRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(AddReplicaRequest, replica_id_)>(
          reinterpret_cast<char*>(&replica_id_),
          reinterpret_cast<char*>(&other->replica_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[0]);
}

// ===================================================================

class AddReplicaResponse::_Internal {
 public:
};

AddReplicaResponse::AddReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaResponse)
}
AddReplicaResponse::AddReplicaResponse(const AddReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[1]);
}

// ===================================================================

class AddReplicaObserverRequest::_Internal {
 public:
};

AddReplicaObserverRequest::AddReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaObserverRequest)
}
AddReplicaObserverRequest::AddReplicaObserverRequest(const AddReplicaObserverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaObserverRequest)
}

inline void AddReplicaObserverRequest::SharedCtor() {
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
}

AddReplicaObserverRequest::~AddReplicaObserverRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.AddReplicaObserverRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReplicaObserverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.Destroy();
}

void AddReplicaObserverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddReplicaObserverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.AddReplicaObserverRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReplicaObserverRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hostname = 3 [json_name = "hostname"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.AddReplicaObserverRequest.hostname"));
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 4 [json_name = "timeout"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReplicaObserverRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.AddReplicaObserverRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // string hostname = 3 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.AddReplicaObserverRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  // int64 timeout = 4 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.AddReplicaObserverRequest)
  return target;
}

size_t AddReplicaObserverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.AddReplicaObserverRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 3 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // int64 timeout = 4 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaObserverRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddReplicaObserverRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaObserverRequest::GetClassData() const { return &_class_data_; }

void AddReplicaObserverRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddReplicaObserverRequest *>(to)->MergeFrom(
      static_cast<const AddReplicaObserverRequest &>(from));
}


void AddReplicaObserverRequest::MergeFrom(const AddReplicaObserverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.AddReplicaObserverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReplicaObserverRequest::CopyFrom(const AddReplicaObserverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.AddReplicaObserverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReplicaObserverRequest::IsInitialized() const {
  return true;
}

void AddReplicaObserverRequest::InternalSwap(AddReplicaObserverRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddReplicaObserverRequest, timeout_)
      + sizeof(AddReplicaObserverRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(AddReplicaObserverRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaObserverRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[2]);
}

// ===================================================================

class AddReplicaObserverResponse::_Internal {
 public:
};

AddReplicaObserverResponse::AddReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaObserverResponse)
}
AddReplicaObserverResponse::AddReplicaObserverResponse(const AddReplicaObserverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaObserverResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaObserverResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaObserverResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaObserverResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[3]);
}

// ===================================================================

class AddReplicaWitnessRequest::_Internal {
 public:
};

AddReplicaWitnessRequest::AddReplicaWitnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaWitnessRequest)
}
AddReplicaWitnessRequest::AddReplicaWitnessRequest(const AddReplicaWitnessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaWitnessRequest)
}

inline void AddReplicaWitnessRequest::SharedCtor() {
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
}

AddReplicaWitnessRequest::~AddReplicaWitnessRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.AddReplicaWitnessRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReplicaWitnessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.Destroy();
}

void AddReplicaWitnessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddReplicaWitnessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.AddReplicaWitnessRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReplicaWitnessRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hostname = 3 [json_name = "hostname"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.AddReplicaWitnessRequest.hostname"));
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 4 [json_name = "timeout"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReplicaWitnessRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.AddReplicaWitnessRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // string hostname = 3 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.AddReplicaWitnessRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  // int64 timeout = 4 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.AddReplicaWitnessRequest)
  return target;
}

size_t AddReplicaWitnessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.AddReplicaWitnessRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 3 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // int64 timeout = 4 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaWitnessRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddReplicaWitnessRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaWitnessRequest::GetClassData() const { return &_class_data_; }

void AddReplicaWitnessRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddReplicaWitnessRequest *>(to)->MergeFrom(
      static_cast<const AddReplicaWitnessRequest &>(from));
}


void AddReplicaWitnessRequest::MergeFrom(const AddReplicaWitnessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.AddReplicaWitnessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReplicaWitnessRequest::CopyFrom(const AddReplicaWitnessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.AddReplicaWitnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReplicaWitnessRequest::IsInitialized() const {
  return true;
}

void AddReplicaWitnessRequest::InternalSwap(AddReplicaWitnessRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddReplicaWitnessRequest, timeout_)
      + sizeof(AddReplicaWitnessRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(AddReplicaWitnessRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaWitnessRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[4]);
}

// ===================================================================

class AddReplicaWitnessResponse::_Internal {
 public:
};

AddReplicaWitnessResponse::AddReplicaWitnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.AddReplicaWitnessResponse)
}
AddReplicaWitnessResponse::AddReplicaWitnessResponse(const AddReplicaWitnessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.AddReplicaWitnessResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReplicaWitnessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReplicaWitnessResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddReplicaWitnessResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[5]);
}

// ===================================================================

class RemoveReplicaRequest::_Internal {
 public:
};

RemoveReplicaRequest::RemoveReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.RemoveReplicaRequest)
}
RemoveReplicaRequest::RemoveReplicaRequest(const RemoveReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RemoveReplicaRequest)
}

inline void RemoveReplicaRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
}

RemoveReplicaRequest::~RemoveReplicaRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.RemoveReplicaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RemoveReplicaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveReplicaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 3 [json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveReplicaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RemoveReplicaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // int64 timeout = 3 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RemoveReplicaRequest)
  return target;
}

size_t RemoveReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RemoveReplicaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // int64 timeout = 3 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveReplicaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveReplicaRequest::GetClassData() const { return &_class_data_; }

void RemoveReplicaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveReplicaRequest *>(to)->MergeFrom(
      static_cast<const RemoveReplicaRequest &>(from));
}


void RemoveReplicaRequest::MergeFrom(const RemoveReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RemoveReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveReplicaRequest::CopyFrom(const RemoveReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RemoveReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveReplicaRequest::IsInitialized() const {
  return true;
}

void RemoveReplicaRequest::InternalSwap(RemoveReplicaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveReplicaRequest, timeout_)
      + sizeof(RemoveReplicaRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(RemoveReplicaRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[6]);
}

// ===================================================================

class RemoveReplicaResponse::_Internal {
 public:
};

RemoveReplicaResponse::RemoveReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.RemoveReplicaResponse)
}
RemoveReplicaResponse::RemoveReplicaResponse(const RemoveReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.RemoveReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[7]);
}

// ===================================================================

class GetLeaderIdRequest::_Internal {
 public:
};

GetLeaderIdRequest::GetLeaderIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetLeaderIdRequest)
}
GetLeaderIdRequest::GetLeaderIdRequest(const GetLeaderIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetLeaderIdRequest)
}

inline void GetLeaderIdRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
}

GetLeaderIdRequest::~GetLeaderIdRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.GetLeaderIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLeaderIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLeaderIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLeaderIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetLeaderIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLeaderIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 3 [json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLeaderIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetLeaderIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // int64 timeout = 3 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetLeaderIdRequest)
  return target;
}

size_t GetLeaderIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetLeaderIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // int64 timeout = 3 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLeaderIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLeaderIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLeaderIdRequest::GetClassData() const { return &_class_data_; }

void GetLeaderIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLeaderIdRequest *>(to)->MergeFrom(
      static_cast<const GetLeaderIdRequest &>(from));
}


void GetLeaderIdRequest::MergeFrom(const GetLeaderIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetLeaderIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLeaderIdRequest::CopyFrom(const GetLeaderIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetLeaderIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderIdRequest::IsInitialized() const {
  return true;
}

void GetLeaderIdRequest::InternalSwap(GetLeaderIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLeaderIdRequest, timeout_)
      + sizeof(GetLeaderIdRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(GetLeaderIdRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLeaderIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[8]);
}

// ===================================================================

class GetLeaderIdResponse::_Internal {
 public:
};

GetLeaderIdResponse::GetLeaderIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetLeaderIdResponse)
}
GetLeaderIdResponse::GetLeaderIdResponse(const GetLeaderIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leader_, &from.leader_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&leader_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetLeaderIdResponse)
}

inline void GetLeaderIdResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&leader_)) + sizeof(available_));
}

GetLeaderIdResponse::~GetLeaderIdResponse() {
  // @@protoc_insertion_point(destructor:raft.v1.GetLeaderIdResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLeaderIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLeaderIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLeaderIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetLeaderIdResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&leader_)) + sizeof(available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLeaderIdResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 leader = 1 [json_name = "leader"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool available = 2 [json_name = "available"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLeaderIdResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetLeaderIdResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1 [json_name = "leader"];
  if (this->_internal_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_leader(), target);
  }

  // bool available = 2 [json_name = "available"];
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetLeaderIdResponse)
  return target;
}

size_t GetLeaderIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetLeaderIdResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 leader = 1 [json_name = "leader"];
  if (this->_internal_leader() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leader());
  }

  // bool available = 2 [json_name = "available"];
  if (this->_internal_available() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLeaderIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLeaderIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLeaderIdResponse::GetClassData() const { return &_class_data_; }

void GetLeaderIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLeaderIdResponse *>(to)->MergeFrom(
      static_cast<const GetLeaderIdResponse &>(from));
}


void GetLeaderIdResponse::MergeFrom(const GetLeaderIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetLeaderIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader() != 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from._internal_available() != 0) {
    _internal_set_available(from._internal_available());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLeaderIdResponse::CopyFrom(const GetLeaderIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetLeaderIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderIdResponse::IsInitialized() const {
  return true;
}

void GetLeaderIdResponse::InternalSwap(GetLeaderIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLeaderIdResponse, available_)
      + sizeof(GetLeaderIdResponse::available_)
      - PROTOBUF_FIELD_OFFSET(GetLeaderIdResponse, leader_)>(
          reinterpret_cast<char*>(&leader_),
          reinterpret_cast<char*>(&other->leader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLeaderIdResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[9]);
}

// ===================================================================

class GetShardMembersRequest::_Internal {
 public:
};

GetShardMembersRequest::GetShardMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetShardMembersRequest)
}
GetShardMembersRequest::GetShardMembersRequest(const GetShardMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetShardMembersRequest)
}

inline void GetShardMembersRequest::SharedCtor() {
shard_id_ = uint64_t{0u};
}

GetShardMembersRequest::~GetShardMembersRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.GetShardMembersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardMembersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetShardMembersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetShardMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetShardMembersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardMembersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardMembersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetShardMembersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetShardMembersRequest)
  return target;
}

size_t GetShardMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetShardMembersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardMembersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetShardMembersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardMembersRequest::GetClassData() const { return &_class_data_; }

void GetShardMembersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetShardMembersRequest *>(to)->MergeFrom(
      static_cast<const GetShardMembersRequest &>(from));
}


void GetShardMembersRequest::MergeFrom(const GetShardMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetShardMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardMembersRequest::CopyFrom(const GetShardMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetShardMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardMembersRequest::IsInitialized() const {
  return true;
}

void GetShardMembersRequest::InternalSwap(GetShardMembersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[10]);
}

// ===================================================================

GetShardMembersResponse_ReplicasEntry_DoNotUse::GetShardMembersResponse_ReplicasEntry_DoNotUse() {}
GetShardMembersResponse_ReplicasEntry_DoNotUse::GetShardMembersResponse_ReplicasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetShardMembersResponse_ReplicasEntry_DoNotUse::MergeFrom(const GetShardMembersResponse_ReplicasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersResponse_ReplicasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[11]);
}

// ===================================================================

GetShardMembersResponse_ObserversEntry_DoNotUse::GetShardMembersResponse_ObserversEntry_DoNotUse() {}
GetShardMembersResponse_ObserversEntry_DoNotUse::GetShardMembersResponse_ObserversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetShardMembersResponse_ObserversEntry_DoNotUse::MergeFrom(const GetShardMembersResponse_ObserversEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersResponse_ObserversEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[12]);
}

// ===================================================================

GetShardMembersResponse_WitnessesEntry_DoNotUse::GetShardMembersResponse_WitnessesEntry_DoNotUse() {}
GetShardMembersResponse_WitnessesEntry_DoNotUse::GetShardMembersResponse_WitnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetShardMembersResponse_WitnessesEntry_DoNotUse::MergeFrom(const GetShardMembersResponse_WitnessesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersResponse_WitnessesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[13]);
}

// ===================================================================

GetShardMembersResponse_RemovedEntry_DoNotUse::GetShardMembersResponse_RemovedEntry_DoNotUse() {}
GetShardMembersResponse_RemovedEntry_DoNotUse::GetShardMembersResponse_RemovedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetShardMembersResponse_RemovedEntry_DoNotUse::MergeFrom(const GetShardMembersResponse_RemovedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersResponse_RemovedEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[14]);
}

// ===================================================================

class GetShardMembersResponse::_Internal {
 public:
};

GetShardMembersResponse::GetShardMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replicas_(arena),
  observers_(arena),
  witnesses_(arena),
  removed_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetShardMembersResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:raft.v1.GetShardMembersResponse)
}
GetShardMembersResponse::GetShardMembersResponse(const GetShardMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replicas_.MergeFrom(from.replicas_);
  observers_.MergeFrom(from.observers_);
  witnesses_.MergeFrom(from.witnesses_);
  removed_.MergeFrom(from.removed_);
  config_change_id_ = from.config_change_id_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.GetShardMembersResponse)
}

inline void GetShardMembersResponse::SharedCtor() {
config_change_id_ = uint64_t{0u};
}

GetShardMembersResponse::~GetShardMembersResponse() {
  // @@protoc_insertion_point(destructor:raft.v1.GetShardMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetShardMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  replicas_.Destruct();
  observers_.Destruct();
  witnesses_.Destruct();
  removed_.Destruct();
}

void GetShardMembersResponse::ArenaDtor(void* object) {
  GetShardMembersResponse* _this = reinterpret_cast< GetShardMembersResponse* >(object);
  _this->replicas_.Destruct();
  _this->observers_.Destruct();
  _this->witnesses_.Destruct();
  _this->removed_.Destruct();
}
void GetShardMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetShardMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.GetShardMembersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  observers_.Clear();
  witnesses_.Clear();
  removed_.Clear();
  config_change_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 config_change_id = 1 [json_name = "configChangeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          config_change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> replicas = 2 [json_name = "replicas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&replicas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> observers = 3 [json_name = "observers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&observers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> witnesses = 4 [json_name = "witnesses"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&witnesses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> removed = 5 [json_name = "removed"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&removed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardMembersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.GetShardMembersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 config_change_id = 1 [json_name = "configChangeId"];
  if (this->_internal_config_change_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_config_change_id(), target);
  }

  // map<uint64, string> replicas = 2 [json_name = "replicas"];
  if (!this->_internal_replicas().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = GetShardMembersResponse_ReplicasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_replicas();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "raft.v1.GetShardMembersResponse.ReplicasEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint64, string> observers = 3 [json_name = "observers"];
  if (!this->_internal_observers().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = GetShardMembersResponse_ObserversEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_observers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "raft.v1.GetShardMembersResponse.ObserversEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint64, string> witnesses = 4 [json_name = "witnesses"];
  if (!this->_internal_witnesses().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = GetShardMembersResponse_WitnessesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_witnesses();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "raft.v1.GetShardMembersResponse.WitnessesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint64, string> removed = 5 [json_name = "removed"];
  if (!this->_internal_removed().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = GetShardMembersResponse_RemovedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_removed();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "raft.v1.GetShardMembersResponse.RemovedEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.GetShardMembersResponse)
  return target;
}

size_t GetShardMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.GetShardMembersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> replicas = 2 [json_name = "replicas"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_replicas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_replicas().begin();
      it != this->_internal_replicas().end(); ++it) {
    total_size += GetShardMembersResponse_ReplicasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, string> observers = 3 [json_name = "observers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_observers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_observers().begin();
      it != this->_internal_observers().end(); ++it) {
    total_size += GetShardMembersResponse_ObserversEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, string> witnesses = 4 [json_name = "witnesses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_witnesses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_witnesses().begin();
      it != this->_internal_witnesses().end(); ++it) {
    total_size += GetShardMembersResponse_WitnessesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, string> removed = 5 [json_name = "removed"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_removed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_removed().begin();
      it != this->_internal_removed().end(); ++it) {
    total_size += GetShardMembersResponse_RemovedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 config_change_id = 1 [json_name = "configChangeId"];
  if (this->_internal_config_change_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_config_change_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardMembersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetShardMembersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardMembersResponse::GetClassData() const { return &_class_data_; }

void GetShardMembersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetShardMembersResponse *>(to)->MergeFrom(
      static_cast<const GetShardMembersResponse &>(from));
}


void GetShardMembersResponse::MergeFrom(const GetShardMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.GetShardMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  observers_.MergeFrom(from.observers_);
  witnesses_.MergeFrom(from.witnesses_);
  removed_.MergeFrom(from.removed_);
  if (from._internal_config_change_id() != 0) {
    _internal_set_config_change_id(from._internal_config_change_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardMembersResponse::CopyFrom(const GetShardMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.GetShardMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardMembersResponse::IsInitialized() const {
  return true;
}

void GetShardMembersResponse::InternalSwap(GetShardMembersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replicas_.InternalSwap(&other->replicas_);
  observers_.InternalSwap(&other->observers_);
  witnesses_.InternalSwap(&other->witnesses_);
  removed_.InternalSwap(&other->removed_);
  swap(config_change_id_, other->config_change_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardMembersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[15]);
}

// ===================================================================

class NewShardRequest::_Internal {
 public:
};

NewShardRequest::NewShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.NewShardRequest)
}
NewShardRequest::NewShardRequest(const NewShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.NewShardRequest)
}

inline void NewShardRequest::SharedCtor() {
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
}

NewShardRequest::~NewShardRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.NewShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.Destroy();
}

void NewShardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.NewShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.StateMachineType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::raft::v1::StateMachineType>(val));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 4 [json_name = "hostname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.v1.NewShardRequest.hostname"));
        } else
          goto handle_unusual;
        continue;
      // int64 timeout = 5 [json_name = "timeout"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.NewShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.v1.NewShardRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // int64 timeout = 5 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.NewShardRequest)
  return target;
}

size_t NewShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.NewShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // int64 timeout = 5 [json_name = "timeout"];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout());
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewShardRequest::GetClassData() const { return &_class_data_; }

void NewShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewShardRequest *>(to)->MergeFrom(
      static_cast<const NewShardRequest &>(from));
}


void NewShardRequest::MergeFrom(const NewShardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.NewShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewShardRequest::CopyFrom(const NewShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.NewShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewShardRequest::IsInitialized() const {
  return true;
}

void NewShardRequest::InternalSwap(NewShardRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewShardRequest, type_)
      + sizeof(NewShardRequest::type_)
      - PROTOBUF_FIELD_OFFSET(NewShardRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[16]);
}

// ===================================================================

class NewShardResponse::_Internal {
 public:
};

NewShardResponse::NewShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.NewShardResponse)
}
NewShardResponse::NewShardResponse(const NewShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.NewShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NewShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[17]);
}

// ===================================================================

class RemoveDataRequest::_Internal {
 public:
};

RemoveDataRequest::RemoveDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.RemoveDataRequest)
}
RemoveDataRequest::RemoveDataRequest(const RemoveDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.RemoveDataRequest)
}

inline void RemoveDataRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(replica_id_));
}

RemoveDataRequest::~RemoveDataRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.RemoveDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.RemoveDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(replica_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.RemoveDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.RemoveDataRequest)
  return target;
}

size_t RemoveDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.RemoveDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDataRequest::GetClassData() const { return &_class_data_; }

void RemoveDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveDataRequest *>(to)->MergeFrom(
      static_cast<const RemoveDataRequest &>(from));
}


void RemoveDataRequest::MergeFrom(const RemoveDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.RemoveDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveDataRequest::CopyFrom(const RemoveDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.RemoveDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDataRequest::IsInitialized() const {
  return true;
}

void RemoveDataRequest::InternalSwap(RemoveDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveDataRequest, replica_id_)
      + sizeof(RemoveDataRequest::replica_id_)
      - PROTOBUF_FIELD_OFFSET(RemoveDataRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[18]);
}

// ===================================================================

class RemoveDataResponse::_Internal {
 public:
};

RemoveDataResponse::RemoveDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.RemoveDataResponse)
}
RemoveDataResponse::RemoveDataResponse(const RemoveDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.RemoveDataResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDataResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[19]);
}

// ===================================================================

class StartReplicaRequest::_Internal {
 public:
};

StartReplicaRequest::StartReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.StartReplicaRequest)
}
StartReplicaRequest::StartReplicaRequest(const StartReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.StartReplicaRequest)
}

inline void StartReplicaRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
}

StartReplicaRequest::~StartReplicaRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.StartReplicaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.StartReplicaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartReplicaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.StateMachineType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::raft::v1::StateMachineType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartReplicaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.StartReplicaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.StartReplicaRequest)
  return target;
}

size_t StartReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.StartReplicaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartReplicaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReplicaRequest::GetClassData() const { return &_class_data_; }

void StartReplicaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartReplicaRequest *>(to)->MergeFrom(
      static_cast<const StartReplicaRequest &>(from));
}


void StartReplicaRequest::MergeFrom(const StartReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.StartReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartReplicaRequest::CopyFrom(const StartReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.StartReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReplicaRequest::IsInitialized() const {
  return true;
}

void StartReplicaRequest::InternalSwap(StartReplicaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartReplicaRequest, type_)
      + sizeof(StartReplicaRequest::type_)
      - PROTOBUF_FIELD_OFFSET(StartReplicaRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[20]);
}

// ===================================================================

class StartReplicaResponse::_Internal {
 public:
};

StartReplicaResponse::StartReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.StartReplicaResponse)
}
StartReplicaResponse::StartReplicaResponse(const StartReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.StartReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StartReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[21]);
}

// ===================================================================

class StartReplicaObserverRequest::_Internal {
 public:
};

StartReplicaObserverRequest::StartReplicaObserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.StartReplicaObserverRequest)
}
StartReplicaObserverRequest::StartReplicaObserverRequest(const StartReplicaObserverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shard_id_, &from.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.v1.StartReplicaObserverRequest)
}

inline void StartReplicaObserverRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
}

StartReplicaObserverRequest::~StartReplicaObserverRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.StartReplicaObserverRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartReplicaObserverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartReplicaObserverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartReplicaObserverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.StartReplicaObserverRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&shard_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartReplicaObserverRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 replica_id = 2 [json_name = "replicaId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.v1.StateMachineType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::raft::v1::StateMachineType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartReplicaObserverRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.StartReplicaObserverRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_replica_id(), target);
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.StartReplicaObserverRequest)
  return target;
}

size_t StartReplicaObserverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.StartReplicaObserverRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 replica_id = 2 [json_name = "replicaId"];
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_replica_id());
  }

  // .raft.v1.StateMachineType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReplicaObserverRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartReplicaObserverRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReplicaObserverRequest::GetClassData() const { return &_class_data_; }

void StartReplicaObserverRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartReplicaObserverRequest *>(to)->MergeFrom(
      static_cast<const StartReplicaObserverRequest &>(from));
}


void StartReplicaObserverRequest::MergeFrom(const StartReplicaObserverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.StartReplicaObserverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_replica_id() != 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartReplicaObserverRequest::CopyFrom(const StartReplicaObserverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.StartReplicaObserverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReplicaObserverRequest::IsInitialized() const {
  return true;
}

void StartReplicaObserverRequest::InternalSwap(StartReplicaObserverRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartReplicaObserverRequest, type_)
      + sizeof(StartReplicaObserverRequest::type_)
      - PROTOBUF_FIELD_OFFSET(StartReplicaObserverRequest, shard_id_)>(
          reinterpret_cast<char*>(&shard_id_),
          reinterpret_cast<char*>(&other->shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartReplicaObserverRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[22]);
}

// ===================================================================

class StartReplicaObserverResponse::_Internal {
 public:
};

StartReplicaObserverResponse::StartReplicaObserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.StartReplicaObserverResponse)
}
StartReplicaObserverResponse::StartReplicaObserverResponse(const StartReplicaObserverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.StartReplicaObserverResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReplicaObserverResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReplicaObserverResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StartReplicaObserverResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[23]);
}

// ===================================================================

class StopReplicaRequest::_Internal {
 public:
};

StopReplicaRequest::StopReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.v1.StopReplicaRequest)
}
StopReplicaRequest::StopReplicaRequest(const StopReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:raft.v1.StopReplicaRequest)
}

inline void StopReplicaRequest::SharedCtor() {
shard_id_ = uint64_t{0u};
}

StopReplicaRequest::~StopReplicaRequest() {
  // @@protoc_insertion_point(destructor:raft.v1.StopReplicaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.v1.StopReplicaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopReplicaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1 [json_name = "shardId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopReplicaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.v1.StopReplicaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.v1.StopReplicaRequest)
  return target;
}

size_t StopReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.v1.StopReplicaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1 [json_name = "shardId"];
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopReplicaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopReplicaRequest::GetClassData() const { return &_class_data_; }

void StopReplicaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopReplicaRequest *>(to)->MergeFrom(
      static_cast<const StopReplicaRequest &>(from));
}


void StopReplicaRequest::MergeFrom(const StopReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.v1.StopReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopReplicaRequest::CopyFrom(const StopReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.v1.StopReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopReplicaRequest::IsInitialized() const {
  return true;
}

void StopReplicaRequest::InternalSwap(StopReplicaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[24]);
}

// ===================================================================

class StopReplicaResponse::_Internal {
 public:
};

StopReplicaResponse::StopReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.v1.StopReplicaResponse)
}
StopReplicaResponse::StopReplicaResponse(const StopReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.v1.StopReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_getter, &descriptor_table_raft_2fv1_2fraft_5fshard_2eproto_once,
      file_level_metadata_raft_2fv1_2fraft_5fshard_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaRequest*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaResponse*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaObserverRequest*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaObserverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaObserverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaObserverResponse*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaObserverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaObserverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaWitnessRequest*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaWitnessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaWitnessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::AddReplicaWitnessResponse*
Arena::CreateMaybeMessage< ::raft::v1::AddReplicaWitnessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::AddReplicaWitnessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RemoveReplicaRequest*
Arena::CreateMaybeMessage< ::raft::v1::RemoveReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RemoveReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RemoveReplicaResponse*
Arena::CreateMaybeMessage< ::raft::v1::RemoveReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RemoveReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetLeaderIdRequest*
Arena::CreateMaybeMessage< ::raft::v1::GetLeaderIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetLeaderIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetLeaderIdResponse*
Arena::CreateMaybeMessage< ::raft::v1::GetLeaderIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetLeaderIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersRequest*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersResponse_ReplicasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersResponse_ObserversEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersResponse_WitnessesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersResponse_RemovedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::GetShardMembersResponse*
Arena::CreateMaybeMessage< ::raft::v1::GetShardMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::GetShardMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::NewShardRequest*
Arena::CreateMaybeMessage< ::raft::v1::NewShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::NewShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::NewShardResponse*
Arena::CreateMaybeMessage< ::raft::v1::NewShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::NewShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RemoveDataRequest*
Arena::CreateMaybeMessage< ::raft::v1::RemoveDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RemoveDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::RemoveDataResponse*
Arena::CreateMaybeMessage< ::raft::v1::RemoveDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::RemoveDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StartReplicaRequest*
Arena::CreateMaybeMessage< ::raft::v1::StartReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StartReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StartReplicaResponse*
Arena::CreateMaybeMessage< ::raft::v1::StartReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StartReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StartReplicaObserverRequest*
Arena::CreateMaybeMessage< ::raft::v1::StartReplicaObserverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StartReplicaObserverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StartReplicaObserverResponse*
Arena::CreateMaybeMessage< ::raft::v1::StartReplicaObserverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StartReplicaObserverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StopReplicaRequest*
Arena::CreateMaybeMessage< ::raft::v1::StopReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StopReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::v1::StopReplicaResponse*
Arena::CreateMaybeMessage< ::raft::v1::StopReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::v1::StopReplicaResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
