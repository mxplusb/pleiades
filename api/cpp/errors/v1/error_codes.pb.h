// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors/v1/error_codes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_errors_2fv1_2ferror_5fcodes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_errors_2fv1_2ferror_5fcodes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_errors_2fv1_2ferror_5fcodes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_errors_2fv1_2ferror_5fcodes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_errors_2fv1_2ferror_5fcodes_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

namespace errors {
namespace v1 {
enum Code : int {
  CODE_UNSPECIFIED = 0,
  CODE_OK = 1,
  CODE_CANCELLED = 2,
  CODE_UNKNOWN = 3,
  CODE_INVALID_ARGUMENT = 4,
  CODE_DEADLINE_EXCEEDED = 5,
  CODE_NOT_FOUND = 6,
  CODE_ALREADY_EXISTS = 7,
  CODE_PERMISSION_DENIED = 8,
  CODE_UNAUTHENTICATED = 9,
  CODE_RESOURCE_EXHAUSTED = 10,
  CODE_FAILED_PRECONDITION = 11,
  CODE_ABORTED = 12,
  CODE_OUT_OF_RANGE = 13,
  CODE_UNIMPLEMENTED = 14,
  CODE_INTERNAL = 15,
  CODE_UNAVAILABLE = 16,
  CODE_DATA_LOSS = 17,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Code_IsValid(int value);
constexpr Code Code_MIN = static_cast<Code>(0);
constexpr Code Code_MAX = static_cast<Code>(17);
constexpr int Code_ARRAYSIZE = 17 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Code_descriptor();
template <typename T>
const std::string& Code_Name(T value) {
  static_assert(std::is_same<T, Code>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Code_Name().");
  return Code_Name(static_cast<Code>(value));
}
template <>
inline const std::string& Code_Name(Code value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Code_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool Code_Parse(absl::string_view name, Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Code>(
      Code_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace errors


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::errors::v1::Code> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::errors::v1::Code>() {
  return ::errors::v1::Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_errors_2fv1_2ferror_5fcodes_2eproto_2epb_2eh
