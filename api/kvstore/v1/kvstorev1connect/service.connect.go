// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kvstore/v1/service.proto

package kvstorev1connect

import (
	v1 "a13s.io/api/kvstore/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KvStoreServiceName is the fully-qualified name of the KvStoreService service.
	KvStoreServiceName = "kvstore.v1.KvStoreService"
	// TransactionsServiceName is the fully-qualified name of the TransactionsService service.
	TransactionsServiceName = "kvstore.v1.TransactionsService"
)

// KvStoreServiceClient is a client for the kvstore.v1.KvStoreService service.
type KvStoreServiceClient interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error)
	CreateBucket(context.Context, *connect_go.Request[v1.CreateBucketRequest]) (*connect_go.Response[v1.CreateBucketResponse], error)
	DeleteBucket(context.Context, *connect_go.Request[v1.DeleteBucketRequest]) (*connect_go.Response[v1.DeleteBucketResponse], error)
	GetKey(context.Context, *connect_go.Request[v1.GetKeyRequest]) (*connect_go.Response[v1.GetKeyResponse], error)
	PutKey(context.Context, *connect_go.Request[v1.PutKeyRequest]) (*connect_go.Response[v1.PutKeyResponse], error)
	DeleteKey(context.Context, *connect_go.Request[v1.DeleteKeyRequest]) (*connect_go.Response[v1.DeleteKeyResponse], error)
}

// NewKvStoreServiceClient constructs a client for the kvstore.v1.KvStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKvStoreServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KvStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kvStoreServiceClient{
		createAccount: connect_go.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/CreateAccount",
			opts...,
		),
		deleteAccount: connect_go.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/DeleteAccount",
			opts...,
		),
		createBucket: connect_go.NewClient[v1.CreateBucketRequest, v1.CreateBucketResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/CreateBucket",
			opts...,
		),
		deleteBucket: connect_go.NewClient[v1.DeleteBucketRequest, v1.DeleteBucketResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/DeleteBucket",
			opts...,
		),
		getKey: connect_go.NewClient[v1.GetKeyRequest, v1.GetKeyResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/GetKey",
			opts...,
		),
		putKey: connect_go.NewClient[v1.PutKeyRequest, v1.PutKeyResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/PutKey",
			opts...,
		),
		deleteKey: connect_go.NewClient[v1.DeleteKeyRequest, v1.DeleteKeyResponse](
			httpClient,
			baseURL+"/kvstore.v1.KvStoreService/DeleteKey",
			opts...,
		),
	}
}

// kvStoreServiceClient implements KvStoreServiceClient.
type kvStoreServiceClient struct {
	createAccount *connect_go.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	deleteAccount *connect_go.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	createBucket  *connect_go.Client[v1.CreateBucketRequest, v1.CreateBucketResponse]
	deleteBucket  *connect_go.Client[v1.DeleteBucketRequest, v1.DeleteBucketResponse]
	getKey        *connect_go.Client[v1.GetKeyRequest, v1.GetKeyResponse]
	putKey        *connect_go.Client[v1.PutKeyRequest, v1.PutKeyResponse]
	deleteKey     *connect_go.Client[v1.DeleteKeyRequest, v1.DeleteKeyResponse]
}

// CreateAccount calls kvstore.v1.KvStoreService.CreateAccount.
func (c *kvStoreServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// DeleteAccount calls kvstore.v1.KvStoreService.DeleteAccount.
func (c *kvStoreServiceClient) DeleteAccount(ctx context.Context, req *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// CreateBucket calls kvstore.v1.KvStoreService.CreateBucket.
func (c *kvStoreServiceClient) CreateBucket(ctx context.Context, req *connect_go.Request[v1.CreateBucketRequest]) (*connect_go.Response[v1.CreateBucketResponse], error) {
	return c.createBucket.CallUnary(ctx, req)
}

// DeleteBucket calls kvstore.v1.KvStoreService.DeleteBucket.
func (c *kvStoreServiceClient) DeleteBucket(ctx context.Context, req *connect_go.Request[v1.DeleteBucketRequest]) (*connect_go.Response[v1.DeleteBucketResponse], error) {
	return c.deleteBucket.CallUnary(ctx, req)
}

// GetKey calls kvstore.v1.KvStoreService.GetKey.
func (c *kvStoreServiceClient) GetKey(ctx context.Context, req *connect_go.Request[v1.GetKeyRequest]) (*connect_go.Response[v1.GetKeyResponse], error) {
	return c.getKey.CallUnary(ctx, req)
}

// PutKey calls kvstore.v1.KvStoreService.PutKey.
func (c *kvStoreServiceClient) PutKey(ctx context.Context, req *connect_go.Request[v1.PutKeyRequest]) (*connect_go.Response[v1.PutKeyResponse], error) {
	return c.putKey.CallUnary(ctx, req)
}

// DeleteKey calls kvstore.v1.KvStoreService.DeleteKey.
func (c *kvStoreServiceClient) DeleteKey(ctx context.Context, req *connect_go.Request[v1.DeleteKeyRequest]) (*connect_go.Response[v1.DeleteKeyResponse], error) {
	return c.deleteKey.CallUnary(ctx, req)
}

// KvStoreServiceHandler is an implementation of the kvstore.v1.KvStoreService service.
type KvStoreServiceHandler interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error)
	CreateBucket(context.Context, *connect_go.Request[v1.CreateBucketRequest]) (*connect_go.Response[v1.CreateBucketResponse], error)
	DeleteBucket(context.Context, *connect_go.Request[v1.DeleteBucketRequest]) (*connect_go.Response[v1.DeleteBucketResponse], error)
	GetKey(context.Context, *connect_go.Request[v1.GetKeyRequest]) (*connect_go.Response[v1.GetKeyResponse], error)
	PutKey(context.Context, *connect_go.Request[v1.PutKeyRequest]) (*connect_go.Response[v1.PutKeyResponse], error)
	DeleteKey(context.Context, *connect_go.Request[v1.DeleteKeyRequest]) (*connect_go.Response[v1.DeleteKeyResponse], error)
}

// NewKvStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKvStoreServiceHandler(svc KvStoreServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/kvstore.v1.KvStoreService/CreateAccount", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/CreateAccount",
		svc.CreateAccount,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/DeleteAccount", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/DeleteAccount",
		svc.DeleteAccount,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/CreateBucket", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/CreateBucket",
		svc.CreateBucket,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/DeleteBucket", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/DeleteBucket",
		svc.DeleteBucket,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/GetKey", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/GetKey",
		svc.GetKey,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/PutKey", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/PutKey",
		svc.PutKey,
		opts...,
	))
	mux.Handle("/kvstore.v1.KvStoreService/DeleteKey", connect_go.NewUnaryHandler(
		"/kvstore.v1.KvStoreService/DeleteKey",
		svc.DeleteKey,
		opts...,
	))
	return "/kvstore.v1.KvStoreService/", mux
}

// UnimplementedKvStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKvStoreServiceHandler struct{}

func (UnimplementedKvStoreServiceHandler) CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.CreateAccount is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.DeleteAccount is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) CreateBucket(context.Context, *connect_go.Request[v1.CreateBucketRequest]) (*connect_go.Response[v1.CreateBucketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.CreateBucket is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteBucket(context.Context, *connect_go.Request[v1.DeleteBucketRequest]) (*connect_go.Response[v1.DeleteBucketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.DeleteBucket is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) GetKey(context.Context, *connect_go.Request[v1.GetKeyRequest]) (*connect_go.Response[v1.GetKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.GetKey is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) PutKey(context.Context, *connect_go.Request[v1.PutKeyRequest]) (*connect_go.Response[v1.PutKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.PutKey is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteKey(context.Context, *connect_go.Request[v1.DeleteKeyRequest]) (*connect_go.Response[v1.DeleteKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.DeleteKey is not implemented"))
}

// TransactionsServiceClient is a client for the kvstore.v1.TransactionsService service.
type TransactionsServiceClient interface {
	NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error)
	CloseTransaction(context.Context, *connect_go.Request[v1.CloseTransactionRequest]) (*connect_go.Response[v1.CloseTransactionResponse], error)
	Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error)
}

// NewTransactionsServiceClient constructs a client for the kvstore.v1.TransactionsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionsServiceClient{
		newTransaction: connect_go.NewClient[v1.NewTransactionRequest, v1.NewTransactionResponse](
			httpClient,
			baseURL+"/kvstore.v1.TransactionsService/NewTransaction",
			opts...,
		),
		closeTransaction: connect_go.NewClient[v1.CloseTransactionRequest, v1.CloseTransactionResponse](
			httpClient,
			baseURL+"/kvstore.v1.TransactionsService/CloseTransaction",
			opts...,
		),
		commit: connect_go.NewClient[v1.CommitRequest, v1.CommitResponse](
			httpClient,
			baseURL+"/kvstore.v1.TransactionsService/Commit",
			opts...,
		),
	}
}

// transactionsServiceClient implements TransactionsServiceClient.
type transactionsServiceClient struct {
	newTransaction   *connect_go.Client[v1.NewTransactionRequest, v1.NewTransactionResponse]
	closeTransaction *connect_go.Client[v1.CloseTransactionRequest, v1.CloseTransactionResponse]
	commit           *connect_go.Client[v1.CommitRequest, v1.CommitResponse]
}

// NewTransaction calls kvstore.v1.TransactionsService.NewTransaction.
func (c *transactionsServiceClient) NewTransaction(ctx context.Context, req *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error) {
	return c.newTransaction.CallUnary(ctx, req)
}

// CloseTransaction calls kvstore.v1.TransactionsService.CloseTransaction.
func (c *transactionsServiceClient) CloseTransaction(ctx context.Context, req *connect_go.Request[v1.CloseTransactionRequest]) (*connect_go.Response[v1.CloseTransactionResponse], error) {
	return c.closeTransaction.CallUnary(ctx, req)
}

// Commit calls kvstore.v1.TransactionsService.Commit.
func (c *transactionsServiceClient) Commit(ctx context.Context, req *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// TransactionsServiceHandler is an implementation of the kvstore.v1.TransactionsService service.
type TransactionsServiceHandler interface {
	NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error)
	CloseTransaction(context.Context, *connect_go.Request[v1.CloseTransactionRequest]) (*connect_go.Response[v1.CloseTransactionResponse], error)
	Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error)
}

// NewTransactionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionsServiceHandler(svc TransactionsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/kvstore.v1.TransactionsService/NewTransaction", connect_go.NewUnaryHandler(
		"/kvstore.v1.TransactionsService/NewTransaction",
		svc.NewTransaction,
		opts...,
	))
	mux.Handle("/kvstore.v1.TransactionsService/CloseTransaction", connect_go.NewUnaryHandler(
		"/kvstore.v1.TransactionsService/CloseTransaction",
		svc.CloseTransaction,
		opts...,
	))
	mux.Handle("/kvstore.v1.TransactionsService/Commit", connect_go.NewUnaryHandler(
		"/kvstore.v1.TransactionsService/Commit",
		svc.Commit,
		opts...,
	))
	return "/kvstore.v1.TransactionsService/", mux
}

// UnimplementedTransactionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionsServiceHandler struct{}

func (UnimplementedTransactionsServiceHandler) NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.TransactionsService.NewTransaction is not implemented"))
}

func (UnimplementedTransactionsServiceHandler) CloseTransaction(context.Context, *connect_go.Request[v1.CloseTransactionRequest]) (*connect_go.Response[v1.CloseTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.TransactionsService.CloseTransaction is not implemented"))
}

func (UnimplementedTransactionsServiceHandler) Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvstore.v1.TransactionsService.Commit is not implemented"))
}
