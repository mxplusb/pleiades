/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: api/v1/raft/raft_shard.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace raft {
    export enum StateMachineType {
        TEST = 0,
        KV = 1
    }
    export class AddReplicaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            replicaId?: number;
            shardId?: number;
            hostname?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("hostname" in data && data.hostname != undefined) {
                    this.hostname = data.hostname;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hostname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            replicaId?: number;
            shardId?: number;
            hostname?: string;
            timeout?: number;
        }): AddReplicaRequest {
            const message = new AddReplicaRequest({});
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.hostname != null) {
                message.hostname = data.hostname;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                replicaId?: number;
                shardId?: number;
                hostname?: string;
                timeout?: number;
            } = {};
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.hostname != null) {
                data.hostname = this.hostname;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.replicaId != 0)
                writer.writeUint64(1, this.replicaId);
            if (this.shardId != 0)
                writer.writeUint64(2, this.shardId);
            if (this.hostname.length)
                writer.writeString(4, this.hostname);
            if (this.timeout != 0)
                writer.writeInt64(5, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.replicaId = reader.readUint64();
                        break;
                    case 2:
                        message.shardId = reader.readUint64();
                        break;
                    case 4:
                        message.hostname = reader.readString();
                        break;
                    case 5:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaRequest {
            return AddReplicaRequest.deserialize(bytes);
        }
    }
    export class AddReplicaReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddReplicaReply {
            const message = new AddReplicaReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaReply {
            return AddReplicaReply.deserialize(bytes);
        }
    }
    export class AddReplicaObserverRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            hostname?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("hostname" in data && data.hostname != undefined) {
                    this.hostname = data.hostname;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hostname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hostname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            hostname?: string;
            timeout?: number;
        }): AddReplicaObserverRequest {
            const message = new AddReplicaObserverRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.hostname != null) {
                message.hostname = data.hostname;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                hostname?: string;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.hostname != null) {
                data.hostname = this.hostname;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.hostname.length)
                writer.writeString(3, this.hostname);
            if (this.timeout != 0)
                writer.writeInt64(4, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaObserverRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaObserverRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.hostname = reader.readString();
                        break;
                    case 4:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaObserverRequest {
            return AddReplicaObserverRequest.deserialize(bytes);
        }
    }
    export class AddReplicaObserverReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddReplicaObserverReply {
            const message = new AddReplicaObserverReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaObserverReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaObserverReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaObserverReply {
            return AddReplicaObserverReply.deserialize(bytes);
        }
    }
    export class AddReplicaWitnessRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            hostname?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("hostname" in data && data.hostname != undefined) {
                    this.hostname = data.hostname;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hostname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hostname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            hostname?: string;
            timeout?: number;
        }): AddReplicaWitnessRequest {
            const message = new AddReplicaWitnessRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.hostname != null) {
                message.hostname = data.hostname;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                hostname?: string;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.hostname != null) {
                data.hostname = this.hostname;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.hostname.length)
                writer.writeString(3, this.hostname);
            if (this.timeout != 0)
                writer.writeInt64(4, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaWitnessRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaWitnessRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.hostname = reader.readString();
                        break;
                    case 4:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaWitnessRequest {
            return AddReplicaWitnessRequest.deserialize(bytes);
        }
    }
    export class AddReplicaWitnessReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddReplicaWitnessReply {
            const message = new AddReplicaWitnessReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReplicaWitnessReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReplicaWitnessReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddReplicaWitnessReply {
            return AddReplicaWitnessReply.deserialize(bytes);
        }
    }
    export class DeleteReplicaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            timeout?: number;
        }): DeleteReplicaRequest {
            const message = new DeleteReplicaRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.timeout != 0)
                writer.writeInt64(3, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteReplicaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteReplicaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteReplicaRequest {
            return DeleteReplicaRequest.deserialize(bytes);
        }
    }
    export class DeleteReplicaReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteReplicaReply {
            const message = new DeleteReplicaReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteReplicaReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteReplicaReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteReplicaReply {
            return DeleteReplicaReply.deserialize(bytes);
        }
    }
    export class GetLeaderIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            timeout?: number;
        }): GetLeaderIdRequest {
            const message = new GetLeaderIdRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.timeout != 0)
                writer.writeInt64(3, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLeaderIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLeaderIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLeaderIdRequest {
            return GetLeaderIdRequest.deserialize(bytes);
        }
    }
    export class GetLeaderIdReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            leader?: number;
            available?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("leader" in data && data.leader != undefined) {
                    this.leader = data.leader;
                }
                if ("available" in data && data.available != undefined) {
                    this.available = data.available;
                }
            }
        }
        get leader() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set leader(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get available() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set available(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            leader?: number;
            available?: boolean;
        }): GetLeaderIdReply {
            const message = new GetLeaderIdReply({});
            if (data.leader != null) {
                message.leader = data.leader;
            }
            if (data.available != null) {
                message.available = data.available;
            }
            return message;
        }
        toObject() {
            const data: {
                leader?: number;
                available?: boolean;
            } = {};
            if (this.leader != null) {
                data.leader = this.leader;
            }
            if (this.available != null) {
                data.available = this.available;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leader != 0)
                writer.writeUint64(1, this.leader);
            if (this.available != false)
                writer.writeBool(2, this.available);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLeaderIdReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLeaderIdReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.leader = reader.readUint64();
                        break;
                    case 2:
                        message.available = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLeaderIdReply {
            return GetLeaderIdReply.deserialize(bytes);
        }
    }
    export class GetShardMembersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            shardId?: number;
        }): GetShardMembersRequest {
            const message = new GetShardMembersRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetShardMembersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetShardMembersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetShardMembersRequest {
            return GetShardMembersRequest.deserialize(bytes);
        }
    }
    export class GetShardMembersReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            configChangeId?: number;
            replicas?: Map<number, string>;
            observers?: Map<number, string>;
            witnesses?: Map<number, string>;
            removed?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("configChangeId" in data && data.configChangeId != undefined) {
                    this.configChangeId = data.configChangeId;
                }
                if ("replicas" in data && data.replicas != undefined) {
                    this.replicas = data.replicas;
                }
                if ("observers" in data && data.observers != undefined) {
                    this.observers = data.observers;
                }
                if ("witnesses" in data && data.witnesses != undefined) {
                    this.witnesses = data.witnesses;
                }
                if ("removed" in data && data.removed != undefined) {
                    this.removed = data.removed;
                }
            }
            if (!this.replicas)
                this.replicas = new Map();
            if (!this.observers)
                this.observers = new Map();
            if (!this.witnesses)
                this.witnesses = new Map();
            if (!this.removed)
                this.removed = new Map();
        }
        get configChangeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set configChangeId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicas() {
            return pb_1.Message.getField(this, 2) as any as Map<number, string>;
        }
        set replicas(value: Map<number, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get observers() {
            return pb_1.Message.getField(this, 3) as any as Map<number, string>;
        }
        set observers(value: Map<number, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get witnesses() {
            return pb_1.Message.getField(this, 4) as any as Map<number, string>;
        }
        set witnesses(value: Map<number, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get removed() {
            return pb_1.Message.getField(this, 5) as any as Map<number, string>;
        }
        set removed(value: Map<number, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            configChangeId?: number;
            replicas?: {
                [key: number]: string;
            };
            observers?: {
                [key: number]: string;
            };
            witnesses?: {
                [key: number]: string;
            };
            removed?: {
                [key: number]: string;
            };
        }): GetShardMembersReply {
            const message = new GetShardMembersReply({});
            if (data.configChangeId != null) {
                message.configChangeId = data.configChangeId;
            }
            if (typeof data.replicas == "object") {
                message.replicas = new Map(Object.entries(data.replicas).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.observers == "object") {
                message.observers = new Map(Object.entries(data.observers).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.witnesses == "object") {
                message.witnesses = new Map(Object.entries(data.witnesses).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.removed == "object") {
                message.removed = new Map(Object.entries(data.removed).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                configChangeId?: number;
                replicas?: {
                    [key: number]: string;
                };
                observers?: {
                    [key: number]: string;
                };
                witnesses?: {
                    [key: number]: string;
                };
                removed?: {
                    [key: number]: string;
                };
            } = {};
            if (this.configChangeId != null) {
                data.configChangeId = this.configChangeId;
            }
            if (this.replicas.size > 0) {
                data.replicas = (Object.fromEntries)(this.replicas);
            }
            if (this.observers.size > 0) {
                data.observers = (Object.fromEntries)(this.observers);
            }
            if (this.witnesses.size > 0) {
                data.witnesses = (Object.fromEntries)(this.witnesses);
            }
            if (this.removed.size > 0) {
                data.removed = (Object.fromEntries)(this.removed);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.configChangeId != 0)
                writer.writeUint64(1, this.configChangeId);
            for (const [key, value] of this.replicas) {
                writer.writeMessage(2, this.replicas, () => {
                    writer.writeUint64(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.observers) {
                writer.writeMessage(3, this.observers, () => {
                    writer.writeUint64(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.witnesses) {
                writer.writeMessage(4, this.witnesses, () => {
                    writer.writeUint64(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.removed) {
                writer.writeMessage(5, this.removed, () => {
                    writer.writeUint64(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetShardMembersReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetShardMembersReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.configChangeId = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.replicas as any, reader, reader.readUint64, reader.readString));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.observers as any, reader, reader.readUint64, reader.readString));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.witnesses as any, reader, reader.readUint64, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.removed as any, reader, reader.readUint64, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetShardMembersReply {
            return GetShardMembersReply.deserialize(bytes);
        }
    }
    export class NewShardRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            type?: StateMachineType;
            hostname?: string;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("hostname" in data && data.hostname != undefined) {
                    this.hostname = data.hostname;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, StateMachineType.TEST) as StateMachineType;
        }
        set type(value: StateMachineType) {
            pb_1.Message.setField(this, 3, value);
        }
        get hostname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            type?: StateMachineType;
            hostname?: string;
            timeout?: number;
        }): NewShardRequest {
            const message = new NewShardRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.hostname != null) {
                message.hostname = data.hostname;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                type?: StateMachineType;
                hostname?: string;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.hostname != null) {
                data.hostname = this.hostname;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.type != StateMachineType.TEST)
                writer.writeEnum(3, this.type);
            if (this.hostname.length)
                writer.writeString(4, this.hostname);
            if (this.timeout != 0)
                writer.writeInt64(5, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewShardRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewShardRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.hostname = reader.readString();
                        break;
                    case 5:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewShardRequest {
            return NewShardRequest.deserialize(bytes);
        }
    }
    export class NewShardReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): NewShardReply {
            const message = new NewShardReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewShardReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewShardReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewShardReply {
            return NewShardReply.deserialize(bytes);
        }
    }
    export class RemoveDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
        }): RemoveDataRequest {
            const message = new RemoveDataRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDataRequest {
            return RemoveDataRequest.deserialize(bytes);
        }
    }
    export class RemoveDataReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RemoveDataReply {
            const message = new RemoveDataReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDataReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDataReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDataReply {
            return RemoveDataReply.deserialize(bytes);
        }
    }
    export class StartReplicaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            replicaId?: number;
            type?: StateMachineType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, StateMachineType.TEST) as StateMachineType;
        }
        set type(value: StateMachineType) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            shardId?: number;
            replicaId?: number;
            type?: StateMachineType;
        }): StartReplicaRequest {
            const message = new StartReplicaRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                replicaId?: number;
                type?: StateMachineType;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.replicaId != 0)
                writer.writeUint64(2, this.replicaId);
            if (this.type != StateMachineType.TEST)
                writer.writeEnum(3, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartReplicaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartReplicaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.replicaId = reader.readUint64();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartReplicaRequest {
            return StartReplicaRequest.deserialize(bytes);
        }
    }
    export class StartReplicaReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StartReplicaReply {
            const message = new StartReplicaReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartReplicaReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartReplicaReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartReplicaReply {
            return StartReplicaReply.deserialize(bytes);
        }
    }
    export class StopReplicaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            shardId?: number;
        }): StopReplicaRequest {
            const message = new StopReplicaRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopReplicaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopReplicaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopReplicaRequest {
            return StopReplicaRequest.deserialize(bytes);
        }
    }
    export class StopReplicaReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StopReplicaReply {
            const message = new StopReplicaReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopReplicaReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopReplicaReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopReplicaReply {
            return StopReplicaReply.deserialize(bytes);
        }
    }
}
