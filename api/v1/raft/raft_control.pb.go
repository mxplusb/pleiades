// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: api/v1/raft/raft_control.proto

package raft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StateMachineType int32

const (
	StateMachineType_TEST StateMachineType = 0
	StateMachineType_KV   StateMachineType = 1
)

// Enum value maps for StateMachineType.
var (
	StateMachineType_name = map[int32]string{
		0: "TEST",
		1: "KV",
	}
	StateMachineType_value = map[string]int32{
		"TEST": 0,
		"KV":   1,
	}
)

func (x StateMachineType) Enum() *StateMachineType {
	p := new(StateMachineType)
	*p = x
	return p
}

func (x StateMachineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateMachineType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_raft_raft_control_proto_enumTypes[0].Descriptor()
}

func (StateMachineType) Type() protoreflect.EnumType {
	return &file_api_v1_raft_raft_control_proto_enumTypes[0]
}

func (x StateMachineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateMachineType.Descriptor instead.
func (StateMachineType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{0}
}

type AddReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// stateMachine dictates the type of state machine
	Type     StateMachineType `protobuf:"varint,3,opt,name=type,proto3,enum=raft.StateMachineType" json:"type,omitempty"`
	Hostname string           `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timeout  int32            `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AddReplicaRequest) Reset() {
	*x = AddReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaRequest) ProtoMessage() {}

func (x *AddReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{0}
}

func (x *AddReplicaRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddReplicaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AddReplicaRequest) GetType() StateMachineType {
	if x != nil {
		return x.Type
	}
	return StateMachineType_TEST
}

func (x *AddReplicaRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AddReplicaRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type AddReplicaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddReplicaReply) Reset() {
	*x = AddReplicaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaReply) ProtoMessage() {}

func (x *AddReplicaReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaReply.ProtoReflect.Descriptor instead.
func (*AddReplicaReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{1}
}

type AddShardObserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// stateMachine dictates the type of state machine
	Type     StateMachineType `protobuf:"varint,3,opt,name=type,proto3,enum=raft.StateMachineType" json:"type,omitempty"`
	Hostname string           `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timeout  int32            `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AddShardObserverRequest) Reset() {
	*x = AddShardObserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardObserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardObserverRequest) ProtoMessage() {}

func (x *AddShardObserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardObserverRequest.ProtoReflect.Descriptor instead.
func (*AddShardObserverRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{2}
}

func (x *AddShardObserverRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddShardObserverRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AddShardObserverRequest) GetType() StateMachineType {
	if x != nil {
		return x.Type
	}
	return StateMachineType_TEST
}

func (x *AddShardObserverRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AddShardObserverRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type AddShardObserverReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShardObserverReply) Reset() {
	*x = AddShardObserverReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardObserverReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardObserverReply) ProtoMessage() {}

func (x *AddShardObserverReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardObserverReply.ProtoReflect.Descriptor instead.
func (*AddShardObserverReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{3}
}

type AddShardWitnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// stateMachine dictates the type of state machine
	Type     StateMachineType `protobuf:"varint,3,opt,name=type,proto3,enum=raft.StateMachineType" json:"type,omitempty"`
	Hostname string           `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timeout  int32            `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AddShardWitnessRequest) Reset() {
	*x = AddShardWitnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardWitnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardWitnessRequest) ProtoMessage() {}

func (x *AddShardWitnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardWitnessRequest.ProtoReflect.Descriptor instead.
func (*AddShardWitnessRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{4}
}

func (x *AddShardWitnessRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddShardWitnessRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AddShardWitnessRequest) GetType() StateMachineType {
	if x != nil {
		return x.Type
	}
	return StateMachineType_TEST
}

func (x *AddShardWitnessRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AddShardWitnessRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type AddShardWitnessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShardWitnessReply) Reset() {
	*x = AddShardWitnessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardWitnessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardWitnessReply) ProtoMessage() {}

func (x *AddShardWitnessReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardWitnessReply.ProtoReflect.Descriptor instead.
func (*AddShardWitnessReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{5}
}

type DeleteReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *DeleteReplicaRequest) Reset() {
	*x = DeleteReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicaRequest) ProtoMessage() {}

func (x *DeleteReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicaRequest.ProtoReflect.Descriptor instead.
func (*DeleteReplicaRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteReplicaRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *DeleteReplicaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type DeleteReplicaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteReplicaReply) Reset() {
	*x = DeleteReplicaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicaReply) ProtoMessage() {}

func (x *DeleteReplicaReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicaReply.ProtoReflect.Descriptor instead.
func (*DeleteReplicaReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{7}
}

type GetLeaderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId uint64 `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *GetLeaderIdRequest) Reset() {
	*x = GetLeaderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderIdRequest) ProtoMessage() {}

func (x *GetLeaderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderIdRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{8}
}

func (x *GetLeaderIdRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type GetLeaderIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLeaderIdReply) Reset() {
	*x = GetLeaderIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderIdReply) ProtoMessage() {}

func (x *GetLeaderIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderIdReply.ProtoReflect.Descriptor instead.
func (*GetLeaderIdReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{9}
}

type GetShardMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId uint64 `protobuf:"varint,1,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *GetShardMembersRequest) Reset() {
	*x = GetShardMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardMembersRequest) ProtoMessage() {}

func (x *GetShardMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardMembersRequest.ProtoReflect.Descriptor instead.
func (*GetShardMembersRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{10}
}

func (x *GetShardMembersRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type GetShardMembersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetShardMembersReply) Reset() {
	*x = GetShardMembersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardMembersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardMembersReply) ProtoMessage() {}

func (x *GetShardMembersReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardMembersReply.ProtoReflect.Descriptor instead.
func (*GetShardMembersReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{11}
}

type NewShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	// stateMachine dictates the type of state machine
	Type     StateMachineType `protobuf:"varint,3,opt,name=type,proto3,enum=raft.StateMachineType" json:"type,omitempty"`
	Hostname string           `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timeout  int32            `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *NewShardRequest) Reset() {
	*x = NewShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShardRequest) ProtoMessage() {}

func (x *NewShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShardRequest.ProtoReflect.Descriptor instead.
func (*NewShardRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{12}
}

func (x *NewShardRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *NewShardRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *NewShardRequest) GetType() StateMachineType {
	if x != nil {
		return x.Type
	}
	return StateMachineType_TEST
}

func (x *NewShardRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NewShardRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type NewShardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewShardReply) Reset() {
	*x = NewShardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShardReply) ProtoMessage() {}

func (x *NewShardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShardReply.ProtoReflect.Descriptor instead.
func (*NewShardReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{13}
}

type RemoveDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *RemoveDataRequest) Reset() {
	*x = RemoveDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDataRequest) ProtoMessage() {}

func (x *RemoveDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDataRequest.ProtoReflect.Descriptor instead.
func (*RemoveDataRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveDataRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RemoveDataRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type RemoveDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDataReply) Reset() {
	*x = RemoveDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDataReply) ProtoMessage() {}

func (x *RemoveDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDataReply.ProtoReflect.Descriptor instead.
func (*RemoveDataReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{15}
}

type StopReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// replicaId is a non-zero value used to identify a node within a Raft cluster.
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// shardId is the unique value used to identify a Raft cluster.
	ShardId uint64 `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
}

func (x *StopReplicaRequest) Reset() {
	*x = StopReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicaRequest) ProtoMessage() {}

func (x *StopReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicaRequest.ProtoReflect.Descriptor instead.
func (*StopReplicaRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{16}
}

func (x *StopReplicaRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *StopReplicaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type StopReplicaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopReplicaReply) Reset() {
	*x = StopReplicaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_raft_raft_control_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicaReply) ProtoMessage() {}

func (x *StopReplicaReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_raft_raft_control_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicaReply.ProtoReflect.Descriptor instead.
func (*StopReplicaReply) Descriptor() ([]byte, []int) {
	return file_api_v1_raft_raft_control_proto_rawDescGZIP(), []int{17}
}

var File_api_v1_raft_raft_control_proto protoreflect.FileDescriptor

var file_api_v1_raft_raft_control_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x72, 0x61, 0x66, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x17, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x16, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x32, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x0f,
	0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x4e, 0x65, 0x77,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4b, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x24, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x56,
	0x10, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x61, 0x31, 0x33, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6c,
	0x65, 0x69, 0x61, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61,
	0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_raft_raft_control_proto_rawDescOnce sync.Once
	file_api_v1_raft_raft_control_proto_rawDescData = file_api_v1_raft_raft_control_proto_rawDesc
)

func file_api_v1_raft_raft_control_proto_rawDescGZIP() []byte {
	file_api_v1_raft_raft_control_proto_rawDescOnce.Do(func() {
		file_api_v1_raft_raft_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_raft_raft_control_proto_rawDescData)
	})
	return file_api_v1_raft_raft_control_proto_rawDescData
}

var file_api_v1_raft_raft_control_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_raft_raft_control_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_v1_raft_raft_control_proto_goTypes = []interface{}{
	(StateMachineType)(0),           // 0: raft.StateMachineType
	(*AddReplicaRequest)(nil),       // 1: raft.AddReplicaRequest
	(*AddReplicaReply)(nil),         // 2: raft.AddReplicaReply
	(*AddShardObserverRequest)(nil), // 3: raft.AddShardObserverRequest
	(*AddShardObserverReply)(nil),   // 4: raft.AddShardObserverReply
	(*AddShardWitnessRequest)(nil),  // 5: raft.AddShardWitnessRequest
	(*AddShardWitnessReply)(nil),    // 6: raft.AddShardWitnessReply
	(*DeleteReplicaRequest)(nil),    // 7: raft.DeleteReplicaRequest
	(*DeleteReplicaReply)(nil),      // 8: raft.DeleteReplicaReply
	(*GetLeaderIdRequest)(nil),      // 9: raft.GetLeaderIdRequest
	(*GetLeaderIdReply)(nil),        // 10: raft.GetLeaderIdReply
	(*GetShardMembersRequest)(nil),  // 11: raft.GetShardMembersRequest
	(*GetShardMembersReply)(nil),    // 12: raft.GetShardMembersReply
	(*NewShardRequest)(nil),         // 13: raft.NewShardRequest
	(*NewShardReply)(nil),           // 14: raft.NewShardReply
	(*RemoveDataRequest)(nil),       // 15: raft.RemoveDataRequest
	(*RemoveDataReply)(nil),         // 16: raft.RemoveDataReply
	(*StopReplicaRequest)(nil),      // 17: raft.StopReplicaRequest
	(*StopReplicaReply)(nil),        // 18: raft.StopReplicaReply
}
var file_api_v1_raft_raft_control_proto_depIdxs = []int32{
	0, // 0: raft.AddReplicaRequest.type:type_name -> raft.StateMachineType
	0, // 1: raft.AddShardObserverRequest.type:type_name -> raft.StateMachineType
	0, // 2: raft.AddShardWitnessRequest.type:type_name -> raft.StateMachineType
	0, // 3: raft.NewShardRequest.type:type_name -> raft.StateMachineType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_v1_raft_raft_control_proto_init() }
func file_api_v1_raft_raft_control_proto_init() {
	if File_api_v1_raft_raft_control_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_raft_raft_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardObserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardObserverReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardWitnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardWitnessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardMembersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_raft_raft_control_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_raft_raft_control_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_raft_raft_control_proto_goTypes,
		DependencyIndexes: file_api_v1_raft_raft_control_proto_depIdxs,
		EnumInfos:         file_api_v1_raft_raft_control_proto_enumTypes,
		MessageInfos:      file_api_v1_raft_raft_control_proto_msgTypes,
	}.Build()
	File_api_v1_raft_raft_control_proto = out.File
	file_api_v1_raft_raft_control_proto_rawDesc = nil
	file_api_v1_raft_raft_control_proto_goTypes = nil
	file_api_v1_raft_raft_control_proto_depIdxs = nil
}
