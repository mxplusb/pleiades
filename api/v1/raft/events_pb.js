// source: api/v1/raft/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.raft.Event', null, global);
goog.exportSymbol('proto.raft.EventType', null, global);
goog.exportSymbol('proto.raft.RaftConnectionEvent', null, global);
goog.exportSymbol('proto.raft.RaftEvent', null, global);
goog.exportSymbol('proto.raft.RaftEvent.EventCase', null, global);
goog.exportSymbol('proto.raft.RaftHostShutdown', null, global);
goog.exportSymbol('proto.raft.RaftLogEntryEvent', null, global);
goog.exportSymbol('proto.raft.RaftNodeEvent', null, global);
goog.exportSymbol('proto.raft.RaftSnapshotEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.raft.RaftEvent.oneofGroups_);
};
goog.inherits(proto.raft.RaftEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftEvent.displayName = 'proto.raft.RaftEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftLogEntryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.raft.RaftLogEntryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftLogEntryEvent.displayName = 'proto.raft.RaftLogEntryEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftSnapshotEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.raft.RaftSnapshotEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftSnapshotEvent.displayName = 'proto.raft.RaftSnapshotEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftConnectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.raft.RaftConnectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftConnectionEvent.displayName = 'proto.raft.RaftConnectionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftNodeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.raft.RaftNodeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftNodeEvent.displayName = 'proto.raft.RaftNodeEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.raft.RaftHostShutdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.raft.RaftHostShutdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.raft.RaftHostShutdown.displayName = 'proto.raft.RaftHostShutdown';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.raft.RaftEvent.oneofGroups_ = [[4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.raft.RaftEvent.EventCase = {
  EVENT_NOT_SET: 0,
  LOG_ENTRY: 4,
  SNAPSHOT: 5,
  CONNECTION: 6,
  NODE: 7,
  HOST_SHUTDOWN: 8
};

/**
 * @return {proto.raft.RaftEvent.EventCase}
 */
proto.raft.RaftEvent.prototype.getEventCase = function() {
  return /** @type {proto.raft.RaftEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.raft.RaftEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    typ: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    logEntry: (f = msg.getLogEntry()) && proto.raft.RaftLogEntryEvent.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.raft.RaftSnapshotEvent.toObject(includeInstance, f),
    connection: (f = msg.getConnection()) && proto.raft.RaftConnectionEvent.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.raft.RaftNodeEvent.toObject(includeInstance, f),
    hostShutdown: (f = msg.getHostShutdown()) && proto.raft.RaftHostShutdown.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftEvent}
 */
proto.raft.RaftEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftEvent;
  return proto.raft.RaftEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftEvent}
 */
proto.raft.RaftEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.raft.EventType} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    case 2:
      var value = /** @type {!proto.raft.Event} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.raft.RaftLogEntryEvent;
      reader.readMessage(value,proto.raft.RaftLogEntryEvent.deserializeBinaryFromReader);
      msg.setLogEntry(value);
      break;
    case 5:
      var value = new proto.raft.RaftSnapshotEvent;
      reader.readMessage(value,proto.raft.RaftSnapshotEvent.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 6:
      var value = new proto.raft.RaftConnectionEvent;
      reader.readMessage(value,proto.raft.RaftConnectionEvent.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 7:
      var value = new proto.raft.RaftNodeEvent;
      reader.readMessage(value,proto.raft.RaftNodeEvent.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 8:
      var value = new proto.raft.RaftHostShutdown;
      reader.readMessage(value,proto.raft.RaftHostShutdown.deserializeBinaryFromReader);
      msg.setHostShutdown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTyp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLogEntry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.raft.RaftLogEntryEvent.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.raft.RaftSnapshotEvent.serializeBinaryToWriter
    );
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.raft.RaftConnectionEvent.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.raft.RaftNodeEvent.serializeBinaryToWriter
    );
  }
  f = message.getHostShutdown();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.raft.RaftHostShutdown.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventType typ = 1;
 * @return {!proto.raft.EventType}
 */
proto.raft.RaftEvent.prototype.getTyp = function() {
  return /** @type {!proto.raft.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.raft.EventType} value
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.setTyp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Event action = 2;
 * @return {!proto.raft.Event}
 */
proto.raft.RaftEvent.prototype.getAction = function() {
  return /** @type {!proto.raft.Event} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.raft.Event} value
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.raft.RaftEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RaftLogEntryEvent log_entry = 4;
 * @return {?proto.raft.RaftLogEntryEvent}
 */
proto.raft.RaftEvent.prototype.getLogEntry = function() {
  return /** @type{?proto.raft.RaftLogEntryEvent} */ (
    jspb.Message.getWrapperField(this, proto.raft.RaftLogEntryEvent, 4));
};


/**
 * @param {?proto.raft.RaftLogEntryEvent|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setLogEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.raft.RaftEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearLogEntry = function() {
  return this.setLogEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasLogEntry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RaftSnapshotEvent snapshot = 5;
 * @return {?proto.raft.RaftSnapshotEvent}
 */
proto.raft.RaftEvent.prototype.getSnapshot = function() {
  return /** @type{?proto.raft.RaftSnapshotEvent} */ (
    jspb.Message.getWrapperField(this, proto.raft.RaftSnapshotEvent, 5));
};


/**
 * @param {?proto.raft.RaftSnapshotEvent|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.raft.RaftEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RaftConnectionEvent connection = 6;
 * @return {?proto.raft.RaftConnectionEvent}
 */
proto.raft.RaftEvent.prototype.getConnection = function() {
  return /** @type{?proto.raft.RaftConnectionEvent} */ (
    jspb.Message.getWrapperField(this, proto.raft.RaftConnectionEvent, 6));
};


/**
 * @param {?proto.raft.RaftConnectionEvent|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.raft.RaftEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RaftNodeEvent node = 7;
 * @return {?proto.raft.RaftNodeEvent}
 */
proto.raft.RaftEvent.prototype.getNode = function() {
  return /** @type{?proto.raft.RaftNodeEvent} */ (
    jspb.Message.getWrapperField(this, proto.raft.RaftNodeEvent, 7));
};


/**
 * @param {?proto.raft.RaftNodeEvent|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.raft.RaftEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasNode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RaftHostShutdown host_shutdown = 8;
 * @return {?proto.raft.RaftHostShutdown}
 */
proto.raft.RaftEvent.prototype.getHostShutdown = function() {
  return /** @type{?proto.raft.RaftHostShutdown} */ (
    jspb.Message.getWrapperField(this, proto.raft.RaftHostShutdown, 8));
};


/**
 * @param {?proto.raft.RaftHostShutdown|undefined} value
 * @return {!proto.raft.RaftEvent} returns this
*/
proto.raft.RaftEvent.prototype.setHostShutdown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.raft.RaftEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.raft.RaftEvent} returns this
 */
proto.raft.RaftEvent.prototype.clearHostShutdown = function() {
  return this.setHostShutdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.raft.RaftEvent.prototype.hasHostShutdown = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftLogEntryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftLogEntryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftLogEntryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftLogEntryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replicaId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftLogEntryEvent}
 */
proto.raft.RaftLogEntryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftLogEntryEvent;
  return proto.raft.RaftLogEntryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftLogEntryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftLogEntryEvent}
 */
proto.raft.RaftLogEntryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShardId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplicaId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftLogEntryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftLogEntryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftLogEntryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftLogEntryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getReplicaId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 shard_id = 1;
 * @return {number}
 */
proto.raft.RaftLogEntryEvent.prototype.getShardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftLogEntryEvent} returns this
 */
proto.raft.RaftLogEntryEvent.prototype.setShardId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 replica_id = 2;
 * @return {number}
 */
proto.raft.RaftLogEntryEvent.prototype.getReplicaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftLogEntryEvent} returns this
 */
proto.raft.RaftLogEntryEvent.prototype.setReplicaId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.raft.RaftLogEntryEvent.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftLogEntryEvent} returns this
 */
proto.raft.RaftLogEntryEvent.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftSnapshotEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftSnapshotEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftSnapshotEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftSnapshotEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replicaId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    toIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftSnapshotEvent}
 */
proto.raft.RaftSnapshotEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftSnapshotEvent;
  return proto.raft.RaftSnapshotEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftSnapshotEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftSnapshotEvent}
 */
proto.raft.RaftSnapshotEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShardId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplicaId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftSnapshotEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftSnapshotEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftSnapshotEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftSnapshotEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getReplicaId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFromIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getToIndex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 shard_id = 1;
 * @return {number}
 */
proto.raft.RaftSnapshotEvent.prototype.getShardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftSnapshotEvent} returns this
 */
proto.raft.RaftSnapshotEvent.prototype.setShardId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 replica_id = 2;
 * @return {number}
 */
proto.raft.RaftSnapshotEvent.prototype.getReplicaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftSnapshotEvent} returns this
 */
proto.raft.RaftSnapshotEvent.prototype.setReplicaId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 from_index = 3;
 * @return {number}
 */
proto.raft.RaftSnapshotEvent.prototype.getFromIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftSnapshotEvent} returns this
 */
proto.raft.RaftSnapshotEvent.prototype.setFromIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 to_index = 4;
 * @return {number}
 */
proto.raft.RaftSnapshotEvent.prototype.getToIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftSnapshotEvent} returns this
 */
proto.raft.RaftSnapshotEvent.prototype.setToIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftConnectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftConnectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftConnectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftConnectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isSnapshot: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftConnectionEvent}
 */
proto.raft.RaftConnectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftConnectionEvent;
  return proto.raft.RaftConnectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftConnectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftConnectionEvent}
 */
proto.raft.RaftConnectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftConnectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftConnectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftConnectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftConnectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsSnapshot();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.raft.RaftConnectionEvent.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.raft.RaftConnectionEvent} returns this
 */
proto.raft.RaftConnectionEvent.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_snapshot = 2;
 * @return {boolean}
 */
proto.raft.RaftConnectionEvent.prototype.getIsSnapshot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.raft.RaftConnectionEvent} returns this
 */
proto.raft.RaftConnectionEvent.prototype.setIsSnapshot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftNodeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftNodeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftNodeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftNodeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replicaId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftNodeEvent}
 */
proto.raft.RaftNodeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftNodeEvent;
  return proto.raft.RaftNodeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftNodeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftNodeEvent}
 */
proto.raft.RaftNodeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShardId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplicaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftNodeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftNodeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftNodeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftNodeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getReplicaId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 shard_id = 1;
 * @return {number}
 */
proto.raft.RaftNodeEvent.prototype.getShardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftNodeEvent} returns this
 */
proto.raft.RaftNodeEvent.prototype.setShardId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 replica_id = 2;
 * @return {number}
 */
proto.raft.RaftNodeEvent.prototype.getReplicaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.raft.RaftNodeEvent} returns this
 */
proto.raft.RaftNodeEvent.prototype.setReplicaId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.raft.RaftHostShutdown.prototype.toObject = function(opt_includeInstance) {
  return proto.raft.RaftHostShutdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.raft.RaftHostShutdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftHostShutdown.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.raft.RaftHostShutdown}
 */
proto.raft.RaftHostShutdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.raft.RaftHostShutdown;
  return proto.raft.RaftHostShutdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.raft.RaftHostShutdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.raft.RaftHostShutdown}
 */
proto.raft.RaftHostShutdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.raft.RaftHostShutdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.raft.RaftHostShutdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.raft.RaftHostShutdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.raft.RaftHostShutdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.raft.EventType = {
  LOG_ENTRY: 0,
  SNAPSHOT: 1,
  CONNECTION: 2,
  HOST: 3,
  NODE: 4
};

/**
 * @enum {number}
 */
proto.raft.Event = {
  CONNECTION_ESTABLISHED: 0,
  CONNECTION_FAILED: 1,
  LOG_COMPACTED: 2,
  LOGDB_COMPACTED: 3,
  MEMBERSHIP_CHANGED: 4,
  NODE_HOST_SHUTTING_DOWN: 5,
  NODE_READY: 6,
  NODE_UNLOADED: 7,
  SEND_SNAPSHOT_ABORTED: 8,
  SEND_SNAPSHOT_COMPLETED: 9,
  SEND_SNAPSHOT_STARTED: 10,
  SNAPSHOT_COMPACTED: 11,
  SNAPSHOT_CREATED: 12,
  SNAPSHOT_RECEIVED: 13,
  SNAPSHOT_RECOVERED: 14
};

goog.object.extend(exports, proto.raft);
