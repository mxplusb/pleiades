/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: api/v1/raft/raft_host.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace raft {
    export class CompactRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            replicaId?: number;
            shardId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("replicaId" in data && data.replicaId != undefined) {
                    this.replicaId = data.replicaId;
                }
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
            }
        }
        get replicaId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set replicaId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            replicaId?: number;
            shardId?: number;
        }): CompactRequest {
            const message = new CompactRequest({});
            if (data.replicaId != null) {
                message.replicaId = data.replicaId;
            }
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            return message;
        }
        toObject() {
            const data: {
                replicaId?: number;
                shardId?: number;
            } = {};
            if (this.replicaId != null) {
                data.replicaId = this.replicaId;
            }
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.replicaId != 0)
                writer.writeUint64(1, this.replicaId);
            if (this.shardId != 0)
                writer.writeUint64(2, this.shardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.replicaId = reader.readUint64();
                        break;
                    case 2:
                        message.shardId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompactRequest {
            return CompactRequest.deserialize(bytes);
        }
    }
    export class CompactReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CompactReply {
            const message = new CompactReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompactReply {
            return CompactReply.deserialize(bytes);
        }
    }
    export class LeaderTransferRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            targetNodeId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("targetNodeId" in data && data.targetNodeId != undefined) {
                    this.targetNodeId = data.targetNodeId;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get targetNodeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set targetNodeId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            shardId?: number;
            targetNodeId?: string;
        }): LeaderTransferRequest {
            const message = new LeaderTransferRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.targetNodeId != null) {
                message.targetNodeId = data.targetNodeId;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                targetNodeId?: string;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.targetNodeId != null) {
                data.targetNodeId = this.targetNodeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.targetNodeId.length)
                writer.writeString(2, this.targetNodeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderTransferRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderTransferRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.targetNodeId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderTransferRequest {
            return LeaderTransferRequest.deserialize(bytes);
        }
    }
    export class LeaderTransferReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): LeaderTransferReply {
            const message = new LeaderTransferReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderTransferReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderTransferReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderTransferReply {
            return LeaderTransferReply.deserialize(bytes);
        }
    }
    export class SnapshotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shardId?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shardId" in data && data.shardId != undefined) {
                    this.shardId = data.shardId;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get shardId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shardId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            shardId?: number;
            timeout?: number;
        }): SnapshotRequest {
            const message = new SnapshotRequest({});
            if (data.shardId != null) {
                message.shardId = data.shardId;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                shardId?: number;
                timeout?: number;
            } = {};
            if (this.shardId != null) {
                data.shardId = this.shardId;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shardId != 0)
                writer.writeUint64(1, this.shardId);
            if (this.timeout != 0)
                writer.writeInt64(2, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shardId = reader.readUint64();
                        break;
                    case 2:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SnapshotRequest {
            return SnapshotRequest.deserialize(bytes);
        }
    }
    export class SnapshotReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            snapshotIndexCaptured?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("snapshotIndexCaptured" in data && data.snapshotIndexCaptured != undefined) {
                    this.snapshotIndexCaptured = data.snapshotIndexCaptured;
                }
            }
        }
        get snapshotIndexCaptured() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set snapshotIndexCaptured(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            snapshotIndexCaptured?: number;
        }): SnapshotReply {
            const message = new SnapshotReply({});
            if (data.snapshotIndexCaptured != null) {
                message.snapshotIndexCaptured = data.snapshotIndexCaptured;
            }
            return message;
        }
        toObject() {
            const data: {
                snapshotIndexCaptured?: number;
            } = {};
            if (this.snapshotIndexCaptured != null) {
                data.snapshotIndexCaptured = this.snapshotIndexCaptured;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.snapshotIndexCaptured != 0)
                writer.writeUint64(1, this.snapshotIndexCaptured);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.snapshotIndexCaptured = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SnapshotReply {
            return SnapshotReply.deserialize(bytes);
        }
    }
    export class StopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StopRequest {
            const message = new StopRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopRequest {
            return StopRequest.deserialize(bytes);
        }
    }
    export class StopReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StopReply {
            const message = new StopReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopReply {
            return StopReply.deserialize(bytes);
        }
    }
    export class GetHostConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHostConfigRequest {
            const message = new GetHostConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHostConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHostConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHostConfigRequest {
            return GetHostConfigRequest.deserialize(bytes);
        }
    }
    export class GetHostConfigReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Config?: HostConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Config" in data && data.Config != undefined) {
                    this.Config = data.Config;
                }
            }
        }
        get Config() {
            return pb_1.Message.getWrapperField(this, HostConfig, 1) as HostConfig;
        }
        set Config(value: HostConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            Config?: ReturnType<typeof HostConfig.prototype.toObject>;
        }): GetHostConfigReply {
            const message = new GetHostConfigReply({});
            if (data.Config != null) {
                message.Config = HostConfig.fromObject(data.Config);
            }
            return message;
        }
        toObject() {
            const data: {
                Config?: ReturnType<typeof HostConfig.prototype.toObject>;
            } = {};
            if (this.Config != null) {
                data.Config = this.Config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Config)
                writer.writeMessage(1, this.Config, () => this.Config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHostConfigReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHostConfigReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Config, () => message.Config = HostConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHostConfigReply {
            return GetHostConfigReply.deserialize(bytes);
        }
    }
    export class GetClusterMembershipRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            clusterId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("clusterId" in data && data.clusterId != undefined) {
                    this.clusterId = data.clusterId;
                }
            }
        }
        get clusterId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set clusterId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            clusterId?: number;
        }): GetClusterMembershipRequest {
            const message = new GetClusterMembershipRequest({});
            if (data.clusterId != null) {
                message.clusterId = data.clusterId;
            }
            return message;
        }
        toObject() {
            const data: {
                clusterId?: number;
            } = {};
            if (this.clusterId != null) {
                data.clusterId = this.clusterId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.clusterId != 0)
                writer.writeUint64(1, this.clusterId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetClusterMembershipRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetClusterMembershipRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.clusterId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetClusterMembershipRequest {
            return GetClusterMembershipRequest.deserialize(bytes);
        }
    }
    export class HostConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            deploymentId?: number;
            walDir?: string;
            hostDir?: string;
            roundTripTimeInMilliseconds?: number;
            raftAddress?: string;
            addressByHostID?: boolean;
            listenAddress?: string;
            mutualTls?: boolean;
            caFile?: string;
            certFile?: string;
            keyFile?: string;
            enableMetrics?: boolean;
            notifyCommit?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deploymentId" in data && data.deploymentId != undefined) {
                    this.deploymentId = data.deploymentId;
                }
                if ("walDir" in data && data.walDir != undefined) {
                    this.walDir = data.walDir;
                }
                if ("hostDir" in data && data.hostDir != undefined) {
                    this.hostDir = data.hostDir;
                }
                if ("roundTripTimeInMilliseconds" in data && data.roundTripTimeInMilliseconds != undefined) {
                    this.roundTripTimeInMilliseconds = data.roundTripTimeInMilliseconds;
                }
                if ("raftAddress" in data && data.raftAddress != undefined) {
                    this.raftAddress = data.raftAddress;
                }
                if ("addressByHostID" in data && data.addressByHostID != undefined) {
                    this.addressByHostID = data.addressByHostID;
                }
                if ("listenAddress" in data && data.listenAddress != undefined) {
                    this.listenAddress = data.listenAddress;
                }
                if ("mutualTls" in data && data.mutualTls != undefined) {
                    this.mutualTls = data.mutualTls;
                }
                if ("caFile" in data && data.caFile != undefined) {
                    this.caFile = data.caFile;
                }
                if ("certFile" in data && data.certFile != undefined) {
                    this.certFile = data.certFile;
                }
                if ("keyFile" in data && data.keyFile != undefined) {
                    this.keyFile = data.keyFile;
                }
                if ("enableMetrics" in data && data.enableMetrics != undefined) {
                    this.enableMetrics = data.enableMetrics;
                }
                if ("notifyCommit" in data && data.notifyCommit != undefined) {
                    this.notifyCommit = data.notifyCommit;
                }
            }
        }
        get deploymentId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set deploymentId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get walDir() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set walDir(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hostDir() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hostDir(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get roundTripTimeInMilliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set roundTripTimeInMilliseconds(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get raftAddress() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set raftAddress(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get addressByHostID() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set addressByHostID(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get listenAddress() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set listenAddress(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get mutualTls() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set mutualTls(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get caFile() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set caFile(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get certFile() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set certFile(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get keyFile() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set keyFile(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get enableMetrics() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set enableMetrics(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get notifyCommit() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set notifyCommit(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            deploymentId?: number;
            walDir?: string;
            hostDir?: string;
            roundTripTimeInMilliseconds?: number;
            raftAddress?: string;
            addressByHostID?: boolean;
            listenAddress?: string;
            mutualTls?: boolean;
            caFile?: string;
            certFile?: string;
            keyFile?: string;
            enableMetrics?: boolean;
            notifyCommit?: boolean;
        }): HostConfig {
            const message = new HostConfig({});
            if (data.deploymentId != null) {
                message.deploymentId = data.deploymentId;
            }
            if (data.walDir != null) {
                message.walDir = data.walDir;
            }
            if (data.hostDir != null) {
                message.hostDir = data.hostDir;
            }
            if (data.roundTripTimeInMilliseconds != null) {
                message.roundTripTimeInMilliseconds = data.roundTripTimeInMilliseconds;
            }
            if (data.raftAddress != null) {
                message.raftAddress = data.raftAddress;
            }
            if (data.addressByHostID != null) {
                message.addressByHostID = data.addressByHostID;
            }
            if (data.listenAddress != null) {
                message.listenAddress = data.listenAddress;
            }
            if (data.mutualTls != null) {
                message.mutualTls = data.mutualTls;
            }
            if (data.caFile != null) {
                message.caFile = data.caFile;
            }
            if (data.certFile != null) {
                message.certFile = data.certFile;
            }
            if (data.keyFile != null) {
                message.keyFile = data.keyFile;
            }
            if (data.enableMetrics != null) {
                message.enableMetrics = data.enableMetrics;
            }
            if (data.notifyCommit != null) {
                message.notifyCommit = data.notifyCommit;
            }
            return message;
        }
        toObject() {
            const data: {
                deploymentId?: number;
                walDir?: string;
                hostDir?: string;
                roundTripTimeInMilliseconds?: number;
                raftAddress?: string;
                addressByHostID?: boolean;
                listenAddress?: string;
                mutualTls?: boolean;
                caFile?: string;
                certFile?: string;
                keyFile?: string;
                enableMetrics?: boolean;
                notifyCommit?: boolean;
            } = {};
            if (this.deploymentId != null) {
                data.deploymentId = this.deploymentId;
            }
            if (this.walDir != null) {
                data.walDir = this.walDir;
            }
            if (this.hostDir != null) {
                data.hostDir = this.hostDir;
            }
            if (this.roundTripTimeInMilliseconds != null) {
                data.roundTripTimeInMilliseconds = this.roundTripTimeInMilliseconds;
            }
            if (this.raftAddress != null) {
                data.raftAddress = this.raftAddress;
            }
            if (this.addressByHostID != null) {
                data.addressByHostID = this.addressByHostID;
            }
            if (this.listenAddress != null) {
                data.listenAddress = this.listenAddress;
            }
            if (this.mutualTls != null) {
                data.mutualTls = this.mutualTls;
            }
            if (this.caFile != null) {
                data.caFile = this.caFile;
            }
            if (this.certFile != null) {
                data.certFile = this.certFile;
            }
            if (this.keyFile != null) {
                data.keyFile = this.keyFile;
            }
            if (this.enableMetrics != null) {
                data.enableMetrics = this.enableMetrics;
            }
            if (this.notifyCommit != null) {
                data.notifyCommit = this.notifyCommit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deploymentId != 0)
                writer.writeUint64(1, this.deploymentId);
            if (this.walDir.length)
                writer.writeString(2, this.walDir);
            if (this.hostDir.length)
                writer.writeString(3, this.hostDir);
            if (this.roundTripTimeInMilliseconds != 0)
                writer.writeUint64(4, this.roundTripTimeInMilliseconds);
            if (this.raftAddress.length)
                writer.writeString(5, this.raftAddress);
            if (this.addressByHostID != false)
                writer.writeBool(6, this.addressByHostID);
            if (this.listenAddress.length)
                writer.writeString(7, this.listenAddress);
            if (this.mutualTls != false)
                writer.writeBool(8, this.mutualTls);
            if (this.caFile.length)
                writer.writeString(9, this.caFile);
            if (this.certFile.length)
                writer.writeString(10, this.certFile);
            if (this.keyFile.length)
                writer.writeString(11, this.keyFile);
            if (this.enableMetrics != false)
                writer.writeBool(12, this.enableMetrics);
            if (this.notifyCommit != false)
                writer.writeBool(13, this.notifyCommit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HostConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HostConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.deploymentId = reader.readUint64();
                        break;
                    case 2:
                        message.walDir = reader.readString();
                        break;
                    case 3:
                        message.hostDir = reader.readString();
                        break;
                    case 4:
                        message.roundTripTimeInMilliseconds = reader.readUint64();
                        break;
                    case 5:
                        message.raftAddress = reader.readString();
                        break;
                    case 6:
                        message.addressByHostID = reader.readBool();
                        break;
                    case 7:
                        message.listenAddress = reader.readString();
                        break;
                    case 8:
                        message.mutualTls = reader.readBool();
                        break;
                    case 9:
                        message.caFile = reader.readString();
                        break;
                    case 10:
                        message.certFile = reader.readString();
                        break;
                    case 11:
                        message.keyFile = reader.readString();
                        break;
                    case 12:
                        message.enableMetrics = reader.readBool();
                        break;
                    case 13:
                        message.notifyCommit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HostConfig {
            return HostConfig.deserialize(bytes);
        }
    }
}
