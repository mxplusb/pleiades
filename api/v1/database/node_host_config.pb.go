// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/v1/database/node_host_config.proto

package database

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HasNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID uint64 `protobuf:"varint,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	NodeID    uint64 `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *HasNodeInfoRequest) Reset() {
	*x = HasNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasNodeInfoRequest) ProtoMessage() {}

func (x *HasNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*HasNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{0}
}

func (x *HasNodeInfoRequest) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *HasNodeInfoRequest) GetNodeID() uint64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

type HasNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNodeInfo bool `protobuf:"varint,1,opt,name=hasNodeInfo,proto3" json:"hasNodeInfo,omitempty"`
}

func (x *HasNodeInfoResponse) Reset() {
	*x = HasNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasNodeInfoResponse) ProtoMessage() {}

func (x *HasNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*HasNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{1}
}

func (x *HasNodeInfoResponse) GetHasNodeInfo() bool {
	if x != nil {
		return x.HasNodeInfo
	}
	return false
}

type GetNodeHostInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option *NodeHostInfoOption `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetNodeHostInfoRequest) Reset() {
	*x = GetNodeHostInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeHostInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeHostInfoRequest) ProtoMessage() {}

func (x *GetNodeHostInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeHostInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeHostInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{2}
}

func (x *GetNodeHostInfoRequest) GetOption() *NodeHostInfoOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type GetNodeHostInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NodeHostInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetNodeHostInfoResponse) Reset() {
	*x = GetNodeHostInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeHostInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeHostInfoResponse) ProtoMessage() {}

func (x *GetNodeHostInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeHostInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNodeHostInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{3}
}

func (x *GetNodeHostInfoResponse) GetInfo() *NodeHostInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNodeHostConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID *uint64 `protobuf:"varint,1,opt,name=clusterID,proto3,oneof" json:"clusterID,omitempty"`
	NodeID    *uint64 `protobuf:"varint,2,opt,name=nodeID,proto3,oneof" json:"nodeID,omitempty"`
}

func (x *GetNodeHostConfigRequest) Reset() {
	*x = GetNodeHostConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeHostConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeHostConfigRequest) ProtoMessage() {}

func (x *GetNodeHostConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeHostConfigRequest.ProtoReflect.Descriptor instead.
func (*GetNodeHostConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodeHostConfigRequest) GetClusterID() uint64 {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return 0
}

func (x *GetNodeHostConfigRequest) GetNodeID() uint64 {
	if x != nil && x.NodeID != nil {
		return *x.NodeID
	}
	return 0
}

type GetNodeHostConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeHostConfig *NodeHostConfig `protobuf:"bytes,1,opt,name=nodeHostConfig,proto3,oneof" json:"nodeHostConfig,omitempty"`
}

func (x *GetNodeHostConfigResponse) Reset() {
	*x = GetNodeHostConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeHostConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeHostConfigResponse) ProtoMessage() {}

func (x *GetNodeHostConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeHostConfigResponse.ProtoReflect.Descriptor instead.
func (*GetNodeHostConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodeHostConfigResponse) GetNodeHostConfig() *NodeHostConfig {
	if x != nil {
		return x.NodeHostConfig
	}
	return nil
}

// NodeHostConfig is the configuration used to configure NodeHost instances.
type NodeHostConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeploymentID is used to determine whether two NodeHost instances belong to
	// the same deployment and thus allowed to communicate with each other. This
	// helps to prvent accidentially misconfigured NodeHost instances to cause
	// data corruption errors by sending out of context messages to unrelated
	// Raft nodes.
	// For a particular dragonboat based application, you can set DeploymentID
	// to the same uint64 value on all production NodeHost instances, then use
	// different DeploymentID values on your staging and dev environment. It is
	// also recommended to use different DeploymentID values for different
	// dragonboat based applications.
	// When not set, the default value 0 will be used as the deployment ID and
	// thus allowing all NodeHost instances with deployment ID 0 to communicate
	// with each other.
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID,proto3" json:"DeploymentID,omitempty"`
	// WALDir is the directory used for storing the WAL of Raft entries. It is
	// recommended to use low latency storage such as NVME SSD with power loss
	// protection to store such WAL data. Leave WALDir to have zero value will
	// have everything stored in NodeHostDir.
	WALDir string `protobuf:"bytes,2,opt,name=WALDir,proto3" json:"WALDir,omitempty"`
	// NodeHostDir is where everything else is stored.
	NodeHostDir string `protobuf:"bytes,3,opt,name=NodeHostDir,proto3" json:"NodeHostDir,omitempty"`
	// RTTMillisecond defines the average Rround Trip Time (RTT) in milliseconds
	// between two NodeHost instances. Such a RTT interval is internally used as
	// a logical clock tick, Raft heartbeat and election intervals are both
	// defined in term of how many such logical clock ticks (RTT intervals).
	// Note that RTTMillisecond is the combined delays between two NodeHost
	// instances including all delays caused by network transmission, delays
	// caused by NodeHost queuing and processing. As an example, when fully
	// loaded, the average Rround Trip Time between two of our NodeHost instances
	// used for benchmarking purposes is up to 500 microseconds when the ping time
	// between them is 100 microseconds. Set RTTMillisecond to 1 when it is less
	// than 1 million in your environment.
	RoundTripTimeMillisecond uint64 `protobuf:"varint,4,opt,name=RoundTripTimeMillisecond,proto3" json:"RoundTripTimeMillisecond,omitempty"`
	// RaftAddress is a DNS name:port or IP:port address used by the transport
	// module for exchanging Raft messages, snapshots and metadata between
	// NodeHost instances. It should be set to the public address that can be
	// accessed from remote NodeHost instances.
	//
	// When the NodeHostConfig.ListenAddress field is empty, NodeHost listens on
	// RaftAddress for incoming Raft messages. When hostname or domain name is
	// used, it will be resolved to IPv4 addresses first and Dragonboat listens
	// to all resolved IPv4 addresses.
	//
	// By default, the RaftAddress value is not allowed to change between NodeHost
	// restarts. AddressByNodeHostID should be set to true when the RaftAddress
	// value might change after restart.
	RaftAddress string `protobuf:"bytes,5,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	// AddressByNodeHostID indicates that NodeHost instances should be addressed
	// by their NodeHostID values. This feature is usually used when only dynamic
	// addresses are available. When enabled, NodeHostID values should be used
	// as the target parameter when calling NodeHost's StartCluster,
	// RequestAddNode, RequestAddObserver and RequestAddWitness methods.
	//
	// Enabling AddressByNodeHostID also enables the internal gossip service,
	// NodeHostConfig.Gossip must be configured to control the behaviors of the
	// gossip service.
	//
	// Note that once enabled, the AddressByNodeHostID setting can not be later
	// disabled after restarts.
	//
	// Please see the godocs of the NodeHostConfig.Gossip field for a detailed
	// example on how AddressByNodeHostID and gossip works.
	AddressByNodeHostID bool `protobuf:"varint,6,opt,name=AddressByNodeHostID,proto3" json:"AddressByNodeHostID,omitempty"`
	// ListenAddress is an optional field in the hostname:port or IP:port address
	// form used by the transport module to listen on for Raft message and
	// snapshots. When the ListenAddress field is not set, The transport module
	// listens on RaftAddress. If 0.0.0.0 is specified as the IP of the
	// ListenAddress, Dragonboat listens to the specified port on all network
	// interfaces. When hostname or domain name is used, it will be resolved to
	// IPv4 addresses first and Dragonboat listens to all resolved IPv4 addresses.
	ListenAddress string `protobuf:"bytes,7,opt,name=ListenAddress,proto3" json:"ListenAddress,omitempty"`
	// MutualTLS defines whether to use mutual TLS for authenticating servers
	// and clients. Insecure communication is used when MutualTLS is set to
	// False.
	// See https://github.com/lni/dragonboat/wiki/TLS-in-Dragonboat for more
	// details on how to use Mutual TLS.
	MutualTLS bool `protobuf:"varint,8,opt,name=MutualTLS,proto3" json:"MutualTLS,omitempty"`
	// CAFile is the path of the CA certificate file. This field is ignored when
	// MutualTLS is false.
	CAFile string `protobuf:"bytes,9,opt,name=CAFile,proto3" json:"CAFile,omitempty"`
	// CertFile is the path of the node certificate file. This field is ignored
	// when MutualTLS is false.
	CertFile string `protobuf:"bytes,10,opt,name=CertFile,proto3" json:"CertFile,omitempty"`
	// KeyFile is the path of the node key file. This field is ignored when
	// MutualTLS is false.
	KeyFile string `protobuf:"bytes,11,opt,name=KeyFile,proto3" json:"KeyFile,omitempty"`
	// EnableMetrics determines whether health metrics in Prometheus format should
	// be enabled.
	EnableMetrics bool `protobuf:"varint,12,opt,name=EnableMetrics,proto3" json:"EnableMetrics,omitempty"`
	// MaxSendQueueSize is the maximum size in bytes of each send queue.
	// Once the maximum size is reached, further replication messages will be
	// dropped to restrict memory usage. When set to 0, it means the send queue
	// size is unlimited.
	MaxSendQueueSize uint64 `protobuf:"varint,13,opt,name=MaxSendQueueSize,proto3" json:"MaxSendQueueSize,omitempty"`
	// MaxReceiveQueueSize is the maximum size in bytes of each receive queue.
	// Once the maximum size is reached, further replication messages will be
	// dropped to restrict memory usage. When set to 0, it means the queue size
	// is unlimited.
	MaxReceiveQueueSize uint64 `protobuf:"varint,14,opt,name=MaxReceiveQueueSize,proto3" json:"MaxReceiveQueueSize,omitempty"`
	// MaxSnapshotSendBytesPerSecond defines how much snapshot data can be sent
	// every second for all Raft clusters managed by the NodeHost instance.
	// The default value 0 means there is no limit set for snapshot streaming.
	MaxSnapshotSendBytesPerSecond uint64 `protobuf:"varint,15,opt,name=MaxSnapshotSendBytesPerSecond,proto3" json:"MaxSnapshotSendBytesPerSecond,omitempty"`
	// MaxSnapshotRecvBytesPerSecond defines how much snapshot data can be
	// received each second for all Raft clusters managed by the NodeHost instance.
	// The default value 0 means there is no limit for receiving snapshot data.
	MaxSnapshotRecvBytesPerSecond uint64 `protobuf:"varint,16,opt,name=MaxSnapshotRecvBytesPerSecond,proto3" json:"MaxSnapshotRecvBytesPerSecond,omitempty"`
	// NotifyCommit specifies whether clients should be notified when their
	// regular proposals and config change requests are committed. By default,
	// commits are not notified, clients are only notified when their proposals
	// are both committed and applied.
	NotifyCommit bool `protobuf:"varint,17,opt,name=NotifyCommit,proto3" json:"NotifyCommit,omitempty"`
	// Gossip contains configurations for the gossip service. When the
	// AddressByNodeHostID field is set to true, each NodeHost instance will use
	// an internal gossip service to exchange knowledges of known NodeHost
	// instances including their RaftAddress and NodeHostID values. This Gossip
	// field contains configurations that controls how the gossip service works.
	//
	// As an detailed example on how to use the gossip service in the situation
	// where all available machines have dynamically assigned IPs on reboot -
	//
	// Consider that there are three NodeHost instances on three machines, each
	// of them has a dynamically assigned IP address which will change on reboot.
	// NodeHostConfig.RaftAddress should be set to the current address that can be
	// reached by remote NodeHost instance. In this example, we will assume they
	// are
	//
	// 10.0.0.100:24000
	// 10.0.0.200:24000
	// 10.0.0.300:24000
	//
	// To use these machines, first enable the NodeHostConfig.AddressByNodeHostID
	// field and start the NodeHost instances. The NodeHostID value of each
	// NodeHost instance can be obtained by calling NodeHost.ID(). Let's say they
	// are
	//
	// "nhid-xxxxx",
	// "nhid-yyyyy",
	// "nhid-zzzzz".
	//
	// All these NodeHostID are fixed, they will never change after reboots.
	//
	// When starting Raft nodes or requesting new nodes to be added, use the above
	// mentioned NodeHostID values as the target parameters (which are of the
	// Target type). Let's say we want to start a Raft Node as a part of a three
	// replicas Raft cluster, the initialMembers parameter of the StartCluster
	// method can be set to
	//
	// initialMembers := map[uint64]Target {
	// 	 1: "nhid-xxxxx",
	//   2: "nhid-yyyyy",
	//   3: "nhid-zzzzz",
	// }
	//
	// This indicates that node 1 of the cluster will be running on the NodeHost
	// instance identified by the NodeHostID value "nhid-xxxxx", node 2 of the
	// same cluster will be running on the NodeHost instance identified by the
	// NodeHostID value of "nhid-yyyyy" and so on.
	//
	// The internal gossip service exchanges NodeHost details, including their
	// NodeHostID and RaftAddress values, with all other known NodeHost instances.
	// Thanks to the nature of gossip, it will eventually allow each NodeHost
	// instance to be aware of the current details of all NodeHost instances.
	// As a result, let's say when Raft node 1 wants to send a Raft message to
	// node 2, it first figures out that node 2 is running on the NodeHost
	// identified by the NodeHostID value "nhid-yyyyy", RaftAddress information
	// from the gossip service further shows that "nhid-yyyyy" maps to a machine
	// currently reachable at 10.0.0.200:24000. Raft messages can thus be
	// delivered.
	//
	// The Gossip field here is used to configure how the gossip service works.
	// In this example, let's say we choose to use the following configurations
	// for those three NodeHost instaces.
	//
	// GossipConfig {
	//   BindAddress: "10.0.0.100:24001",
	//   Seed: []string{10.0.0.200:24001},
	// }
	//
	// GossipConfig {
	//   BindAddress: "10.0.0.200:24001",
	//   Seed: []string{10.0.0.300:24001},
	// }
	//
	// GossipConfig {
	//   BindAddress: "10.0.0.300:24001",
	//   Seed: []string{10.0.0.100:24001},
	// }
	//
	// For those three machines, the gossip component listens on
	// "10.0.0.100:24001", "10.0.0.200:24001" and "10.0.0.300:24001" respectively
	// for incoming gossip messages. The Seed field is a list of known gossip end
	// points the local gossip service will try to talk to. The Seed field doesn't
	// need to include all gossip end points, a few well connected nodes in the
	// gossip network is enough.
	GossipConfig *GossipConfig `protobuf:"bytes,18,opt,name=GossipConfig,proto3" json:"GossipConfig,omitempty"`
}

func (x *NodeHostConfig) Reset() {
	*x = NodeHostConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostConfig) ProtoMessage() {}

func (x *NodeHostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostConfig.ProtoReflect.Descriptor instead.
func (*NodeHostConfig) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{6}
}

func (x *NodeHostConfig) GetDeploymentID() uint64 {
	if x != nil {
		return x.DeploymentID
	}
	return 0
}

func (x *NodeHostConfig) GetWALDir() string {
	if x != nil {
		return x.WALDir
	}
	return ""
}

func (x *NodeHostConfig) GetNodeHostDir() string {
	if x != nil {
		return x.NodeHostDir
	}
	return ""
}

func (x *NodeHostConfig) GetRoundTripTimeMillisecond() uint64 {
	if x != nil {
		return x.RoundTripTimeMillisecond
	}
	return 0
}

func (x *NodeHostConfig) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *NodeHostConfig) GetAddressByNodeHostID() bool {
	if x != nil {
		return x.AddressByNodeHostID
	}
	return false
}

func (x *NodeHostConfig) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *NodeHostConfig) GetMutualTLS() bool {
	if x != nil {
		return x.MutualTLS
	}
	return false
}

func (x *NodeHostConfig) GetCAFile() string {
	if x != nil {
		return x.CAFile
	}
	return ""
}

func (x *NodeHostConfig) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *NodeHostConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *NodeHostConfig) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *NodeHostConfig) GetMaxSendQueueSize() uint64 {
	if x != nil {
		return x.MaxSendQueueSize
	}
	return 0
}

func (x *NodeHostConfig) GetMaxReceiveQueueSize() uint64 {
	if x != nil {
		return x.MaxReceiveQueueSize
	}
	return 0
}

func (x *NodeHostConfig) GetMaxSnapshotSendBytesPerSecond() uint64 {
	if x != nil {
		return x.MaxSnapshotSendBytesPerSecond
	}
	return 0
}

func (x *NodeHostConfig) GetMaxSnapshotRecvBytesPerSecond() uint64 {
	if x != nil {
		return x.MaxSnapshotRecvBytesPerSecond
	}
	return 0
}

func (x *NodeHostConfig) GetNotifyCommit() bool {
	if x != nil {
		return x.NotifyCommit
	}
	return false
}

func (x *NodeHostConfig) GetGossipConfig() *GossipConfig {
	if x != nil {
		return x.GossipConfig
	}
	return nil
}

// GossipConfig contains configurations for the gossip service. Gossip service
// is a fully distributed networked service for exchanging knowledges on
// NodeHost instances. When enabled by the NodeHostConfig.AddressByNodeHostID
// field, it is employed to manage NodeHostID to RaftAddress mappings of known
// NodeHost instances.
type GossipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BindAddress is the address for the gossip service to bind to and listen on.
	// Both UDP and TCP ports are used by the gossip service. The local gossip
	// service should be able to receive gossip service related messages by
	// binding to and listening on this address. BindAddress is usually in the
	// format of IP:Port, Hostname:Port or DNS Name:Port.
	BindAddress string `protobuf:"bytes,1,opt,name=BindAddress,proto3" json:"BindAddress,omitempty"`
	// AdvertiseAddress is the address to advertise to other NodeHost instances
	// used for NAT traversal. Gossip services running on remote NodeHost
	// instances will use AdvertiseAddress to exchange gossip service related
	// messages. AdvertiseAddress is in the format of IP:Port.
	AdvertiseAddress string `protobuf:"bytes,2,opt,name=AdvertiseAddress,proto3" json:"AdvertiseAddress,omitempty"`
	// Seed is a list of AdvertiseAddress of remote NodeHost instances. Local
	// NodeHost instance will try to contact all of them to bootstrap the gossip
	// service. At least one reachable NodeHost instance is required to
	// successfully bootstrap the gossip service. Each seed address is in the
	// format of IP:Port, Hostname:Port or DNS Name:Port.
	//
	// It is ok to include seed addresses that are temporarily unreachable, e.g.
	// when launching the first NodeHost instance in your deployment, you can
	// include AdvertiseAddresses from other NodeHost instances that you plan to
	// launch shortly afterwards.
	Seed []string `protobuf:"bytes,3,rep,name=Seed,proto3" json:"Seed,omitempty"`
}

func (x *GossipConfig) Reset() {
	*x = GossipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipConfig) ProtoMessage() {}

func (x *GossipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipConfig.ProtoReflect.Descriptor instead.
func (*GossipConfig) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{7}
}

func (x *GossipConfig) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

func (x *GossipConfig) GetAdvertiseAddress() string {
	if x != nil {
		return x.AdvertiseAddress
	}
	return ""
}

func (x *GossipConfig) GetSeed() []string {
	if x != nil {
		return x.Seed
	}
	return nil
}

// NodeHostInfo provides info about the NodeHost, including its managed Raft
// cluster nodes and available Raft logs saved in its local persistent storage.
type NodeHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeHostID is the unique identifier of the NodeHost instance.
	NodeHostID string `protobuf:"bytes,1,opt,name=NodeHostID,proto3" json:"NodeHostID,omitempty"`
	// RaftAddress is the public address of the NodeHost used for exchanging Raft
	// messages, snapshots and other metadata with other NodeHost instances.
	RaftAddress string `protobuf:"bytes,2,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	// Gossip contains gossip service related information.
	Gossip *GossipInfo `protobuf:"bytes,3,opt,name=Gossip,proto3" json:"Gossip,omitempty"`
	// ClusterInfo is a list of all Raft clusters managed by the NodeHost
	ClusterInfo []*ClusterInfo `protobuf:"bytes,4,rep,name=ClusterInfo,proto3" json:"ClusterInfo,omitempty"`
	// LogInfo is a list of raftio.NodeInfo values representing all Raft logs
	// stored on the NodeHost.
	LogInfo []*NodeInfo `protobuf:"bytes,5,rep,name=LogInfo,proto3" json:"LogInfo,omitempty"`
}

func (x *NodeHostInfo) Reset() {
	*x = NodeHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostInfo) ProtoMessage() {}

func (x *NodeHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostInfo.ProtoReflect.Descriptor instead.
func (*NodeHostInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{8}
}

func (x *NodeHostInfo) GetNodeHostID() string {
	if x != nil {
		return x.NodeHostID
	}
	return ""
}

func (x *NodeHostInfo) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *NodeHostInfo) GetGossip() *GossipInfo {
	if x != nil {
		return x.Gossip
	}
	return nil
}

func (x *NodeHostInfo) GetClusterInfo() []*ClusterInfo {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

func (x *NodeHostInfo) GetLogInfo() []*NodeInfo {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

// ClusterInfo is a record for representing the state of a Raft cluster based
// on the knowledge of the local NodeHost instance.
type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClusterID is the cluster ID of the Raft cluster node.
	ClusterID uint64 `protobuf:"varint,1,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	// NodeID is the node ID of the Raft cluster node.
	NodeID uint64 `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	// Nodes is a map of member node IDs to their Raft addresses.
	Nodes map[uint64]string `protobuf:"bytes,3,rep,name=Nodes,proto3" json:"Nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ConfigChangeIndex is the current config change index of the Raft node.
	// ConfigChangeIndex is Raft Log index of the last applied membership
	// change entry.
	ConfigChangeIndex uint64 `protobuf:"varint,4,opt,name=ConfigChangeIndex,proto3" json:"ConfigChangeIndex,omitempty"`
	// StateMachineType is the type of the state machine.
	StateMachineType uint64 `protobuf:"varint,5,opt,name=StateMachineType,proto3" json:"StateMachineType,omitempty"`
	// IsLeader indicates whether this is a leader node.
	IsLeader bool `protobuf:"varint,6,opt,name=IsLeader,proto3" json:"IsLeader,omitempty"`
	// IsObserver indicates whether this is a non-voting observer node.
	IsObserver bool `protobuf:"varint,7,opt,name=IsObserver,proto3" json:"IsObserver,omitempty"`
	// IsWitness indicates whether this is a witness node without actual log.
	IsWitness bool `protobuf:"varint,8,opt,name=IsWitness,proto3" json:"IsWitness,omitempty"`
	// Pending is a boolean flag indicating whether details of the cluster node
	// is not available. The Pending flag is set to true usually because the node
	// has not had anything applied yet.
	Pending bool `protobuf:"varint,9,opt,name=Pending,proto3" json:"Pending,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterInfo) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *ClusterInfo) GetNodeID() uint64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *ClusterInfo) GetNodes() map[uint64]string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ClusterInfo) GetConfigChangeIndex() uint64 {
	if x != nil {
		return x.ConfigChangeIndex
	}
	return 0
}

func (x *ClusterInfo) GetStateMachineType() uint64 {
	if x != nil {
		return x.StateMachineType
	}
	return 0
}

func (x *ClusterInfo) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *ClusterInfo) GetIsObserver() bool {
	if x != nil {
		return x.IsObserver
	}
	return false
}

func (x *ClusterInfo) GetIsWitness() bool {
	if x != nil {
		return x.IsWitness
	}
	return false
}

func (x *ClusterInfo) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

// GossipInfo contains details of the gossip service.
type GossipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled is a boolean flag indicating whether the gossip service is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	// AdvertiseAddress is the advertise address used by the gossip service.
	AdvertiseAddress string `protobuf:"bytes,2,opt,name=AdvertiseAddress,proto3" json:"AdvertiseAddress,omitempty"`
	// NumOfLiveNodeHosts is the number of current live NodeHost instances known
	// to the gossip service. Note that the gossip service always knowns the
	// local NodeHost instance itself. When the NumOfKnownNodeHosts value is 1,
	// it means the gossip service doesn't know any other NodeHost instance that
	// is considered as live.
	NumOfKnownNodeHosts int32 `protobuf:"varint,3,opt,name=NumOfKnownNodeHosts,proto3" json:"NumOfKnownNodeHosts,omitempty"`
}

func (x *GossipInfo) Reset() {
	*x = GossipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipInfo) ProtoMessage() {}

func (x *GossipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipInfo.ProtoReflect.Descriptor instead.
func (*GossipInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{10}
}

func (x *GossipInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GossipInfo) GetAdvertiseAddress() string {
	if x != nil {
		return x.AdvertiseAddress
	}
	return ""
}

func (x *GossipInfo) GetNumOfKnownNodeHosts() int32 {
	if x != nil {
		return x.NumOfKnownNodeHosts
	}
	return 0
}

// NodeInfo is used to identify a Raft node.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID uint64 `protobuf:"varint,1,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	NodeID    uint64 `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{11}
}

func (x *NodeInfo) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *NodeInfo) GetNodeID() uint64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

// NodeHostInfoOption is the option type used when querying NodeHostInfo.
type NodeHostInfoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SkipLogInfo is the boolean flag indicating whether Raft Log info should be
	// skipped when querying the NodeHostInfo.
	SkipLogInfo bool `protobuf:"varint,1,opt,name=SkipLogInfo,proto3" json:"SkipLogInfo,omitempty"`
}

func (x *NodeHostInfoOption) Reset() {
	*x = NodeHostInfoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_database_node_host_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostInfoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostInfoOption) ProtoMessage() {}

func (x *NodeHostInfoOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_database_node_host_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostInfoOption.ProtoReflect.Descriptor instead.
func (*NodeHostInfoOption) Descriptor() ([]byte, []int) {
	return file_api_v1_database_node_host_config_proto_rawDescGZIP(), []int{12}
}

func (x *NodeHostInfoOption) GetSkipLogInfo() bool {
	if x != nil {
		return x.SkipLogInfo
	}
	return false
}

var File_api_v1_database_node_host_config_proto protoreflect.FileDescriptor

var file_api_v1_database_node_host_config_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x37,
	0x0a, 0x13, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x73,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x06, 0x0a, 0x0e, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x41, 0x4c, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x57, 0x41, 0x4c, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x61,
	0x66, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4d,
	0x61, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x4d, 0x61, 0x78, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x4d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x76, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x70, 0x0a,
	0x0c, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x53, 0x65, 0x65, 0x64, 0x22,
	0xe5, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x12, 0x37, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01,
	0x0a, 0x0a, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x6b, 0x69, 0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x95,
	0x02, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x48, 0x61,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_database_node_host_config_proto_rawDescOnce sync.Once
	file_api_v1_database_node_host_config_proto_rawDescData = file_api_v1_database_node_host_config_proto_rawDesc
)

func file_api_v1_database_node_host_config_proto_rawDescGZIP() []byte {
	file_api_v1_database_node_host_config_proto_rawDescOnce.Do(func() {
		file_api_v1_database_node_host_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_database_node_host_config_proto_rawDescData)
	})
	return file_api_v1_database_node_host_config_proto_rawDescData
}

var file_api_v1_database_node_host_config_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_v1_database_node_host_config_proto_goTypes = []interface{}{
	(*HasNodeInfoRequest)(nil),        // 0: database.HasNodeInfoRequest
	(*HasNodeInfoResponse)(nil),       // 1: database.HasNodeInfoResponse
	(*GetNodeHostInfoRequest)(nil),    // 2: database.GetNodeHostInfoRequest
	(*GetNodeHostInfoResponse)(nil),   // 3: database.GetNodeHostInfoResponse
	(*GetNodeHostConfigRequest)(nil),  // 4: database.GetNodeHostConfigRequest
	(*GetNodeHostConfigResponse)(nil), // 5: database.GetNodeHostConfigResponse
	(*NodeHostConfig)(nil),            // 6: database.NodeHostConfig
	(*GossipConfig)(nil),              // 7: database.GossipConfig
	(*NodeHostInfo)(nil),              // 8: database.NodeHostInfo
	(*ClusterInfo)(nil),               // 9: database.ClusterInfo
	(*GossipInfo)(nil),                // 10: database.GossipInfo
	(*NodeInfo)(nil),                  // 11: database.NodeInfo
	(*NodeHostInfoOption)(nil),        // 12: database.NodeHostInfoOption
	nil,                               // 13: database.ClusterInfo.NodesEntry
}
var file_api_v1_database_node_host_config_proto_depIdxs = []int32{
	12, // 0: database.GetNodeHostInfoRequest.option:type_name -> database.NodeHostInfoOption
	8,  // 1: database.GetNodeHostInfoResponse.info:type_name -> database.NodeHostInfo
	6,  // 2: database.GetNodeHostConfigResponse.nodeHostConfig:type_name -> database.NodeHostConfig
	7,  // 3: database.NodeHostConfig.GossipConfig:type_name -> database.GossipConfig
	10, // 4: database.NodeHostInfo.Gossip:type_name -> database.GossipInfo
	9,  // 5: database.NodeHostInfo.ClusterInfo:type_name -> database.ClusterInfo
	11, // 6: database.NodeHostInfo.LogInfo:type_name -> database.NodeInfo
	13, // 7: database.ClusterInfo.Nodes:type_name -> database.ClusterInfo.NodesEntry
	4,  // 8: database.NodeConfigService.GetNodeHostConfig:input_type -> database.GetNodeHostConfigRequest
	2,  // 9: database.NodeConfigService.GetNodeHostInfo:input_type -> database.GetNodeHostInfoRequest
	0,  // 10: database.NodeConfigService.HasNodeInfo:input_type -> database.HasNodeInfoRequest
	5,  // 11: database.NodeConfigService.GetNodeHostConfig:output_type -> database.GetNodeHostConfigResponse
	3,  // 12: database.NodeConfigService.GetNodeHostInfo:output_type -> database.GetNodeHostInfoResponse
	1,  // 13: database.NodeConfigService.HasNodeInfo:output_type -> database.HasNodeInfoResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_v1_database_node_host_config_proto_init() }
func file_api_v1_database_node_host_config_proto_init() {
	if File_api_v1_database_node_host_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_database_node_host_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeHostInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeHostInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeHostConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeHostConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_database_node_host_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostInfoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_database_node_host_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_v1_database_node_host_config_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_database_node_host_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_database_node_host_config_proto_goTypes,
		DependencyIndexes: file_api_v1_database_node_host_config_proto_depIdxs,
		MessageInfos:      file_api_v1_database_node_host_config_proto_msgTypes,
	}.Build()
	File_api_v1_database_node_host_config_proto = out.File
	file_api_v1_database_node_host_config_proto_rawDesc = nil
	file_api_v1_database_node_host_config_proto_goTypes = nil
	file_api_v1_database_node_host_config_proto_depIdxs = nil
}
