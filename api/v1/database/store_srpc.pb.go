// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.8.6
// source: api/v1/database/store.proto

package database

import (
	context "context"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCKVStoreServiceClient interface {
	SRPCClient() srpc.Client

	Get(ctx context.Context, in *GetRequest) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest) (SRPCKVStoreService_PutClient, error)
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
}

type srpcKVStoreServiceClient struct {
	cc srpc.Client
}

func NewSRPCKVStoreServiceClient(cc srpc.Client) SRPCKVStoreServiceClient {
	return &srpcKVStoreServiceClient{cc}
}

func (c *srpcKVStoreServiceClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcKVStoreServiceClient) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "database.KVStoreService", "Get", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcKVStoreServiceClient) Put(ctx context.Context, in *PutRequest) (SRPCKVStoreService_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.KVStoreService", "Put", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcKVStoreService_PutClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCKVStoreService_PutClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcKVStoreService_PutClient struct {
	srpc.Stream
}

func (x *srpcKVStoreService_PutClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcKVStoreService_PutClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcKVStoreServiceClient) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "database.KVStoreService", "Delete", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCKVStoreServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(*PutRequest, SRPCKVStoreService_PutStream) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

type SRPCKVStoreServiceUnimplementedServer struct{}

func (s *SRPCKVStoreServiceUnimplementedServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCKVStoreServiceUnimplementedServer) Put(*PutRequest, SRPCKVStoreService_PutStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCKVStoreServiceUnimplementedServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCKVStoreServiceServiceID = "database.KVStoreService"

type SRPCKVStoreServiceHandler struct {
	impl SRPCKVStoreServiceServer
}

func (SRPCKVStoreServiceHandler) GetServiceID() string { return SRPCKVStoreServiceServiceID }

func (SRPCKVStoreServiceHandler) GetMethodIDs() []string {
	return []string{
		"Get",
		"Put",
		"Delete",
	}
}

func (d *SRPCKVStoreServiceHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "Get":
		return true, d.InvokeMethod_Get(d.impl, strm)
	case "Put":
		return true, d.InvokeMethod_Put(d.impl, strm)
	case "Delete":
		return true, d.InvokeMethod_Delete(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCKVStoreServiceHandler) InvokeMethod_Get(impl SRPCKVStoreServiceServer, strm srpc.Stream) error {
	req := new(GetRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.Get(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCKVStoreServiceHandler) InvokeMethod_Put(impl SRPCKVStoreServiceServer, strm srpc.Stream) error {
	req := new(PutRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcKVStoreService_PutStream{strm}
	return impl.Put(req, serverStrm)
}

func (SRPCKVStoreServiceHandler) InvokeMethod_Delete(impl SRPCKVStoreServiceServer, strm srpc.Stream) error {
	req := new(DeleteRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.Delete(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func SRPCRegisterKVStoreService(mux srpc.Mux, impl SRPCKVStoreServiceServer) error {
	return mux.Register(&SRPCKVStoreServiceHandler{impl: impl})
}

type SRPCKVStoreService_GetStream interface {
	srpc.Stream
	SendAndClose(*GetResponse) error
}

type srpcKVStoreService_GetStream struct {
	srpc.Stream
}

func (x *srpcKVStoreService_GetStream) SendAndClose(m *GetResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCKVStoreService_PutStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcKVStoreService_PutStream struct {
	srpc.Stream
}

func (x *srpcKVStoreService_PutStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCKVStoreService_DeleteStream interface {
	srpc.Stream
	SendAndClose(*DeleteResponse) error
}

type srpcKVStoreService_DeleteStream struct {
	srpc.Stream
}

func (x *srpcKVStoreService_DeleteStream) SendAndClose(m *DeleteResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
