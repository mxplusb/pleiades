// source: api/v1/database/raft_control.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var api_v1_database_kv_pb = require('../../../api/v1/database/kv_pb.js');
goog.object.extend(proto, api_v1_database_kv_pb);
var api_v1_errors_pb = require('../../../api/v1/errors_pb.js');
goog.object.extend(proto, api_v1_errors_pb);
goog.exportSymbol('proto.database.GetLeaderIDRequest', null, global);
goog.exportSymbol('proto.database.GetLeaderIDResponse', null, global);
goog.exportSymbol('proto.database.IdRequest', null, global);
goog.exportSymbol('proto.database.IdResponse', null, global);
goog.exportSymbol('proto.database.IndexState', null, global);
goog.exportSymbol('proto.database.IndexState.ResultCode', null, global);
goog.exportSymbol('proto.database.ModifyNodeRequest', null, global);
goog.exportSymbol('proto.database.RaftControlPayload', null, global);
goog.exportSymbol('proto.database.RaftControlPayload.MethodName', null, global);
goog.exportSymbol('proto.database.RaftControlPayload.TypesCase', null, global);
goog.exportSymbol('proto.database.ReadIndexRequest', null, global);
goog.exportSymbol('proto.database.ReadLocalNodeRequest', null, global);
goog.exportSymbol('proto.database.RequestLeaderTransferResponse', null, global);
goog.exportSymbol('proto.database.RequestSnapshotRequest', null, global);
goog.exportSymbol('proto.database.Result', null, global);
goog.exportSymbol('proto.database.SnapshotOption', null, global);
goog.exportSymbol('proto.database.StopNodeResponse', null, global);
goog.exportSymbol('proto.database.StopRequest', null, global);
goog.exportSymbol('proto.database.StopResponse', null, global);
goog.exportSymbol('proto.database.SysOpState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.RaftControlPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.database.RaftControlPayload.oneofGroups_);
};
goog.inherits(proto.database.RaftControlPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.RaftControlPayload.displayName = 'proto.database.RaftControlPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StopNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StopNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StopNodeResponse.displayName = 'proto.database.StopNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StopRequest.displayName = 'proto.database.StopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StopResponse.displayName = 'proto.database.StopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.RequestSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.RequestSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.RequestSnapshotRequest.displayName = 'proto.database.RequestSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.SnapshotOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.SnapshotOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.SnapshotOption.displayName = 'proto.database.SnapshotOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.RequestLeaderTransferResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.RequestLeaderTransferResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.RequestLeaderTransferResponse.displayName = 'proto.database.RequestLeaderTransferResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.SysOpState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.SysOpState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.SysOpState.displayName = 'proto.database.SysOpState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.ModifyNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.ModifyNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.ModifyNodeRequest.displayName = 'proto.database.ModifyNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.ReadLocalNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.ReadLocalNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.ReadLocalNodeRequest.displayName = 'proto.database.ReadLocalNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.ReadIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.ReadIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.ReadIndexRequest.displayName = 'proto.database.ReadIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.IndexState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.IndexState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.IndexState.displayName = 'proto.database.IndexState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.Result.displayName = 'proto.database.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.IdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.IdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.IdRequest.displayName = 'proto.database.IdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.IdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.IdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.IdResponse.displayName = 'proto.database.IdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetLeaderIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetLeaderIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetLeaderIDRequest.displayName = 'proto.database.GetLeaderIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetLeaderIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetLeaderIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetLeaderIDResponse.displayName = 'proto.database.GetLeaderIDResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.database.RaftControlPayload.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,18]];

/**
 * @enum {number}
 */
proto.database.RaftControlPayload.TypesCase = {
  TYPES_NOT_SET: 0,
  GETLEADERIDREQUEST: 1,
  GETLEADERIDRESPONSE: 2,
  IDREQUEST: 3,
  IDRESPONSE: 4,
  INDEXSTATE: 5,
  MODIFYNODEREQUEST: 6,
  READINDEXREQUEST: 7,
  READLOCALNODEREQUEST: 8,
  REQUESTLEADERTRANSFERRESPONSE: 9,
  REQUESTSNAPSHOTREQUEST: 10,
  SNAPSHOTOPTION: 12,
  STOPNODERESPONSE: 13,
  STOPREQUEST: 14,
  STOPRESPONSE: 15,
  SYSOPSTATE: 16,
  ERROR: 18
};

/**
 * @return {proto.database.RaftControlPayload.TypesCase}
 */
proto.database.RaftControlPayload.prototype.getTypesCase = function() {
  return /** @type {proto.database.RaftControlPayload.TypesCase} */(jspb.Message.computeOneofCase(this, proto.database.RaftControlPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.RaftControlPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.database.RaftControlPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.RaftControlPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftControlPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    getleaderidrequest: (f = msg.getGetleaderidrequest()) && proto.database.GetLeaderIDRequest.toObject(includeInstance, f),
    getleaderidresponse: (f = msg.getGetleaderidresponse()) && proto.database.GetLeaderIDResponse.toObject(includeInstance, f),
    idrequest: (f = msg.getIdrequest()) && proto.database.IdRequest.toObject(includeInstance, f),
    idresponse: (f = msg.getIdresponse()) && proto.database.IdResponse.toObject(includeInstance, f),
    indexstate: (f = msg.getIndexstate()) && proto.database.IndexState.toObject(includeInstance, f),
    modifynoderequest: (f = msg.getModifynoderequest()) && proto.database.ModifyNodeRequest.toObject(includeInstance, f),
    readindexrequest: (f = msg.getReadindexrequest()) && proto.database.ReadIndexRequest.toObject(includeInstance, f),
    readlocalnoderequest: (f = msg.getReadlocalnoderequest()) && proto.database.ReadLocalNodeRequest.toObject(includeInstance, f),
    requestleadertransferresponse: (f = msg.getRequestleadertransferresponse()) && proto.database.RequestLeaderTransferResponse.toObject(includeInstance, f),
    requestsnapshotrequest: (f = msg.getRequestsnapshotrequest()) && proto.database.RequestSnapshotRequest.toObject(includeInstance, f),
    snapshotoption: (f = msg.getSnapshotoption()) && proto.database.SnapshotOption.toObject(includeInstance, f),
    stopnoderesponse: (f = msg.getStopnoderesponse()) && proto.database.StopNodeResponse.toObject(includeInstance, f),
    stoprequest: (f = msg.getStoprequest()) && proto.database.StopRequest.toObject(includeInstance, f),
    stopresponse: (f = msg.getStopresponse()) && proto.database.StopResponse.toObject(includeInstance, f),
    sysopstate: (f = msg.getSysopstate()) && proto.database.SysOpState.toObject(includeInstance, f),
    error: (f = msg.getError()) && api_v1_errors_pb.DBError.toObject(includeInstance, f),
    method: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.RaftControlPayload}
 */
proto.database.RaftControlPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.RaftControlPayload;
  return proto.database.RaftControlPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.RaftControlPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.RaftControlPayload}
 */
proto.database.RaftControlPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database.GetLeaderIDRequest;
      reader.readMessage(value,proto.database.GetLeaderIDRequest.deserializeBinaryFromReader);
      msg.setGetleaderidrequest(value);
      break;
    case 2:
      var value = new proto.database.GetLeaderIDResponse;
      reader.readMessage(value,proto.database.GetLeaderIDResponse.deserializeBinaryFromReader);
      msg.setGetleaderidresponse(value);
      break;
    case 3:
      var value = new proto.database.IdRequest;
      reader.readMessage(value,proto.database.IdRequest.deserializeBinaryFromReader);
      msg.setIdrequest(value);
      break;
    case 4:
      var value = new proto.database.IdResponse;
      reader.readMessage(value,proto.database.IdResponse.deserializeBinaryFromReader);
      msg.setIdresponse(value);
      break;
    case 5:
      var value = new proto.database.IndexState;
      reader.readMessage(value,proto.database.IndexState.deserializeBinaryFromReader);
      msg.setIndexstate(value);
      break;
    case 6:
      var value = new proto.database.ModifyNodeRequest;
      reader.readMessage(value,proto.database.ModifyNodeRequest.deserializeBinaryFromReader);
      msg.setModifynoderequest(value);
      break;
    case 7:
      var value = new proto.database.ReadIndexRequest;
      reader.readMessage(value,proto.database.ReadIndexRequest.deserializeBinaryFromReader);
      msg.setReadindexrequest(value);
      break;
    case 8:
      var value = new proto.database.ReadLocalNodeRequest;
      reader.readMessage(value,proto.database.ReadLocalNodeRequest.deserializeBinaryFromReader);
      msg.setReadlocalnoderequest(value);
      break;
    case 9:
      var value = new proto.database.RequestLeaderTransferResponse;
      reader.readMessage(value,proto.database.RequestLeaderTransferResponse.deserializeBinaryFromReader);
      msg.setRequestleadertransferresponse(value);
      break;
    case 10:
      var value = new proto.database.RequestSnapshotRequest;
      reader.readMessage(value,proto.database.RequestSnapshotRequest.deserializeBinaryFromReader);
      msg.setRequestsnapshotrequest(value);
      break;
    case 12:
      var value = new proto.database.SnapshotOption;
      reader.readMessage(value,proto.database.SnapshotOption.deserializeBinaryFromReader);
      msg.setSnapshotoption(value);
      break;
    case 13:
      var value = new proto.database.StopNodeResponse;
      reader.readMessage(value,proto.database.StopNodeResponse.deserializeBinaryFromReader);
      msg.setStopnoderesponse(value);
      break;
    case 14:
      var value = new proto.database.StopRequest;
      reader.readMessage(value,proto.database.StopRequest.deserializeBinaryFromReader);
      msg.setStoprequest(value);
      break;
    case 15:
      var value = new proto.database.StopResponse;
      reader.readMessage(value,proto.database.StopResponse.deserializeBinaryFromReader);
      msg.setStopresponse(value);
      break;
    case 16:
      var value = new proto.database.SysOpState;
      reader.readMessage(value,proto.database.SysOpState.deserializeBinaryFromReader);
      msg.setSysopstate(value);
      break;
    case 18:
      var value = new api_v1_errors_pb.DBError;
      reader.readMessage(value,api_v1_errors_pb.DBError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 17:
      var value = /** @type {!proto.database.RaftControlPayload.MethodName} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.RaftControlPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.RaftControlPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.RaftControlPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftControlPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetleaderidrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database.GetLeaderIDRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetleaderidresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.database.GetLeaderIDResponse.serializeBinaryToWriter
    );
  }
  f = message.getIdrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.database.IdRequest.serializeBinaryToWriter
    );
  }
  f = message.getIdresponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.database.IdResponse.serializeBinaryToWriter
    );
  }
  f = message.getIndexstate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.database.IndexState.serializeBinaryToWriter
    );
  }
  f = message.getModifynoderequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.database.ModifyNodeRequest.serializeBinaryToWriter
    );
  }
  f = message.getReadindexrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.database.ReadIndexRequest.serializeBinaryToWriter
    );
  }
  f = message.getReadlocalnoderequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.database.ReadLocalNodeRequest.serializeBinaryToWriter
    );
  }
  f = message.getRequestleadertransferresponse();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.database.RequestLeaderTransferResponse.serializeBinaryToWriter
    );
  }
  f = message.getRequestsnapshotrequest();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.database.RequestSnapshotRequest.serializeBinaryToWriter
    );
  }
  f = message.getSnapshotoption();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.database.SnapshotOption.serializeBinaryToWriter
    );
  }
  f = message.getStopnoderesponse();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.database.StopNodeResponse.serializeBinaryToWriter
    );
  }
  f = message.getStoprequest();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.database.StopRequest.serializeBinaryToWriter
    );
  }
  f = message.getStopresponse();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.database.StopResponse.serializeBinaryToWriter
    );
  }
  f = message.getSysopstate();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.database.SysOpState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      api_v1_errors_pb.DBError.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.database.RaftControlPayload.MethodName = {
  ADD_NODE: 0,
  ADD_OBSERVER: 1,
  ADD_WITNESS: 2,
  GET_ID: 3,
  GET_LEADER_ID: 4,
  READ_INDEX: 5,
  READ_LOCAL_NODE: 6,
  REQUEST_COMPACTION: 7,
  REQUEST_DELETE_NODE: 8,
  REQUEST_LEADER_TRANSFER: 9,
  REQUEST_SNAPSHOT: 10,
  STOP: 11,
  STOP_NODE: 12
};

/**
 * optional GetLeaderIDRequest GetLeaderIdRequest = 1;
 * @return {?proto.database.GetLeaderIDRequest}
 */
proto.database.RaftControlPayload.prototype.getGetleaderidrequest = function() {
  return /** @type{?proto.database.GetLeaderIDRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.GetLeaderIDRequest, 1));
};


/**
 * @param {?proto.database.GetLeaderIDRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setGetleaderidrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearGetleaderidrequest = function() {
  return this.setGetleaderidrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasGetleaderidrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetLeaderIDResponse GetLeaderIdResponse = 2;
 * @return {?proto.database.GetLeaderIDResponse}
 */
proto.database.RaftControlPayload.prototype.getGetleaderidresponse = function() {
  return /** @type{?proto.database.GetLeaderIDResponse} */ (
    jspb.Message.getWrapperField(this, proto.database.GetLeaderIDResponse, 2));
};


/**
 * @param {?proto.database.GetLeaderIDResponse|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setGetleaderidresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearGetleaderidresponse = function() {
  return this.setGetleaderidresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasGetleaderidresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IdRequest IdRequest = 3;
 * @return {?proto.database.IdRequest}
 */
proto.database.RaftControlPayload.prototype.getIdrequest = function() {
  return /** @type{?proto.database.IdRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.IdRequest, 3));
};


/**
 * @param {?proto.database.IdRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setIdrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearIdrequest = function() {
  return this.setIdrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasIdrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IdResponse IdResponse = 4;
 * @return {?proto.database.IdResponse}
 */
proto.database.RaftControlPayload.prototype.getIdresponse = function() {
  return /** @type{?proto.database.IdResponse} */ (
    jspb.Message.getWrapperField(this, proto.database.IdResponse, 4));
};


/**
 * @param {?proto.database.IdResponse|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setIdresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearIdresponse = function() {
  return this.setIdresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasIdresponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IndexState IndexState = 5;
 * @return {?proto.database.IndexState}
 */
proto.database.RaftControlPayload.prototype.getIndexstate = function() {
  return /** @type{?proto.database.IndexState} */ (
    jspb.Message.getWrapperField(this, proto.database.IndexState, 5));
};


/**
 * @param {?proto.database.IndexState|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setIndexstate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearIndexstate = function() {
  return this.setIndexstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasIndexstate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ModifyNodeRequest ModifyNodeRequest = 6;
 * @return {?proto.database.ModifyNodeRequest}
 */
proto.database.RaftControlPayload.prototype.getModifynoderequest = function() {
  return /** @type{?proto.database.ModifyNodeRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.ModifyNodeRequest, 6));
};


/**
 * @param {?proto.database.ModifyNodeRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setModifynoderequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearModifynoderequest = function() {
  return this.setModifynoderequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasModifynoderequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReadIndexRequest ReadIndexRequest = 7;
 * @return {?proto.database.ReadIndexRequest}
 */
proto.database.RaftControlPayload.prototype.getReadindexrequest = function() {
  return /** @type{?proto.database.ReadIndexRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.ReadIndexRequest, 7));
};


/**
 * @param {?proto.database.ReadIndexRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setReadindexrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearReadindexrequest = function() {
  return this.setReadindexrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasReadindexrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ReadLocalNodeRequest ReadLocalNodeRequest = 8;
 * @return {?proto.database.ReadLocalNodeRequest}
 */
proto.database.RaftControlPayload.prototype.getReadlocalnoderequest = function() {
  return /** @type{?proto.database.ReadLocalNodeRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.ReadLocalNodeRequest, 8));
};


/**
 * @param {?proto.database.ReadLocalNodeRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setReadlocalnoderequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearReadlocalnoderequest = function() {
  return this.setReadlocalnoderequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasReadlocalnoderequest = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestLeaderTransferResponse RequestLeaderTransferResponse = 9;
 * @return {?proto.database.RequestLeaderTransferResponse}
 */
proto.database.RaftControlPayload.prototype.getRequestleadertransferresponse = function() {
  return /** @type{?proto.database.RequestLeaderTransferResponse} */ (
    jspb.Message.getWrapperField(this, proto.database.RequestLeaderTransferResponse, 9));
};


/**
 * @param {?proto.database.RequestLeaderTransferResponse|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setRequestleadertransferresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearRequestleadertransferresponse = function() {
  return this.setRequestleadertransferresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasRequestleadertransferresponse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestSnapshotRequest RequestSnapshotRequest = 10;
 * @return {?proto.database.RequestSnapshotRequest}
 */
proto.database.RaftControlPayload.prototype.getRequestsnapshotrequest = function() {
  return /** @type{?proto.database.RequestSnapshotRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.RequestSnapshotRequest, 10));
};


/**
 * @param {?proto.database.RequestSnapshotRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setRequestsnapshotrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearRequestsnapshotrequest = function() {
  return this.setRequestsnapshotrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasRequestsnapshotrequest = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SnapshotOption SnapshotOption = 12;
 * @return {?proto.database.SnapshotOption}
 */
proto.database.RaftControlPayload.prototype.getSnapshotoption = function() {
  return /** @type{?proto.database.SnapshotOption} */ (
    jspb.Message.getWrapperField(this, proto.database.SnapshotOption, 12));
};


/**
 * @param {?proto.database.SnapshotOption|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setSnapshotoption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearSnapshotoption = function() {
  return this.setSnapshotoption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasSnapshotoption = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StopNodeResponse StopNodeResponse = 13;
 * @return {?proto.database.StopNodeResponse}
 */
proto.database.RaftControlPayload.prototype.getStopnoderesponse = function() {
  return /** @type{?proto.database.StopNodeResponse} */ (
    jspb.Message.getWrapperField(this, proto.database.StopNodeResponse, 13));
};


/**
 * @param {?proto.database.StopNodeResponse|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setStopnoderesponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearStopnoderesponse = function() {
  return this.setStopnoderesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasStopnoderesponse = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional StopRequest StopRequest = 14;
 * @return {?proto.database.StopRequest}
 */
proto.database.RaftControlPayload.prototype.getStoprequest = function() {
  return /** @type{?proto.database.StopRequest} */ (
    jspb.Message.getWrapperField(this, proto.database.StopRequest, 14));
};


/**
 * @param {?proto.database.StopRequest|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setStoprequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearStoprequest = function() {
  return this.setStoprequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasStoprequest = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional StopResponse StopResponse = 15;
 * @return {?proto.database.StopResponse}
 */
proto.database.RaftControlPayload.prototype.getStopresponse = function() {
  return /** @type{?proto.database.StopResponse} */ (
    jspb.Message.getWrapperField(this, proto.database.StopResponse, 15));
};


/**
 * @param {?proto.database.StopResponse|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setStopresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearStopresponse = function() {
  return this.setStopresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasStopresponse = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SysOpState SysOpState = 16;
 * @return {?proto.database.SysOpState}
 */
proto.database.RaftControlPayload.prototype.getSysopstate = function() {
  return /** @type{?proto.database.SysOpState} */ (
    jspb.Message.getWrapperField(this, proto.database.SysOpState, 16));
};


/**
 * @param {?proto.database.SysOpState|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setSysopstate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearSysopstate = function() {
  return this.setSysopstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasSysopstate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional DBError Error = 18;
 * @return {?proto.database.DBError}
 */
proto.database.RaftControlPayload.prototype.getError = function() {
  return /** @type{?proto.database.DBError} */ (
    jspb.Message.getWrapperField(this, api_v1_errors_pb.DBError, 18));
};


/**
 * @param {?proto.database.DBError|undefined} value
 * @return {!proto.database.RaftControlPayload} returns this
*/
proto.database.RaftControlPayload.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.database.RaftControlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RaftControlPayload.prototype.hasError = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional MethodName Method = 17;
 * @return {!proto.database.RaftControlPayload.MethodName}
 */
proto.database.RaftControlPayload.prototype.getMethod = function() {
  return /** @type {!proto.database.RaftControlPayload.MethodName} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.database.RaftControlPayload.MethodName} value
 * @return {!proto.database.RaftControlPayload} returns this
 */
proto.database.RaftControlPayload.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StopNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StopNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StopNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StopNodeResponse}
 */
proto.database.StopNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StopNodeResponse;
  return proto.database.StopNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StopNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StopNodeResponse}
 */
proto.database.StopNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StopNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StopNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StopNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StopRequest}
 */
proto.database.StopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StopRequest;
  return proto.database.StopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StopRequest}
 */
proto.database.StopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StopResponse}
 */
proto.database.StopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StopResponse;
  return proto.database.StopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StopResponse}
 */
proto.database.StopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.RequestSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.RequestSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.RequestSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RequestSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    options: (f = msg.getOptions()) && proto.database.SnapshotOption.toObject(includeInstance, f),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.RequestSnapshotRequest}
 */
proto.database.RequestSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.RequestSnapshotRequest;
  return proto.database.RequestSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.RequestSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.RequestSnapshotRequest}
 */
proto.database.RequestSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = new proto.database.SnapshotOption;
      reader.readMessage(value,proto.database.SnapshotOption.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.RequestSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.RequestSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.RequestSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RequestSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.database.SnapshotOption.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.RequestSnapshotRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RequestSnapshotRequest} returns this
 */
proto.database.RequestSnapshotRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SnapshotOption options = 2;
 * @return {?proto.database.SnapshotOption}
 */
proto.database.RequestSnapshotRequest.prototype.getOptions = function() {
  return /** @type{?proto.database.SnapshotOption} */ (
    jspb.Message.getWrapperField(this, proto.database.SnapshotOption, 2));
};


/**
 * @param {?proto.database.SnapshotOption|undefined} value
 * @return {!proto.database.RequestSnapshotRequest} returns this
*/
proto.database.RequestSnapshotRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.RequestSnapshotRequest} returns this
 */
proto.database.RequestSnapshotRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.RequestSnapshotRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 timeout = 3;
 * @return {number}
 */
proto.database.RequestSnapshotRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RequestSnapshotRequest} returns this
 */
proto.database.RequestSnapshotRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.SnapshotOption.prototype.toObject = function(opt_includeInstance) {
  return proto.database.SnapshotOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.SnapshotOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.SnapshotOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    compactionoverhead: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exportpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    exported: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    overridecompactionoverhead: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.SnapshotOption}
 */
proto.database.SnapshotOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.SnapshotOption;
  return proto.database.SnapshotOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.SnapshotOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.SnapshotOption}
 */
proto.database.SnapshotOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompactionoverhead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExportpath(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExported(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverridecompactionoverhead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.SnapshotOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.SnapshotOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.SnapshotOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.SnapshotOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompactionoverhead();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getExportpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExported();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOverridecompactionoverhead();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 CompactionOverhead = 1;
 * @return {number}
 */
proto.database.SnapshotOption.prototype.getCompactionoverhead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.SnapshotOption} returns this
 */
proto.database.SnapshotOption.prototype.setCompactionoverhead = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ExportPath = 2;
 * @return {string}
 */
proto.database.SnapshotOption.prototype.getExportpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.SnapshotOption} returns this
 */
proto.database.SnapshotOption.prototype.setExportpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool Exported = 3;
 * @return {boolean}
 */
proto.database.SnapshotOption.prototype.getExported = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.SnapshotOption} returns this
 */
proto.database.SnapshotOption.prototype.setExported = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool OverrideCompactionOverhead = 4;
 * @return {boolean}
 */
proto.database.SnapshotOption.prototype.getOverridecompactionoverhead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.SnapshotOption} returns this
 */
proto.database.SnapshotOption.prototype.setOverridecompactionoverhead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.RequestLeaderTransferResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.RequestLeaderTransferResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.RequestLeaderTransferResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RequestLeaderTransferResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.RequestLeaderTransferResponse}
 */
proto.database.RequestLeaderTransferResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.RequestLeaderTransferResponse;
  return proto.database.RequestLeaderTransferResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.RequestLeaderTransferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.RequestLeaderTransferResponse}
 */
proto.database.RequestLeaderTransferResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.RequestLeaderTransferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.RequestLeaderTransferResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.RequestLeaderTransferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RequestLeaderTransferResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.SysOpState.prototype.toObject = function(opt_includeInstance) {
  return proto.database.SysOpState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.SysOpState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.SysOpState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.SysOpState}
 */
proto.database.SysOpState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.SysOpState;
  return proto.database.SysOpState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.SysOpState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.SysOpState}
 */
proto.database.SysOpState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.SysOpState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.SysOpState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.SysOpState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.SysOpState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.ModifyNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.ModifyNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.ModifyNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ModifyNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    target: jspb.Message.getFieldWithDefault(msg, 3, ""),
    configchangeindex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 5, 0),
    synchronous: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.ModifyNodeRequest}
 */
proto.database.ModifyNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.ModifyNodeRequest;
  return proto.database.ModifyNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.ModifyNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.ModifyNodeRequest}
 */
proto.database.ModifyNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigchangeindex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynchronous(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.ModifyNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.ModifyNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.ModifyNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ModifyNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.ModifyNodeRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearClusterid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasClusterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 nodeId = 2;
 * @return {number}
 */
proto.database.ModifyNodeRequest.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setNodeid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearNodeid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasNodeid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string target = 3;
 * @return {string}
 */
proto.database.ModifyNodeRequest.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setTarget = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearTarget = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 configChangeIndex = 4;
 * @return {number}
 */
proto.database.ModifyNodeRequest.prototype.getConfigchangeindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setConfigchangeindex = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearConfigchangeindex = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasConfigchangeindex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 timeout = 5;
 * @return {number}
 */
proto.database.ModifyNodeRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearTimeout = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool synchronous = 6;
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.getSynchronous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.setSynchronous = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.ModifyNodeRequest} returns this
 */
proto.database.ModifyNodeRequest.prototype.clearSynchronous = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ModifyNodeRequest.prototype.hasSynchronous = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.ReadLocalNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.ReadLocalNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.ReadLocalNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ReadLocalNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && api_v1_database_kv_pb.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.ReadLocalNodeRequest}
 */
proto.database.ReadLocalNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.ReadLocalNodeRequest;
  return proto.database.ReadLocalNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.ReadLocalNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.ReadLocalNodeRequest}
 */
proto.database.ReadLocalNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_v1_database_kv_pb.KeyValue;
      reader.readMessage(value,api_v1_database_kv_pb.KeyValue.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.ReadLocalNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.ReadLocalNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.ReadLocalNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ReadLocalNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_v1_database_kv_pb.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValue query = 1;
 * @return {?proto.database.KeyValue}
 */
proto.database.ReadLocalNodeRequest.prototype.getQuery = function() {
  return /** @type{?proto.database.KeyValue} */ (
    jspb.Message.getWrapperField(this, api_v1_database_kv_pb.KeyValue, 1));
};


/**
 * @param {?proto.database.KeyValue|undefined} value
 * @return {!proto.database.ReadLocalNodeRequest} returns this
*/
proto.database.ReadLocalNodeRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.ReadLocalNodeRequest} returns this
 */
proto.database.ReadLocalNodeRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.ReadLocalNodeRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.ReadIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.ReadIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.ReadIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ReadIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.ReadIndexRequest}
 */
proto.database.ReadIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.ReadIndexRequest;
  return proto.database.ReadIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.ReadIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.ReadIndexRequest}
 */
proto.database.ReadIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.ReadIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.ReadIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.ReadIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ReadIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.ReadIndexRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ReadIndexRequest} returns this
 */
proto.database.ReadIndexRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 timeout = 2;
 * @return {number}
 */
proto.database.ReadIndexRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ReadIndexRequest} returns this
 */
proto.database.ReadIndexRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.IndexState.prototype.toObject = function(opt_includeInstance) {
  return proto.database.IndexState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.IndexState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IndexState.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    snapshotindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    results: (f = msg.getResults()) && proto.database.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.IndexState}
 */
proto.database.IndexState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.IndexState;
  return proto.database.IndexState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.IndexState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.IndexState}
 */
proto.database.IndexState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.database.IndexState.ResultCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSnapshotindex(value);
      break;
    case 3:
      var value = new proto.database.Result;
      reader.readMessage(value,proto.database.Result.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.IndexState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.IndexState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.IndexState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IndexState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSnapshotindex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.database.Result.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.database.IndexState.ResultCode = {
  TIMEOUT: 0,
  COMPLETED: 1,
  TERMINATED: 2,
  REJECTED: 3,
  DROPPED: 4,
  ABORTED: 5,
  COMMITTED: 6
};

/**
 * optional ResultCode Status = 1;
 * @return {!proto.database.IndexState.ResultCode}
 */
proto.database.IndexState.prototype.getStatus = function() {
  return /** @type {!proto.database.IndexState.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.database.IndexState.ResultCode} value
 * @return {!proto.database.IndexState} returns this
 */
proto.database.IndexState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 SnapshotIndex = 2;
 * @return {number}
 */
proto.database.IndexState.prototype.getSnapshotindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.IndexState} returns this
 */
proto.database.IndexState.prototype.setSnapshotindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Result Results = 3;
 * @return {?proto.database.Result}
 */
proto.database.IndexState.prototype.getResults = function() {
  return /** @type{?proto.database.Result} */ (
    jspb.Message.getWrapperField(this, proto.database.Result, 3));
};


/**
 * @param {?proto.database.Result|undefined} value
 * @return {!proto.database.IndexState} returns this
*/
proto.database.IndexState.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.IndexState} returns this
 */
proto.database.IndexState.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.IndexState.prototype.hasResults = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.database.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.Result}
 */
proto.database.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.Result;
  return proto.database.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.Result}
 */
proto.database.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 Value = 1;
 * @return {number}
 */
proto.database.Result.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.Result} returns this
 */
proto.database.Result.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.database.Result.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.database.Result.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.database.Result.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.database.Result} returns this
 */
proto.database.Result.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.IdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.IdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.IdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.IdRequest}
 */
proto.database.IdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.IdRequest;
  return proto.database.IdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.IdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.IdRequest}
 */
proto.database.IdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.IdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.IdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.IdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.IdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.IdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.IdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.IdResponse}
 */
proto.database.IdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.IdResponse;
  return proto.database.IdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.IdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.IdResponse}
 */
proto.database.IdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.IdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.IdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.IdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.IdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.database.IdResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.IdResponse} returns this
 */
proto.database.IdResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetLeaderIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetLeaderIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetLeaderIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetLeaderIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetLeaderIDRequest}
 */
proto.database.GetLeaderIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetLeaderIDRequest;
  return proto.database.GetLeaderIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetLeaderIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetLeaderIDRequest}
 */
proto.database.GetLeaderIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetLeaderIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetLeaderIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetLeaderIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetLeaderIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.GetLeaderIDRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GetLeaderIDRequest} returns this
 */
proto.database.GetLeaderIDRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetLeaderIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetLeaderIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetLeaderIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetLeaderIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isleader: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetLeaderIDResponse}
 */
proto.database.GetLeaderIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetLeaderIDResponse;
  return proto.database.GetLeaderIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetLeaderIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetLeaderIDResponse}
 */
proto.database.GetLeaderIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLeaderid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsleader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetLeaderIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetLeaderIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetLeaderIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetLeaderIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsleader();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint64 leaderId = 1;
 * @return {number}
 */
proto.database.GetLeaderIDResponse.prototype.getLeaderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GetLeaderIDResponse} returns this
 */
proto.database.GetLeaderIDResponse.prototype.setLeaderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isLeader = 2;
 * @return {boolean}
 */
proto.database.GetLeaderIDResponse.prototype.getIsleader = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.GetLeaderIDResponse} returns this
 */
proto.database.GetLeaderIDResponse.prototype.setIsleader = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.database);
