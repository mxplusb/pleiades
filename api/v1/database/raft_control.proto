syntax = "proto3";
package database;

// this is relative to the root of the repo
import "api/v1/database/kv.proto";

option go_package = "./database";

message RaftControlPayload {
  oneof Types {
    GetLeaderIDRequest GetLeaderIdRequest = 1;
    GetLeaderIDResponse GetLeaderIdResponse = 2;
    IdRequest IdRequest = 3;
    IdResponse IdResponse = 4;
    IndexState IndexState = 5;
    ModifyNodeRequest ModifyNodeRequest = 6;
    ReadIndexRequest ReadIndexRequest = 7;
    ReadLocalNodeRequest ReadLocalNodeRequest = 8;
    RequestLeaderTransferResponse RequestLeaderTransferResponse = 9;
    RequestSnapshotRequest RequestSnapshotRequest = 10;
    SnapshotOption SnapshotOption = 12;
    StopNodeResponse StopNodeResponse = 13;
    StopRequest StopRequest = 14;
    StopResponse StopResponse = 15;
    SysOpState SysOpState = 16;
  }
  enum MethodName {
      ADD_NODE = 0;
      ADD_OBSERVER = 1;
      ADD_WITNESS = 2;
      GET_ID = 3;
      GET_LEADER_ID = 4;
      READ_INDEX = 5;
      READ_LOCAL_NODE = 6;
      REQUEST_COMPACTION = 7;
      REQUEST_DELETE_NODE = 8;
      REQUEST_LEADER_TRANSFER = 9;
      REQUEST_SNAPSHOT = 10;
      STOP = 11;
      STOP_NODE = 12;
  }
  MethodName Method = 17;
}

message StopNodeResponse {}

message StopRequest {}

message StopResponse {}

message RequestSnapshotRequest {
  uint64 clusterId = 1;
  SnapshotOption options = 2;
  int64 timeout = 3;
}

// SnapshotOption is the options users can specify when requesting a snapshot
// to be generated.
message SnapshotOption {
  // CompactionOverhead is the compaction overhead value to use for the request
  // snapshot operation when OverrideCompactionOverhead is true. This field is
  // ignored when exporting a snapshot, that is when Exported is true.
  uint64 CompactionOverhead = 1;
  // ExportPath is the path where the exported snapshot should be stored, it
  // must point to an existing directory for which the current user has write
  // permission to it.
  string ExportPath = 2;
  // Exported is a boolean flag indicating whether the snapshot requested to
  // be generated should be exported. For an exported snapshot, it is users'
  // responsibility to manage the snapshot files. By default, a requested
  // snapshot is not considered as exported, such a regular snapshot is managed
  // the system.
  bool Exported = 3;
  // OverrideCompactionOverhead defines whether the requested snapshot operation
  // should override the compaction overhead setting specified in node's config.
  // This field is ignored by the system when exporting a snapshot.
  bool OverrideCompactionOverhead = 4;
}

// RequestLeaderTransferResponse is the response to a NodeHostService.RequestLeaderTransfer call
message RequestLeaderTransferResponse {}

// SysOpState is the object used to provide system maintenance operation result
// to users.
message SysOpState {}

// ModifyNodeRequest is the object used to modify the node's configuration. All fields are optional and not all methods require all fields to be set.
message ModifyNodeRequest {
  optional uint64 clusterId = 1;
  optional uint64 nodeId = 2;
  optional string target = 3;
  optional uint64 configChangeIndex = 4;
  optional int64 timeout = 5;
  optional bool synchronous = 6;
}

message ReadLocalNodeRequest {
  KeyValue query = 1;
}

message ReadIndexRequest {
  uint64 clusterId = 1;
  int64 timeout = 2;
}

message IndexState {
  enum ResultCode {
    Timeout = 0;
    Completed = 1;
    Terminated = 2;
    Rejected = 3;
    Dropped = 4;
    Aborted = 5;
    Committed = 6;
  }
  ResultCode Status = 1;
  uint64 SnapshotIndex = 2;
  optional Result Results = 3;
}

message Result  {
  uint64 Value = 1;
  bytes Data = 2;
}

message IdRequest {}

message IdResponse {
  string id = 1;
}

message GetLeaderIDRequest {
  uint64 clusterId = 1;
}

message GetLeaderIDResponse {
  uint64 leaderId = 1;
  bool isLeader = 2;
}