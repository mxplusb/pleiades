syntax = "proto3";
package database;

// this is relative to the root of the repo
import "api/v1/database/kv.proto";

option go_package = "./database";

// RaftControlService represents the Raft control plane for a given host
service RaftControlService {
  // GetLeaderID returns the leader node ID of the specified Raft cluster based on local node's knowledge.
  rpc GetLeaderID(GetLeaderIDRequest) returns (GetLeaderIDResponse);
  // ID returns the string representation of the NodeHost ID value. The NodeHost ID is assigned to each NodeHost on its initial creation and it can be used to uniquely identify the NodeHost instance for its entire life cycle. When the system is running in the AddressByNodeHost mode, it is used as the target value when calling the StartCluster, RequestAddNode, RequestAddObserver, RequestAddWitness methods.
  rpc GetID(IdRequest) returns (IdResponse);
  rpc ReadIndex(ReadIndexRequest) returns (stream IndexState);
  rpc ReadLocalNode(ReadLocalNodeRequest) returns (KeyValue);
  rpc AddNode(ModifyNodeRequest) returns (stream IndexState);
  rpc AddObserver(ModifyNodeRequest) returns (stream IndexState);
  rpc AddWitness(ModifyNodeRequest) returns (stream IndexState);
  // RequestCompaction requests a compaction operation to be asynchronously
  // executed in the background to reclaim disk spaces used by Raft Log entries
  // that have already been marked as removed. This includes Raft Log entries
  // that have already been included in created snapshots and Raft Log entries
  // that belong to nodes already permanently removed.
  //
  // By default, compaction is automatically issued after each snapshot is
  // captured. RequestCompaction can be used to manually trigger such compaction
  // when auto compaction is disabled by the DisableAutoCompactions option in
  // config.Config.
  //
  // The returned SysOpState instance can be used to get notified when the
  // requested compaction is completed. ErrRejected is returned when there is
  // nothing to be reclaimed.
  rpc RequestCompaction(ModifyNodeRequest) returns (SysOpState);

  // RequestDeleteNode is a Raft cluster membership change method for requesting
  // the specified node to be removed from the specified Raft cluster. It starts
  // an asynchronous request to remove the node from the Raft cluster membership
  // list. Applications can wait on the stream of the returned
  // IndexState instance to get notified for the outcome.
  //
  // It is not guaranteed that deleted node will automatically close itself and
  // be removed from its managing NodeHost instance. It is application's
  // responsibility to call RemoveCluster on the right NodeHost instance to
  // actually have the cluster node removed from its managing NodeHost instance.
  //
  // Once a node is successfully deleted from a Raft cluster, it will not be
  // allowed to be added back to the cluster with the same node identity.
  //
  // When the raft cluster is created with the OrderedConfigChange config flag
  // set as false, the configChangeIndex parameter is ignored. Otherwise, it
  // should be set to the most recent Config Change Index value returned by the
  // RaftClusterService.GetClusterMembership method. The requested delete node
  // operation will be rejected if other membership change has been applied since
  // that earlier call to the RaftClusterService.GetClusterMembership method.
  rpc RequestDeleteNode(ModifyNodeRequest) returns (stream IndexState);
  rpc RequestLeaderTransfer(ModifyNodeRequest) returns (RequestLeaderTransferResponse);
  rpc RequestSnapshot(RequestSnapshotRequest) returns (stream IndexState);
  rpc Stop(StopRequest) returns (StopResponse);
  //  StopNode removes the specified Raft cluster node from the NodeHost and stops that running Raft node.
  //
  //  Note: this is not the membership change operation to remove the node from the Raft cluster.
  rpc StopNode(ModifyNodeRequest) returns (StopNodeResponse);
}

message StopNodeResponse {}

message StopRequest {}

message StopResponse {}

message RequestSnapshotRequest {
  uint64 clusterId = 1;
  SnapshotOption options = 2;
  int64 timeout = 3;
}

// SnapshotOption is the options users can specify when requesting a snapshot
// to be generated.
message SnapshotOption {
  // CompactionOverhead is the compaction overhead value to use for the request
  // snapshot operation when OverrideCompactionOverhead is true. This field is
  // ignored when exporting a snapshot, that is when Exported is true.
  uint64 CompactionOverhead = 1;
  // ExportPath is the path where the exported snapshot should be stored, it
  // must point to an existing directory for which the current user has write
  // permission to it.
  string ExportPath = 2;
  // Exported is a boolean flag indicating whether the snapshot requested to
  // be generated should be exported. For an exported snapshot, it is users'
  // responsibility to manage the snapshot files. By default, a requested
  // snapshot is not considered as exported, such a regular snapshot is managed
  // the system.
  bool Exported = 3;
  // OverrideCompactionOverhead defines whether the requested snapshot operation
  // should override the compaction overhead setting specified in node's config.
  // This field is ignored by the system when exporting a snapshot.
  bool OverrideCompactionOverhead = 4;
}

// RequestLeaderTransferResponse is the response to a NodeHostService.RequestLeaderTransfer call
message RequestLeaderTransferResponse {}

// SysOpState is the object used to provide system maintenance operation result
// to users.
message SysOpState {}

// ModifyNodeRequest is the object used to modify the node's configuration. All fields are optional and not all methods require all fields to be set.
message ModifyNodeRequest {
  optional uint64 clusterId = 1;
  optional uint64 nodeId = 2;
  optional string target = 3;
  optional uint64 configChangeIndex = 4;
  optional int64 timeout = 5;
  optional bool synchronous = 6;
}

message ReadLocalNodeRequest {
  KeyValue query = 1;
}

message ReadIndexRequest {
  uint64 clusterId = 1;
  int64 timeout = 2;
}

message IndexState {
  enum ResultCode {
    Timeout = 0;
    Completed = 1;
    Terminated = 2;
    Rejected = 3;
    Dropped = 4;
    Aborted = 5;
    Committed = 6;
  }
  ResultCode Status = 1;
  uint64 SnapshotIndex = 2;
  optional Result Results = 3;
}

message Result  {
  uint64 Value = 1;
  bytes Data = 2;
}

message IdRequest {}

message IdResponse {
  string id = 1;
}

message GetLeaderIDRequest {
  uint64 clusterId = 1;
}

message GetLeaderIDResponse {
  uint64 leaderId = 1;
  bool isLeader = 2;
}