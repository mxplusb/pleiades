// source: api/v1/database/raft_cluster.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.database.GetClusterMembershipRequest', null, global);
goog.exportSymbol('proto.database.GetClusterMembershipResponse', null, global);
goog.exportSymbol('proto.database.NilVal', null, global);
goog.exportSymbol('proto.database.RaftConfig', null, global);
goog.exportSymbol('proto.database.RaftMembership', null, global);
goog.exportSymbol('proto.database.StartClusterRequest', null, global);
goog.exportSymbol('proto.database.StartClusterResponse', null, global);
goog.exportSymbol('proto.database.StopClusterRequest', null, global);
goog.exportSymbol('proto.database.StopClusterResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetClusterMembershipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetClusterMembershipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetClusterMembershipRequest.displayName = 'proto.database.GetClusterMembershipRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetClusterMembershipResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetClusterMembershipResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetClusterMembershipResponse.displayName = 'proto.database.GetClusterMembershipResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.RaftMembership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.RaftMembership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.RaftMembership.displayName = 'proto.database.RaftMembership';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.NilVal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.NilVal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.NilVal.displayName = 'proto.database.NilVal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StopClusterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StopClusterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StopClusterRequest.displayName = 'proto.database.StopClusterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StopClusterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StopClusterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StopClusterResponse.displayName = 'proto.database.StopClusterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StartClusterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StartClusterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StartClusterRequest.displayName = 'proto.database.StartClusterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.StartClusterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.StartClusterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.StartClusterResponse.displayName = 'proto.database.StartClusterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.RaftConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.RaftConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.RaftConfig.displayName = 'proto.database.RaftConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetClusterMembershipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetClusterMembershipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetClusterMembershipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetClusterMembershipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetClusterMembershipRequest}
 */
proto.database.GetClusterMembershipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetClusterMembershipRequest;
  return proto.database.GetClusterMembershipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetClusterMembershipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetClusterMembershipRequest}
 */
proto.database.GetClusterMembershipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetClusterMembershipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetClusterMembershipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetClusterMembershipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetClusterMembershipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.GetClusterMembershipRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GetClusterMembershipRequest} returns this
 */
proto.database.GetClusterMembershipRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetClusterMembershipResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetClusterMembershipResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetClusterMembershipResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetClusterMembershipResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    membership: (f = msg.getMembership()) && proto.database.RaftMembership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetClusterMembershipResponse}
 */
proto.database.GetClusterMembershipResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetClusterMembershipResponse;
  return proto.database.GetClusterMembershipResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetClusterMembershipResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetClusterMembershipResponse}
 */
proto.database.GetClusterMembershipResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database.RaftMembership;
      reader.readMessage(value,proto.database.RaftMembership.deserializeBinaryFromReader);
      msg.setMembership(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetClusterMembershipResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetClusterMembershipResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetClusterMembershipResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetClusterMembershipResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembership();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database.RaftMembership.serializeBinaryToWriter
    );
  }
};


/**
 * optional RaftMembership membership = 1;
 * @return {?proto.database.RaftMembership}
 */
proto.database.GetClusterMembershipResponse.prototype.getMembership = function() {
  return /** @type{?proto.database.RaftMembership} */ (
    jspb.Message.getWrapperField(this, proto.database.RaftMembership, 1));
};


/**
 * @param {?proto.database.RaftMembership|undefined} value
 * @return {!proto.database.GetClusterMembershipResponse} returns this
*/
proto.database.GetClusterMembershipResponse.prototype.setMembership = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.GetClusterMembershipResponse} returns this
 */
proto.database.GetClusterMembershipResponse.prototype.clearMembership = function() {
  return this.setMembership(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetClusterMembershipResponse.prototype.hasMembership = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.RaftMembership.prototype.toObject = function(opt_includeInstance) {
  return proto.database.RaftMembership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.RaftMembership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftMembership.toObject = function(includeInstance, msg) {
  var f, obj = {
    configchangeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, undefined) : [],
    observersMap: (f = msg.getObserversMap()) ? f.toObject(includeInstance, undefined) : [],
    witnessesMap: (f = msg.getWitnessesMap()) ? f.toObject(includeInstance, undefined) : [],
    removedMap: (f = msg.getRemovedMap()) ? f.toObject(includeInstance, proto.database.NilVal.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.RaftMembership}
 */
proto.database.RaftMembership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.RaftMembership;
  return proto.database.RaftMembership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.RaftMembership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.RaftMembership}
 */
proto.database.RaftMembership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigchangeid(value);
      break;
    case 2:
      var value = msg.getNodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 3:
      var value = msg.getObserversMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 4:
      var value = msg.getWitnessesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 5:
      var value = msg.getRemovedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.database.NilVal.deserializeBinaryFromReader, 0, new proto.database.NilVal());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.RaftMembership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.RaftMembership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.RaftMembership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftMembership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigchangeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getObserversMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getWitnessesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRemovedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.database.NilVal.serializeBinaryToWriter);
  }
};


/**
 * optional uint64 ConfigChangeID = 1;
 * @return {number}
 */
proto.database.RaftMembership.prototype.getConfigchangeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftMembership} returns this
 */
proto.database.RaftMembership.prototype.setConfigchangeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<uint64, string> Nodes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.database.RaftMembership.prototype.getNodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.RaftMembership} returns this
 */
proto.database.RaftMembership.prototype.clearNodesMap = function() {
  this.getNodesMap().clear();
  return this;};


/**
 * map<uint64, string> Observers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.database.RaftMembership.prototype.getObserversMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.RaftMembership} returns this
 */
proto.database.RaftMembership.prototype.clearObserversMap = function() {
  this.getObserversMap().clear();
  return this;};


/**
 * map<uint64, string> Witnesses = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.database.RaftMembership.prototype.getWitnessesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.RaftMembership} returns this
 */
proto.database.RaftMembership.prototype.clearWitnessesMap = function() {
  this.getWitnessesMap().clear();
  return this;};


/**
 * map<uint64, NilVal> Removed = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.database.NilVal>}
 */
proto.database.RaftMembership.prototype.getRemovedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.database.NilVal>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.database.NilVal));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.RaftMembership} returns this
 */
proto.database.RaftMembership.prototype.clearRemovedMap = function() {
  this.getRemovedMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.NilVal.prototype.toObject = function(opt_includeInstance) {
  return proto.database.NilVal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.NilVal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NilVal.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.NilVal}
 */
proto.database.NilVal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.NilVal;
  return proto.database.NilVal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.NilVal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.NilVal}
 */
proto.database.NilVal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.NilVal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.NilVal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.NilVal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NilVal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StopClusterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StopClusterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StopClusterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopClusterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StopClusterRequest}
 */
proto.database.StopClusterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StopClusterRequest;
  return proto.database.StopClusterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StopClusterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StopClusterRequest}
 */
proto.database.StopClusterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StopClusterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StopClusterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StopClusterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopClusterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 clusterId = 1;
 * @return {number}
 */
proto.database.StopClusterRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.StopClusterRequest} returns this
 */
proto.database.StopClusterRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StopClusterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StopClusterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StopClusterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopClusterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StopClusterResponse}
 */
proto.database.StopClusterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StopClusterResponse;
  return proto.database.StopClusterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StopClusterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StopClusterResponse}
 */
proto.database.StopClusterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StopClusterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StopClusterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StopClusterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StopClusterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StartClusterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StartClusterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StartClusterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StartClusterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialmembersMap: (f = msg.getInitialmembersMap()) ? f.toObject(includeInstance, undefined) : [],
    join: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    raftconfig: (f = msg.getRaftconfig()) && proto.database.RaftConfig.toObject(includeInstance, f),
    concurrent: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    ondisk: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StartClusterRequest}
 */
proto.database.StartClusterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StartClusterRequest;
  return proto.database.StartClusterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StartClusterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StartClusterRequest}
 */
proto.database.StartClusterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getInitialmembersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJoin(value);
      break;
    case 3:
      var value = new proto.database.RaftConfig;
      reader.readMessage(value,proto.database.RaftConfig.deserializeBinaryFromReader);
      msg.setRaftconfig(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConcurrent(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOndisk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StartClusterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StartClusterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StartClusterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StartClusterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialmembersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getJoin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRaftconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.database.RaftConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * map<uint64, string> initialMembers = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.database.StartClusterRequest.prototype.getInitialmembersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.clearInitialmembersMap = function() {
  this.getInitialmembersMap().clear();
  return this;};


/**
 * optional bool join = 2;
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.getJoin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.setJoin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional RaftConfig raftConfig = 3;
 * @return {?proto.database.RaftConfig}
 */
proto.database.StartClusterRequest.prototype.getRaftconfig = function() {
  return /** @type{?proto.database.RaftConfig} */ (
    jspb.Message.getWrapperField(this, proto.database.RaftConfig, 3));
};


/**
 * @param {?proto.database.RaftConfig|undefined} value
 * @return {!proto.database.StartClusterRequest} returns this
*/
proto.database.StartClusterRequest.prototype.setRaftconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.clearRaftconfig = function() {
  return this.setRaftconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.hasRaftconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool concurrent = 4;
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.getConcurrent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.setConcurrent = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.clearConcurrent = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.hasConcurrent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool onDisk = 5;
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.getOndisk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.setOndisk = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.StartClusterRequest} returns this
 */
proto.database.StartClusterRequest.prototype.clearOndisk = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.StartClusterRequest.prototype.hasOndisk = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.StartClusterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.StartClusterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.StartClusterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StartClusterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.StartClusterResponse}
 */
proto.database.StartClusterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.StartClusterResponse;
  return proto.database.StartClusterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.StartClusterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.StartClusterResponse}
 */
proto.database.StartClusterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.StartClusterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.StartClusterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.StartClusterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.StartClusterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.RaftConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.database.RaftConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.RaftConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clusterid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    checkquorum: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    electionroundtriptime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heartbeatroundtriptime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    snapshotentries: jspb.Message.getFieldWithDefault(msg, 6, 0),
    compactionoverhead: jspb.Message.getFieldWithDefault(msg, 7, 0),
    orderedconfigchange: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    maxinmemlogsize: jspb.Message.getFieldWithDefault(msg, 9, 0),
    snapshotcompressiontype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    entrycompressiontype: jspb.Message.getFieldWithDefault(msg, 11, 0),
    disableautocompactions: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    isobserver: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswitness: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    quiesce: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.RaftConfig}
 */
proto.database.RaftConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.RaftConfig;
  return proto.database.RaftConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.RaftConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.RaftConfig}
 */
proto.database.RaftConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckquorum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setElectionroundtriptime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeartbeatroundtriptime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSnapshotentries(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompactionoverhead(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOrderedconfigchange(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxinmemlogsize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnapshotcompressiontype(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntrycompressiontype(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableautocompactions(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsobserver(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswitness(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuiesce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.RaftConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.RaftConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.RaftConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.RaftConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCheckquorum();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getElectionroundtriptime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeartbeatroundtriptime();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSnapshotentries();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getCompactionoverhead();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getOrderedconfigchange();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMaxinmemlogsize();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getSnapshotcompressiontype();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getEntrycompressiontype();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDisableautocompactions();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIsobserver();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswitness();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getQuiesce();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional uint64 NodeID = 1;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 ClusterID = 2;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool CheckQuorum = 3;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getCheckquorum = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setCheckquorum = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint64 ElectionRoundTripTime = 4;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getElectionroundtriptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setElectionroundtriptime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 HeartbeatRoundTripTime = 5;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getHeartbeatroundtriptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setHeartbeatroundtriptime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 SnapshotEntries = 6;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getSnapshotentries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setSnapshotentries = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 CompactionOverhead = 7;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getCompactionoverhead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setCompactionoverhead = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool OrderedConfigChange = 8;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getOrderedconfigchange = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setOrderedconfigchange = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 MaxInMemLogSize = 9;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getMaxinmemlogsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setMaxinmemlogsize = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 SnapshotCompressionType = 10;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getSnapshotcompressiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setSnapshotcompressiontype = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 EntryCompressionType = 11;
 * @return {number}
 */
proto.database.RaftConfig.prototype.getEntrycompressiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setEntrycompressiontype = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool DisableAutoCompactions = 12;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getDisableautocompactions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setDisableautocompactions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsObserver = 13;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getIsobserver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setIsobserver = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWitness = 14;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getIswitness = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setIswitness = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool Quiesce = 15;
 * @return {boolean}
 */
proto.database.RaftConfig.prototype.getQuiesce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.RaftConfig} returns this
 */
proto.database.RaftConfig.prototype.setQuiesce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


goog.object.extend(exports, proto.database);
