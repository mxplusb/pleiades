// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.8.6
// source: api/v1/database/client.proto

package database

import (
	context "context"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCDatabaseClient interface {
	SRPCClient() srpc.Client

	NewSession(ctx context.Context, in *NewSessionRequest) (*NewSessionResponse, error)
	CloseSession(ctx context.Context, in *Session) (*Session, error)
	Propose(ctx context.Context, in *ProposeRequest) (*ProposeResponse, error)
}

type srpcDatabaseClient struct {
	cc srpc.Client
}

func NewSRPCDatabaseClient(cc srpc.Client) SRPCDatabaseClient {
	return &srpcDatabaseClient{cc}
}

func (c *srpcDatabaseClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcDatabaseClient) NewSession(ctx context.Context, in *NewSessionRequest) (*NewSessionResponse, error) {
	out := new(NewSessionResponse)
	err := c.cc.Invoke(ctx, "database.Database", "NewSession", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcDatabaseClient) CloseSession(ctx context.Context, in *Session) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "database.Database", "CloseSession", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcDatabaseClient) Propose(ctx context.Context, in *ProposeRequest) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, "database.Database", "Propose", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCDatabaseServer interface {
	NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error)
	CloseSession(context.Context, *Session) (*Session, error)
	Propose(context.Context, *ProposeRequest) (*ProposeResponse, error)
}

type SRPCDatabaseUnimplementedServer struct{}

func (s *SRPCDatabaseUnimplementedServer) NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCDatabaseUnimplementedServer) CloseSession(context.Context, *Session) (*Session, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCDatabaseUnimplementedServer) Propose(context.Context, *ProposeRequest) (*ProposeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCDatabaseServiceID = "database.Database"

type SRPCDatabaseHandler struct {
	impl SRPCDatabaseServer
}

func (SRPCDatabaseHandler) GetServiceID() string { return SRPCDatabaseServiceID }

func (SRPCDatabaseHandler) GetMethodIDs() []string {
	return []string{
		"NewSession",
		"CloseSession",
		"Propose",
	}
}

func (d *SRPCDatabaseHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "NewSession":
		return true, d.InvokeMethod_NewSession(d.impl, strm)
	case "CloseSession":
		return true, d.InvokeMethod_CloseSession(d.impl, strm)
	case "Propose":
		return true, d.InvokeMethod_Propose(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCDatabaseHandler) InvokeMethod_NewSession(impl SRPCDatabaseServer, strm srpc.Stream) error {
	req := new(NewSessionRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NewSession(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCDatabaseHandler) InvokeMethod_CloseSession(impl SRPCDatabaseServer, strm srpc.Stream) error {
	req := new(Session)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.CloseSession(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCDatabaseHandler) InvokeMethod_Propose(impl SRPCDatabaseServer, strm srpc.Stream) error {
	req := new(ProposeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.Propose(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func SRPCRegisterDatabase(mux srpc.Mux, impl SRPCDatabaseServer) error {
	return mux.Register(&SRPCDatabaseHandler{impl: impl})
}

type SRPCDatabase_NewSessionStream interface {
	srpc.Stream
	SendAndClose(*NewSessionResponse) error
}

type srpcDatabase_NewSessionStream struct {
	srpc.Stream
}

func (x *srpcDatabase_NewSessionStream) SendAndClose(m *NewSessionResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCDatabase_CloseSessionStream interface {
	srpc.Stream
	SendAndClose(*Session) error
}

type srpcDatabase_CloseSessionStream struct {
	srpc.Stream
}

func (x *srpcDatabase_CloseSessionStream) SendAndClose(m *Session) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCDatabase_ProposeStream interface {
	srpc.Stream
	SendAndClose(*ProposeResponse) error
}

type srpcDatabase_ProposeStream struct {
	srpc.Stream
}

func (x *srpcDatabase_ProposeStream) SendAndClose(m *ProposeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
