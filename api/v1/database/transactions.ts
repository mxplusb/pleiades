/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: api/v1/database/transactions.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace database {
    export class CloseTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            timeout?: number;
        }): CloseTransactionRequest {
            const message = new CloseTransactionRequest({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
                timeout?: number;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (this.timeout != 0)
                writer.writeInt64(2, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloseTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    case 2:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloseTransactionRequest {
            return CloseTransactionRequest.deserialize(bytes);
        }
    }
    export class CloseTransactionReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            timeout?: number;
        }): CloseTransactionReply {
            const message = new CloseTransactionReply({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
                timeout?: number;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (this.timeout != 0)
                writer.writeInt64(2, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseTransactionReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloseTransactionReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    case 2:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloseTransactionReply {
            return CloseTransactionReply.deserialize(bytes);
        }
    }
    export class CommitRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
        }): CommitRequest {
            const message = new CommitRequest({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitRequest {
            return CommitRequest.deserialize(bytes);
        }
    }
    export class CommitReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
        }): CommitReply {
            const message = new CommitReply({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitReply {
            return CommitReply.deserialize(bytes);
        }
    }
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shard_id?: number;
            client_id?: number;
            transaction_id?: number;
            responded_to?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shard_id" in data && data.shard_id != undefined) {
                    this.shard_id = data.shard_id;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("responded_to" in data && data.responded_to != undefined) {
                    this.responded_to = data.responded_to;
                }
            }
        }
        get shard_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shard_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set transaction_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get responded_to() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set responded_to(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            shard_id?: number;
            client_id?: number;
            transaction_id?: number;
            responded_to?: number;
        }): Transaction {
            const message = new Transaction({});
            if (data.shard_id != null) {
                message.shard_id = data.shard_id;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.responded_to != null) {
                message.responded_to = data.responded_to;
            }
            return message;
        }
        toObject() {
            const data: {
                shard_id?: number;
                client_id?: number;
                transaction_id?: number;
                responded_to?: number;
            } = {};
            if (this.shard_id != null) {
                data.shard_id = this.shard_id;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.responded_to != null) {
                data.responded_to = this.responded_to;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shard_id != 0)
                writer.writeUint64(1, this.shard_id);
            if (this.client_id != 0)
                writer.writeUint64(2, this.client_id);
            if (this.transaction_id != 0)
                writer.writeUint64(3, this.transaction_id);
            if (this.responded_to != 0)
                writer.writeUint64(4, this.responded_to);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shard_id = reader.readUint64();
                        break;
                    case 2:
                        message.client_id = reader.readUint64();
                        break;
                    case 3:
                        message.transaction_id = reader.readUint64();
                        break;
                    case 4:
                        message.responded_to = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export class NewTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shard_id?: number;
            client_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shard_id" in data && data.shard_id != undefined) {
                    this.shard_id = data.shard_id;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
            }
        }
        get shard_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set shard_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            shard_id?: number;
            client_id?: number;
        }): NewTransactionRequest {
            const message = new NewTransactionRequest({});
            if (data.shard_id != null) {
                message.shard_id = data.shard_id;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            return message;
        }
        toObject() {
            const data: {
                shard_id?: number;
                client_id?: number;
            } = {};
            if (this.shard_id != null) {
                data.shard_id = this.shard_id;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shard_id != 0)
                writer.writeUint64(1, this.shard_id);
            if (this.client_id != 0)
                writer.writeUint64(2, this.client_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shard_id = reader.readUint64();
                        break;
                    case 2:
                        message.client_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTransactionRequest {
            return NewTransactionRequest.deserialize(bytes);
        }
    }
    export class NewTransactionReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
        }): NewTransactionReply {
            const message = new NewTransactionReply({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTransactionReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTransactionReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTransactionReply {
            return NewTransactionReply.deserialize(bytes);
        }
    }
}
