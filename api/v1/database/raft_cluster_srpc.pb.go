// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.9.0
// source: api/v1/database/raft_cluster.proto

package database

import (
	context "context"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCRaftClusterServiceClient interface {
	SRPCClient() srpc.Client

	StartCluster(ctx context.Context, in *StartClusterRequest) (*StartClusterResponse, error)
	StopCluster(ctx context.Context, in *StopClusterRequest) (*StopClusterResponse, error)
	GetClusterMembership(ctx context.Context, in *GetClusterMembershipRequest) (*GetClusterMembershipResponse, error)
}

type srpcRaftClusterServiceClient struct {
	cc srpc.Client
}

func NewSRPCRaftClusterServiceClient(cc srpc.Client) SRPCRaftClusterServiceClient {
	return &srpcRaftClusterServiceClient{cc}
}

func (c *srpcRaftClusterServiceClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcRaftClusterServiceClient) StartCluster(ctx context.Context, in *StartClusterRequest) (*StartClusterResponse, error) {
	out := new(StartClusterResponse)
	err := c.cc.Invoke(ctx, "database.RaftClusterService", "StartCluster", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftClusterServiceClient) StopCluster(ctx context.Context, in *StopClusterRequest) (*StopClusterResponse, error) {
	out := new(StopClusterResponse)
	err := c.cc.Invoke(ctx, "database.RaftClusterService", "StopCluster", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftClusterServiceClient) GetClusterMembership(ctx context.Context, in *GetClusterMembershipRequest) (*GetClusterMembershipResponse, error) {
	out := new(GetClusterMembershipResponse)
	err := c.cc.Invoke(ctx, "database.RaftClusterService", "GetClusterMembership", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCRaftClusterServiceServer interface {
	StartCluster(context.Context, *StartClusterRequest) (*StartClusterResponse, error)
	StopCluster(context.Context, *StopClusterRequest) (*StopClusterResponse, error)
	GetClusterMembership(context.Context, *GetClusterMembershipRequest) (*GetClusterMembershipResponse, error)
}

type SRPCRaftClusterServiceUnimplementedServer struct{}

func (s *SRPCRaftClusterServiceUnimplementedServer) StartCluster(context.Context, *StartClusterRequest) (*StartClusterResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftClusterServiceUnimplementedServer) StopCluster(context.Context, *StopClusterRequest) (*StopClusterResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftClusterServiceUnimplementedServer) GetClusterMembership(context.Context, *GetClusterMembershipRequest) (*GetClusterMembershipResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCRaftClusterServiceServiceID = "database.RaftClusterService"

type SRPCRaftClusterServiceHandler struct {
	impl SRPCRaftClusterServiceServer
}

func (SRPCRaftClusterServiceHandler) GetServiceID() string { return SRPCRaftClusterServiceServiceID }

func (SRPCRaftClusterServiceHandler) GetMethodIDs() []string {
	return []string{
		"StartCluster",
		"StopCluster",
		"GetClusterMembership",
	}
}

func (d *SRPCRaftClusterServiceHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "StartCluster":
		return true, d.InvokeMethod_StartCluster(d.impl, strm)
	case "StopCluster":
		return true, d.InvokeMethod_StopCluster(d.impl, strm)
	case "GetClusterMembership":
		return true, d.InvokeMethod_GetClusterMembership(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCRaftClusterServiceHandler) InvokeMethod_StartCluster(impl SRPCRaftClusterServiceServer, strm srpc.Stream) error {
	req := new(StartClusterRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.StartCluster(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftClusterServiceHandler) InvokeMethod_StopCluster(impl SRPCRaftClusterServiceServer, strm srpc.Stream) error {
	req := new(StopClusterRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.StopCluster(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftClusterServiceHandler) InvokeMethod_GetClusterMembership(impl SRPCRaftClusterServiceServer, strm srpc.Stream) error {
	req := new(GetClusterMembershipRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetClusterMembership(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func SRPCRegisterRaftClusterService(mux srpc.Mux, impl SRPCRaftClusterServiceServer) error {
	return mux.Register(&SRPCRaftClusterServiceHandler{impl: impl})
}

type SRPCRaftClusterService_StartClusterStream interface {
	srpc.Stream
	SendAndClose(*StartClusterResponse) error
}

type srpcRaftClusterService_StartClusterStream struct {
	srpc.Stream
}

func (x *srpcRaftClusterService_StartClusterStream) SendAndClose(m *StartClusterResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftClusterService_StopClusterStream interface {
	srpc.Stream
	SendAndClose(*StopClusterResponse) error
}

type srpcRaftClusterService_StopClusterStream struct {
	srpc.Stream
}

func (x *srpcRaftClusterService_StopClusterStream) SendAndClose(m *StopClusterResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftClusterService_GetClusterMembershipStream interface {
	srpc.Stream
	SendAndClose(*GetClusterMembershipResponse) error
}

type srpcRaftClusterService_GetClusterMembershipStream struct {
	srpc.Stream
}

func (x *srpcRaftClusterService_GetClusterMembershipStream) SendAndClose(m *GetClusterMembershipResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
