/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: api/v1/database/kv.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/timestamp";
import * as dependency_2 from "./transactions";
import * as dependency_3 from "./../errors/errors";
import * as pb_1 from "google-protobuf";
export namespace database {
    export enum KeyOperationType {
        GET = 0,
        PUT = 1,
        DELETE = 2
    }
    export class KVStoreWrapper extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]];
        constructor(data?: any[] | ({
            account?: number;
            bucket?: string;
            typ?: KVStoreWrapper.RequestType;
        } & (({
            create_account_request?: CreateAccountRequest;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: CreateAccountReply;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: DeleteAccountRequest;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: DeleteAccountReply;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: GetAccountDescriptorRequest;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: GetAccountDescriptorReply;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: CreateBucketRequest;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: CreateBucketReply;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: DeleteBucketRequest;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: DeleteBucketReply;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: GetKeyRequest;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: GetKeyReply;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: PutKeyRequest;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: PutKeyReply;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: DeleteKeyRequest;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: DeleteKeyReply;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: GetBucketDescriptorRequest;
            get_bucket_descriptor_reply?: never;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: GetBucketDescriptorReply;
            error?: never;
        } | {
            create_account_request?: never;
            create_account_reply?: never;
            delete_account_request?: never;
            delete_account_reply?: never;
            get_account_descriptor_request?: never;
            get_account_descriptor_reply?: never;
            create_bucket_request?: never;
            create_bucket_reply?: never;
            delete_bucket_request?: never;
            delete_bucket_reply?: never;
            get_key_request?: never;
            get_key_reply?: never;
            put_key_request?: never;
            put_key_reply?: never;
            delete_key_request?: never;
            delete_key_reply?: never;
            get_bucket_descriptor_request?: never;
            get_bucket_descriptor_reply?: never;
            error?: dependency_3.apiv1.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("bucket" in data && data.bucket != undefined) {
                    this.bucket = data.bucket;
                }
                if ("typ" in data && data.typ != undefined) {
                    this.typ = data.typ;
                }
                if ("create_account_request" in data && data.create_account_request != undefined) {
                    this.create_account_request = data.create_account_request;
                }
                if ("create_account_reply" in data && data.create_account_reply != undefined) {
                    this.create_account_reply = data.create_account_reply;
                }
                if ("delete_account_request" in data && data.delete_account_request != undefined) {
                    this.delete_account_request = data.delete_account_request;
                }
                if ("delete_account_reply" in data && data.delete_account_reply != undefined) {
                    this.delete_account_reply = data.delete_account_reply;
                }
                if ("get_account_descriptor_request" in data && data.get_account_descriptor_request != undefined) {
                    this.get_account_descriptor_request = data.get_account_descriptor_request;
                }
                if ("get_account_descriptor_reply" in data && data.get_account_descriptor_reply != undefined) {
                    this.get_account_descriptor_reply = data.get_account_descriptor_reply;
                }
                if ("create_bucket_request" in data && data.create_bucket_request != undefined) {
                    this.create_bucket_request = data.create_bucket_request;
                }
                if ("create_bucket_reply" in data && data.create_bucket_reply != undefined) {
                    this.create_bucket_reply = data.create_bucket_reply;
                }
                if ("delete_bucket_request" in data && data.delete_bucket_request != undefined) {
                    this.delete_bucket_request = data.delete_bucket_request;
                }
                if ("delete_bucket_reply" in data && data.delete_bucket_reply != undefined) {
                    this.delete_bucket_reply = data.delete_bucket_reply;
                }
                if ("get_key_request" in data && data.get_key_request != undefined) {
                    this.get_key_request = data.get_key_request;
                }
                if ("get_key_reply" in data && data.get_key_reply != undefined) {
                    this.get_key_reply = data.get_key_reply;
                }
                if ("put_key_request" in data && data.put_key_request != undefined) {
                    this.put_key_request = data.put_key_request;
                }
                if ("put_key_reply" in data && data.put_key_reply != undefined) {
                    this.put_key_reply = data.put_key_reply;
                }
                if ("delete_key_request" in data && data.delete_key_request != undefined) {
                    this.delete_key_request = data.delete_key_request;
                }
                if ("delete_key_reply" in data && data.delete_key_reply != undefined) {
                    this.delete_key_reply = data.delete_key_reply;
                }
                if ("get_bucket_descriptor_request" in data && data.get_bucket_descriptor_request != undefined) {
                    this.get_bucket_descriptor_request = data.get_bucket_descriptor_request;
                }
                if ("get_bucket_descriptor_reply" in data && data.get_bucket_descriptor_reply != undefined) {
                    this.get_bucket_descriptor_reply = data.get_bucket_descriptor_reply;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucket() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucket(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get typ() {
            return pb_1.Message.getFieldWithDefault(this, 3, KVStoreWrapper.RequestType.CREATE_ACCOUNT_REQUEST) as KVStoreWrapper.RequestType;
        }
        set typ(value: KVStoreWrapper.RequestType) {
            pb_1.Message.setField(this, 3, value);
        }
        get create_account_request() {
            return pb_1.Message.getWrapperField(this, CreateAccountRequest, 4) as CreateAccountRequest;
        }
        set create_account_request(value: CreateAccountRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_create_account_request() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get create_account_reply() {
            return pb_1.Message.getWrapperField(this, CreateAccountReply, 5) as CreateAccountReply;
        }
        set create_account_reply(value: CreateAccountReply) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_create_account_reply() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get delete_account_request() {
            return pb_1.Message.getWrapperField(this, DeleteAccountRequest, 6) as DeleteAccountRequest;
        }
        set delete_account_request(value: DeleteAccountRequest) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_delete_account_request() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get delete_account_reply() {
            return pb_1.Message.getWrapperField(this, DeleteAccountReply, 7) as DeleteAccountReply;
        }
        set delete_account_reply(value: DeleteAccountReply) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_delete_account_reply() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get get_account_descriptor_request() {
            return pb_1.Message.getWrapperField(this, GetAccountDescriptorRequest, 8) as GetAccountDescriptorRequest;
        }
        set get_account_descriptor_request(value: GetAccountDescriptorRequest) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_get_account_descriptor_request() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get get_account_descriptor_reply() {
            return pb_1.Message.getWrapperField(this, GetAccountDescriptorReply, 9) as GetAccountDescriptorReply;
        }
        set get_account_descriptor_reply(value: GetAccountDescriptorReply) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_get_account_descriptor_reply() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get create_bucket_request() {
            return pb_1.Message.getWrapperField(this, CreateBucketRequest, 10) as CreateBucketRequest;
        }
        set create_bucket_request(value: CreateBucketRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_create_bucket_request() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get create_bucket_reply() {
            return pb_1.Message.getWrapperField(this, CreateBucketReply, 11) as CreateBucketReply;
        }
        set create_bucket_reply(value: CreateBucketReply) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_create_bucket_reply() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get delete_bucket_request() {
            return pb_1.Message.getWrapperField(this, DeleteBucketRequest, 12) as DeleteBucketRequest;
        }
        set delete_bucket_request(value: DeleteBucketRequest) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_delete_bucket_request() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get delete_bucket_reply() {
            return pb_1.Message.getWrapperField(this, DeleteBucketReply, 13) as DeleteBucketReply;
        }
        set delete_bucket_reply(value: DeleteBucketReply) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_delete_bucket_reply() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get get_key_request() {
            return pb_1.Message.getWrapperField(this, GetKeyRequest, 14) as GetKeyRequest;
        }
        set get_key_request(value: GetKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_get_key_request() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get get_key_reply() {
            return pb_1.Message.getWrapperField(this, GetKeyReply, 15) as GetKeyReply;
        }
        set get_key_reply(value: GetKeyReply) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_get_key_reply() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get put_key_request() {
            return pb_1.Message.getWrapperField(this, PutKeyRequest, 16) as PutKeyRequest;
        }
        set put_key_request(value: PutKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_put_key_request() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get put_key_reply() {
            return pb_1.Message.getWrapperField(this, PutKeyReply, 17) as PutKeyReply;
        }
        set put_key_reply(value: PutKeyReply) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_put_key_reply() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get delete_key_request() {
            return pb_1.Message.getWrapperField(this, DeleteKeyRequest, 18) as DeleteKeyRequest;
        }
        set delete_key_request(value: DeleteKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_delete_key_request() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get delete_key_reply() {
            return pb_1.Message.getWrapperField(this, DeleteKeyReply, 19) as DeleteKeyReply;
        }
        set delete_key_reply(value: DeleteKeyReply) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_delete_key_reply() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get get_bucket_descriptor_request() {
            return pb_1.Message.getWrapperField(this, GetBucketDescriptorRequest, 20) as GetBucketDescriptorRequest;
        }
        set get_bucket_descriptor_request(value: GetBucketDescriptorRequest) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_get_bucket_descriptor_request() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get get_bucket_descriptor_reply() {
            return pb_1.Message.getWrapperField(this, GetBucketDescriptorReply, 21) as GetBucketDescriptorReply;
        }
        set get_bucket_descriptor_reply(value: GetBucketDescriptorReply) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_get_bucket_descriptor_reply() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.apiv1.Error, 22) as dependency_3.apiv1.Error;
        }
        set error(value: dependency_3.apiv1.Error) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "create_account_request" | "create_account_reply" | "delete_account_request" | "delete_account_reply" | "get_account_descriptor_request" | "get_account_descriptor_reply" | "create_bucket_request" | "create_bucket_reply" | "delete_bucket_request" | "delete_bucket_reply" | "get_key_request" | "get_key_reply" | "put_key_request" | "put_key_reply" | "delete_key_request" | "delete_key_reply" | "get_bucket_descriptor_request" | "get_bucket_descriptor_reply" | "error";
            } = {
                0: "none",
                4: "create_account_request",
                5: "create_account_reply",
                6: "delete_account_request",
                7: "delete_account_reply",
                8: "get_account_descriptor_request",
                9: "get_account_descriptor_reply",
                10: "create_bucket_request",
                11: "create_bucket_reply",
                12: "delete_bucket_request",
                13: "delete_bucket_reply",
                14: "get_key_request",
                15: "get_key_reply",
                16: "put_key_request",
                17: "put_key_reply",
                18: "delete_key_request",
                19: "delete_key_reply",
                20: "get_bucket_descriptor_request",
                21: "get_bucket_descriptor_reply",
                22: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])];
        }
        static fromObject(data: {
            account?: number;
            bucket?: string;
            typ?: KVStoreWrapper.RequestType;
            create_account_request?: ReturnType<typeof CreateAccountRequest.prototype.toObject>;
            create_account_reply?: ReturnType<typeof CreateAccountReply.prototype.toObject>;
            delete_account_request?: ReturnType<typeof DeleteAccountRequest.prototype.toObject>;
            delete_account_reply?: ReturnType<typeof DeleteAccountReply.prototype.toObject>;
            get_account_descriptor_request?: ReturnType<typeof GetAccountDescriptorRequest.prototype.toObject>;
            get_account_descriptor_reply?: ReturnType<typeof GetAccountDescriptorReply.prototype.toObject>;
            create_bucket_request?: ReturnType<typeof CreateBucketRequest.prototype.toObject>;
            create_bucket_reply?: ReturnType<typeof CreateBucketReply.prototype.toObject>;
            delete_bucket_request?: ReturnType<typeof DeleteBucketRequest.prototype.toObject>;
            delete_bucket_reply?: ReturnType<typeof DeleteBucketReply.prototype.toObject>;
            get_key_request?: ReturnType<typeof GetKeyRequest.prototype.toObject>;
            get_key_reply?: ReturnType<typeof GetKeyReply.prototype.toObject>;
            put_key_request?: ReturnType<typeof PutKeyRequest.prototype.toObject>;
            put_key_reply?: ReturnType<typeof PutKeyReply.prototype.toObject>;
            delete_key_request?: ReturnType<typeof DeleteKeyRequest.prototype.toObject>;
            delete_key_reply?: ReturnType<typeof DeleteKeyReply.prototype.toObject>;
            get_bucket_descriptor_request?: ReturnType<typeof GetBucketDescriptorRequest.prototype.toObject>;
            get_bucket_descriptor_reply?: ReturnType<typeof GetBucketDescriptorReply.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.apiv1.Error.prototype.toObject>;
        }): KVStoreWrapper {
            const message = new KVStoreWrapper({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.bucket != null) {
                message.bucket = data.bucket;
            }
            if (data.typ != null) {
                message.typ = data.typ;
            }
            if (data.create_account_request != null) {
                message.create_account_request = CreateAccountRequest.fromObject(data.create_account_request);
            }
            if (data.create_account_reply != null) {
                message.create_account_reply = CreateAccountReply.fromObject(data.create_account_reply);
            }
            if (data.delete_account_request != null) {
                message.delete_account_request = DeleteAccountRequest.fromObject(data.delete_account_request);
            }
            if (data.delete_account_reply != null) {
                message.delete_account_reply = DeleteAccountReply.fromObject(data.delete_account_reply);
            }
            if (data.get_account_descriptor_request != null) {
                message.get_account_descriptor_request = GetAccountDescriptorRequest.fromObject(data.get_account_descriptor_request);
            }
            if (data.get_account_descriptor_reply != null) {
                message.get_account_descriptor_reply = GetAccountDescriptorReply.fromObject(data.get_account_descriptor_reply);
            }
            if (data.create_bucket_request != null) {
                message.create_bucket_request = CreateBucketRequest.fromObject(data.create_bucket_request);
            }
            if (data.create_bucket_reply != null) {
                message.create_bucket_reply = CreateBucketReply.fromObject(data.create_bucket_reply);
            }
            if (data.delete_bucket_request != null) {
                message.delete_bucket_request = DeleteBucketRequest.fromObject(data.delete_bucket_request);
            }
            if (data.delete_bucket_reply != null) {
                message.delete_bucket_reply = DeleteBucketReply.fromObject(data.delete_bucket_reply);
            }
            if (data.get_key_request != null) {
                message.get_key_request = GetKeyRequest.fromObject(data.get_key_request);
            }
            if (data.get_key_reply != null) {
                message.get_key_reply = GetKeyReply.fromObject(data.get_key_reply);
            }
            if (data.put_key_request != null) {
                message.put_key_request = PutKeyRequest.fromObject(data.put_key_request);
            }
            if (data.put_key_reply != null) {
                message.put_key_reply = PutKeyReply.fromObject(data.put_key_reply);
            }
            if (data.delete_key_request != null) {
                message.delete_key_request = DeleteKeyRequest.fromObject(data.delete_key_request);
            }
            if (data.delete_key_reply != null) {
                message.delete_key_reply = DeleteKeyReply.fromObject(data.delete_key_reply);
            }
            if (data.get_bucket_descriptor_request != null) {
                message.get_bucket_descriptor_request = GetBucketDescriptorRequest.fromObject(data.get_bucket_descriptor_request);
            }
            if (data.get_bucket_descriptor_reply != null) {
                message.get_bucket_descriptor_reply = GetBucketDescriptorReply.fromObject(data.get_bucket_descriptor_reply);
            }
            if (data.error != null) {
                message.error = dependency_3.apiv1.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: number;
                bucket?: string;
                typ?: KVStoreWrapper.RequestType;
                create_account_request?: ReturnType<typeof CreateAccountRequest.prototype.toObject>;
                create_account_reply?: ReturnType<typeof CreateAccountReply.prototype.toObject>;
                delete_account_request?: ReturnType<typeof DeleteAccountRequest.prototype.toObject>;
                delete_account_reply?: ReturnType<typeof DeleteAccountReply.prototype.toObject>;
                get_account_descriptor_request?: ReturnType<typeof GetAccountDescriptorRequest.prototype.toObject>;
                get_account_descriptor_reply?: ReturnType<typeof GetAccountDescriptorReply.prototype.toObject>;
                create_bucket_request?: ReturnType<typeof CreateBucketRequest.prototype.toObject>;
                create_bucket_reply?: ReturnType<typeof CreateBucketReply.prototype.toObject>;
                delete_bucket_request?: ReturnType<typeof DeleteBucketRequest.prototype.toObject>;
                delete_bucket_reply?: ReturnType<typeof DeleteBucketReply.prototype.toObject>;
                get_key_request?: ReturnType<typeof GetKeyRequest.prototype.toObject>;
                get_key_reply?: ReturnType<typeof GetKeyReply.prototype.toObject>;
                put_key_request?: ReturnType<typeof PutKeyRequest.prototype.toObject>;
                put_key_reply?: ReturnType<typeof PutKeyReply.prototype.toObject>;
                delete_key_request?: ReturnType<typeof DeleteKeyRequest.prototype.toObject>;
                delete_key_reply?: ReturnType<typeof DeleteKeyReply.prototype.toObject>;
                get_bucket_descriptor_request?: ReturnType<typeof GetBucketDescriptorRequest.prototype.toObject>;
                get_bucket_descriptor_reply?: ReturnType<typeof GetBucketDescriptorReply.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.apiv1.Error.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.bucket != null) {
                data.bucket = this.bucket;
            }
            if (this.typ != null) {
                data.typ = this.typ;
            }
            if (this.create_account_request != null) {
                data.create_account_request = this.create_account_request.toObject();
            }
            if (this.create_account_reply != null) {
                data.create_account_reply = this.create_account_reply.toObject();
            }
            if (this.delete_account_request != null) {
                data.delete_account_request = this.delete_account_request.toObject();
            }
            if (this.delete_account_reply != null) {
                data.delete_account_reply = this.delete_account_reply.toObject();
            }
            if (this.get_account_descriptor_request != null) {
                data.get_account_descriptor_request = this.get_account_descriptor_request.toObject();
            }
            if (this.get_account_descriptor_reply != null) {
                data.get_account_descriptor_reply = this.get_account_descriptor_reply.toObject();
            }
            if (this.create_bucket_request != null) {
                data.create_bucket_request = this.create_bucket_request.toObject();
            }
            if (this.create_bucket_reply != null) {
                data.create_bucket_reply = this.create_bucket_reply.toObject();
            }
            if (this.delete_bucket_request != null) {
                data.delete_bucket_request = this.delete_bucket_request.toObject();
            }
            if (this.delete_bucket_reply != null) {
                data.delete_bucket_reply = this.delete_bucket_reply.toObject();
            }
            if (this.get_key_request != null) {
                data.get_key_request = this.get_key_request.toObject();
            }
            if (this.get_key_reply != null) {
                data.get_key_reply = this.get_key_reply.toObject();
            }
            if (this.put_key_request != null) {
                data.put_key_request = this.put_key_request.toObject();
            }
            if (this.put_key_reply != null) {
                data.put_key_reply = this.put_key_reply.toObject();
            }
            if (this.delete_key_request != null) {
                data.delete_key_request = this.delete_key_request.toObject();
            }
            if (this.delete_key_reply != null) {
                data.delete_key_reply = this.delete_key_reply.toObject();
            }
            if (this.get_bucket_descriptor_request != null) {
                data.get_bucket_descriptor_request = this.get_bucket_descriptor_request.toObject();
            }
            if (this.get_bucket_descriptor_reply != null) {
                data.get_bucket_descriptor_reply = this.get_bucket_descriptor_reply.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account != 0)
                writer.writeUint64(1, this.account);
            if (this.bucket.length)
                writer.writeString(2, this.bucket);
            if (this.typ != KVStoreWrapper.RequestType.CREATE_ACCOUNT_REQUEST)
                writer.writeEnum(3, this.typ);
            if (this.has_create_account_request)
                writer.writeMessage(4, this.create_account_request, () => this.create_account_request.serialize(writer));
            if (this.has_create_account_reply)
                writer.writeMessage(5, this.create_account_reply, () => this.create_account_reply.serialize(writer));
            if (this.has_delete_account_request)
                writer.writeMessage(6, this.delete_account_request, () => this.delete_account_request.serialize(writer));
            if (this.has_delete_account_reply)
                writer.writeMessage(7, this.delete_account_reply, () => this.delete_account_reply.serialize(writer));
            if (this.has_get_account_descriptor_request)
                writer.writeMessage(8, this.get_account_descriptor_request, () => this.get_account_descriptor_request.serialize(writer));
            if (this.has_get_account_descriptor_reply)
                writer.writeMessage(9, this.get_account_descriptor_reply, () => this.get_account_descriptor_reply.serialize(writer));
            if (this.has_create_bucket_request)
                writer.writeMessage(10, this.create_bucket_request, () => this.create_bucket_request.serialize(writer));
            if (this.has_create_bucket_reply)
                writer.writeMessage(11, this.create_bucket_reply, () => this.create_bucket_reply.serialize(writer));
            if (this.has_delete_bucket_request)
                writer.writeMessage(12, this.delete_bucket_request, () => this.delete_bucket_request.serialize(writer));
            if (this.has_delete_bucket_reply)
                writer.writeMessage(13, this.delete_bucket_reply, () => this.delete_bucket_reply.serialize(writer));
            if (this.has_get_key_request)
                writer.writeMessage(14, this.get_key_request, () => this.get_key_request.serialize(writer));
            if (this.has_get_key_reply)
                writer.writeMessage(15, this.get_key_reply, () => this.get_key_reply.serialize(writer));
            if (this.has_put_key_request)
                writer.writeMessage(16, this.put_key_request, () => this.put_key_request.serialize(writer));
            if (this.has_put_key_reply)
                writer.writeMessage(17, this.put_key_reply, () => this.put_key_reply.serialize(writer));
            if (this.has_delete_key_request)
                writer.writeMessage(18, this.delete_key_request, () => this.delete_key_request.serialize(writer));
            if (this.has_delete_key_reply)
                writer.writeMessage(19, this.delete_key_reply, () => this.delete_key_reply.serialize(writer));
            if (this.has_get_bucket_descriptor_request)
                writer.writeMessage(20, this.get_bucket_descriptor_request, () => this.get_bucket_descriptor_request.serialize(writer));
            if (this.has_get_bucket_descriptor_reply)
                writer.writeMessage(21, this.get_bucket_descriptor_reply, () => this.get_bucket_descriptor_reply.serialize(writer));
            if (this.has_error)
                writer.writeMessage(22, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KVStoreWrapper {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KVStoreWrapper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readUint64();
                        break;
                    case 2:
                        message.bucket = reader.readString();
                        break;
                    case 3:
                        message.typ = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.create_account_request, () => message.create_account_request = CreateAccountRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.create_account_reply, () => message.create_account_reply = CreateAccountReply.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.delete_account_request, () => message.delete_account_request = DeleteAccountRequest.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.delete_account_reply, () => message.delete_account_reply = DeleteAccountReply.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.get_account_descriptor_request, () => message.get_account_descriptor_request = GetAccountDescriptorRequest.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.get_account_descriptor_reply, () => message.get_account_descriptor_reply = GetAccountDescriptorReply.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.create_bucket_request, () => message.create_bucket_request = CreateBucketRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.create_bucket_reply, () => message.create_bucket_reply = CreateBucketReply.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.delete_bucket_request, () => message.delete_bucket_request = DeleteBucketRequest.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.delete_bucket_reply, () => message.delete_bucket_reply = DeleteBucketReply.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.get_key_request, () => message.get_key_request = GetKeyRequest.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.get_key_reply, () => message.get_key_reply = GetKeyReply.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.put_key_request, () => message.put_key_request = PutKeyRequest.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.put_key_reply, () => message.put_key_reply = PutKeyReply.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.delete_key_request, () => message.delete_key_request = DeleteKeyRequest.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.delete_key_reply, () => message.delete_key_reply = DeleteKeyReply.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.get_bucket_descriptor_request, () => message.get_bucket_descriptor_request = GetBucketDescriptorRequest.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.get_bucket_descriptor_reply, () => message.get_bucket_descriptor_reply = GetBucketDescriptorReply.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.error, () => message.error = dependency_3.apiv1.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KVStoreWrapper {
            return KVStoreWrapper.deserialize(bytes);
        }
    }
    export namespace KVStoreWrapper {
        export enum RequestType {
            CREATE_ACCOUNT_REQUEST = 0,
            CREATE_ACCOUNT_REPLY = 1,
            DELETE_ACCOUNT_REQUEST = 2,
            DELETE_ACCOUNT_REPLY = 3,
            GET_ACCOUNT_DESCRIPTOR_REQUEST = 4,
            GET_ACCOUNT_DESCRIPTOR_REPLY = 5,
            CREATE_BUCKET_REQUEST = 6,
            CREATE_BUCKET_REPLY = 7,
            DELETE_BUCKET_REQUEST = 8,
            DELETE_BUCKET_REPLY = 9,
            GET_KEY_REQUEST = 10,
            GET_KEY_REPLY = 11,
            PUT_KEY_REQUEST = 12,
            PUT_KEY_REPLY = 13,
            DELETE_KEY_REQUEST = 14,
            DELETE_KEY_REPLY = 15,
            GET_BUCKET_DESCRIPTOR_REQUEST = 16,
            GET_BUCKET_DESCRIPTOR_REPLY = 17,
            RECOVERABLE_ERROR = 18
        }
    }
    export class CreateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            owner?: string;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 3) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            account_id?: number;
            owner?: string;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): CreateAccountRequest {
            const message = new CreateAccountRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                owner?: string;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.owner.length)
                writer.writeString(2, this.owner);
            if (this.has_transaction)
                writer.writeMessage(3, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAccountRequest {
            return CreateAccountRequest.deserialize(bytes);
        }
    }
    export class CreateAccountReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_descriptor?: AccountDescriptor;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_descriptor" in data && data.account_descriptor != undefined) {
                    this.account_descriptor = data.account_descriptor;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_descriptor() {
            return pb_1.Message.getWrapperField(this, AccountDescriptor, 1) as AccountDescriptor;
        }
        set account_descriptor(value: AccountDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account_descriptor() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 2) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            account_descriptor?: ReturnType<typeof AccountDescriptor.prototype.toObject>;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): CreateAccountReply {
            const message = new CreateAccountReply({});
            if (data.account_descriptor != null) {
                message.account_descriptor = AccountDescriptor.fromObject(data.account_descriptor);
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_descriptor?: ReturnType<typeof AccountDescriptor.prototype.toObject>;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_descriptor != null) {
                data.account_descriptor = this.account_descriptor.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account_descriptor)
                writer.writeMessage(1, this.account_descriptor, () => this.account_descriptor.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAccountReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAccountReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account_descriptor, () => message.account_descriptor = AccountDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAccountReply {
            return CreateAccountReply.deserialize(bytes);
        }
    }
    export class DeleteAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            owner?: string;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 3) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            account_id?: number;
            owner?: string;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteAccountRequest {
            const message = new DeleteAccountRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                owner?: string;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.owner.length)
                writer.writeString(2, this.owner);
            if (this.has_transaction)
                writer.writeMessage(3, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAccountRequest {
            return DeleteAccountRequest.deserialize(bytes);
        }
    }
    export class DeleteAccountReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 2) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            ok?: boolean;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteAccountReply {
            const message = new DeleteAccountReply({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.has_transaction)
                writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAccountReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAccountReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAccountReply {
            return DeleteAccountReply.deserialize(bytes);
        }
    }
    export class GetAccountDescriptorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            account_id?: number;
        }): GetAccountDescriptorRequest {
            const message = new GetAccountDescriptorRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountDescriptorRequest {
            return GetAccountDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetAccountDescriptorReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_descriptor?: AccountDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_descriptor" in data && data.account_descriptor != undefined) {
                    this.account_descriptor = data.account_descriptor;
                }
            }
        }
        get account_descriptor() {
            return pb_1.Message.getWrapperField(this, AccountDescriptor, 1) as AccountDescriptor;
        }
        set account_descriptor(value: AccountDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account_descriptor() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            account_descriptor?: ReturnType<typeof AccountDescriptor.prototype.toObject>;
        }): GetAccountDescriptorReply {
            const message = new GetAccountDescriptorReply({});
            if (data.account_descriptor != null) {
                message.account_descriptor = AccountDescriptor.fromObject(data.account_descriptor);
            }
            return message;
        }
        toObject() {
            const data: {
                account_descriptor?: ReturnType<typeof AccountDescriptor.prototype.toObject>;
            } = {};
            if (this.account_descriptor != null) {
                data.account_descriptor = this.account_descriptor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account_descriptor)
                writer.writeMessage(1, this.account_descriptor, () => this.account_descriptor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountDescriptorReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountDescriptorReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account_descriptor, () => message.account_descriptor = AccountDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountDescriptorReply {
            return GetAccountDescriptorReply.deserialize(bytes);
        }
    }
    export class AccountDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            owner?: string;
            created?: dependency_1.google.protobuf.Timestamp;
            last_updated?: dependency_1.google.protobuf.Timestamp;
            bucket_count?: number;
            buckets?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("last_updated" in data && data.last_updated != undefined) {
                    this.last_updated = data.last_updated;
                }
                if ("bucket_count" in data && data.bucket_count != undefined) {
                    this.bucket_count = data.bucket_count;
                }
                if ("buckets" in data && data.buckets != undefined) {
                    this.buckets = data.buckets;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_created() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get last_updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set last_updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_last_updated() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bucket_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set bucket_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get buckets() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set buckets(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            account_id?: number;
            owner?: string;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            bucket_count?: number;
            buckets?: string[];
        }): AccountDescriptor {
            const message = new AccountDescriptor({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.last_updated != null) {
                message.last_updated = dependency_1.google.protobuf.Timestamp.fromObject(data.last_updated);
            }
            if (data.bucket_count != null) {
                message.bucket_count = data.bucket_count;
            }
            if (data.buckets != null) {
                message.buckets = data.buckets;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                owner?: string;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                bucket_count?: number;
                buckets?: string[];
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.last_updated != null) {
                data.last_updated = this.last_updated.toObject();
            }
            if (this.bucket_count != null) {
                data.bucket_count = this.bucket_count;
            }
            if (this.buckets != null) {
                data.buckets = this.buckets;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.owner.length)
                writer.writeString(2, this.owner);
            if (this.has_created)
                writer.writeMessage(3, this.created, () => this.created.serialize(writer));
            if (this.has_last_updated)
                writer.writeMessage(4, this.last_updated, () => this.last_updated.serialize(writer));
            if (this.bucket_count != 0)
                writer.writeUint64(5, this.bucket_count);
            if (this.buckets.length)
                writer.writeRepeatedString(6, this.buckets);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.last_updated, () => message.last_updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.bucket_count = reader.readUint64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountDescriptor {
            return AccountDescriptor.deserialize(bytes);
        }
    }
    export class CreateBucketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            name?: string;
            owner?: string;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 4) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            account_id?: number;
            name?: string;
            owner?: string;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): CreateBucketRequest {
            const message = new CreateBucketRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                name?: string;
                owner?: string;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.owner.length)
                writer.writeString(3, this.owner);
            if (this.has_transaction)
                writer.writeMessage(4, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBucketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBucketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.owner = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBucketRequest {
            return CreateBucketRequest.deserialize(bytes);
        }
    }
    export class CreateBucketReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bucket_descriptor?: BucketDescriptor;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bucket_descriptor" in data && data.bucket_descriptor != undefined) {
                    this.bucket_descriptor = data.bucket_descriptor;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get bucket_descriptor() {
            return pb_1.Message.getWrapperField(this, BucketDescriptor, 1) as BucketDescriptor;
        }
        set bucket_descriptor(value: BucketDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_bucket_descriptor() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 2) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            bucket_descriptor?: ReturnType<typeof BucketDescriptor.prototype.toObject>;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): CreateBucketReply {
            const message = new CreateBucketReply({});
            if (data.bucket_descriptor != null) {
                message.bucket_descriptor = BucketDescriptor.fromObject(data.bucket_descriptor);
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                bucket_descriptor?: ReturnType<typeof BucketDescriptor.prototype.toObject>;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.bucket_descriptor != null) {
                data.bucket_descriptor = this.bucket_descriptor.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bucket_descriptor)
                writer.writeMessage(1, this.bucket_descriptor, () => this.bucket_descriptor.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBucketReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBucketReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bucket_descriptor, () => message.bucket_descriptor = BucketDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBucketReply {
            return CreateBucketReply.deserialize(bytes);
        }
    }
    export class DeleteBucketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            name?: string;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 3) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            account_id?: number;
            name?: string;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteBucketRequest {
            const message = new DeleteBucketRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                name?: string;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_transaction)
                writer.writeMessage(3, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteBucketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteBucketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteBucketRequest {
            return DeleteBucketRequest.deserialize(bytes);
        }
    }
    export class DeleteBucketReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 2) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            ok?: boolean;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteBucketReply {
            const message = new DeleteBucketReply({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.has_transaction)
                writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteBucketReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteBucketReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteBucketReply {
            return DeleteBucketReply.deserialize(bytes);
        }
    }
    export class BucketDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            size?: number;
            key_count?: number;
            created?: dependency_1.google.protobuf.Timestamp;
            last_updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("key_count" in data && data.key_count != undefined) {
                    this.key_count = data.key_count;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("last_updated" in data && data.last_updated != undefined) {
                    this.last_updated = data.last_updated;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set key_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_created() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get last_updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set last_updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_last_updated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            owner?: string;
            size?: number;
            key_count?: number;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): BucketDescriptor {
            const message = new BucketDescriptor({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.key_count != null) {
                message.key_count = data.key_count;
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.last_updated != null) {
                message.last_updated = dependency_1.google.protobuf.Timestamp.fromObject(data.last_updated);
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                size?: number;
                key_count?: number;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.key_count != null) {
                data.key_count = this.key_count;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.last_updated != null) {
                data.last_updated = this.last_updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.size != 0)
                writer.writeUint64(2, this.size);
            if (this.key_count != 0)
                writer.writeUint64(3, this.key_count);
            if (this.has_created)
                writer.writeMessage(4, this.created, () => this.created.serialize(writer));
            if (this.has_last_updated)
                writer.writeMessage(5, this.last_updated, () => this.last_updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BucketDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BucketDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.size = reader.readUint64();
                        break;
                    case 3:
                        message.key_count = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.last_updated, () => message.last_updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BucketDescriptor {
            return BucketDescriptor.deserialize(bytes);
        }
    }
    export class GetBucketDescriptorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account_id?: number;
            name?: string;
        }): GetBucketDescriptorRequest {
            const message = new GetBucketDescriptorRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                name?: string;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBucketDescriptorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBucketDescriptorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBucketDescriptorRequest {
            return GetBucketDescriptorRequest.deserialize(bytes);
        }
    }
    export class GetBucketDescriptorReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bucket_descriptor?: BucketDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bucket_descriptor" in data && data.bucket_descriptor != undefined) {
                    this.bucket_descriptor = data.bucket_descriptor;
                }
            }
        }
        get bucket_descriptor() {
            return pb_1.Message.getWrapperField(this, BucketDescriptor, 1) as BucketDescriptor;
        }
        set bucket_descriptor(value: BucketDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_bucket_descriptor() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            bucket_descriptor?: ReturnType<typeof BucketDescriptor.prototype.toObject>;
        }): GetBucketDescriptorReply {
            const message = new GetBucketDescriptorReply({});
            if (data.bucket_descriptor != null) {
                message.bucket_descriptor = BucketDescriptor.fromObject(data.bucket_descriptor);
            }
            return message;
        }
        toObject() {
            const data: {
                bucket_descriptor?: ReturnType<typeof BucketDescriptor.prototype.toObject>;
            } = {};
            if (this.bucket_descriptor != null) {
                data.bucket_descriptor = this.bucket_descriptor.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bucket_descriptor)
                writer.writeMessage(1, this.bucket_descriptor, () => this.bucket_descriptor.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBucketDescriptorReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBucketDescriptorReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bucket_descriptor, () => message.bucket_descriptor = BucketDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBucketDescriptorReply {
            return GetBucketDescriptorReply.deserialize(bytes);
        }
    }
    export class GetKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            bucket_name?: string;
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("bucket_name" in data && data.bucket_name != undefined) {
                    this.bucket_name = data.bucket_name;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucket_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucket_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            account_id?: number;
            bucket_name?: string;
            key?: string;
        }): GetKeyRequest {
            const message = new GetKeyRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.bucket_name != null) {
                message.bucket_name = data.bucket_name;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                bucket_name?: string;
                key?: string;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.bucket_name != null) {
                data.bucket_name = this.bucket_name;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.bucket_name.length)
                writer.writeString(2, this.bucket_name);
            if (this.key.length)
                writer.writeString(3, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.bucket_name = reader.readString();
                        break;
                    case 3:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyRequest {
            return GetKeyRequest.deserialize(bytes);
        }
    }
    export class GetKeyReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_value_pair?: KeyValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_value_pair" in data && data.key_value_pair != undefined) {
                    this.key_value_pair = data.key_value_pair;
                }
            }
        }
        get key_value_pair() {
            return pb_1.Message.getWrapperField(this, KeyValue, 1) as KeyValue;
        }
        set key_value_pair(value: KeyValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key_value_pair() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            key_value_pair?: ReturnType<typeof KeyValue.prototype.toObject>;
        }): GetKeyReply {
            const message = new GetKeyReply({});
            if (data.key_value_pair != null) {
                message.key_value_pair = KeyValue.fromObject(data.key_value_pair);
            }
            return message;
        }
        toObject() {
            const data: {
                key_value_pair?: ReturnType<typeof KeyValue.prototype.toObject>;
            } = {};
            if (this.key_value_pair != null) {
                data.key_value_pair = this.key_value_pair.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key_value_pair)
                writer.writeMessage(1, this.key_value_pair, () => this.key_value_pair.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key_value_pair, () => message.key_value_pair = KeyValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyReply {
            return GetKeyReply.deserialize(bytes);
        }
    }
    export class PutKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            bucket_name?: string;
            key_value_pair?: KeyValue;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("bucket_name" in data && data.bucket_name != undefined) {
                    this.bucket_name = data.bucket_name;
                }
                if ("key_value_pair" in data && data.key_value_pair != undefined) {
                    this.key_value_pair = data.key_value_pair;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucket_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucket_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_value_pair() {
            return pb_1.Message.getWrapperField(this, KeyValue, 3) as KeyValue;
        }
        set key_value_pair(value: KeyValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_key_value_pair() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 4) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            account_id?: number;
            bucket_name?: string;
            key_value_pair?: ReturnType<typeof KeyValue.prototype.toObject>;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): PutKeyRequest {
            const message = new PutKeyRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.bucket_name != null) {
                message.bucket_name = data.bucket_name;
            }
            if (data.key_value_pair != null) {
                message.key_value_pair = KeyValue.fromObject(data.key_value_pair);
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                bucket_name?: string;
                key_value_pair?: ReturnType<typeof KeyValue.prototype.toObject>;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.bucket_name != null) {
                data.bucket_name = this.bucket_name;
            }
            if (this.key_value_pair != null) {
                data.key_value_pair = this.key_value_pair.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.bucket_name.length)
                writer.writeString(2, this.bucket_name);
            if (this.has_key_value_pair)
                writer.writeMessage(3, this.key_value_pair, () => this.key_value_pair.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(4, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.bucket_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.key_value_pair, () => message.key_value_pair = KeyValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutKeyRequest {
            return PutKeyRequest.deserialize(bytes);
        }
    }
    export class PutKeyReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 1) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): PutKeyReply {
            const message = new PutKeyReply({});
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutKeyReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutKeyReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutKeyReply {
            return PutKeyReply.deserialize(bytes);
        }
    }
    export class DeleteKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            bucket_name?: string;
            key?: string;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("bucket_name" in data && data.bucket_name != undefined) {
                    this.bucket_name = data.bucket_name;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucket_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucket_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 4) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            account_id?: number;
            bucket_name?: string;
            key?: string;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteKeyRequest {
            const message = new DeleteKeyRequest({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.bucket_name != null) {
                message.bucket_name = data.bucket_name;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                bucket_name?: string;
                key?: string;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.bucket_name != null) {
                data.bucket_name = this.bucket_name;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.bucket_name.length)
                writer.writeString(2, this.bucket_name);
            if (this.key.length)
                writer.writeString(3, this.key);
            if (this.has_transaction)
                writer.writeMessage(4, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.bucket_name = reader.readString();
                        break;
                    case 3:
                        message.key = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteKeyRequest {
            return DeleteKeyRequest.deserialize(bytes);
        }
    }
    export class DeleteKeyReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            transaction?: dependency_2.database.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_2.database.Transaction, 3) as dependency_2.database.Transaction;
        }
        set transaction(value: dependency_2.database.Transaction) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            ok?: boolean;
            transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
        }): DeleteKeyReply {
            const message = new DeleteKeyReply({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.transaction != null) {
                message.transaction = dependency_2.database.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                transaction?: ReturnType<typeof dependency_2.database.Transaction.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.has_transaction)
                writer.writeMessage(3, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteKeyReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteKeyReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_2.database.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteKeyReply {
            return DeleteKeyReply.deserialize(bytes);
        }
    }
    export class KeyValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            create_revision?: number;
            mod_revision?: number;
            version?: number;
            value?: Uint8Array;
            lease?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("create_revision" in data && data.create_revision != undefined) {
                    this.create_revision = data.create_revision;
                }
                if ("mod_revision" in data && data.mod_revision != undefined) {
                    this.mod_revision = data.mod_revision;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("lease" in data && data.lease != undefined) {
                    this.lease = data.lease;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get create_revision() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set create_revision(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get mod_revision() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set mod_revision(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get lease() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lease(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            key?: string;
            create_revision?: number;
            mod_revision?: number;
            version?: number;
            value?: Uint8Array;
            lease?: number;
        }): KeyValue {
            const message = new KeyValue({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.create_revision != null) {
                message.create_revision = data.create_revision;
            }
            if (data.mod_revision != null) {
                message.mod_revision = data.mod_revision;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.lease != null) {
                message.lease = data.lease;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                create_revision?: number;
                mod_revision?: number;
                version?: number;
                value?: Uint8Array;
                lease?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.create_revision != null) {
                data.create_revision = this.create_revision;
            }
            if (this.mod_revision != null) {
                data.mod_revision = this.mod_revision;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.lease != null) {
                data.lease = this.lease;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.create_revision != 0)
                writer.writeInt64(2, this.create_revision);
            if (this.mod_revision != 0)
                writer.writeInt64(3, this.mod_revision);
            if (this.version != 0)
                writer.writeInt64(4, this.version);
            if (this.value.length)
                writer.writeBytes(5, this.value);
            if (this.lease != 0)
                writer.writeInt64(6, this.lease);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.create_revision = reader.readInt64();
                        break;
                    case 3:
                        message.mod_revision = reader.readInt64();
                        break;
                    case 4:
                        message.version = reader.readInt64();
                        break;
                    case 5:
                        message.value = reader.readBytes();
                        break;
                    case 6:
                        message.lease = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyValue {
            return KeyValue.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            type?: KeyOperationType;
            kv?: KeyValue;
        } & (({
            prev_kv?: KeyValue;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("kv" in data && data.kv != undefined) {
                    this.kv = data.kv;
                }
                if ("prev_kv" in data && data.prev_kv != undefined) {
                    this.prev_kv = data.prev_kv;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, KeyOperationType.GET) as KeyOperationType;
        }
        set type(value: KeyOperationType) {
            pb_1.Message.setField(this, 1, value);
        }
        get kv() {
            return pb_1.Message.getWrapperField(this, KeyValue, 2) as KeyValue;
        }
        set kv(value: KeyValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_kv() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get prev_kv() {
            return pb_1.Message.getWrapperField(this, KeyValue, 3) as KeyValue;
        }
        set prev_kv(value: KeyValue) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_prev_kv() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _prev_kv() {
            const cases: {
                [index: number]: "none" | "prev_kv";
            } = {
                0: "none",
                3: "prev_kv"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            type?: KeyOperationType;
            kv?: ReturnType<typeof KeyValue.prototype.toObject>;
            prev_kv?: ReturnType<typeof KeyValue.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.kv != null) {
                message.kv = KeyValue.fromObject(data.kv);
            }
            if (data.prev_kv != null) {
                message.prev_kv = KeyValue.fromObject(data.prev_kv);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: KeyOperationType;
                kv?: ReturnType<typeof KeyValue.prototype.toObject>;
                prev_kv?: ReturnType<typeof KeyValue.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.kv != null) {
                data.kv = this.kv.toObject();
            }
            if (this.prev_kv != null) {
                data.prev_kv = this.prev_kv.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != KeyOperationType.GET)
                writer.writeEnum(1, this.type);
            if (this.has_kv)
                writer.writeMessage(2, this.kv, () => this.kv.serialize(writer));
            if (this.has_prev_kv)
                writer.writeMessage(3, this.prev_kv, () => this.prev_kv.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.kv, () => message.kv = KeyValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.prev_kv, () => message.prev_kv = KeyValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
}
