// source: api/v1/database/node_host_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.database.ClusterInfo', null, global);
goog.exportSymbol('proto.database.GetNodeHostConfigRequest', null, global);
goog.exportSymbol('proto.database.GetNodeHostConfigResponse', null, global);
goog.exportSymbol('proto.database.GetNodeHostInfoRequest', null, global);
goog.exportSymbol('proto.database.GetNodeHostInfoResponse', null, global);
goog.exportSymbol('proto.database.GossipConfig', null, global);
goog.exportSymbol('proto.database.GossipInfo', null, global);
goog.exportSymbol('proto.database.HasNodeInfoRequest', null, global);
goog.exportSymbol('proto.database.HasNodeInfoResponse', null, global);
goog.exportSymbol('proto.database.NodeHostConfig', null, global);
goog.exportSymbol('proto.database.NodeHostInfo', null, global);
goog.exportSymbol('proto.database.NodeHostInfoOption', null, global);
goog.exportSymbol('proto.database.NodeInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.HasNodeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.HasNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.HasNodeInfoRequest.displayName = 'proto.database.HasNodeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.HasNodeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.HasNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.HasNodeInfoResponse.displayName = 'proto.database.HasNodeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetNodeHostInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetNodeHostInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetNodeHostInfoRequest.displayName = 'proto.database.GetNodeHostInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetNodeHostInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetNodeHostInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetNodeHostInfoResponse.displayName = 'proto.database.GetNodeHostInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetNodeHostConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetNodeHostConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetNodeHostConfigRequest.displayName = 'proto.database.GetNodeHostConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GetNodeHostConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GetNodeHostConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GetNodeHostConfigResponse.displayName = 'proto.database.GetNodeHostConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.NodeHostConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.NodeHostConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.NodeHostConfig.displayName = 'proto.database.NodeHostConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GossipConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.database.GossipConfig.repeatedFields_, null);
};
goog.inherits(proto.database.GossipConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GossipConfig.displayName = 'proto.database.GossipConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.NodeHostInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.database.NodeHostInfo.repeatedFields_, null);
};
goog.inherits(proto.database.NodeHostInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.NodeHostInfo.displayName = 'proto.database.NodeHostInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.ClusterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.ClusterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.ClusterInfo.displayName = 'proto.database.ClusterInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.GossipInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.GossipInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.GossipInfo.displayName = 'proto.database.GossipInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.NodeInfo.displayName = 'proto.database.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database.NodeHostInfoOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database.NodeHostInfoOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.database.NodeHostInfoOption.displayName = 'proto.database.NodeHostInfoOption';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.HasNodeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.HasNodeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.HasNodeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.HasNodeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.HasNodeInfoRequest}
 */
proto.database.HasNodeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.HasNodeInfoRequest;
  return proto.database.HasNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.HasNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.HasNodeInfoRequest}
 */
proto.database.HasNodeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.HasNodeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.HasNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.HasNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.HasNodeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 clusterID = 1;
 * @return {number}
 */
proto.database.HasNodeInfoRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.HasNodeInfoRequest} returns this
 */
proto.database.HasNodeInfoRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nodeID = 2;
 * @return {number}
 */
proto.database.HasNodeInfoRequest.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.HasNodeInfoRequest} returns this
 */
proto.database.HasNodeInfoRequest.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.HasNodeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.HasNodeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.HasNodeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.HasNodeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasnodeinfo: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.HasNodeInfoResponse}
 */
proto.database.HasNodeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.HasNodeInfoResponse;
  return proto.database.HasNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.HasNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.HasNodeInfoResponse}
 */
proto.database.HasNodeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasnodeinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.HasNodeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.HasNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.HasNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.HasNodeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasnodeinfo();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool hasNodeInfo = 1;
 * @return {boolean}
 */
proto.database.HasNodeInfoResponse.prototype.getHasnodeinfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.HasNodeInfoResponse} returns this
 */
proto.database.HasNodeInfoResponse.prototype.setHasnodeinfo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetNodeHostInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetNodeHostInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetNodeHostInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: (f = msg.getOption()) && proto.database.NodeHostInfoOption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetNodeHostInfoRequest}
 */
proto.database.GetNodeHostInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetNodeHostInfoRequest;
  return proto.database.GetNodeHostInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetNodeHostInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetNodeHostInfoRequest}
 */
proto.database.GetNodeHostInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database.NodeHostInfoOption;
      reader.readMessage(value,proto.database.NodeHostInfoOption.deserializeBinaryFromReader);
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetNodeHostInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetNodeHostInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetNodeHostInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOption();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database.NodeHostInfoOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeHostInfoOption option = 1;
 * @return {?proto.database.NodeHostInfoOption}
 */
proto.database.GetNodeHostInfoRequest.prototype.getOption = function() {
  return /** @type{?proto.database.NodeHostInfoOption} */ (
    jspb.Message.getWrapperField(this, proto.database.NodeHostInfoOption, 1));
};


/**
 * @param {?proto.database.NodeHostInfoOption|undefined} value
 * @return {!proto.database.GetNodeHostInfoRequest} returns this
*/
proto.database.GetNodeHostInfoRequest.prototype.setOption = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.GetNodeHostInfoRequest} returns this
 */
proto.database.GetNodeHostInfoRequest.prototype.clearOption = function() {
  return this.setOption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetNodeHostInfoRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetNodeHostInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetNodeHostInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetNodeHostInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.database.NodeHostInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetNodeHostInfoResponse}
 */
proto.database.GetNodeHostInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetNodeHostInfoResponse;
  return proto.database.GetNodeHostInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetNodeHostInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetNodeHostInfoResponse}
 */
proto.database.GetNodeHostInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database.NodeHostInfo;
      reader.readMessage(value,proto.database.NodeHostInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetNodeHostInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetNodeHostInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetNodeHostInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database.NodeHostInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeHostInfo info = 1;
 * @return {?proto.database.NodeHostInfo}
 */
proto.database.GetNodeHostInfoResponse.prototype.getInfo = function() {
  return /** @type{?proto.database.NodeHostInfo} */ (
    jspb.Message.getWrapperField(this, proto.database.NodeHostInfo, 1));
};


/**
 * @param {?proto.database.NodeHostInfo|undefined} value
 * @return {!proto.database.GetNodeHostInfoResponse} returns this
*/
proto.database.GetNodeHostInfoResponse.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.GetNodeHostInfoResponse} returns this
 */
proto.database.GetNodeHostInfoResponse.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetNodeHostInfoResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetNodeHostConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetNodeHostConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetNodeHostConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetNodeHostConfigRequest}
 */
proto.database.GetNodeHostConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetNodeHostConfigRequest;
  return proto.database.GetNodeHostConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetNodeHostConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetNodeHostConfigRequest}
 */
proto.database.GetNodeHostConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetNodeHostConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetNodeHostConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetNodeHostConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 clusterID = 1;
 * @return {number}
 */
proto.database.GetNodeHostConfigRequest.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GetNodeHostConfigRequest} returns this
 */
proto.database.GetNodeHostConfigRequest.prototype.setClusterid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.GetNodeHostConfigRequest} returns this
 */
proto.database.GetNodeHostConfigRequest.prototype.clearClusterid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetNodeHostConfigRequest.prototype.hasClusterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 nodeID = 2;
 * @return {number}
 */
proto.database.GetNodeHostConfigRequest.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GetNodeHostConfigRequest} returns this
 */
proto.database.GetNodeHostConfigRequest.prototype.setNodeid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.database.GetNodeHostConfigRequest} returns this
 */
proto.database.GetNodeHostConfigRequest.prototype.clearNodeid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetNodeHostConfigRequest.prototype.hasNodeid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GetNodeHostConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GetNodeHostConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GetNodeHostConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodehostconfig: (f = msg.getNodehostconfig()) && proto.database.NodeHostConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GetNodeHostConfigResponse}
 */
proto.database.GetNodeHostConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GetNodeHostConfigResponse;
  return proto.database.GetNodeHostConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GetNodeHostConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GetNodeHostConfigResponse}
 */
proto.database.GetNodeHostConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database.NodeHostConfig;
      reader.readMessage(value,proto.database.NodeHostConfig.deserializeBinaryFromReader);
      msg.setNodehostconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GetNodeHostConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GetNodeHostConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GetNodeHostConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GetNodeHostConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodehostconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database.NodeHostConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeHostConfig nodeHostConfig = 1;
 * @return {?proto.database.NodeHostConfig}
 */
proto.database.GetNodeHostConfigResponse.prototype.getNodehostconfig = function() {
  return /** @type{?proto.database.NodeHostConfig} */ (
    jspb.Message.getWrapperField(this, proto.database.NodeHostConfig, 1));
};


/**
 * @param {?proto.database.NodeHostConfig|undefined} value
 * @return {!proto.database.GetNodeHostConfigResponse} returns this
*/
proto.database.GetNodeHostConfigResponse.prototype.setNodehostconfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.GetNodeHostConfigResponse} returns this
 */
proto.database.GetNodeHostConfigResponse.prototype.clearNodehostconfig = function() {
  return this.setNodehostconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.GetNodeHostConfigResponse.prototype.hasNodehostconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.NodeHostConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.database.NodeHostConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.NodeHostConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploymentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waldir: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodehostdir: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roundtriptimemillisecond: jspb.Message.getFieldWithDefault(msg, 4, 0),
    raftaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    addressbynodehostid: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    listenaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mutualtls: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    cafile: jspb.Message.getFieldWithDefault(msg, 9, ""),
    certfile: jspb.Message.getFieldWithDefault(msg, 10, ""),
    keyfile: jspb.Message.getFieldWithDefault(msg, 11, ""),
    enablemetrics: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    maxsendqueuesize: jspb.Message.getFieldWithDefault(msg, 13, 0),
    maxreceivequeuesize: jspb.Message.getFieldWithDefault(msg, 14, 0),
    maxsnapshotsendbytespersecond: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxsnapshotrecvbytespersecond: jspb.Message.getFieldWithDefault(msg, 16, 0),
    notifycommit: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    gossipconfig: (f = msg.getGossipconfig()) && proto.database.GossipConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.NodeHostConfig}
 */
proto.database.NodeHostConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.NodeHostConfig;
  return proto.database.NodeHostConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.NodeHostConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.NodeHostConfig}
 */
proto.database.NodeHostConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeploymentid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaldir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodehostdir(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoundtriptimemillisecond(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaftaddress(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddressbynodehostid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenaddress(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMutualtls(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCafile(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertfile(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyfile(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablemetrics(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxsendqueuesize(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxreceivequeuesize(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxsnapshotsendbytespersecond(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxsnapshotrecvbytespersecond(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotifycommit(value);
      break;
    case 18:
      var value = new proto.database.GossipConfig;
      reader.readMessage(value,proto.database.GossipConfig.deserializeBinaryFromReader);
      msg.setGossipconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.NodeHostConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.NodeHostConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.NodeHostConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeploymentid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWaldir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodehostdir();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoundtriptimemillisecond();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getRaftaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAddressbynodehostid();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getListenaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMutualtls();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCafile();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCertfile();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getKeyfile();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEnablemetrics();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getMaxsendqueuesize();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getMaxreceivequeuesize();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getMaxsnapshotsendbytespersecond();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getMaxsnapshotrecvbytespersecond();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getNotifycommit();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getGossipconfig();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.database.GossipConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 DeploymentID = 1;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getDeploymentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setDeploymentid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string WALDir = 2;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getWaldir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setWaldir = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string NodeHostDir = 3;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getNodehostdir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setNodehostdir = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 RoundTripTimeMillisecond = 4;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getRoundtriptimemillisecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setRoundtriptimemillisecond = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string RaftAddress = 5;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getRaftaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setRaftaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool AddressByNodeHostID = 6;
 * @return {boolean}
 */
proto.database.NodeHostConfig.prototype.getAddressbynodehostid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setAddressbynodehostid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string ListenAddress = 7;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getListenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setListenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool MutualTLS = 8;
 * @return {boolean}
 */
proto.database.NodeHostConfig.prototype.getMutualtls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setMutualtls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string CAFile = 9;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getCafile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setCafile = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string CertFile = 10;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getCertfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setCertfile = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string KeyFile = 11;
 * @return {string}
 */
proto.database.NodeHostConfig.prototype.getKeyfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setKeyfile = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool EnableMetrics = 12;
 * @return {boolean}
 */
proto.database.NodeHostConfig.prototype.getEnablemetrics = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setEnablemetrics = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 MaxSendQueueSize = 13;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getMaxsendqueuesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setMaxsendqueuesize = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 MaxReceiveQueueSize = 14;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getMaxreceivequeuesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setMaxreceivequeuesize = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 MaxSnapshotSendBytesPerSecond = 15;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getMaxsnapshotsendbytespersecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setMaxsnapshotsendbytespersecond = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 MaxSnapshotRecvBytesPerSecond = 16;
 * @return {number}
 */
proto.database.NodeHostConfig.prototype.getMaxsnapshotrecvbytespersecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setMaxsnapshotrecvbytespersecond = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bool NotifyCommit = 17;
 * @return {boolean}
 */
proto.database.NodeHostConfig.prototype.getNotifycommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.setNotifycommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional GossipConfig GossipConfig = 18;
 * @return {?proto.database.GossipConfig}
 */
proto.database.NodeHostConfig.prototype.getGossipconfig = function() {
  return /** @type{?proto.database.GossipConfig} */ (
    jspb.Message.getWrapperField(this, proto.database.GossipConfig, 18));
};


/**
 * @param {?proto.database.GossipConfig|undefined} value
 * @return {!proto.database.NodeHostConfig} returns this
*/
proto.database.NodeHostConfig.prototype.setGossipconfig = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.NodeHostConfig} returns this
 */
proto.database.NodeHostConfig.prototype.clearGossipconfig = function() {
  return this.setGossipconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.NodeHostConfig.prototype.hasGossipconfig = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.database.GossipConfig.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GossipConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GossipConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GossipConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GossipConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    advertiseaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seedList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GossipConfig}
 */
proto.database.GossipConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GossipConfig;
  return proto.database.GossipConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GossipConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GossipConfig}
 */
proto.database.GossipConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdvertiseaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GossipConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GossipConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GossipConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GossipConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdvertiseaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string BindAddress = 1;
 * @return {string}
 */
proto.database.GossipConfig.prototype.getBindaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.GossipConfig} returns this
 */
proto.database.GossipConfig.prototype.setBindaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AdvertiseAddress = 2;
 * @return {string}
 */
proto.database.GossipConfig.prototype.getAdvertiseaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.GossipConfig} returns this
 */
proto.database.GossipConfig.prototype.setAdvertiseaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string Seed = 3;
 * @return {!Array<string>}
 */
proto.database.GossipConfig.prototype.getSeedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.database.GossipConfig} returns this
 */
proto.database.GossipConfig.prototype.setSeedList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.database.GossipConfig} returns this
 */
proto.database.GossipConfig.prototype.addSeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.database.GossipConfig} returns this
 */
proto.database.GossipConfig.prototype.clearSeedList = function() {
  return this.setSeedList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.database.NodeHostInfo.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.NodeHostInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.database.NodeHostInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.NodeHostInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodehostid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    raftaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gossip: (f = msg.getGossip()) && proto.database.GossipInfo.toObject(includeInstance, f),
    clusterinfoList: jspb.Message.toObjectList(msg.getClusterinfoList(),
    proto.database.ClusterInfo.toObject, includeInstance),
    loginfoList: jspb.Message.toObjectList(msg.getLoginfoList(),
    proto.database.NodeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.NodeHostInfo}
 */
proto.database.NodeHostInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.NodeHostInfo;
  return proto.database.NodeHostInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.NodeHostInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.NodeHostInfo}
 */
proto.database.NodeHostInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodehostid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaftaddress(value);
      break;
    case 3:
      var value = new proto.database.GossipInfo;
      reader.readMessage(value,proto.database.GossipInfo.deserializeBinaryFromReader);
      msg.setGossip(value);
      break;
    case 4:
      var value = new proto.database.ClusterInfo;
      reader.readMessage(value,proto.database.ClusterInfo.deserializeBinaryFromReader);
      msg.addClusterinfo(value);
      break;
    case 5:
      var value = new proto.database.NodeInfo;
      reader.readMessage(value,proto.database.NodeInfo.deserializeBinaryFromReader);
      msg.addLoginfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.NodeHostInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.NodeHostInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.NodeHostInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodehostid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRaftaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGossip();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.database.GossipInfo.serializeBinaryToWriter
    );
  }
  f = message.getClusterinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.database.ClusterInfo.serializeBinaryToWriter
    );
  }
  f = message.getLoginfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.database.NodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string NodeHostID = 1;
 * @return {string}
 */
proto.database.NodeHostInfo.prototype.getNodehostid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostInfo} returns this
 */
proto.database.NodeHostInfo.prototype.setNodehostid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RaftAddress = 2;
 * @return {string}
 */
proto.database.NodeHostInfo.prototype.getRaftaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.NodeHostInfo} returns this
 */
proto.database.NodeHostInfo.prototype.setRaftaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional GossipInfo Gossip = 3;
 * @return {?proto.database.GossipInfo}
 */
proto.database.NodeHostInfo.prototype.getGossip = function() {
  return /** @type{?proto.database.GossipInfo} */ (
    jspb.Message.getWrapperField(this, proto.database.GossipInfo, 3));
};


/**
 * @param {?proto.database.GossipInfo|undefined} value
 * @return {!proto.database.NodeHostInfo} returns this
*/
proto.database.NodeHostInfo.prototype.setGossip = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.database.NodeHostInfo} returns this
 */
proto.database.NodeHostInfo.prototype.clearGossip = function() {
  return this.setGossip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.database.NodeHostInfo.prototype.hasGossip = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ClusterInfo ClusterInfo = 4;
 * @return {!Array<!proto.database.ClusterInfo>}
 */
proto.database.NodeHostInfo.prototype.getClusterinfoList = function() {
  return /** @type{!Array<!proto.database.ClusterInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.database.ClusterInfo, 4));
};


/**
 * @param {!Array<!proto.database.ClusterInfo>} value
 * @return {!proto.database.NodeHostInfo} returns this
*/
proto.database.NodeHostInfo.prototype.setClusterinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.database.ClusterInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.database.ClusterInfo}
 */
proto.database.NodeHostInfo.prototype.addClusterinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.database.ClusterInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.database.NodeHostInfo} returns this
 */
proto.database.NodeHostInfo.prototype.clearClusterinfoList = function() {
  return this.setClusterinfoList([]);
};


/**
 * repeated NodeInfo LogInfo = 5;
 * @return {!Array<!proto.database.NodeInfo>}
 */
proto.database.NodeHostInfo.prototype.getLoginfoList = function() {
  return /** @type{!Array<!proto.database.NodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.database.NodeInfo, 5));
};


/**
 * @param {!Array<!proto.database.NodeInfo>} value
 * @return {!proto.database.NodeHostInfo} returns this
*/
proto.database.NodeHostInfo.prototype.setLoginfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.database.NodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.database.NodeInfo}
 */
proto.database.NodeHostInfo.prototype.addLoginfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.database.NodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.database.NodeHostInfo} returns this
 */
proto.database.NodeHostInfo.prototype.clearLoginfoList = function() {
  return this.setLoginfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.ClusterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.database.ClusterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.ClusterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ClusterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, undefined) : [],
    configchangeindex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    statemachinetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isleader: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isobserver: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    iswitness: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    pending: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.ClusterInfo}
 */
proto.database.ClusterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.ClusterInfo;
  return proto.database.ClusterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.ClusterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.ClusterInfo}
 */
proto.database.ClusterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    case 3:
      var value = msg.getNodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigchangeindex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatemachinetype(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsleader(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsobserver(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswitness(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.ClusterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.ClusterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.ClusterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.ClusterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConfigchangeindex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getStatemachinetype();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getIsleader();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsobserver();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIswitness();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getPending();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional uint64 ClusterID = 1;
 * @return {number}
 */
proto.database.ClusterInfo.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 NodeID = 2;
 * @return {number}
 */
proto.database.ClusterInfo.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<uint64, string> Nodes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.database.ClusterInfo.prototype.getNodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.clearNodesMap = function() {
  this.getNodesMap().clear();
  return this;};


/**
 * optional uint64 ConfigChangeIndex = 4;
 * @return {number}
 */
proto.database.ClusterInfo.prototype.getConfigchangeindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setConfigchangeindex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 StateMachineType = 5;
 * @return {number}
 */
proto.database.ClusterInfo.prototype.getStatemachinetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setStatemachinetype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool IsLeader = 6;
 * @return {boolean}
 */
proto.database.ClusterInfo.prototype.getIsleader = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setIsleader = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool IsObserver = 7;
 * @return {boolean}
 */
proto.database.ClusterInfo.prototype.getIsobserver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setIsobserver = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool IsWitness = 8;
 * @return {boolean}
 */
proto.database.ClusterInfo.prototype.getIswitness = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setIswitness = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool Pending = 9;
 * @return {boolean}
 */
proto.database.ClusterInfo.prototype.getPending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.ClusterInfo} returns this
 */
proto.database.ClusterInfo.prototype.setPending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.GossipInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.database.GossipInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.GossipInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GossipInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    advertiseaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numofknownnodehosts: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.GossipInfo}
 */
proto.database.GossipInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.GossipInfo;
  return proto.database.GossipInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.GossipInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.GossipInfo}
 */
proto.database.GossipInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdvertiseaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumofknownnodehosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.GossipInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.GossipInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.GossipInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.GossipInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAdvertiseaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumofknownnodehosts();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool Enabled = 1;
 * @return {boolean}
 */
proto.database.GossipInfo.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.GossipInfo} returns this
 */
proto.database.GossipInfo.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string AdvertiseAddress = 2;
 * @return {string}
 */
proto.database.GossipInfo.prototype.getAdvertiseaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.database.GossipInfo} returns this
 */
proto.database.GossipInfo.prototype.setAdvertiseaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 NumOfKnownNodeHosts = 3;
 * @return {number}
 */
proto.database.GossipInfo.prototype.getNumofknownnodehosts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.GossipInfo} returns this
 */
proto.database.GossipInfo.prototype.setNumofknownnodehosts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.database.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.NodeInfo}
 */
proto.database.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.NodeInfo;
  return proto.database.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.NodeInfo}
 */
proto.database.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 ClusterID = 1;
 * @return {number}
 */
proto.database.NodeInfo.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeInfo} returns this
 */
proto.database.NodeInfo.prototype.setClusterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 NodeID = 2;
 * @return {number}
 */
proto.database.NodeInfo.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.database.NodeInfo} returns this
 */
proto.database.NodeInfo.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database.NodeHostInfoOption.prototype.toObject = function(opt_includeInstance) {
  return proto.database.NodeHostInfoOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database.NodeHostInfoOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostInfoOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    skiploginfo: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database.NodeHostInfoOption}
 */
proto.database.NodeHostInfoOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database.NodeHostInfoOption;
  return proto.database.NodeHostInfoOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database.NodeHostInfoOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database.NodeHostInfoOption}
 */
proto.database.NodeHostInfoOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkiploginfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database.NodeHostInfoOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database.NodeHostInfoOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database.NodeHostInfoOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database.NodeHostInfoOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkiploginfo();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool SkipLogInfo = 1;
 * @return {boolean}
 */
proto.database.NodeHostInfoOption.prototype.getSkiploginfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.database.NodeHostInfoOption} returns this
 */
proto.database.NodeHostInfoOption.prototype.setSkiploginfo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.database);
