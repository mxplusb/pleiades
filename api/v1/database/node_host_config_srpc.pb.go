// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.8.6
// source: api/v1/database/node_host_config.proto

package database

import (
	context "context"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCNodeConfigServiceClient interface {
	SRPCClient() srpc.Client

	GetNodeHostConfig(ctx context.Context, in *GetNodeHostConfigRequest) (*GetNodeHostConfigResponse, error)
	GetNodeHostInfo(ctx context.Context, in *GetNodeHostInfoRequest) (*GetNodeHostInfoResponse, error)
	HasNodeInfo(ctx context.Context, in *HasNodeInfoRequest) (*HasNodeInfoResponse, error)
}

type srpcNodeConfigServiceClient struct {
	cc srpc.Client
}

func NewSRPCNodeConfigServiceClient(cc srpc.Client) SRPCNodeConfigServiceClient {
	return &srpcNodeConfigServiceClient{cc}
}

func (c *srpcNodeConfigServiceClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcNodeConfigServiceClient) GetNodeHostConfig(ctx context.Context, in *GetNodeHostConfigRequest) (*GetNodeHostConfigResponse, error) {
	out := new(GetNodeHostConfigResponse)
	err := c.cc.Invoke(ctx, "database.NodeConfigService", "GetNodeHostConfig", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeConfigServiceClient) GetNodeHostInfo(ctx context.Context, in *GetNodeHostInfoRequest) (*GetNodeHostInfoResponse, error) {
	out := new(GetNodeHostInfoResponse)
	err := c.cc.Invoke(ctx, "database.NodeConfigService", "GetNodeHostInfo", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeConfigServiceClient) HasNodeInfo(ctx context.Context, in *HasNodeInfoRequest) (*HasNodeInfoResponse, error) {
	out := new(HasNodeInfoResponse)
	err := c.cc.Invoke(ctx, "database.NodeConfigService", "HasNodeInfo", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCNodeConfigServiceServer interface {
	GetNodeHostConfig(context.Context, *GetNodeHostConfigRequest) (*GetNodeHostConfigResponse, error)
	GetNodeHostInfo(context.Context, *GetNodeHostInfoRequest) (*GetNodeHostInfoResponse, error)
	HasNodeInfo(context.Context, *HasNodeInfoRequest) (*HasNodeInfoResponse, error)
}

type SRPCNodeConfigServiceUnimplementedServer struct{}

func (s *SRPCNodeConfigServiceUnimplementedServer) GetNodeHostConfig(context.Context, *GetNodeHostConfigRequest) (*GetNodeHostConfigResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeConfigServiceUnimplementedServer) GetNodeHostInfo(context.Context, *GetNodeHostInfoRequest) (*GetNodeHostInfoResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeConfigServiceUnimplementedServer) HasNodeInfo(context.Context, *HasNodeInfoRequest) (*HasNodeInfoResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCNodeConfigServiceServiceID = "database.NodeConfigService"

type SRPCNodeConfigServiceHandler struct {
	impl SRPCNodeConfigServiceServer
}

func (SRPCNodeConfigServiceHandler) GetServiceID() string { return SRPCNodeConfigServiceServiceID }

func (SRPCNodeConfigServiceHandler) GetMethodIDs() []string {
	return []string{
		"GetNodeHostConfig",
		"GetNodeHostInfo",
		"HasNodeInfo",
	}
}

func (d *SRPCNodeConfigServiceHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "GetNodeHostConfig":
		return true, d.InvokeMethod_GetNodeHostConfig(d.impl, strm)
	case "GetNodeHostInfo":
		return true, d.InvokeMethod_GetNodeHostInfo(d.impl, strm)
	case "HasNodeInfo":
		return true, d.InvokeMethod_HasNodeInfo(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCNodeConfigServiceHandler) InvokeMethod_GetNodeHostConfig(impl SRPCNodeConfigServiceServer, strm srpc.Stream) error {
	req := new(GetNodeHostConfigRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetNodeHostConfig(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeConfigServiceHandler) InvokeMethod_GetNodeHostInfo(impl SRPCNodeConfigServiceServer, strm srpc.Stream) error {
	req := new(GetNodeHostInfoRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetNodeHostInfo(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeConfigServiceHandler) InvokeMethod_HasNodeInfo(impl SRPCNodeConfigServiceServer, strm srpc.Stream) error {
	req := new(HasNodeInfoRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.HasNodeInfo(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func SRPCRegisterNodeConfigService(mux srpc.Mux, impl SRPCNodeConfigServiceServer) error {
	return mux.Register(&SRPCNodeConfigServiceHandler{impl: impl})
}

type SRPCNodeConfigService_GetNodeHostConfigStream interface {
	srpc.Stream
	SendAndClose(*GetNodeHostConfigResponse) error
}

type srpcNodeConfigService_GetNodeHostConfigStream struct {
	srpc.Stream
}

func (x *srpcNodeConfigService_GetNodeHostConfigStream) SendAndClose(m *GetNodeHostConfigResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNodeConfigService_GetNodeHostInfoStream interface {
	srpc.Stream
	SendAndClose(*GetNodeHostInfoResponse) error
}

type srpcNodeConfigService_GetNodeHostInfoStream struct {
	srpc.Stream
}

func (x *srpcNodeConfigService_GetNodeHostInfoStream) SendAndClose(m *GetNodeHostInfoResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNodeConfigService_HasNodeInfoStream interface {
	srpc.Stream
	SendAndClose(*HasNodeInfoResponse) error
}

type srpcNodeConfigService_HasNodeInfoStream struct {
	srpc.Stream
}

func (x *srpcNodeConfigService_HasNodeInfoStream) SendAndClose(m *HasNodeInfoResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
