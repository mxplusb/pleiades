// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.8.6
// source: api/v1/database/raft_control.proto

package database

import (
	context "context"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCRaftControlServiceClient interface {
	SRPCClient() srpc.Client

	GetLeaderID(ctx context.Context, in *GetLeaderIDRequest) (*GetLeaderIDResponse, error)
	GetID(ctx context.Context, in *IdRequest) (*IdResponse, error)
	ReadIndex(ctx context.Context, in *ReadIndexRequest) (SRPCRaftControlService_ReadIndexClient, error)
	ReadLocalNode(ctx context.Context, in *ReadLocalNodeRequest) (*KeyValue, error)
	AddNode(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddNodeClient, error)
	AddObserver(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddObserverClient, error)
	AddWitness(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddWitnessClient, error)
	RequestCompaction(ctx context.Context, in *ModifyNodeRequest) (*SysOpState, error)
	RequestDeleteNode(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_RequestDeleteNodeClient, error)
	RequestLeaderTransfer(ctx context.Context, in *ModifyNodeRequest) (*RequestLeaderTransferResponse, error)
	RequestSnapshot(ctx context.Context, in *RequestSnapshotRequest) (SRPCRaftControlService_RequestSnapshotClient, error)
	Stop(ctx context.Context, in *StopRequest) (*StopResponse, error)
	StopNode(ctx context.Context, in *ModifyNodeRequest) (*StopNodeResponse, error)
}

type srpcRaftControlServiceClient struct {
	cc srpc.Client
}

func NewSRPCRaftControlServiceClient(cc srpc.Client) SRPCRaftControlServiceClient {
	return &srpcRaftControlServiceClient{cc}
}

func (c *srpcRaftControlServiceClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcRaftControlServiceClient) GetLeaderID(ctx context.Context, in *GetLeaderIDRequest) (*GetLeaderIDResponse, error) {
	out := new(GetLeaderIDResponse)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "GetLeaderID", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) GetID(ctx context.Context, in *IdRequest) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "GetID", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) ReadIndex(ctx context.Context, in *ReadIndexRequest) (SRPCRaftControlService_ReadIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "ReadIndex", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_ReadIndexClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_ReadIndexClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_ReadIndexClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_ReadIndexClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_ReadIndexClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) ReadLocalNode(ctx context.Context, in *ReadLocalNodeRequest) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "ReadLocalNode", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) AddNode(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "AddNode", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_AddNodeClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_AddNodeClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_AddNodeClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddNodeClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_AddNodeClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) AddObserver(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddObserverClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "AddObserver", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_AddObserverClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_AddObserverClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_AddObserverClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddObserverClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_AddObserverClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) AddWitness(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_AddWitnessClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "AddWitness", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_AddWitnessClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_AddWitnessClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_AddWitnessClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddWitnessClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_AddWitnessClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) RequestCompaction(ctx context.Context, in *ModifyNodeRequest) (*SysOpState, error) {
	out := new(SysOpState)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "RequestCompaction", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) RequestDeleteNode(ctx context.Context, in *ModifyNodeRequest) (SRPCRaftControlService_RequestDeleteNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "RequestDeleteNode", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_RequestDeleteNodeClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_RequestDeleteNodeClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_RequestDeleteNodeClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestDeleteNodeClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_RequestDeleteNodeClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) RequestLeaderTransfer(ctx context.Context, in *ModifyNodeRequest) (*RequestLeaderTransferResponse, error) {
	out := new(RequestLeaderTransferResponse)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "RequestLeaderTransfer", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) RequestSnapshot(ctx context.Context, in *RequestSnapshotRequest) (SRPCRaftControlService_RequestSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, "database.RaftControlService", "RequestSnapshot", in)
	if err != nil {
		return nil, err
	}
	strm := &srpcRaftControlService_RequestSnapshotClient{stream}
	if err := strm.CloseSend(); err != nil {
		return nil, err
	}
	return strm, nil
}

type SRPCRaftControlService_RequestSnapshotClient interface {
	srpc.Stream
	Recv() (*IndexState, error)
	RecvTo(*IndexState) error
}

type srpcRaftControlService_RequestSnapshotClient struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestSnapshotClient) Recv() (*IndexState, error) {
	m := new(IndexState)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRaftControlService_RequestSnapshotClient) RecvTo(m *IndexState) error {
	return x.MsgRecv(m)
}

func (c *srpcRaftControlServiceClient) Stop(ctx context.Context, in *StopRequest) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "Stop", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcRaftControlServiceClient) StopNode(ctx context.Context, in *ModifyNodeRequest) (*StopNodeResponse, error) {
	out := new(StopNodeResponse)
	err := c.cc.Invoke(ctx, "database.RaftControlService", "StopNode", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCRaftControlServiceServer interface {
	GetLeaderID(context.Context, *GetLeaderIDRequest) (*GetLeaderIDResponse, error)
	GetID(context.Context, *IdRequest) (*IdResponse, error)
	ReadIndex(*ReadIndexRequest, SRPCRaftControlService_ReadIndexStream) error
	ReadLocalNode(context.Context, *ReadLocalNodeRequest) (*KeyValue, error)
	AddNode(*ModifyNodeRequest, SRPCRaftControlService_AddNodeStream) error
	AddObserver(*ModifyNodeRequest, SRPCRaftControlService_AddObserverStream) error
	AddWitness(*ModifyNodeRequest, SRPCRaftControlService_AddWitnessStream) error
	RequestCompaction(context.Context, *ModifyNodeRequest) (*SysOpState, error)
	RequestDeleteNode(*ModifyNodeRequest, SRPCRaftControlService_RequestDeleteNodeStream) error
	RequestLeaderTransfer(context.Context, *ModifyNodeRequest) (*RequestLeaderTransferResponse, error)
	RequestSnapshot(*RequestSnapshotRequest, SRPCRaftControlService_RequestSnapshotStream) error
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	StopNode(context.Context, *ModifyNodeRequest) (*StopNodeResponse, error)
}

type SRPCRaftControlServiceUnimplementedServer struct{}

func (s *SRPCRaftControlServiceUnimplementedServer) GetLeaderID(context.Context, *GetLeaderIDRequest) (*GetLeaderIDResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) GetID(context.Context, *IdRequest) (*IdResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) ReadIndex(*ReadIndexRequest, SRPCRaftControlService_ReadIndexStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) ReadLocalNode(context.Context, *ReadLocalNodeRequest) (*KeyValue, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) AddNode(*ModifyNodeRequest, SRPCRaftControlService_AddNodeStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) AddObserver(*ModifyNodeRequest, SRPCRaftControlService_AddObserverStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) AddWitness(*ModifyNodeRequest, SRPCRaftControlService_AddWitnessStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) RequestCompaction(context.Context, *ModifyNodeRequest) (*SysOpState, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) RequestDeleteNode(*ModifyNodeRequest, SRPCRaftControlService_RequestDeleteNodeStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) RequestLeaderTransfer(context.Context, *ModifyNodeRequest) (*RequestLeaderTransferResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) RequestSnapshot(*RequestSnapshotRequest, SRPCRaftControlService_RequestSnapshotStream) error {
	return srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCRaftControlServiceUnimplementedServer) StopNode(context.Context, *ModifyNodeRequest) (*StopNodeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCRaftControlServiceServiceID = "database.RaftControlService"

type SRPCRaftControlServiceHandler struct {
	impl SRPCRaftControlServiceServer
}

func (SRPCRaftControlServiceHandler) GetServiceID() string { return SRPCRaftControlServiceServiceID }

func (SRPCRaftControlServiceHandler) GetMethodIDs() []string {
	return []string{
		"GetLeaderID",
		"GetID",
		"ReadIndex",
		"ReadLocalNode",
		"AddNode",
		"AddObserver",
		"AddWitness",
		"RequestCompaction",
		"RequestDeleteNode",
		"RequestLeaderTransfer",
		"RequestSnapshot",
		"Stop",
		"StopNode",
	}
}

func (d *SRPCRaftControlServiceHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "GetLeaderID":
		return true, d.InvokeMethod_GetLeaderID(d.impl, strm)
	case "GetID":
		return true, d.InvokeMethod_GetID(d.impl, strm)
	case "ReadIndex":
		return true, d.InvokeMethod_ReadIndex(d.impl, strm)
	case "ReadLocalNode":
		return true, d.InvokeMethod_ReadLocalNode(d.impl, strm)
	case "AddNode":
		return true, d.InvokeMethod_AddNode(d.impl, strm)
	case "AddObserver":
		return true, d.InvokeMethod_AddObserver(d.impl, strm)
	case "AddWitness":
		return true, d.InvokeMethod_AddWitness(d.impl, strm)
	case "RequestCompaction":
		return true, d.InvokeMethod_RequestCompaction(d.impl, strm)
	case "RequestDeleteNode":
		return true, d.InvokeMethod_RequestDeleteNode(d.impl, strm)
	case "RequestLeaderTransfer":
		return true, d.InvokeMethod_RequestLeaderTransfer(d.impl, strm)
	case "RequestSnapshot":
		return true, d.InvokeMethod_RequestSnapshot(d.impl, strm)
	case "Stop":
		return true, d.InvokeMethod_Stop(d.impl, strm)
	case "StopNode":
		return true, d.InvokeMethod_StopNode(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCRaftControlServiceHandler) InvokeMethod_GetLeaderID(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(GetLeaderIDRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetLeaderID(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_GetID(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(IdRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetID(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_ReadIndex(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ReadIndexRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_ReadIndexStream{strm}
	return impl.ReadIndex(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_ReadLocalNode(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ReadLocalNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ReadLocalNode(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_AddNode(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_AddNodeStream{strm}
	return impl.AddNode(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_AddObserver(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_AddObserverStream{strm}
	return impl.AddObserver(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_AddWitness(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_AddWitnessStream{strm}
	return impl.AddWitness(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_RequestCompaction(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.RequestCompaction(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_RequestDeleteNode(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_RequestDeleteNodeStream{strm}
	return impl.RequestDeleteNode(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_RequestLeaderTransfer(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.RequestLeaderTransfer(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_RequestSnapshot(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(RequestSnapshotRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	serverStrm := &srpcRaftControlService_RequestSnapshotStream{strm}
	return impl.RequestSnapshot(req, serverStrm)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_Stop(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(StopRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.Stop(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCRaftControlServiceHandler) InvokeMethod_StopNode(impl SRPCRaftControlServiceServer, strm srpc.Stream) error {
	req := new(ModifyNodeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.StopNode(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func SRPCRegisterRaftControlService(mux srpc.Mux, impl SRPCRaftControlServiceServer) error {
	return mux.Register(&SRPCRaftControlServiceHandler{impl: impl})
}

type SRPCRaftControlService_GetLeaderIDStream interface {
	srpc.Stream
	SendAndClose(*GetLeaderIDResponse) error
}

type srpcRaftControlService_GetLeaderIDStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_GetLeaderIDStream) SendAndClose(m *GetLeaderIDResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_GetIDStream interface {
	srpc.Stream
	SendAndClose(*IdResponse) error
}

type srpcRaftControlService_GetIDStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_GetIDStream) SendAndClose(m *IdResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_ReadIndexStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_ReadIndexStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_ReadIndexStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_ReadLocalNodeStream interface {
	srpc.Stream
	SendAndClose(*KeyValue) error
}

type srpcRaftControlService_ReadLocalNodeStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_ReadLocalNodeStream) SendAndClose(m *KeyValue) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_AddNodeStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_AddNodeStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddNodeStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_AddObserverStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_AddObserverStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddObserverStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_AddWitnessStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_AddWitnessStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_AddWitnessStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_RequestCompactionStream interface {
	srpc.Stream
	SendAndClose(*SysOpState) error
}

type srpcRaftControlService_RequestCompactionStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestCompactionStream) SendAndClose(m *SysOpState) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_RequestDeleteNodeStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_RequestDeleteNodeStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestDeleteNodeStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_RequestLeaderTransferStream interface {
	srpc.Stream
	SendAndClose(*RequestLeaderTransferResponse) error
}

type srpcRaftControlService_RequestLeaderTransferStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestLeaderTransferStream) SendAndClose(m *RequestLeaderTransferResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_RequestSnapshotStream interface {
	srpc.Stream
	Send(*IndexState) error
}

type srpcRaftControlService_RequestSnapshotStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_RequestSnapshotStream) Send(m *IndexState) error {
	return x.MsgSend(m)
}

type SRPCRaftControlService_StopStream interface {
	srpc.Stream
	SendAndClose(*StopResponse) error
}

type srpcRaftControlService_StopStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_StopStream) SendAndClose(m *StopResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCRaftControlService_StopNodeStream interface {
	srpc.Stream
	SendAndClose(*StopNodeResponse) error
}

type srpcRaftControlService_StopNodeStream struct {
	srpc.Stream
}

func (x *srpcRaftControlService_StopNodeStream) SendAndClose(m *StopNodeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
