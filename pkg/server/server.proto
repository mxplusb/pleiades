syntax = "proto3";
package server;

import "api/v1/database/kv.proto";
import "api/v1/database/transactions.proto";
import "api/v1/raft/raft_shard.proto";
import "api/v1/raft/raft_host.proto";
option go_package = "github.com/mxplusb/pleiades/pkg/server";

service ShardManager {
  rpc AddReplica(raft.AddReplicaRequest) returns (raft.AddReplicaReply);
  rpc AddReplicaObserver(raft.AddReplicaObserverRequest) returns (raft.AddReplicaObserverReply);
  rpc AddReplicaWitness(raft.AddReplicaWitnessRequest) returns (raft.AddReplicaWitnessReply);
  rpc GetLeaderId(raft.GetLeaderIdRequest) returns (raft.GetLeaderIdReply);
  rpc GetShardMembers(raft.GetShardMembersRequest) returns (raft.GetShardMembersReply);
  rpc NewShard(raft.NewShardRequest) returns (raft.NewShardReply);
  rpc RemoveData(raft.RemoveDataRequest) returns (raft.RemoveDataReply);
  rpc RemoveReplica(raft.DeleteReplicaRequest) returns (raft.DeleteReplicaReply);
  rpc StartReplica(raft.StartReplicaRequest) returns (raft.StartReplicaReply);
  rpc StartReplicaObserver(raft.StartReplicaRequest) returns (raft.StartReplicaReply);
  rpc StopReplica(raft.StopReplicaRequest) returns (raft.StopReplicaReply);
}

service RaftHost {
  rpc Compact(raft.CompactRequest) returns (raft.CompactReply);
  rpc GetHostConfig(raft.GetHostConfigRequest) returns (raft.GetHostConfigReply);
//  rpc LeaderTransfer(raft.LeaderTransferRequest) returns (raft.LeaderTransferReply);
  rpc Snapshot(raft.SnapshotRequest) returns (raft.SnapshotReply);
  rpc Stop(raft.StopRequest) returns (raft.StopReply);
}

service Transactions {
  rpc NewTransaction(database.NewTransactionRequest) returns (database.NewTransactionReply);
  rpc CloseTransaction(database.CloseTransactionRequest) returns (database.CloseTransactionReply);
  rpc Commit(database.CommitRequest) returns (database.CommitReply);
}

service KVStoreService {
  rpc CreateAccount(database.CreateAccountRequest) returns (database.CreateAccountReply) {}
//  rpc GetAccountInfo(database.GetAccountDescriptorRequest) returns (database.GetAccountDescriptorReply) {}
  rpc DeleteAccount(database.DeleteBucketRequest) returns (database.DeleteBucketReply) {}
  rpc CreateBucket(database.CreateBucketRequest) returns (database.CreateBucketReply) {}
  rpc DeleteBucket(database.DeleteBucketRequest) returns (database.DeleteBucketReply) {}
  rpc GetKey(database.GetKeyRequest) returns (database.GetKeyReply) {}
  rpc PutKey(database.PutKeyRequest) returns (database.PutKeyReply) {}
  rpc DeleteKey(database.DeleteKeyRequest) returns (database.DeleteKeyReply) {}
}