// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go config.28.0
// 	protoc        (unknown)
// source: config/config/config.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsConfigType int32

const (
	IsConfigType_IS_CONFIG_TYPE_SYSTEM       IsConfigType = 0
	IsConfigType_IS_CONFIG_TYPE_EXCHANGE     IsConfigType = 1
	IsConfigType_IS_CONFIG_TYPE_CUSTOMER_FSM IsConfigType = 100
)

// Enum value maps for IsConfigType.
var (
	IsConfigType_name = map[int32]string{
		0:   "IS_CONFIG_TYPE_SYSTEM",
		1:   "IS_CONFIG_TYPE_EXCHANGE",
		100: "IS_CONFIG_TYPE_CUSTOMER_FSM",
	}
	IsConfigType_value = map[string]int32{
		"IS_CONFIG_TYPE_SYSTEM":       0,
		"IS_CONFIG_TYPE_EXCHANGE":     1,
		"IS_CONFIG_TYPE_CUSTOMER_FSM": 100,
	}
)

func (x IsConfigType) Enum() *IsConfigType {
	p := new(IsConfigType)
	*p = x
	return p
}

func (x IsConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (IsConfigType) Type() protoreflect.EnumType {
	return &file_config_v1_config_proto_enumTypes[0]
}

func (x IsConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsConfigType.Descriptor instead.
func (IsConfigType) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{0}
}

type GetConfigRequest_Type int32

const (
	GetConfigRequest_TYPE_ALL  GetConfigRequest_Type = 0
	GetConfigRequest_TYPE_RAFT GetConfigRequest_Type = 1
)

// Enum value maps for GetConfigRequest_Type.
var (
	GetConfigRequest_Type_name = map[int32]string{
		0: "TYPE_ALL",
		1: "TYPE_RAFT",
	}
	GetConfigRequest_Type_value = map[string]int32{
		"TYPE_ALL":  0,
		"TYPE_RAFT": 1,
	}
)

func (x GetConfigRequest_Type) Enum() *GetConfigRequest_Type {
	p := new(GetConfigRequest_Type)
	*p = x
	return p
}

func (x GetConfigRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetConfigRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (GetConfigRequest_Type) Type() protoreflect.EnumType {
	return &file_config_v1_config_proto_enumTypes[1]
}

func (x GetConfigRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetConfigRequest_Type.Descriptor instead.
func (GetConfigRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{2, 0}
}

type GetConfigRequest_Specificity int32

const (
	GetConfigRequest_SPECIFICITY_ONE        GetConfigRequest_Specificity = 0
	GetConfigRequest_SPECIFICITY_EVERYTHING GetConfigRequest_Specificity = 1
)

// Enum value maps for GetConfigRequest_Specificity.
var (
	GetConfigRequest_Specificity_name = map[int32]string{
		0: "SPECIFICITY_ONE",
		1: "SPECIFICITY_EVERYTHING",
	}
	GetConfigRequest_Specificity_value = map[string]int32{
		"SPECIFICITY_ONE":        0,
		"SPECIFICITY_EVERYTHING": 1,
	}
)

func (x GetConfigRequest_Specificity) Enum() *GetConfigRequest_Specificity {
	p := new(GetConfigRequest_Specificity)
	*p = x
	return p
}

func (x GetConfigRequest_Specificity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetConfigRequest_Specificity) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_config_proto_enumTypes[2].Descriptor()
}

func (GetConfigRequest_Specificity) Type() protoreflect.EnumType {
	return &file_config_v1_config_proto_enumTypes[2]
}

func (x GetConfigRequest_Specificity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetConfigRequest_Specificity.Descriptor instead.
func (GetConfigRequest_Specificity) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{2, 1}
}

type ConfigResponseAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftConfigs []*ListRaftConfigurationResponse `protobuf:"bytes,1,rep,name=raft_configs,json=raftConfigs,proto3" json:"raft_configs,omitempty"`
}

func (x *ConfigResponseAll) Reset() {
	*x = ConfigResponseAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponseAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponseAll) ProtoMessage() {}

func (x *ConfigResponseAll) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponseAll.ProtoReflect.Descriptor instead.
func (*ConfigResponseAll) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigResponseAll) GetRaftConfigs() []*ListRaftConfigurationResponse {
	if x != nil {
		return x.RaftConfigs
	}
	return nil
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*GetConfigResponse_All
	//	*GetConfigResponse_AllRaftConfigs
	//	*GetConfigResponse_RaftConfig
	Type isGetConfigResponse_Type `protobuf_oneof:"type"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (m *GetConfigResponse) GetType() isGetConfigResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *GetConfigResponse) GetAll() *ConfigResponseAll {
	if x, ok := x.GetType().(*GetConfigResponse_All); ok {
		return x.All
	}
	return nil
}

func (x *GetConfigResponse) GetAllRaftConfigs() *ListRaftConfigurationResponse {
	if x, ok := x.GetType().(*GetConfigResponse_AllRaftConfigs); ok {
		return x.AllRaftConfigs
	}
	return nil
}

func (x *GetConfigResponse) GetRaftConfig() *GetRaftConfigurationResponse {
	if x, ok := x.GetType().(*GetConfigResponse_RaftConfig); ok {
		return x.RaftConfig
	}
	return nil
}

type isGetConfigResponse_Type interface {
	isGetConfigResponse_Type()
}

type GetConfigResponse_All struct {
	All *ConfigResponseAll `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type GetConfigResponse_AllRaftConfigs struct {
	AllRaftConfigs *ListRaftConfigurationResponse `protobuf:"bytes,2,opt,name=all_raft_configs,json=allRaftConfigs,proto3,oneof"`
}

type GetConfigResponse_RaftConfig struct {
	RaftConfig *GetRaftConfigurationResponse `protobuf:"bytes,3,opt,name=raft_config,json=raftConfig,proto3,oneof"`
}

func (*GetConfigResponse_All) isGetConfigResponse_Type() {}

func (*GetConfigResponse_AllRaftConfigs) isGetConfigResponse_Type() {}

func (*GetConfigResponse_RaftConfig) isGetConfigResponse_Type() {}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	What   GetConfigRequest_Type        `protobuf:"varint,1,opt,name=what,proto3,enum=config.GetConfigRequest_Type" json:"what,omitempty"`
	Amount GetConfigRequest_Specificity `protobuf:"varint,2,opt,name=amount,proto3,enum=config.GetConfigRequest_Specificity" json:"amount,omitempty"`
	Key    *string                      `protobuf:"bytes,3,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *GetConfigRequest) GetWhat() GetConfigRequest_Type {
	if x != nil {
		return x.What
	}
	return GetConfigRequest_TYPE_ALL
}

func (x *GetConfigRequest) GetAmount() GetConfigRequest_Specificity {
	if x != nil {
		return x.Amount
	}
	return GetConfigRequest_SPECIFICITY_ONE
}

func (x *GetConfigRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type RaftConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId                     uint64       `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ClusterId                  uint64       `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	CheckQuorum                bool         `protobuf:"varint,4,opt,name=check_quorum,json=checkQuorum,proto3" json:"check_quorum,omitempty"`
	ElectionRoundTripTime      uint64       `protobuf:"varint,5,opt,name=election_round_trip_time,json=electionRoundTripTime,proto3" json:"election_round_trip_time,omitempty"`
	HeartbeatRoundTripTime     uint64       `protobuf:"varint,6,opt,name=heartbeat_round_trip_time,json=heartbeatRoundTripTime,proto3" json:"heartbeat_round_trip_time,omitempty"`
	SnapshotEntries            uint64       `protobuf:"varint,7,opt,name=snapshot_entries,json=snapshotEntries,proto3" json:"snapshot_entries,omitempty"`
	CompactionOverhead         uint64       `protobuf:"varint,8,opt,name=compaction_overhead,json=compactionOverhead,proto3" json:"compaction_overhead,omitempty"`
	OrderedConfigurationChange bool         `protobuf:"varint,9,opt,name=ordered_configuration_change,json=orderedConfigurationChange,proto3" json:"ordered_configuration_change,omitempty"`
	MaxInMemoryLogSize         uint64       `protobuf:"varint,10,opt,name=max_in_memory_log_size,json=maxInMemoryLogSize,proto3" json:"max_in_memory_log_size,omitempty"`
	SnapshotCompressionType    uint64       `protobuf:"varint,11,opt,name=snapshot_compression_type,json=snapshotCompressionType,proto3" json:"snapshot_compression_type,omitempty"`
	EntryCompressionType       uint64       `protobuf:"varint,12,opt,name=entry_compression_type,json=entryCompressionType,proto3" json:"entry_compression_type,omitempty"`
	DisableAutoCompactions     bool         `protobuf:"varint,13,opt,name=disable_auto_compactions,json=disableAutoCompactions,proto3" json:"disable_auto_compactions,omitempty"`
	IsObserver                 bool         `protobuf:"varint,14,opt,name=is_observer,json=isObserver,proto3" json:"is_observer,omitempty"`
	IsWitness                  bool         `protobuf:"varint,15,opt,name=is_witness,json=isWitness,proto3" json:"is_witness,omitempty"`
	Quiesce                    bool         `protobuf:"varint,16,opt,name=quiesce,proto3" json:"quiesce,omitempty"`
	Type                       IsConfigType `protobuf:"varint,17,opt,name=type,proto3,enum=config.IsConfigType" json:"type,omitempty"`
}

func (x *RaftConfig) Reset() {
	*x = RaftConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfig) ProtoMessage() {}

func (x *RaftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfig.ProtoReflect.Descriptor instead.
func (*RaftConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *RaftConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RaftConfig) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RaftConfig) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *RaftConfig) GetCheckQuorum() bool {
	if x != nil {
		return x.CheckQuorum
	}
	return false
}

func (x *RaftConfig) GetElectionRoundTripTime() uint64 {
	if x != nil {
		return x.ElectionRoundTripTime
	}
	return 0
}

func (x *RaftConfig) GetHeartbeatRoundTripTime() uint64 {
	if x != nil {
		return x.HeartbeatRoundTripTime
	}
	return 0
}

func (x *RaftConfig) GetSnapshotEntries() uint64 {
	if x != nil {
		return x.SnapshotEntries
	}
	return 0
}

func (x *RaftConfig) GetCompactionOverhead() uint64 {
	if x != nil {
		return x.CompactionOverhead
	}
	return 0
}

func (x *RaftConfig) GetOrderedConfigurationChange() bool {
	if x != nil {
		return x.OrderedConfigurationChange
	}
	return false
}

func (x *RaftConfig) GetMaxInMemoryLogSize() uint64 {
	if x != nil {
		return x.MaxInMemoryLogSize
	}
	return 0
}

func (x *RaftConfig) GetSnapshotCompressionType() uint64 {
	if x != nil {
		return x.SnapshotCompressionType
	}
	return 0
}

func (x *RaftConfig) GetEntryCompressionType() uint64 {
	if x != nil {
		return x.EntryCompressionType
	}
	return 0
}

func (x *RaftConfig) GetDisableAutoCompactions() bool {
	if x != nil {
		return x.DisableAutoCompactions
	}
	return false
}

func (x *RaftConfig) GetIsObserver() bool {
	if x != nil {
		return x.IsObserver
	}
	return false
}

func (x *RaftConfig) GetIsWitness() bool {
	if x != nil {
		return x.IsWitness
	}
	return false
}

func (x *RaftConfig) GetQuiesce() bool {
	if x != nil {
		return x.Quiesce
	}
	return false
}

func (x *RaftConfig) GetType() IsConfigType {
	if x != nil {
		return x.Type
	}
	return IsConfigType_IS_CONFIG_TYPE_SYSTEM
}

type PutRaftConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool        `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Name   string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config *RaftConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PutRaftConfigurationRequest) Reset() {
	*x = PutRaftConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRaftConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRaftConfigurationRequest) ProtoMessage() {}

func (x *PutRaftConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRaftConfigurationRequest.ProtoReflect.Descriptor instead.
func (*PutRaftConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *PutRaftConfigurationRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PutRaftConfigurationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutRaftConfigurationRequest) GetConfig() *RaftConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PutRaftConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Error *string `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *PutRaftConfigurationResponse) Reset() {
	*x = PutRaftConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRaftConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRaftConfigurationResponse) ProtoMessage() {}

func (x *PutRaftConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRaftConfigurationResponse.ProtoReflect.Descriptor instead.
func (*PutRaftConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *PutRaftConfigurationResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *PutRaftConfigurationResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PutRaftConfigurationResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetRaftConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRaftConfigurationRequest) Reset() {
	*x = GetRaftConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaftConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftConfigurationRequest) ProtoMessage() {}

func (x *GetRaftConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetRaftConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *GetRaftConfigurationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRaftConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *RaftConfig `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *GetRaftConfigurationResponse) Reset() {
	*x = GetRaftConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaftConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftConfigurationResponse) ProtoMessage() {}

func (x *GetRaftConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetRaftConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *GetRaftConfigurationResponse) GetConfiguration() *RaftConfig {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type ListRaftConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRaftConfigurationRequest) Reset() {
	*x = ListRaftConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRaftConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRaftConfigurationRequest) ProtoMessage() {}

func (x *ListRaftConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRaftConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ListRaftConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{8}
}

type ListRaftConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableConfigs map[string]*RaftConfig `protobuf:"bytes,1,rep,name=available_configs,json=availableConfigs,proto3" json:"available_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRaftConfigurationResponse) Reset() {
	*x = ListRaftConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRaftConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRaftConfigurationResponse) ProtoMessage() {}

func (x *ListRaftConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRaftConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ListRaftConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_config_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *ListRaftConfigurationResponse) GetAvailableConfigs() map[string]*RaftConfig {
	if x != nil {
		return x.AvailableConfigs
	}
	return nil
}

var File_config_v1_config_proto protoreflect.FileDescriptor

var file_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0x59, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x68, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x77, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x22, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x22, 0x3e,
	0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xe9, 0x05, 0x0a, 0x0a, 0x52, 0x61, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x40, 0x0a, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7b, 0x0a, 0x1c, 0x50, 0x75, 0x74, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x67, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x46, 0x53, 0x4d, 0x10,
	0x64, 0x32, 0xe5, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74,
	0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5f, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x20, 0x72, 0x33, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x65, 0x69, 0x61,
	0x64, 0x65, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca,
	0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_config_v1_config_proto_rawDescOnce sync.Once
	file_config_v1_config_proto_rawDescData = file_config_v1_config_proto_rawDesc
)

func file_config_v1_config_proto_rawDescGZIP() []byte {
	file_config_v1_config_proto_rawDescOnce.Do(func() {
		file_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_config_proto_rawDescData)
	})
	return file_config_v1_config_proto_rawDescData
}

var file_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_v1_config_proto_goTypes = []interface{}{
	(IsConfigType)(0),                     // 0: config.IsConfigType
	(GetConfigRequest_Type)(0),            // 1: config.GetConfigRequest.Type
	(GetConfigRequest_Specificity)(0),     // 2: config.GetConfigRequest.Specificity
	(*ConfigResponseAll)(nil),             // 3: config.ConfigResponseAll
	(*GetConfigResponse)(nil),             // 4: config.GetConfigResponse
	(*GetConfigRequest)(nil),              // 5: config.GetConfigRequest
	(*RaftConfig)(nil),                    // 6: config.RaftConfig
	(*PutRaftConfigurationRequest)(nil),   // 7: config.PutRaftConfigurationRequest
	(*PutRaftConfigurationResponse)(nil),  // 8: config.PutRaftConfigurationResponse
	(*GetRaftConfigurationRequest)(nil),   // 9: config.GetRaftConfigurationRequest
	(*GetRaftConfigurationResponse)(nil),  // 10: config.GetRaftConfigurationResponse
	(*ListRaftConfigurationRequest)(nil),  // 11: config.ListRaftConfigurationRequest
	(*ListRaftConfigurationResponse)(nil), // 12: config.ListRaftConfigurationResponse
	nil,                                   // 13: config.ListRaftConfigurationResponse.AvailableConfigsEntry
}
var file_config_v1_config_proto_depIdxs = []int32{
	12, // 0: config.ConfigResponseAll.raft_configs:type_name -> config.ListRaftConfigurationResponse
	3,  // 1: config.GetConfigResponse.all:type_name -> config.ConfigResponseAll
	12, // 2: config.GetConfigResponse.all_raft_configs:type_name -> config.ListRaftConfigurationResponse
	10, // 3: config.GetConfigResponse.raft_config:type_name -> config.GetRaftConfigurationResponse
	1,  // 4: config.GetConfigRequest.what:type_name -> config.GetConfigRequest.Type
	2,  // 5: config.GetConfigRequest.amount:type_name -> config.GetConfigRequest.Specificity
	0,  // 6: config.RaftConfig.type:type_name -> config.IsConfigType
	6,  // 7: config.PutRaftConfigurationRequest.config:type_name -> config.RaftConfig
	6,  // 8: config.GetRaftConfigurationResponse.configuration:type_name -> config.RaftConfig
	13, // 9: config.ListRaftConfigurationResponse.available_configs:type_name -> config.ListRaftConfigurationResponse.AvailableConfigsEntry
	6,  // 10: config.ListRaftConfigurationResponse.AvailableConfigsEntry.value:type_name -> config.RaftConfig
	5,  // 11: config.ConfigService.GetConfig:input_type -> config.GetConfigRequest
	7,  // 12: config.ConfigService.PutRaftConfiguration:input_type -> config.PutRaftConfigurationRequest
	9,  // 13: config.ConfigService.GetRaftConfiguration:input_type -> config.GetRaftConfigurationRequest
	11, // 14: config.ConfigService.ListRaftConfiguration:input_type -> config.ListRaftConfigurationRequest
	4,  // 15: config.ConfigService.GetConfig:output_type -> config.GetConfigResponse
	8,  // 16: config.ConfigService.PutRaftConfiguration:output_type -> config.PutRaftConfigurationResponse
	10, // 17: config.ConfigService.GetRaftConfiguration:output_type -> config.GetRaftConfigurationResponse
	12, // 18: config.ConfigService.ListRaftConfiguration:output_type -> config.ListRaftConfigurationResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_config_v1_config_proto_init() }
func file_config_v1_config_proto_init() {
	if File_config_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponseAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRaftConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRaftConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaftConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaftConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRaftConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRaftConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_v1_config_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetConfigResponse_All)(nil),
		(*GetConfigResponse_AllRaftConfigs)(nil),
		(*GetConfigResponse_RaftConfig)(nil),
	}
	file_config_v1_config_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_config_v1_config_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_v1_config_proto_goTypes,
		DependencyIndexes: file_config_v1_config_proto_depIdxs,
		EnumInfos:         file_config_v1_config_proto_enumTypes,
		MessageInfos:      file_config_v1_config_proto_msgTypes,
	}.Build()
	File_config_v1_config_proto = out.File
	file_config_v1_config_proto_rawDesc = nil
	file_config_v1_config_proto_goTypes = nil
	file_config_v1_config_proto_depIdxs = nil
}
