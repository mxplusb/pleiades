// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version:
// source: config/config/config.proto

package v1

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_config_v1_config_proto struct{}

func (drpcEncoding_File_config_v1_config_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_config_v1_config_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_config_v1_config_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_config_v1_config_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_config_v1_config_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCConfigServiceClient interface {
	DRPCConn() drpc.Conn

	GetConfig(ctx context.Context, in *GetConfigRequest) (*GetConfigResponse, error)
	PutRaftConfiguration(ctx context.Context, in *PutRaftConfigurationRequest) (*PutRaftConfigurationResponse, error)
	GetRaftConfiguration(ctx context.Context, in *GetRaftConfigurationRequest) (*GetRaftConfigurationResponse, error)
	ListRaftConfiguration(ctx context.Context, in *ListRaftConfigurationRequest) (*ListRaftConfigurationResponse, error)
}

type drpcConfigServiceClient struct {
	cc drpc.Conn
}

func NewDRPCConfigServiceClient(cc drpc.Conn) DRPCConfigServiceClient {
	return &drpcConfigServiceClient{cc}
}

func (c *drpcConfigServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcConfigServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetConfig", drpcEncoding_File_config_v1_config_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcConfigServiceClient) PutRaftConfiguration(ctx context.Context, in *PutRaftConfigurationRequest) (*PutRaftConfigurationResponse, error) {
	out := new(PutRaftConfigurationResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/PutRaftConfiguration", drpcEncoding_File_config_v1_config_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcConfigServiceClient) GetRaftConfiguration(ctx context.Context, in *GetRaftConfigurationRequest) (*GetRaftConfigurationResponse, error) {
	out := new(GetRaftConfigurationResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetRaftConfiguration", drpcEncoding_File_config_v1_config_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcConfigServiceClient) ListRaftConfiguration(ctx context.Context, in *ListRaftConfigurationRequest) (*ListRaftConfigurationResponse, error) {
	out := new(ListRaftConfigurationResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListRaftConfiguration", drpcEncoding_File_config_v1_config_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCConfigServiceServer interface {
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	PutRaftConfiguration(context.Context, *PutRaftConfigurationRequest) (*PutRaftConfigurationResponse, error)
	GetRaftConfiguration(context.Context, *GetRaftConfigurationRequest) (*GetRaftConfigurationResponse, error)
	ListRaftConfiguration(context.Context, *ListRaftConfigurationRequest) (*ListRaftConfigurationResponse, error)
}

type DRPCConfigServiceUnimplementedServer struct{}

func (s *DRPCConfigServiceUnimplementedServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCConfigServiceUnimplementedServer) PutRaftConfiguration(context.Context, *PutRaftConfigurationRequest) (*PutRaftConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCConfigServiceUnimplementedServer) GetRaftConfiguration(context.Context, *GetRaftConfigurationRequest) (*GetRaftConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCConfigServiceUnimplementedServer) ListRaftConfiguration(context.Context, *ListRaftConfigurationRequest) (*ListRaftConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCConfigServiceDescription struct{}

func (DRPCConfigServiceDescription) NumMethods() int { return 4 }

func (DRPCConfigServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/config.ConfigService/GetConfig", drpcEncoding_File_config_v1_config_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCConfigServiceServer).
					GetConfig(
						ctx,
						in1.(*GetConfigRequest),
					)
			}, DRPCConfigServiceServer.GetConfig, true
	case 1:
		return "/config.ConfigService/PutRaftConfiguration", drpcEncoding_File_config_v1_config_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCConfigServiceServer).
					PutRaftConfiguration(
						ctx,
						in1.(*PutRaftConfigurationRequest),
					)
			}, DRPCConfigServiceServer.PutRaftConfiguration, true
	case 2:
		return "/config.ConfigService/GetRaftConfiguration", drpcEncoding_File_config_v1_config_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCConfigServiceServer).
					GetRaftConfiguration(
						ctx,
						in1.(*GetRaftConfigurationRequest),
					)
			}, DRPCConfigServiceServer.GetRaftConfiguration, true
	case 3:
		return "/config.ConfigService/ListRaftConfiguration", drpcEncoding_File_config_v1_config_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCConfigServiceServer).
					ListRaftConfiguration(
						ctx,
						in1.(*ListRaftConfigurationRequest),
					)
			}, DRPCConfigServiceServer.ListRaftConfiguration, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterConfigService(mux drpc.Mux, impl DRPCConfigServiceServer) error {
	return mux.Register(impl, DRPCConfigServiceDescription{})
}

type DRPCConfigService_GetConfigStream interface {
	drpc.Stream
	SendAndClose(*GetConfigResponse) error
}

type drpcConfigService_GetConfigStream struct {
	drpc.Stream
}

func (x *drpcConfigService_GetConfigStream) SendAndClose(m *GetConfigResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_config_v1_config_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCConfigService_PutRaftConfigurationStream interface {
	drpc.Stream
	SendAndClose(*PutRaftConfigurationResponse) error
}

type drpcConfigService_PutRaftConfigurationStream struct {
	drpc.Stream
}

func (x *drpcConfigService_PutRaftConfigurationStream) SendAndClose(m *PutRaftConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_config_v1_config_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCConfigService_GetRaftConfigurationStream interface {
	drpc.Stream
	SendAndClose(*GetRaftConfigurationResponse) error
}

type drpcConfigService_GetRaftConfigurationStream struct {
	drpc.Stream
}

func (x *drpcConfigService_GetRaftConfigurationStream) SendAndClose(m *GetRaftConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_config_v1_config_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCConfigService_ListRaftConfigurationStream interface {
	drpc.Stream
	SendAndClose(*ListRaftConfigurationResponse) error
}

type drpcConfigService_ListRaftConfigurationStream struct {
	drpc.Stream
}

func (x *drpcConfigService_ListRaftConfigurationStream) SendAndClose(m *ListRaftConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_config_v1_config_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
