// Code generated by capnpc-go. DO NOT EDIT.

package v1

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type ConfigService struct{ Client *capnp.Client }

// ConfigService_TypeID is the unique identifier for the type ConfigService.
const ConfigService_TypeID = 0xcd55e3c0a182ac77

func (c ConfigService) GetConfig(ctx context.Context, params func(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/config/v1/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_getConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_getConfig_Results_Future{Future: ans.Future()}, release
}

func (c ConfigService) AddRef() ConfigService {
	return ConfigService{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigService) Release() {
	c.Client.Release()
}

// A ConfigService_Server is a ConfigService with a local implementation.
type ConfigService_Server interface {
	GetConfig(context.Context, ConfigService_getConfig) error
}

// ConfigService_NewServer creates a new Server from an implementation of ConfigService_Server.
func ConfigService_NewServer(s ConfigService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigService_Methods(nil, s), s, c, policy)
}

// ConfigService_ServerToClient creates a new Client from an implementation of ConfigService_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigService_ServerToClient(s ConfigService_Server, policy *server.Policy) ConfigService {
	return ConfigService{Client: capnp.NewClient(ConfigService_NewServer(s, policy))}
}

// ConfigService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigService_Methods(methods []server.Method, s ConfigService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/config/v1/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConfig(ctx, ConfigService_getConfig{call})
		},
	})

	return methods
}

// ConfigService_getConfig holds the state for a server call to ConfigService.getConfig.
// See server.Call for documentation.
type ConfigService_getConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_getConfig) Args() ConfigService_getConfig_Params {
	return ConfigService_getConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_getConfig) AllocResults() (ConfigService_getConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{Struct: r}, err
}

type ConfigService_getConfig_Params struct{ capnp.Struct }

// ConfigService_getConfig_Params_TypeID is the unique identifier for the type ConfigService_getConfig_Params.
const ConfigService_getConfig_Params_TypeID = 0xec98034329cbb446

func NewConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func NewRootConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func ReadRootConfigService_getConfig_Params(msg *capnp.Message) (ConfigService_getConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Params{root.Struct()}, err
}

func (s ConfigService_getConfig_Params) String() string {
	str, _ := text.Marshal(0xec98034329cbb446, s.Struct)
	return str
}

func (s ConfigService_getConfig_Params) Config() (GetConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Params) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Params) SetConfig(v GetConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated GetConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Params) NewConfig() (GetConfigurationRequest, error) {
	ss, err := NewGetConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return GetConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Params_List is a list of ConfigService_getConfig_Params.
type ConfigService_getConfig_Params_List = capnp.StructList[ConfigService_getConfig_Params]

// NewConfigService_getConfig_Params creates a new list of ConfigService_getConfig_Params.
func NewConfigService_getConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Params]{List: l}, err
}

// ConfigService_getConfig_Params_Future is a wrapper for a ConfigService_getConfig_Params promised by a client call.
type ConfigService_getConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Params_Future) Struct() (ConfigService_getConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Params{s}, err
}

func (p ConfigService_getConfig_Params_Future) Config() GetConfigurationRequest_Future {
	return GetConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_getConfig_Results struct{ capnp.Struct }

// ConfigService_getConfig_Results_TypeID is the unique identifier for the type ConfigService_getConfig_Results.
const ConfigService_getConfig_Results_TypeID = 0xad375e71bf983dc3

func NewConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func NewRootConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func ReadRootConfigService_getConfig_Results(msg *capnp.Message) (ConfigService_getConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Results{root.Struct()}, err
}

func (s ConfigService_getConfig_Results) String() string {
	str, _ := text.Marshal(0xad375e71bf983dc3, s.Struct)
	return str
}

func (s ConfigService_getConfig_Results) Data() (GetConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Results) SetData(v GetConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewData sets the data field to a newly
// allocated GetConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Results) NewData() (GetConfigurationResponse, error) {
	ss, err := NewGetConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return GetConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Results_List is a list of ConfigService_getConfig_Results.
type ConfigService_getConfig_Results_List = capnp.StructList[ConfigService_getConfig_Results]

// NewConfigService_getConfig_Results creates a new list of ConfigService_getConfig_Results.
func NewConfigService_getConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Results]{List: l}, err
}

// ConfigService_getConfig_Results_Future is a wrapper for a ConfigService_getConfig_Results promised by a client call.
type ConfigService_getConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Results_Future) Struct() (ConfigService_getConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Results{s}, err
}

func (p ConfigService_getConfig_Results_Future) Data() GetConfigurationResponse_Future {
	return GetConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type GetConfigurationRequest struct{ capnp.Struct }

// GetConfigurationRequest_TypeID is the unique identifier for the type GetConfigurationRequest.
const GetConfigurationRequest_TypeID = 0xc0e43eb9670b8d20

func NewGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func NewRootGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func ReadRootGetConfigurationRequest(msg *capnp.Message) (GetConfigurationRequest, error) {
	root, err := msg.Root()
	return GetConfigurationRequest{root.Struct()}, err
}

func (s GetConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc0e43eb9670b8d20, s.Struct)
	return str
}

func (s GetConfigurationRequest) What() GetConfigurationRequest_Type {
	return GetConfigurationRequest_Type(s.Struct.Uint16(0))
}

func (s GetConfigurationRequest) SetWhat(v GetConfigurationRequest_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetConfigurationRequest) Amount() GetConfigurationRequest_Specificity {
	return GetConfigurationRequest_Specificity(s.Struct.Uint16(2))
}

func (s GetConfigurationRequest) SetAmount(v GetConfigurationRequest_Specificity) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s GetConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetConfigurationRequest_List is a list of GetConfigurationRequest.
type GetConfigurationRequest_List = capnp.StructList[GetConfigurationRequest]

// NewGetConfigurationRequest creates a new list of GetConfigurationRequest.
func NewGetConfigurationRequest_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationRequest]{List: l}, err
}

// GetConfigurationRequest_Future is a wrapper for a GetConfigurationRequest promised by a client call.
type GetConfigurationRequest_Future struct{ *capnp.Future }

func (p GetConfigurationRequest_Future) Struct() (GetConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetConfigurationRequest{s}, err
}

type GetConfigurationRequest_Type uint16

// GetConfigurationRequest_Type_TypeID is the unique identifier for the type GetConfigurationRequest_Type.
const GetConfigurationRequest_Type_TypeID = 0xd6645c0180f9fc72

// Values of GetConfigurationRequest_Type.
const (
	GetConfigurationRequest_Type_all  GetConfigurationRequest_Type = 0
	GetConfigurationRequest_Type_raft GetConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Type) String() string {
	switch c {
	case GetConfigurationRequest_Type_all:
		return "all"
	case GetConfigurationRequest_Type_raft:
		return "raft"

	default:
		return ""
	}
}

// GetConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_TypeFromString(c string) GetConfigurationRequest_Type {
	switch c {
	case "all":
		return GetConfigurationRequest_Type_all
	case "raft":
		return GetConfigurationRequest_Type_raft

	default:
		return 0
	}
}

type GetConfigurationRequest_Type_List = capnp.EnumList[GetConfigurationRequest_Type]

func NewGetConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Type](s, sz)
}

type GetConfigurationRequest_Specificity uint16

// GetConfigurationRequest_Specificity_TypeID is the unique identifier for the type GetConfigurationRequest_Specificity.
const GetConfigurationRequest_Specificity_TypeID = 0xbe4eeef9143c2824

// Values of GetConfigurationRequest_Specificity.
const (
	GetConfigurationRequest_Specificity_one        GetConfigurationRequest_Specificity = 0
	GetConfigurationRequest_Specificity_everything GetConfigurationRequest_Specificity = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Specificity) String() string {
	switch c {
	case GetConfigurationRequest_Specificity_one:
		return "one"
	case GetConfigurationRequest_Specificity_everything:
		return "everything"

	default:
		return ""
	}
}

// GetConfigurationRequest_SpecificityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_SpecificityFromString(c string) GetConfigurationRequest_Specificity {
	switch c {
	case "one":
		return GetConfigurationRequest_Specificity_one
	case "everything":
		return GetConfigurationRequest_Specificity_everything

	default:
		return 0
	}
}

type GetConfigurationRequest_Specificity_List = capnp.EnumList[GetConfigurationRequest_Specificity]

func NewGetConfigurationRequest_Specificity_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Specificity_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Specificity](s, sz)
}

type GetConfigurationResponse struct{ capnp.Struct }
type GetConfigurationResponse_Which uint16

const (
	GetConfigurationResponse_Which_all  GetConfigurationResponse_Which = 0
	GetConfigurationResponse_Which_raft GetConfigurationResponse_Which = 1
)

func (w GetConfigurationResponse_Which) String() string {
	const s = "allraft"
	switch w {
	case GetConfigurationResponse_Which_all:
		return s[0:3]
	case GetConfigurationResponse_Which_raft:
		return s[3:7]

	}
	return "GetConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GetConfigurationResponse_TypeID is the unique identifier for the type GetConfigurationResponse.
const GetConfigurationResponse_TypeID = 0xad93807af77fe1b9

func NewGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func NewRootGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func ReadRootGetConfigurationResponse(msg *capnp.Message) (GetConfigurationResponse, error) {
	root, err := msg.Root()
	return GetConfigurationResponse{root.Struct()}, err
}

func (s GetConfigurationResponse) String() string {
	str, _ := text.Marshal(0xad93807af77fe1b9, s.Struct)
	return str
}

func (s GetConfigurationResponse) Which() GetConfigurationResponse_Which {
	return GetConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s GetConfigurationResponse) All() (AllConfigurations, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != all")
	}
	p, err := s.Struct.Ptr(0)
	return AllConfigurations{Struct: p.Struct()}, err
}

func (s GetConfigurationResponse) HasAll() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetAll(v AllConfigurations) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAll sets the all field to a newly
// allocated AllConfigurations struct, preferring placement in s's segment.
func (s GetConfigurationResponse) NewAll() (AllConfigurations, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAllConfigurations(s.Struct.Segment())
	if err != nil {
		return AllConfigurations{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetConfigurationResponse) Raft() (RaftConfiguration_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s GetConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetRaft(v RaftConfiguration_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s GetConfigurationResponse) NewRaft(n int32) (RaftConfiguration_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetConfigurationResponse_List is a list of GetConfigurationResponse.
type GetConfigurationResponse_List = capnp.StructList[GetConfigurationResponse]

// NewGetConfigurationResponse creates a new list of GetConfigurationResponse.
func NewGetConfigurationResponse_List(s *capnp.Segment, sz int32) (GetConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationResponse]{List: l}, err
}

// GetConfigurationResponse_Future is a wrapper for a GetConfigurationResponse promised by a client call.
type GetConfigurationResponse_Future struct{ *capnp.Future }

func (p GetConfigurationResponse_Future) Struct() (GetConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetConfigurationResponse{s}, err
}

func (p GetConfigurationResponse_Future) All() AllConfigurations_Future {
	return AllConfigurations_Future{Future: p.Future.Field(0, nil)}
}

type AllConfigurations struct{ capnp.Struct }

// AllConfigurations_TypeID is the unique identifier for the type AllConfigurations.
const AllConfigurations_TypeID = 0xa3cf4f7f955be932

func NewAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func NewRootAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func ReadRootAllConfigurations(msg *capnp.Message) (AllConfigurations, error) {
	root, err := msg.Root()
	return AllConfigurations{root.Struct()}, err
}

func (s AllConfigurations) String() string {
	str, _ := text.Marshal(0xa3cf4f7f955be932, s.Struct)
	return str
}

func (s AllConfigurations) Raft() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s AllConfigurations) HasRaft() bool {
	return s.Struct.HasPtr(0)
}

func (s AllConfigurations) SetRaft(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s AllConfigurations) NewRaft(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllConfigurations_List is a list of AllConfigurations.
type AllConfigurations_List = capnp.StructList[AllConfigurations]

// NewAllConfigurations creates a new list of AllConfigurations.
func NewAllConfigurations_List(s *capnp.Segment, sz int32) (AllConfigurations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AllConfigurations]{List: l}, err
}

// AllConfigurations_Future is a wrapper for a AllConfigurations promised by a client call.
type AllConfigurations_Future struct{ *capnp.Future }

func (p AllConfigurations_Future) Struct() (AllConfigurations, error) {
	s, err := p.Future.Struct()
	return AllConfigurations{s}, err
}

type RaftConfiguration struct{ capnp.Struct }

// RaftConfiguration_TypeID is the unique identifier for the type RaftConfiguration.
const RaftConfiguration_TypeID = 0xdb9a661a7821150d

func NewRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func NewRootRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func ReadRootRaftConfiguration(msg *capnp.Message) (RaftConfiguration, error) {
	root, err := msg.Root()
	return RaftConfiguration{root.Struct()}, err
}

func (s RaftConfiguration) String() string {
	str, _ := text.Marshal(0xdb9a661a7821150d, s.Struct)
	return str
}

func (s RaftConfiguration) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RaftConfiguration) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RaftConfiguration) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RaftConfiguration) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RaftConfiguration) NodeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s RaftConfiguration) SetNodeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RaftConfiguration) ClusterId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RaftConfiguration) SetClusterId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RaftConfiguration) CheckQuorum() bool {
	return s.Struct.Bit(128)
}

func (s RaftConfiguration) SetCheckQuorum(v bool) {
	s.Struct.SetBit(128, v)
}

func (s RaftConfiguration) ElectionTimeout() uint64 {
	return s.Struct.Uint64(24)
}

func (s RaftConfiguration) SetElectionTimeout(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s RaftConfiguration) HeartbeatTimeout() uint64 {
	return s.Struct.Uint64(32)
}

func (s RaftConfiguration) SetHeartbeatTimeout(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s RaftConfiguration) SnapshotEntries() uint64 {
	return s.Struct.Uint64(40)
}

func (s RaftConfiguration) SetSnapshotEntries(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s RaftConfiguration) CompactionOverhead() uint64 {
	return s.Struct.Uint64(48)
}

func (s RaftConfiguration) SetCompactionOverhead(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s RaftConfiguration) OrderedConfigurationChange() bool {
	return s.Struct.Bit(129)
}

func (s RaftConfiguration) SetOrderedConfigurationChange(v bool) {
	s.Struct.SetBit(129, v)
}

func (s RaftConfiguration) MaxInMemoryLogSize() uint64 {
	return s.Struct.Uint64(56)
}

func (s RaftConfiguration) SetMaxInMemoryLogSize(v uint64) {
	s.Struct.SetUint64(56, v)
}

func (s RaftConfiguration) SnapshotCompressionType() uint64 {
	return s.Struct.Uint64(64)
}

func (s RaftConfiguration) SetSnapshotCompressionType(v uint64) {
	s.Struct.SetUint64(64, v)
}

func (s RaftConfiguration) EntryCompressionType() uint64 {
	return s.Struct.Uint64(72)
}

func (s RaftConfiguration) SetEntryCompressionType(v uint64) {
	s.Struct.SetUint64(72, v)
}

func (s RaftConfiguration) DisableAutoCompaction() bool {
	return s.Struct.Bit(130)
}

func (s RaftConfiguration) SetDisableAutoCompaction(v bool) {
	s.Struct.SetBit(130, v)
}

func (s RaftConfiguration) IsObserver() bool {
	return s.Struct.Bit(131)
}

func (s RaftConfiguration) SetIsObserver(v bool) {
	s.Struct.SetBit(131, v)
}

func (s RaftConfiguration) IsWitness() bool {
	return s.Struct.Bit(132)
}

func (s RaftConfiguration) SetIsWitness(v bool) {
	s.Struct.SetBit(132, v)
}

func (s RaftConfiguration) Quiesce() bool {
	return s.Struct.Bit(133)
}

func (s RaftConfiguration) SetQuiesce(v bool) {
	s.Struct.SetBit(133, v)
}

func (s RaftConfiguration) ConfigType() ConfigType {
	return ConfigType(s.Struct.Uint16(18))
}

func (s RaftConfiguration) SetConfigType(v ConfigType) {
	s.Struct.SetUint16(18, uint16(v))
}

// RaftConfiguration_List is a list of RaftConfiguration.
type RaftConfiguration_List = capnp.StructList[RaftConfiguration]

// NewRaftConfiguration creates a new list of RaftConfiguration.
func NewRaftConfiguration_List(s *capnp.Segment, sz int32) (RaftConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[RaftConfiguration]{List: l}, err
}

// RaftConfiguration_Future is a wrapper for a RaftConfiguration promised by a client call.
type RaftConfiguration_Future struct{ *capnp.Future }

func (p RaftConfiguration_Future) Struct() (RaftConfiguration, error) {
	s, err := p.Future.Struct()
	return RaftConfiguration{s}, err
}

type ConfigType uint16

// ConfigType_TypeID is the unique identifier for the type ConfigType.
const ConfigType_TypeID = 0xadb2d0b69445303c

// Values of ConfigType.
const (
	ConfigType_system      ConfigType = 0
	ConfigType_exchange    ConfigType = 1
	ConfigType_customerFsm ConfigType = 2
)

// String returns the enum's constant name.
func (c ConfigType) String() string {
	switch c {
	case ConfigType_system:
		return "system"
	case ConfigType_exchange:
		return "exchange"
	case ConfigType_customerFsm:
		return "customerFsm"

	default:
		return ""
	}
}

// ConfigTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ConfigTypeFromString(c string) ConfigType {
	switch c {
	case "system":
		return ConfigType_system
	case "exchange":
		return ConfigType_exchange
	case "customerFsm":
		return ConfigType_customerFsm

	default:
		return 0
	}
}

type ConfigType_List = capnp.EnumList[ConfigType]

func NewConfigType_List(s *capnp.Segment, sz int32) (ConfigType_List, error) {
	return capnp.NewEnumList[ConfigType](s, sz)
}

type ListRaftConfigurationRequest struct{ capnp.Struct }

// ListRaftConfigurationRequest_TypeID is the unique identifier for the type ListRaftConfigurationRequest.
const ListRaftConfigurationRequest_TypeID = 0xc75a0f30e41b37f5

func NewListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func NewRootListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func ReadRootListRaftConfigurationRequest(msg *capnp.Message) (ListRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return ListRaftConfigurationRequest{root.Struct()}, err
}

func (s ListRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc75a0f30e41b37f5, s.Struct)
	return str
}

// ListRaftConfigurationRequest_List is a list of ListRaftConfigurationRequest.
type ListRaftConfigurationRequest_List = capnp.StructList[ListRaftConfigurationRequest]

// NewListRaftConfigurationRequest creates a new list of ListRaftConfigurationRequest.
func NewListRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (ListRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ListRaftConfigurationRequest]{List: l}, err
}

// ListRaftConfigurationRequest_Future is a wrapper for a ListRaftConfigurationRequest promised by a client call.
type ListRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p ListRaftConfigurationRequest_Future) Struct() (ListRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationRequest{s}, err
}

type ListRaftConfigurationResponse struct{ capnp.Struct }

// ListRaftConfigurationResponse_TypeID is the unique identifier for the type ListRaftConfigurationResponse.
const ListRaftConfigurationResponse_TypeID = 0xc5195060b33b8218

func NewListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func NewRootListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func ReadRootListRaftConfigurationResponse(msg *capnp.Message) (ListRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return ListRaftConfigurationResponse{root.Struct()}, err
}

func (s ListRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xc5195060b33b8218, s.Struct)
	return str
}

func (s ListRaftConfigurationResponse) Configs() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s ListRaftConfigurationResponse) HasConfigs() bool {
	return s.Struct.HasPtr(0)
}

func (s ListRaftConfigurationResponse) SetConfigs(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewConfigs sets the configs field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s ListRaftConfigurationResponse) NewConfigs(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListRaftConfigurationResponse_List is a list of ListRaftConfigurationResponse.
type ListRaftConfigurationResponse_List = capnp.StructList[ListRaftConfigurationResponse]

// NewListRaftConfigurationResponse creates a new list of ListRaftConfigurationResponse.
func NewListRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (ListRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ListRaftConfigurationResponse]{List: l}, err
}

// ListRaftConfigurationResponse_Future is a wrapper for a ListRaftConfigurationResponse promised by a client call.
type ListRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p ListRaftConfigurationResponse_Future) Struct() (ListRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationResponse{s}, err
}

type GetRaftConfigurationRequest struct{ capnp.Struct }

// GetRaftConfigurationRequest_TypeID is the unique identifier for the type GetRaftConfigurationRequest.
const GetRaftConfigurationRequest_TypeID = 0xa233c1204c18c976

func NewGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func NewRootGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func ReadRootGetRaftConfigurationRequest(msg *capnp.Message) (GetRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return GetRaftConfigurationRequest{root.Struct()}, err
}

func (s GetRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xa233c1204c18c976, s.Struct)
	return str
}

func (s GetRaftConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRaftConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRaftConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetRaftConfigurationRequest_List is a list of GetRaftConfigurationRequest.
type GetRaftConfigurationRequest_List = capnp.StructList[GetRaftConfigurationRequest]

// NewGetRaftConfigurationRequest creates a new list of GetRaftConfigurationRequest.
func NewGetRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (GetRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationRequest]{List: l}, err
}

// GetRaftConfigurationRequest_Future is a wrapper for a GetRaftConfigurationRequest promised by a client call.
type GetRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p GetRaftConfigurationRequest_Future) Struct() (GetRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationRequest{s}, err
}

type GetRaftConfigurationResponse struct{ capnp.Struct }

// GetRaftConfigurationResponse_TypeID is the unique identifier for the type GetRaftConfigurationResponse.
const GetRaftConfigurationResponse_TypeID = 0xb4fe5e6f0ef85636

func NewGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func NewRootGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func ReadRootGetRaftConfigurationResponse(msg *capnp.Message) (GetRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return GetRaftConfigurationResponse{root.Struct()}, err
}

func (s GetRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xb4fe5e6f0ef85636, s.Struct)
	return str
}

func (s GetRaftConfigurationResponse) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s GetRaftConfigurationResponse) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationResponse) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s GetRaftConfigurationResponse) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GetRaftConfigurationResponse_List is a list of GetRaftConfigurationResponse.
type GetRaftConfigurationResponse_List = capnp.StructList[GetRaftConfigurationResponse]

// NewGetRaftConfigurationResponse creates a new list of GetRaftConfigurationResponse.
func NewGetRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (GetRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationResponse]{List: l}, err
}

// GetRaftConfigurationResponse_Future is a wrapper for a GetRaftConfigurationResponse promised by a client call.
type GetRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p GetRaftConfigurationResponse_Future) Struct() (GetRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationResponse{s}, err
}

func (p GetRaftConfigurationResponse_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutRaftConfigurationRequest struct{ capnp.Struct }

// PutRaftConfigurationRequest_TypeID is the unique identifier for the type PutRaftConfigurationRequest.
const PutRaftConfigurationRequest_TypeID = 0xefe67d057faf5d90

func NewPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func NewRootPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func ReadRootPutRaftConfigurationRequest(msg *capnp.Message) (PutRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return PutRaftConfigurationRequest{root.Struct()}, err
}

func (s PutRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xefe67d057faf5d90, s.Struct)
	return str
}

func (s PutRaftConfigurationRequest) Enable() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationRequest) SetEnable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationRequest) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationRequest) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationRequest) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationRequest) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationRequest) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(1)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutRaftConfigurationRequest) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationRequest) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutRaftConfigurationRequest) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PutRaftConfigurationRequest_List is a list of PutRaftConfigurationRequest.
type PutRaftConfigurationRequest_List = capnp.StructList[PutRaftConfigurationRequest]

// NewPutRaftConfigurationRequest creates a new list of PutRaftConfigurationRequest.
func NewPutRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (PutRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationRequest]{List: l}, err
}

// PutRaftConfigurationRequest_Future is a wrapper for a PutRaftConfigurationRequest promised by a client call.
type PutRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p PutRaftConfigurationRequest_Future) Struct() (PutRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationRequest{s}, err
}

func (p PutRaftConfigurationRequest_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(1, nil)}
}

type PutRaftConfigurationResponse struct{ capnp.Struct }

// PutRaftConfigurationResponse_TypeID is the unique identifier for the type PutRaftConfigurationResponse.
const PutRaftConfigurationResponse_TypeID = 0x8f8f8f8f8f8f8f8f

func NewPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func NewRootPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func ReadRootPutRaftConfigurationResponse(msg *capnp.Message) (PutRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return PutRaftConfigurationResponse{root.Struct()}, err
}

func (s PutRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0x8f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutRaftConfigurationResponse) Valid() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationResponse) SetValid(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationResponse) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationResponse) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationResponse) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationResponse) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// PutRaftConfigurationResponse_List is a list of PutRaftConfigurationResponse.
type PutRaftConfigurationResponse_List = capnp.StructList[PutRaftConfigurationResponse]

// NewPutRaftConfigurationResponse creates a new list of PutRaftConfigurationResponse.
func NewPutRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (PutRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationResponse]{List: l}, err
}

// PutRaftConfigurationResponse_Future is a wrapper for a PutRaftConfigurationResponse promised by a client call.
type PutRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p PutRaftConfigurationResponse_Future) Struct() (PutRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationResponse{s}, err
}

const schema_9f0a9459eb121bf0 = "x\xda\xa4Vol$e\x19\x7f\x9ewfv\xba\xdd" +
	"\xf6v\x87wH\xb8\x92\xcb\x1d\xb4F\xae\x81\xa3\xa5\xc1" +
	"#\x0b\xbaW\xda\x825=\xbb\xd3\xe9)w\x0a\xb9\xe9" +
	"\xee\xdb\xdd\x89\xbb3\xdb\x99\xd9\xbd[\x12\xd3\xa3z\x1f" +
	"$1\x9a\x08\x09!1\x06\x8d_.^.\"\x9a\xdc" +
	"\x07\x044D\x89\x121\x01#\xa8\x89\xe8\xe1\x9f\xf8\xef" +
	"\xfc`\xe4\x080\xe4\x99\xed\xeel\xdb\xa5l\xb8\xfd\xb4" +
	"\xf3{\x7fy\xfe\xfd\xde\xf7y\x9e\x89\x97\xa4#\xf2\xe4" +
	"\xf0_\x13\xc0\x8c\xbc\x92\x08\xbf\xb6\xf9\x03c\x141\xbc" +
	"|\xfd5\xff8\xfe\xc8\xe0\xb7@a*\xc0\xd4q\x89" +
	"1^\x97T\x00\xbe&]\x00\x0c\x1b/\\\xb7p\xe0" +
	"\xb9\xa9o\x836\xdaMF\"'\xe5\xb7\x90\x7fD&" +
	"\xf2\x0dr\x0e0\xbc\xed\xef\x9f{t}\xf1W\xdf\xe9" +
	"E\x9e\x96\xcf!?\x1e\x91\x8fE\xe4\x9f~\xfc\xb1g" +
	"\xd6\x1e8|\x1e\xb4I\x84M\xd2Yy\x84\x01\xf2o" +
	"F\x84\x8b\xaf\xaf\xff\xff\xc13\xdf8\xbf-\xd09T" +
	"\x19\xc0\xd4\xd3\xf2\x9f\x90\xbf\x1a\xd9{E>\x05\x18\xde" +
	"51\xf7\xc8\x8f^z\xf2<h\xa3,f\x03NM" +
	"+\x1e\xf2c\x0a1\x0de\x110\xfc\xd8g\xde\xdc\xe3" +
	">\xf0\xeeS\xbd\xc2\xac*\x8c\xf1\xafD\xe4\xb3\x0aE" +
	"1v\xd3]\xfa\x95\x7f\x7f\xfa\xc7\xa0\xdd\xc9\xc2\x03_" +
	"M\x95.~\xe2\xd2\xb3d\xf6\xbbJ\x96\xf1\xe7#\xe6" +
	"s\xcaa\xc0\xf8p[a#\xbb/(\xaf!\x7fC" +
	"\xf9(\x00\x7fG\xa1\xc2^\xb7q\xe7\x0fN\xe6\xf7>" +
	"\xdf+\x88G\x13\x83\x8c\xff0A\xa6\xbf\x9f\xa0 \xfe" +
	"w\xf8\xfaK\x13\xe9\x13?\xdbJ\xa6\xe4\xa7^O0" +
	"\xc6\xdfI\xa8 \x85\xa7\xbe\xb7\xf1\xc4\xb3\x7f>\xf6\"" +
	"h\xa3\xd2\x96\x0a\xbc\x9ax\x18\xf9\x7f#{\xffJ\xdc" +
	"\xcb\xf7\xaa*@\xe8\xbd}\xe5\x0c~\xbe\xf8\x9b\x1d\x89" +
	"\xa1\xca\x18\xdfG\x1c\xbeW\xa5\xc4\x86\xaf\xbd\xe1\xf4\xc8" +
	"\xea\xe3\xbf\xa3\xc4\x06\xb7\xc7\xbaO=\x87\xfcvbO" +
	"M\xaa\xcfH\x80\xe1=O\xfd\xe2\xe0\x8c\xf4\xd8?\xbb" +
	"\x85\xb5S\xd7\x90\xb0\x0f\xa5(\x9b\xaf\xdf\x7fa]\xf9" +
	"\xe2_\xfe\xd3\xf3\x06>\x91z\x0b\xf9\xd3)\xf2~1" +
	"u\x01n\x09k\x9e\x1b\xb8\x05\xb7\xa2\xfa\xb7\x16\\g" +
	"\xd5.\xdd\xda\x98\xdc\xfc\xd7\x98<T\xb0jN-\x9b" +
	"\xaf\x07K\xd6j0\x13\xa1u\xcf\x0al\xd7Y\x12~" +
	"\xcdu|\x01yDcH\x92\x01d\x04\xd0\xe6n\x03" +
	"0\x8eHh,0D\xd4\x91\xb0\xf9q\x00cVB" +
	"#\xcfPc\xa8#\x03\xd0\x8e\x12\xf1\x93\x12\x1a\xcb\x0c" +
	"\xf77\xac\x8a]D\x04\x86\x08\x98v\xac\xaa\xc0!`" +
	"8\x04\xb8_x\x9e\xeb\xb5\xbf:\xd1&v\x89\xf6^" +
	"\xd1#\xda\x9cX\xab\x0b?\xa0`\xe5N\xb0\xc3#\x00" +
	"\xc6\x80\x84\x86\xceP\xb2\x8b;\xbc(\xbbx\x99\xaeT" +
	"b\x0fi\xdbu\xfcm\xb6\xc77m\x8f1L{\xd6" +
	"j\x80{\x00\xf3\x12b&\x16\x1c\x90\xc0\xbe$h\xf9" +
	"2\x85\xd7\xb0\x0b\xe2PIl\xa67\xb6$\xfczE" +
	"\x0a\xfc^\x9eu\x86\xe9\xa2\x15X\x98\x89\x1f; f" +
	"\xfa\xaf\xe3N\xc5U\xc7\x17\x94\xe8\x80$\x0f\x85a\xe4" +
	"\xef\xe0\x8d\x00\xc6\x98\x84\xc6\x04\xc3a|7l\x89~" +
	"\x0bEq\x93\x84\xc6,C\xd5\xaaT0\x13\xf7\xafV" +
	"\x10}VE\xfe\xa0\xaa\xec/-7kQPC\xd1" +
	"\xcd\xda\x97%\x13\xda\xb5\x9f\x02@\xa6i+\x009\xbf" +
	"\xe9\x07\xa2\x1a\x8a\xd3\x85\xb2\xe5\x94\x04\x00\x84\x85\xba\x1f" +
	"\xb8U\xe1\x81z\x8f_\xedK\x82\x9e\xf7\xaa\xfb\x15t" +
	"I\x90\x8d%\xc8\xb5\xccl\xcb0\xd3\xa7\xee;E\x88" +
	"\xee\xf1!\xb3&\x0avn\xd5.\xd8A3\xd2#J" +
	"]\xbb1J=y\x02@u\x1d\x11\x8a\x86\xf0\x9aA" +
	"\xd9\x06\xc9)}H\xcd\xd7\xeaB\xf2\x03c\x00\xb1\xab" +
	"\xa5%\xc7\xbb\x1a\xb7\xb2\x92&\x01\xc2(\xa4U\xbb\x00" +
	"\xaa\x1d4\xbb[\xc2x\xdc\x12\xb4NO\xc8\xc6=\x01" +
	"\xd9fK\x18\x89[B\xfaT\xd9\x0a0\x1d\xfb\x04\xc4" +
	"4`\xce\xaa\xbau\x87\x0e:\xfe[\x07\xbd\x9e\xefn" +
	"u]\xb0\xfd]\xd4\xdc.\xe7\xdd\xf1[^o\x19\xf2" +
	"\xaf\xee9\xbf\x8f\xfbH[r\xdeW\x0b\xda\xd2\x13\xda" +
	"1+\x00\x9d\x11\x81\xed%@\xd3\x96\x80iI5l" +
	"7\x0e\xc0\xd2\x11\xec\xf6\xf3a\xee \xa9\x0e;/\xdf" +
	"8\x00=\xf8\xe8y\xf7\x95\xc7\x96B\xa4\xc9\x03\x19\x9d" +
	"m\x97\x9f\xbf\x88#\x00\xe6\xcfQB\xf3e\xec\x8c\x15" +
	"\xfek\xcc\x02\x98\xbf$\xf8\xb7\x18O\x16\xfe\x0a.\x01" +
	"\x98/\x13\xfeG\xc2\xa53:J\x00\xfc\x0f\xb8\x02`" +
	"\xfe\x9e\xf0\xbf\x11.K:\xca\x00\xfc\x0d\xdc\x000/" +
	"\x11~\x99pE\xd6Q\xa1Y\x8e\x0f\x03\x98\x97\x09\x7f" +
	"\x9b\xf0\x84\xa2c\x02\x80_\x89\xf8o\x12.3\x86\x9a" +
	"\x9a\xd0i\x08sd\x8f\x03\x982\x93\xd0\xcc\x10>\xf0" +
	"\x90\x8e\x03\x00|\x98\xbd\x06`\xea\x84\x1f <\xa9\xea" +
	"\x98\x04\xe0\xfb\"\xfe\x01\xc2o&|p@\xc7A\x00" +
	"~\x90\xfd\x04\xc0\xbc\x99\xf0;\x08O%uL\x01\xf0" +
	"\xdb\xd99\x00\xf3\x0e\xc2g\x09\x1f\xda\xd0q\x08\x80O" +
	"\xb3'\x01\xccY\xc2\xf3\x84\x0f\x7fI\xc7a\x00~\x94" +
	"\x9d\x000\x17\x08\xbf\x8f\xf0=_\xd6q\x0f\xed\x87\x8c" +
	"\xea\xb3L\xf8I\xc2\xd3guL\x03\xf0\xfb\xd9\xdd\x00" +
	"\xe6}\x84\x17\x09\xcf$u\xcc\x00p+\xb2s\x92\xf0" +
	"\x0a\xdb2(s\x8e[\x14\xf3EL\x02\xc3$`X" +
	"\xa8\xd4\xfd@x\xf3\x80]XY\x14\xbe`\xd4]P" +
	"\xbdz\xb5=\xe2CQ\x11\x05\x12\x1a\x97\xed\xaap\xeb" +
	"\x01t\xf8eay\xc1\x8a\xb00h\x1f\xc5g\xbec" +
	"\xd5\xfc\xb2\x1b\xe0\x9c\x13x\xb6\xf0\xe3\x93\x82[\xadY" +
	"\x85\xc0F\xd7Yl\x08\xaf,$+\x0e\xc1\xf5\x8a\xc2" +
	"\x13\xc5\x19\xd6}\x89g\xca\x96#\x95D'\xa2\xaau" +
	"z\xde9*\xaa\xe8z\xcd\x05\xb7d\xda\xd2\x83b\x87" +
	"c6\xe3Vk\x9e\xf0}\xdbu\xa2\xdb\xdfa\x08'" +
	"\xf0\x9a3n\x15\xdb\xc7QO\xec\x1c\x17m\xdfZ\xa9" +
	"\x88i\xac\x07.\xd9\xb0\xf6\xb7\xd2o{\xb7\xfd\xc5\x15" +
	"_x\x0d\x90\x84\xd7\x05~\xd6\x0e\x1cJ\xd3oc\xeb" +
	"ku[\xf8\x858\xec\xd6SZn\x82T\x13\x98\x8e" +
	"\xb7\xf4VW\xbc\xaa\xd5\"oyV\x15\xfd\x0f\x1ck" +
	"]\xcbm\xdf\xbbE\xcf\x8d\xb2kG\xeb\x9a\x1e\xd9~" +
	"\x17\xcal<=r\xc2\xa1r\xf7\xdc(\xdfw\x1e\xbf" +
	"\x17\x00\x00\xff\xff\xdb\x06\xa7&"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x8f8f8f8f8f8f8f8f,
		0xa233c1204c18c976,
		0xa3cf4f7f955be932,
		0xad375e71bf983dc3,
		0xad93807af77fe1b9,
		0xadb2d0b69445303c,
		0xb4fe5e6f0ef85636,
		0xbe4eeef9143c2824,
		0xc0e43eb9670b8d20,
		0xc5195060b33b8218,
		0xc75a0f30e41b37f5,
		0xcd55e3c0a182ac77,
		0xd6645c0180f9fc72,
		0xdb9a661a7821150d,
		0xec98034329cbb446,
		0xefe67d057faf5d90)
}
