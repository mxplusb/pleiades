// Code generated by capnpc-go. DO NOT EDIT.

package database

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// KeyValue is a key-value pair used for the database
type KeyValue struct{ capnp.Struct }

// KeyValue_TypeID is the unique identifier for the type KeyValue.
const KeyValue_TypeID = 0x9fc77743d79c134f

func NewKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return KeyValue{st}, err
}

func NewRootKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return KeyValue{st}, err
}

func ReadRootKeyValue(msg *capnp.Message) (KeyValue, error) {
	root, err := msg.Root()
	return KeyValue{root.Struct()}, err
}

func (s KeyValue) String() string {
	str, _ := text.Marshal(0x9fc77743d79c134f, s.Struct)
	return str
}

func (s KeyValue) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s KeyValue) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KeyValue) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s KeyValue) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s KeyValue) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s KeyValue) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s KeyValue) CreateRevision() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s KeyValue) SetCreateRevision(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s KeyValue) ModifyRevision() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s KeyValue) SetModifyRevision(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s KeyValue) Version() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s KeyValue) SetVersion(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s KeyValue) Lease() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s KeyValue) SetLease(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

// KeyValue_List is a list of KeyValue.
type KeyValue_List = capnp.StructList[KeyValue]

// NewKeyValue creates a new list of KeyValue.
func NewKeyValue_List(s *capnp.Segment, sz int32) (KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[KeyValue]{List: l}, err
}

// KeyValue_Future is a wrapper for a KeyValue promised by a client call.
type KeyValue_Future struct{ *capnp.Future }

func (p KeyValue_Future) Struct() (KeyValue, error) {
	s, err := p.Future.Struct()
	return KeyValue{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xb7f920001018ddbb

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xb7f920001018ddbb, s.Struct)
	return str
}

func (s Event) Type() Event_EventType {
	return Event_EventType(s.Struct.Uint16(0))
}

func (s Event) SetType(v Event_EventType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event) KeyValue() (KeyValue, error) {
	p, err := s.Struct.Ptr(0)
	return KeyValue{Struct: p.Struct()}, err
}

func (s Event) HasKeyValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Event) SetKeyValue(v KeyValue) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewKeyValue sets the keyValue field to a newly
// allocated KeyValue struct, preferring placement in s's segment.
func (s Event) NewKeyValue() (KeyValue, error) {
	ss, err := NewKeyValue(s.Struct.Segment())
	if err != nil {
		return KeyValue{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) PreviousKeyValue() (KeyValue, error) {
	p, err := s.Struct.Ptr(1)
	return KeyValue{Struct: p.Struct()}, err
}

func (s Event) HasPreviousKeyValue() bool {
	return s.Struct.HasPtr(1)
}

func (s Event) SetPreviousKeyValue(v KeyValue) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPreviousKeyValue sets the previousKeyValue field to a newly
// allocated KeyValue struct, preferring placement in s's segment.
func (s Event) NewPreviousKeyValue() (KeyValue, error) {
	ss, err := NewKeyValue(s.Struct.Segment())
	if err != nil {
		return KeyValue{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Event]{List: l}, err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) KeyValue() KeyValue_Future {
	return KeyValue_Future{Future: p.Future.Field(0, nil)}
}

func (p Event_Future) PreviousKeyValue() KeyValue_Future {
	return KeyValue_Future{Future: p.Future.Field(1, nil)}
}

type Event_EventType uint16

// Event_EventType_TypeID is the unique identifier for the type Event_EventType.
const Event_EventType_TypeID = 0x8faf147abc8bca45

// Values of Event_EventType.
const (
	Event_EventType_put    Event_EventType = 0
	Event_EventType_delete Event_EventType = 1
)

// String returns the enum's constant name.
func (c Event_EventType) String() string {
	switch c {
	case Event_EventType_put:
		return "put"
	case Event_EventType_delete:
		return "delete"

	default:
		return ""
	}
}

// Event_EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_EventTypeFromString(c string) Event_EventType {
	switch c {
	case "put":
		return Event_EventType_put
	case "delete":
		return Event_EventType_delete

	default:
		return 0
	}
}

type Event_EventType_List = capnp.EnumList[Event_EventType]

func NewEvent_EventType_List(s *capnp.Segment, sz int32) (Event_EventType_List, error) {
	return capnp.NewEnumList[Event_EventType](s, sz)
}

const schema_9f0a9459eb121bf0 = "x\xda\x8c\x92\xc1k\x13A\x14\xc6\xbfof\xd7\xa8\xb4" +
	"\xa4k\"\x16\x04\xb3\x16\x0a\xa2\xd8Z{PziU" +
	"\x02\xd6\x0a\xfaJP\x14\x14\xd7f\x8a\xa11\xbbd7" +
	"+\xdb\x8b\xf7z\xf0`\x0f*J+xP\xa9TA" +
	"Q\xb0\x1e\xa5\xe0\x1f\xa0'\xff\x02\x0fz\xf5\xb4\x92\xad" +
	"M\x8b\x05\xf12\xcc{\xf3\xcdo\xde|\xef\x1d\xd9\xc7" +
	"1k\xa8{UA\x89koK\xcb\x9f\xef\xac\xcc\x16" +
	"\x97\xef\xc29\xa4~|\xf8\xd6\xdb\xe3\xfez\x07\x0e\x8f" +
	"\xf3\x05\x0b\x1es@\xe1\x0a\x8f\x81\xe9\xb9\xc2\xa3\xaf\xa7" +
	"n\xad.@\xfai\xa5?\xf7\xee\xfa~i~\xe7\x02" +
	"l\x95\x03\x86=6Yh1Wh\xb14\xfc\x92\x17" +
	"\x09\xae\xb3\xa4\x9f\xfc[N}\x99\x85\xddz\x0fP\xd8" +
	"\xaf\x97q<\x0d\x9a~\xe4O\xf9u;\x1c\x8c\x87\x06" +
	"\xab^\xe4]\xf7B\xd3\xd9\x0cLyA#\x18)\xc7" +
	"\xa6\x11\x0ddk\xbe\x92\x04\xe6<)\xdb\xa9\x00\xc7\xe9" +
	"\x03Hg\xc7\x08\x90\x0bZ\xd1h\xd5\xd4Md:X" +
	"\xeb\x9f\xd8\x09\x93\x94.x\xf5V\xc6\xb3\xa8\xd2\xab\xf7" +
	"\x16\xe4\xe3\x97\xb9O\x10K\xf1\xc4\x01\xb2\x0b\x18\xe2C" +
	"\xa6\x13&\xc9\x84\xb6[\x0b]\xcf\x9d1\xc9\xe1\xb8\x1d" +
	"\xbb\x81Wk\xba\xad\xd0T\xddi\xbf\xe9F7\x8c\xbb" +
	"\xf6\x86\x0e\x0d \xbd\xda\x02,\x02\xce\x83>@\xe65" +
	"eQ\xd1!\x8bl'\x1f\x1f\x05\xe4\xbe\xa6<U\xa4" +
	"*f\x1fz2\x0b\xc8\xa2\xa6,):\x9aEj\xc0" +
	"y\xdeN>\xd3\x947\x8a\x8e\xa5\x8a\xb4\x00\xe7\xf5I" +
	"@\x964\xe5\xbd\xa2c\xeb\"m\xc0y\xdbF\xbe\xd2" +
	"\x94\x15\xc5\xdc\x8cI\xd8\x0d\xc5n\xb0\x94\x95\xbb\x1e\xa5" +
	"SM\xe3Ef\xd2`4\xae\x855\xbfA\x1b\x8a6" +
	"\x98\xde\xf4\xab\xb5\xe9d\xeb\xc1\xed\xd847\xc7\xa5\xba" +
	"\xf1B\xd3\xb9\xf6\x7f~\x97c\xa3\x1b\x91X\xe4\xa6\xe1" +
	"\xe3d\x9a5\xb6\x92\x04\xa0\x91\xae\x8ee\xe5\x83\x80\x8c" +
	"i\xcaY\xc5u\xc7\xc6\xcf\x00rZS*\x8a\x8e\xe2" +
	"\x9ae2\x07HES\xae)\xe6\xa3$0\xcco\xf0" +
	"A\xe6\xc1t\xe6O\x03\x01\xb0gc\xa4A\xf6d\xe5" +
	"\x9b\xb8\xe6\xb7BNtd[U\xbf\x03\x00\x00\xff\xff" +
	"\xee\xc5\xd9K"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x8faf147abc8bca45,
		0x9fc77743d79c134f,
		0xb7f920001018ddbb)
}
