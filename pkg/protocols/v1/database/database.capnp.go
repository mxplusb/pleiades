// Code generated by capnpc-go. DO NOT EDIT.

package database

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// KeyValue is a key-value pair used for the database
type KeyValue struct{ capnp.Struct }

// KeyValue_TypeID is the unique identifier for the type KeyValue.
const KeyValue_TypeID = 0x9fc77743d79c134f

func NewKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return KeyValue{st}, err
}

func NewRootKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return KeyValue{st}, err
}

func ReadRootKeyValue(msg *capnp.Message) (KeyValue, error) {
	root, err := msg.Root()
	return KeyValue{root.Struct()}, err
}

func (s KeyValue) String() string {
	str, _ := text.Marshal(0x9fc77743d79c134f, s.Struct)
	return str
}

func (s KeyValue) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s KeyValue) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KeyValue) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s KeyValue) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s KeyValue) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s KeyValue) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s KeyValue) CreateRevision() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s KeyValue) SetCreateRevision(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s KeyValue) ModifyRevision() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s KeyValue) SetModifyRevision(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s KeyValue) Version() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s KeyValue) SetVersion(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s KeyValue) Lease() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s KeyValue) SetLease(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

// KeyValue_List is a list of KeyValue.
type KeyValue_List = capnp.StructList[KeyValue]

// NewKeyValue creates a new list of KeyValue.
func NewKeyValue_List(s *capnp.Segment, sz int32) (KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[KeyValue]{List: l}, err
}

// KeyValue_Future is a wrapper for a KeyValue promised by a client call.
type KeyValue_Future struct{ *capnp.Future }

func (p KeyValue_Future) Struct() (KeyValue, error) {
	s, err := p.Future.Struct()
	return KeyValue{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xb7f920001018ddbb

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xb7f920001018ddbb, s.Struct)
	return str
}

func (s Event) Type() Event_EventType {
	return Event_EventType(s.Struct.Uint16(0))
}

func (s Event) SetType(v Event_EventType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event) KeyValue() (KeyValue, error) {
	p, err := s.Struct.Ptr(0)
	return KeyValue{Struct: p.Struct()}, err
}

func (s Event) HasKeyValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Event) SetKeyValue(v KeyValue) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewKeyValue sets the keyValue field to a newly
// allocated KeyValue struct, preferring placement in s's segment.
func (s Event) NewKeyValue() (KeyValue, error) {
	ss, err := NewKeyValue(s.Struct.Segment())
	if err != nil {
		return KeyValue{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) PreviousKeyValue() (KeyValue, error) {
	p, err := s.Struct.Ptr(1)
	return KeyValue{Struct: p.Struct()}, err
}

func (s Event) HasPreviousKeyValue() bool {
	return s.Struct.HasPtr(1)
}

func (s Event) SetPreviousKeyValue(v KeyValue) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPreviousKeyValue sets the previousKeyValue field to a newly
// allocated KeyValue struct, preferring placement in s's segment.
func (s Event) NewPreviousKeyValue() (KeyValue, error) {
	ss, err := NewKeyValue(s.Struct.Segment())
	if err != nil {
		return KeyValue{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Event]{List: l}, err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) KeyValue() KeyValue_Future {
	return KeyValue_Future{Future: p.Future.Field(0, nil)}
}

func (p Event_Future) PreviousKeyValue() KeyValue_Future {
	return KeyValue_Future{Future: p.Future.Field(1, nil)}
}

type Event_EventType uint16

// Event_EventType_TypeID is the unique identifier for the type Event_EventType.
const Event_EventType_TypeID = 0x8faf147abc8bca45

// Values of Event_EventType.
const (
	Event_EventType_put    Event_EventType = 0
	Event_EventType_delete Event_EventType = 1
)

// String returns the enum's constant name.
func (c Event_EventType) String() string {
	switch c {
	case Event_EventType_put:
		return "put"
	case Event_EventType_delete:
		return "delete"

	default:
		return ""
	}
}

// Event_EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_EventTypeFromString(c string) Event_EventType {
	switch c {
	case "put":
		return Event_EventType_put
	case "delete":
		return Event_EventType_delete

	default:
		return 0
	}
}

type Event_EventType_List = capnp.EnumList[Event_EventType]

func NewEvent_EventType_List(s *capnp.Segment, sz int32) (Event_EventType_List, error) {
	return capnp.NewEnumList[Event_EventType](s, sz)
}

const schema_9f0a9459eb121bf0 = "x\xda\x8c\x921k\x14O\x18\xc6\x9fgf\xf7\xbf\xf7" +
	"\x97\xc4\xcb\xba\x07\x06,n\x0d\x04D11\x06\x91\xa4" +
	"IT\x0e\xd4\x18t\xc2\xa1h!\xae\xb9\x09\x1e9o" +
	"\x97\xdb\xbd\x0d\x9b\xc6\xca&\x16\x16\xa6PQ\x12\xc1\"" +
	"J0\x0a\x8a\x82\xb1\x14\xc1\x0f\xa0X\xf8\x09D\xb4M" +
	"\xb5r\x1bs\x09\x06\xc4f\x98\xf7\x9dg~\xf3\xce\xf3" +
	"\xbe\x87\xe6\xc5\xa81\xd09\xb3\x13B-\x99\xff\xa5\xa5" +
	"\x8f\xb7Vg\x0b+\xb7a\x1f\x10?\xde~\xed\xeer" +
	"\xd7^\x83\x83{\xad\xa7t\x86,\x0bp\x8eXG\xc1" +
	"\xf4\xac\xf3\xe0\xf3\x89\x99\x0f\x0bP\xbd4\xd2\x9f{v" +
	"}\xbb8\xbfc\x01\xa6\xb0\x80\xc1!\xabAg\xdc\xb2" +
	"\x9cq\xab8x\xd3\xba@p\x83\xa5z\xc9?\xe5_" +
	"r\x97\xe8|\xcf\xed\x06\x9c\xb5\xdc\x0aR<K\x83\x86" +
	"\x1f\xf9\x93~\xcd\x0c\xfb\xe3\x81\xfe\x8a\x17yW\xbdP" +
	"\xb77}\x93^P\x0f\x86K\xb1\xaeG}\xd9\x9a/" +
	"'\x81>G\xaa\x1c\x05`\xdb=\x00i\xff?\x0cX" +
	"A3\x1a\xa9\xe8\x9a\x8et\x1bk\xfc\x15;\xa6\x93\xe2" +
	"y\xaf\xd6\xccx\x06Ez\xf9\xce\x82z\xf7i\xee=" +
	"\x94!xl\x1f\xd9\x01\x0c\xf0>\xd31\x9ddB\xd3" +
	"\xad\x86\xae\xe7N\xeb\xe4`\xdc\x8a\xdd\xc0\xab6\xdcf" +
	"\xa8+\xee\x94\xdfp\xa3k\xda]\x7fC\x86\x1aP\xdd" +
	"\xd2\x00\x0c\x02\xf6\xbd\x1e@\xcdK\xaaEA\x9b,\xb0" +
	"\x95|x\x18Pw%\xd5cA\x8aB\xf6\xa1G\xb3" +
	"\x80Z\x94T\xcb\x82\xb6d\x81\x12\xb0\x9f\xb4\x92K\x92" +
	"\xea\xa5\xa0m\x88\x02\x0d\xc0~q\x1cP\xcb\x92\xea\x8d" +
	"\xa0m\xca\x02M\xc0~\xd5B>\x97T\xab\x82\xd6\xb4" +
	"N\xd8\x09\xc1N\xb0\x98\x95\xbb\x11\xa5\x93\x0d\xedEz" +
	"Bc$\xae\x86U\xbfN\x13\x82&\x98^\xf7+\xd5" +
	"\xa9d\xfb\xc1\x8dX7\xb6\xc6\xc5\x9a\xf6B\xdd\xbe\xf6" +
	"o~\x97b-\xeb\x912\xc8-\xe3\xc7\x894kl" +
	"9\x09@\xad:\xda\x96\x95\xf6\x03jTR\x9d\x11\xdc" +
	"p\xec\xd4i@\x9d\x94TeA[p\xdd25\x07" +
	"\xa8\xb2\xa4\xba\"\x98\x8f\x92@3\xbf\xc9\x07\x99\x07\xd3" +
	"\xe9\xdf\x0d\x04\xc0\xae\xcd\xa1\x06\xd9\x95\x95\xaf\xe3\xaa\xdf" +
	"\x0c9\xd6\x96mW\xfd\x0a\x00\x00\xff\xff\xc9&\xdd$"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x8faf147abc8bca45,
		0x9fc77743d79c134f,
		0xb7f920001018ddbb)
}
