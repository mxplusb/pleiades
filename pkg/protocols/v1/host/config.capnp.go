// Code generated by capnpc-go. DO NOT EDIT.

package host

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type ConfigService struct{ Client *capnp.Client }

// ConfigService_TypeID is the unique identifier for the type ConfigService.
const ConfigService_TypeID = 0xcd55e3c0a182ac77

func (c ConfigService) GetConfig(ctx context.Context, params func(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "getConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_getConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_getConfig_Results_Future{Future: ans.Future()}, release
}
func (c ConfigService) PutConfig(ctx context.Context, params func(ConfigService_putConfig_Params) error) (ConfigService_putConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "putConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_putConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_putConfig_Results_Future{Future: ans.Future()}, release
}

func (c ConfigService) AddRef() ConfigService {
	return ConfigService{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigService) Release() {
	c.Client.Release()
}

// A ConfigService_Server is a ConfigService with a local implementation.
type ConfigService_Server interface {
	GetConfig(context.Context, ConfigService_getConfig) error

	PutConfig(context.Context, ConfigService_putConfig) error
}

// ConfigService_NewServer creates a new Server from an implementation of ConfigService_Server.
func ConfigService_NewServer(s ConfigService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigService_Methods(nil, s), s, c, policy)
}

// ConfigService_ServerToClient creates a new Client from an implementation of ConfigService_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigService_ServerToClient(s ConfigService_Server, policy *server.Policy) ConfigService {
	return ConfigService{Client: capnp.NewClient(ConfigService_NewServer(s, policy))}
}

// ConfigService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigService_Methods(methods []server.Method, s ConfigService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "getConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConfig(ctx, ConfigService_getConfig{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "putConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutConfig(ctx, ConfigService_putConfig{call})
		},
	})

	return methods
}

// ConfigService_getConfig holds the state for a server call to ConfigService.getConfig.
// See server.Call for documentation.
type ConfigService_getConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_getConfig) Args() ConfigService_getConfig_Params {
	return ConfigService_getConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_getConfig) AllocResults() (ConfigService_getConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{Struct: r}, err
}

// ConfigService_putConfig holds the state for a server call to ConfigService.putConfig.
// See server.Call for documentation.
type ConfigService_putConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_putConfig) Args() ConfigService_putConfig_Params {
	return ConfigService_putConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_putConfig) AllocResults() (ConfigService_putConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{Struct: r}, err
}

type ConfigService_getConfig_Params struct{ capnp.Struct }

// ConfigService_getConfig_Params_TypeID is the unique identifier for the type ConfigService_getConfig_Params.
const ConfigService_getConfig_Params_TypeID = 0xec98034329cbb446

func NewConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func NewRootConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func ReadRootConfigService_getConfig_Params(msg *capnp.Message) (ConfigService_getConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Params{root.Struct()}, err
}

func (s ConfigService_getConfig_Params) String() string {
	str, _ := text.Marshal(0xec98034329cbb446, s.Struct)
	return str
}

func (s ConfigService_getConfig_Params) Request() (GetConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Params) SetRequest(v GetConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated GetConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Params) NewRequest() (GetConfigurationRequest, error) {
	ss, err := NewGetConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return GetConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Params_List is a list of ConfigService_getConfig_Params.
type ConfigService_getConfig_Params_List = capnp.StructList[ConfigService_getConfig_Params]

// NewConfigService_getConfig_Params creates a new list of ConfigService_getConfig_Params.
func NewConfigService_getConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Params]{List: l}, err
}

// ConfigService_getConfig_Params_Future is a wrapper for a ConfigService_getConfig_Params promised by a client call.
type ConfigService_getConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Params_Future) Struct() (ConfigService_getConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Params{s}, err
}

func (p ConfigService_getConfig_Params_Future) Request() GetConfigurationRequest_Future {
	return GetConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_getConfig_Results struct{ capnp.Struct }

// ConfigService_getConfig_Results_TypeID is the unique identifier for the type ConfigService_getConfig_Results.
const ConfigService_getConfig_Results_TypeID = 0xad375e71bf983dc3

func NewConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func NewRootConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func ReadRootConfigService_getConfig_Results(msg *capnp.Message) (ConfigService_getConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Results{root.Struct()}, err
}

func (s ConfigService_getConfig_Results) String() string {
	str, _ := text.Marshal(0xad375e71bf983dc3, s.Struct)
	return str
}

func (s ConfigService_getConfig_Results) Response() (GetConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Results) SetResponse(v GetConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated GetConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Results) NewResponse() (GetConfigurationResponse, error) {
	ss, err := NewGetConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return GetConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Results_List is a list of ConfigService_getConfig_Results.
type ConfigService_getConfig_Results_List = capnp.StructList[ConfigService_getConfig_Results]

// NewConfigService_getConfig_Results creates a new list of ConfigService_getConfig_Results.
func NewConfigService_getConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Results]{List: l}, err
}

// ConfigService_getConfig_Results_Future is a wrapper for a ConfigService_getConfig_Results promised by a client call.
type ConfigService_getConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Results_Future) Struct() (ConfigService_getConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Results{s}, err
}

func (p ConfigService_getConfig_Results_Future) Response() GetConfigurationResponse_Future {
	return GetConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Params struct{ capnp.Struct }

// ConfigService_putConfig_Params_TypeID is the unique identifier for the type ConfigService_putConfig_Params.
const ConfigService_putConfig_Params_TypeID = 0xc3273101c10b065a

func NewConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func NewRootConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func ReadRootConfigService_putConfig_Params(msg *capnp.Message) (ConfigService_putConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Params{root.Struct()}, err
}

func (s ConfigService_putConfig_Params) String() string {
	str, _ := text.Marshal(0xc3273101c10b065a, s.Struct)
	return str
}

func (s ConfigService_putConfig_Params) Request() (PutConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Params) SetRequest(v PutConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated PutConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Params) NewRequest() (PutConfigurationRequest, error) {
	ss, err := NewPutConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return PutConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Params_List is a list of ConfigService_putConfig_Params.
type ConfigService_putConfig_Params_List = capnp.StructList[ConfigService_putConfig_Params]

// NewConfigService_putConfig_Params creates a new list of ConfigService_putConfig_Params.
func NewConfigService_putConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Params]{List: l}, err
}

// ConfigService_putConfig_Params_Future is a wrapper for a ConfigService_putConfig_Params promised by a client call.
type ConfigService_putConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Params_Future) Struct() (ConfigService_putConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Params{s}, err
}

func (p ConfigService_putConfig_Params_Future) Request() PutConfigurationRequest_Future {
	return PutConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Results struct{ capnp.Struct }

// ConfigService_putConfig_Results_TypeID is the unique identifier for the type ConfigService_putConfig_Results.
const ConfigService_putConfig_Results_TypeID = 0xdc2aa0850f905013

func NewConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func NewRootConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func ReadRootConfigService_putConfig_Results(msg *capnp.Message) (ConfigService_putConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Results{root.Struct()}, err
}

func (s ConfigService_putConfig_Results) String() string {
	str, _ := text.Marshal(0xdc2aa0850f905013, s.Struct)
	return str
}

func (s ConfigService_putConfig_Results) Response() (PutConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Results) SetResponse(v PutConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated PutConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Results) NewResponse() (PutConfigurationResponse, error) {
	ss, err := NewPutConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return PutConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Results_List is a list of ConfigService_putConfig_Results.
type ConfigService_putConfig_Results_List = capnp.StructList[ConfigService_putConfig_Results]

// NewConfigService_putConfig_Results creates a new list of ConfigService_putConfig_Results.
func NewConfigService_putConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Results]{List: l}, err
}

// ConfigService_putConfig_Results_Future is a wrapper for a ConfigService_putConfig_Results promised by a client call.
type ConfigService_putConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Results_Future) Struct() (ConfigService_putConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Results{s}, err
}

func (p ConfigService_putConfig_Results_Future) Response() PutConfigurationResponse_Future {
	return PutConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type GetConfigurationRequest struct{ capnp.Struct }

// GetConfigurationRequest_TypeID is the unique identifier for the type GetConfigurationRequest.
const GetConfigurationRequest_TypeID = 0xc0e43eb9670b8d20

func NewGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func NewRootGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func ReadRootGetConfigurationRequest(msg *capnp.Message) (GetConfigurationRequest, error) {
	root, err := msg.Root()
	return GetConfigurationRequest{root.Struct()}, err
}

func (s GetConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc0e43eb9670b8d20, s.Struct)
	return str
}

func (s GetConfigurationRequest) What() GetConfigurationRequest_Type {
	return GetConfigurationRequest_Type(s.Struct.Uint16(0))
}

func (s GetConfigurationRequest) SetWhat(v GetConfigurationRequest_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetConfigurationRequest) Amount() GetConfigurationRequest_Specificity {
	return GetConfigurationRequest_Specificity(s.Struct.Uint16(2))
}

func (s GetConfigurationRequest) SetAmount(v GetConfigurationRequest_Specificity) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s GetConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetConfigurationRequest_List is a list of GetConfigurationRequest.
type GetConfigurationRequest_List = capnp.StructList[GetConfigurationRequest]

// NewGetConfigurationRequest creates a new list of GetConfigurationRequest.
func NewGetConfigurationRequest_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationRequest]{List: l}, err
}

// GetConfigurationRequest_Future is a wrapper for a GetConfigurationRequest promised by a client call.
type GetConfigurationRequest_Future struct{ *capnp.Future }

func (p GetConfigurationRequest_Future) Struct() (GetConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetConfigurationRequest{s}, err
}

type GetConfigurationRequest_Type uint16

// GetConfigurationRequest_Type_TypeID is the unique identifier for the type GetConfigurationRequest_Type.
const GetConfigurationRequest_Type_TypeID = 0xd6645c0180f9fc72

// Values of GetConfigurationRequest_Type.
const (
	GetConfigurationRequest_Type_all  GetConfigurationRequest_Type = 0
	GetConfigurationRequest_Type_raft GetConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Type) String() string {
	switch c {
	case GetConfigurationRequest_Type_all:
		return "all"
	case GetConfigurationRequest_Type_raft:
		return "raft"

	default:
		return ""
	}
}

// GetConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_TypeFromString(c string) GetConfigurationRequest_Type {
	switch c {
	case "all":
		return GetConfigurationRequest_Type_all
	case "raft":
		return GetConfigurationRequest_Type_raft

	default:
		return 0
	}
}

type GetConfigurationRequest_Type_List = capnp.EnumList[GetConfigurationRequest_Type]

func NewGetConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Type](s, sz)
}

type GetConfigurationRequest_Specificity uint16

// GetConfigurationRequest_Specificity_TypeID is the unique identifier for the type GetConfigurationRequest_Specificity.
const GetConfigurationRequest_Specificity_TypeID = 0xbe4eeef9143c2824

// Values of GetConfigurationRequest_Specificity.
const (
	GetConfigurationRequest_Specificity_one        GetConfigurationRequest_Specificity = 0
	GetConfigurationRequest_Specificity_everything GetConfigurationRequest_Specificity = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Specificity) String() string {
	switch c {
	case GetConfigurationRequest_Specificity_one:
		return "one"
	case GetConfigurationRequest_Specificity_everything:
		return "everything"

	default:
		return ""
	}
}

// GetConfigurationRequest_SpecificityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_SpecificityFromString(c string) GetConfigurationRequest_Specificity {
	switch c {
	case "one":
		return GetConfigurationRequest_Specificity_one
	case "everything":
		return GetConfigurationRequest_Specificity_everything

	default:
		return 0
	}
}

type GetConfigurationRequest_Specificity_List = capnp.EnumList[GetConfigurationRequest_Specificity]

func NewGetConfigurationRequest_Specificity_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Specificity_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Specificity](s, sz)
}

type GetConfigurationResponse struct{ capnp.Struct }
type GetConfigurationResponse_Which uint16

const (
	GetConfigurationResponse_Which_all  GetConfigurationResponse_Which = 0
	GetConfigurationResponse_Which_raft GetConfigurationResponse_Which = 1
)

func (w GetConfigurationResponse_Which) String() string {
	const s = "allraft"
	switch w {
	case GetConfigurationResponse_Which_all:
		return s[0:3]
	case GetConfigurationResponse_Which_raft:
		return s[3:7]

	}
	return "GetConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GetConfigurationResponse_TypeID is the unique identifier for the type GetConfigurationResponse.
const GetConfigurationResponse_TypeID = 0xad93807af77fe1b9

func NewGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func NewRootGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func ReadRootGetConfigurationResponse(msg *capnp.Message) (GetConfigurationResponse, error) {
	root, err := msg.Root()
	return GetConfigurationResponse{root.Struct()}, err
}

func (s GetConfigurationResponse) String() string {
	str, _ := text.Marshal(0xad93807af77fe1b9, s.Struct)
	return str
}

func (s GetConfigurationResponse) Which() GetConfigurationResponse_Which {
	return GetConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s GetConfigurationResponse) All() (AllConfigurations, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != all")
	}
	p, err := s.Struct.Ptr(0)
	return AllConfigurations{Struct: p.Struct()}, err
}

func (s GetConfigurationResponse) HasAll() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetAll(v AllConfigurations) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAll sets the all field to a newly
// allocated AllConfigurations struct, preferring placement in s's segment.
func (s GetConfigurationResponse) NewAll() (AllConfigurations, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAllConfigurations(s.Struct.Segment())
	if err != nil {
		return AllConfigurations{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetConfigurationResponse) Raft() (RaftConfiguration_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s GetConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetRaft(v RaftConfiguration_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s GetConfigurationResponse) NewRaft(n int32) (RaftConfiguration_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetConfigurationResponse_List is a list of GetConfigurationResponse.
type GetConfigurationResponse_List = capnp.StructList[GetConfigurationResponse]

// NewGetConfigurationResponse creates a new list of GetConfigurationResponse.
func NewGetConfigurationResponse_List(s *capnp.Segment, sz int32) (GetConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationResponse]{List: l}, err
}

// GetConfigurationResponse_Future is a wrapper for a GetConfigurationResponse promised by a client call.
type GetConfigurationResponse_Future struct{ *capnp.Future }

func (p GetConfigurationResponse_Future) Struct() (GetConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetConfigurationResponse{s}, err
}

func (p GetConfigurationResponse_Future) All() AllConfigurations_Future {
	return AllConfigurations_Future{Future: p.Future.Field(0, nil)}
}

type AllConfigurations struct{ capnp.Struct }

// AllConfigurations_TypeID is the unique identifier for the type AllConfigurations.
const AllConfigurations_TypeID = 0xa3cf4f7f955be932

func NewAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func NewRootAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func ReadRootAllConfigurations(msg *capnp.Message) (AllConfigurations, error) {
	root, err := msg.Root()
	return AllConfigurations{root.Struct()}, err
}

func (s AllConfigurations) String() string {
	str, _ := text.Marshal(0xa3cf4f7f955be932, s.Struct)
	return str
}

func (s AllConfigurations) Raft() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s AllConfigurations) HasRaft() bool {
	return s.Struct.HasPtr(0)
}

func (s AllConfigurations) SetRaft(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s AllConfigurations) NewRaft(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllConfigurations_List is a list of AllConfigurations.
type AllConfigurations_List = capnp.StructList[AllConfigurations]

// NewAllConfigurations creates a new list of AllConfigurations.
func NewAllConfigurations_List(s *capnp.Segment, sz int32) (AllConfigurations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AllConfigurations]{List: l}, err
}

// AllConfigurations_Future is a wrapper for a AllConfigurations promised by a client call.
type AllConfigurations_Future struct{ *capnp.Future }

func (p AllConfigurations_Future) Struct() (AllConfigurations, error) {
	s, err := p.Future.Struct()
	return AllConfigurations{s}, err
}

type PutConfigurationRequest struct{ capnp.Struct }
type PutConfigurationRequest_Which uint16

const (
	PutConfigurationRequest_Which_raft     PutConfigurationRequest_Which = 0
	PutConfigurationRequest_Which_nodeHost PutConfigurationRequest_Which = 1
)

func (w PutConfigurationRequest_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationRequest_Which_raft:
		return s[0:4]
	case PutConfigurationRequest_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationRequest_TypeID is the unique identifier for the type PutConfigurationRequest.
const PutConfigurationRequest_TypeID = 0x93c59921a137c8db

func NewPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func NewRootPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func ReadRootPutConfigurationRequest(msg *capnp.Message) (PutConfigurationRequest, error) {
	root, err := msg.Root()
	return PutConfigurationRequest{root.Struct()}, err
}

func (s PutConfigurationRequest) String() string {
	str, _ := text.Marshal(0x93c59921a137c8db, s.Struct)
	return str
}

func (s PutConfigurationRequest) Which() PutConfigurationRequest_Which {
	return PutConfigurationRequest_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationRequest) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationRequest) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PutConfigurationRequest_List is a list of PutConfigurationRequest.
type PutConfigurationRequest_List = capnp.StructList[PutConfigurationRequest]

// NewPutConfigurationRequest creates a new list of PutConfigurationRequest.
func NewPutConfigurationRequest_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PutConfigurationRequest]{List: l}, err
}

// PutConfigurationRequest_Future is a wrapper for a PutConfigurationRequest promised by a client call.
type PutConfigurationRequest_Future struct{ *capnp.Future }

func (p PutConfigurationRequest_Future) Struct() (PutConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutConfigurationRequest{s}, err
}

func (p PutConfigurationRequest_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationRequest_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationRequest_Type uint16

// PutConfigurationRequest_Type_TypeID is the unique identifier for the type PutConfigurationRequest_Type.
const PutConfigurationRequest_Type_TypeID = 0xf737c9d3531fa703

// Values of PutConfigurationRequest_Type.
const (
	PutConfigurationRequest_Type_raft     PutConfigurationRequest_Type = 0
	PutConfigurationRequest_Type_nodeHost PutConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationRequest_Type) String() string {
	switch c {
	case PutConfigurationRequest_Type_raft:
		return "raft"
	case PutConfigurationRequest_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationRequest_TypeFromString(c string) PutConfigurationRequest_Type {
	switch c {
	case "raft":
		return PutConfigurationRequest_Type_raft
	case "nodeHost":
		return PutConfigurationRequest_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationRequest_Type_List = capnp.EnumList[PutConfigurationRequest_Type]

func NewPutConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationRequest_Type](s, sz)
}

type PutConfigurationResponse struct{ capnp.Struct }
type PutConfigurationResponse_Which uint16

const (
	PutConfigurationResponse_Which_raft     PutConfigurationResponse_Which = 0
	PutConfigurationResponse_Which_nodeHost PutConfigurationResponse_Which = 1
)

func (w PutConfigurationResponse_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationResponse_Which_raft:
		return s[0:4]
	case PutConfigurationResponse_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationResponse_TypeID is the unique identifier for the type PutConfigurationResponse.
const PutConfigurationResponse_TypeID = 0x9f8f8f8f8f8f8f8f

func NewPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func NewRootPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func ReadRootPutConfigurationResponse(msg *capnp.Message) (PutConfigurationResponse, error) {
	root, err := msg.Root()
	return PutConfigurationResponse{root.Struct()}, err
}

func (s PutConfigurationResponse) String() string {
	str, _ := text.Marshal(0x9f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutConfigurationResponse) Which() PutConfigurationResponse_Which {
	return PutConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationResponse) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) Success() bool {
	return s.Struct.Bit(16)
}

func (s PutConfigurationResponse) SetSuccess(v bool) {
	s.Struct.SetBit(16, v)
}

func (s PutConfigurationResponse) Status() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutConfigurationResponse) HasStatus() bool {
	return s.Struct.HasPtr(1)
}

func (s PutConfigurationResponse) StatusBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutConfigurationResponse) SetStatus(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PutConfigurationResponse) Type() PutConfigurationResponse_Type {
	return PutConfigurationResponse_Type(s.Struct.Uint16(4))
}

func (s PutConfigurationResponse) SetType(v PutConfigurationResponse_Type) {
	s.Struct.SetUint16(4, uint16(v))
}

// PutConfigurationResponse_List is a list of PutConfigurationResponse.
type PutConfigurationResponse_List = capnp.StructList[PutConfigurationResponse]

// NewPutConfigurationResponse creates a new list of PutConfigurationResponse.
func NewPutConfigurationResponse_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutConfigurationResponse]{List: l}, err
}

// PutConfigurationResponse_Future is a wrapper for a PutConfigurationResponse promised by a client call.
type PutConfigurationResponse_Future struct{ *capnp.Future }

func (p PutConfigurationResponse_Future) Struct() (PutConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutConfigurationResponse{s}, err
}

func (p PutConfigurationResponse_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationResponse_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationResponse_Type uint16

// PutConfigurationResponse_Type_TypeID is the unique identifier for the type PutConfigurationResponse_Type.
const PutConfigurationResponse_Type_TypeID = 0xa2bce3bdb6c5201d

// Values of PutConfigurationResponse_Type.
const (
	PutConfigurationResponse_Type_raft     PutConfigurationResponse_Type = 0
	PutConfigurationResponse_Type_nodeHost PutConfigurationResponse_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationResponse_Type) String() string {
	switch c {
	case PutConfigurationResponse_Type_raft:
		return "raft"
	case PutConfigurationResponse_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationResponse_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationResponse_TypeFromString(c string) PutConfigurationResponse_Type {
	switch c {
	case "raft":
		return PutConfigurationResponse_Type_raft
	case "nodeHost":
		return PutConfigurationResponse_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationResponse_Type_List = capnp.EnumList[PutConfigurationResponse_Type]

func NewPutConfigurationResponse_Type_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationResponse_Type](s, sz)
}

type ServiceType struct{ capnp.Struct }

// ServiceType_TypeID is the unique identifier for the type ServiceType.
const ServiceType_TypeID = 0x94e84f47e297127c

func NewServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func NewRootServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func ReadRootServiceType(msg *capnp.Message) (ServiceType, error) {
	root, err := msg.Root()
	return ServiceType{root.Struct()}, err
}

func (s ServiceType) String() string {
	str, _ := text.Marshal(0x94e84f47e297127c, s.Struct)
	return str
}

func (s ServiceType) Type() ServiceType_Type {
	return ServiceType_Type(s.Struct.Uint16(0))
}

func (s ServiceType) SetType(v ServiceType_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

// ServiceType_List is a list of ServiceType.
type ServiceType_List = capnp.StructList[ServiceType]

// NewServiceType creates a new list of ServiceType.
func NewServiceType_List(s *capnp.Segment, sz int32) (ServiceType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ServiceType]{List: l}, err
}

// ServiceType_Future is a wrapper for a ServiceType promised by a client call.
type ServiceType_Future struct{ *capnp.Future }

func (p ServiceType_Future) Struct() (ServiceType, error) {
	s, err := p.Future.Struct()
	return ServiceType{s}, err
}

type ServiceType_Type uint16

// ServiceType_Type_TypeID is the unique identifier for the type ServiceType_Type.
const ServiceType_Type_TypeID = 0xdfa79f9e4e6e0810

// Values of ServiceType_Type.
const (
	ServiceType_Type_test          ServiceType_Type = 0
	ServiceType_Type_configService ServiceType_Type = 1
)

// String returns the enum's constant name.
func (c ServiceType_Type) String() string {
	switch c {
	case ServiceType_Type_test:
		return "test"
	case ServiceType_Type_configService:
		return "configService"

	default:
		return ""
	}
}

// ServiceType_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceType_TypeFromString(c string) ServiceType_Type {
	switch c {
	case "test":
		return ServiceType_Type_test
	case "configService":
		return ServiceType_Type_configService

	default:
		return 0
	}
}

type ServiceType_Type_List = capnp.EnumList[ServiceType_Type]

func NewServiceType_Type_List(s *capnp.Segment, sz int32) (ServiceType_Type_List, error) {
	return capnp.NewEnumList[ServiceType_Type](s, sz)
}

type RaftConfiguration struct{ capnp.Struct }

// RaftConfiguration_TypeID is the unique identifier for the type RaftConfiguration.
const RaftConfiguration_TypeID = 0xdb9a661a7821150d

func NewRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func NewRootRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func ReadRootRaftConfiguration(msg *capnp.Message) (RaftConfiguration, error) {
	root, err := msg.Root()
	return RaftConfiguration{root.Struct()}, err
}

func (s RaftConfiguration) String() string {
	str, _ := text.Marshal(0xdb9a661a7821150d, s.Struct)
	return str
}

func (s RaftConfiguration) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RaftConfiguration) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RaftConfiguration) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RaftConfiguration) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RaftConfiguration) NodeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s RaftConfiguration) SetNodeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RaftConfiguration) ClusterId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RaftConfiguration) SetClusterId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RaftConfiguration) CheckQuorum() bool {
	return s.Struct.Bit(128)
}

func (s RaftConfiguration) SetCheckQuorum(v bool) {
	s.Struct.SetBit(128, v)
}

func (s RaftConfiguration) ElectionTimeout() uint64 {
	return s.Struct.Uint64(24)
}

func (s RaftConfiguration) SetElectionTimeout(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s RaftConfiguration) HeartbeatTimeout() uint64 {
	return s.Struct.Uint64(32)
}

func (s RaftConfiguration) SetHeartbeatTimeout(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s RaftConfiguration) SnapshotEntries() uint64 {
	return s.Struct.Uint64(40)
}

func (s RaftConfiguration) SetSnapshotEntries(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s RaftConfiguration) CompactionOverhead() uint64 {
	return s.Struct.Uint64(48)
}

func (s RaftConfiguration) SetCompactionOverhead(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s RaftConfiguration) OrderedConfigurationChange() bool {
	return s.Struct.Bit(129)
}

func (s RaftConfiguration) SetOrderedConfigurationChange(v bool) {
	s.Struct.SetBit(129, v)
}

func (s RaftConfiguration) MaxInMemoryLogSize() uint64 {
	return s.Struct.Uint64(56)
}

func (s RaftConfiguration) SetMaxInMemoryLogSize(v uint64) {
	s.Struct.SetUint64(56, v)
}

func (s RaftConfiguration) SnapshotCompressionType() uint64 {
	return s.Struct.Uint64(64)
}

func (s RaftConfiguration) SetSnapshotCompressionType(v uint64) {
	s.Struct.SetUint64(64, v)
}

func (s RaftConfiguration) EntryCompressionType() uint64 {
	return s.Struct.Uint64(72)
}

func (s RaftConfiguration) SetEntryCompressionType(v uint64) {
	s.Struct.SetUint64(72, v)
}

func (s RaftConfiguration) DisableAutoCompaction() bool {
	return s.Struct.Bit(130)
}

func (s RaftConfiguration) SetDisableAutoCompaction(v bool) {
	s.Struct.SetBit(130, v)
}

func (s RaftConfiguration) IsObserver() bool {
	return s.Struct.Bit(131)
}

func (s RaftConfiguration) SetIsObserver(v bool) {
	s.Struct.SetBit(131, v)
}

func (s RaftConfiguration) IsWitness() bool {
	return s.Struct.Bit(132)
}

func (s RaftConfiguration) SetIsWitness(v bool) {
	s.Struct.SetBit(132, v)
}

func (s RaftConfiguration) Quiesce() bool {
	return s.Struct.Bit(133)
}

func (s RaftConfiguration) SetQuiesce(v bool) {
	s.Struct.SetBit(133, v)
}

func (s RaftConfiguration) ConfigType() ConfigType {
	return ConfigType(s.Struct.Uint16(18))
}

func (s RaftConfiguration) SetConfigType(v ConfigType) {
	s.Struct.SetUint16(18, uint16(v))
}

// RaftConfiguration_List is a list of RaftConfiguration.
type RaftConfiguration_List = capnp.StructList[RaftConfiguration]

// NewRaftConfiguration creates a new list of RaftConfiguration.
func NewRaftConfiguration_List(s *capnp.Segment, sz int32) (RaftConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[RaftConfiguration]{List: l}, err
}

// RaftConfiguration_Future is a wrapper for a RaftConfiguration promised by a client call.
type RaftConfiguration_Future struct{ *capnp.Future }

func (p RaftConfiguration_Future) Struct() (RaftConfiguration, error) {
	s, err := p.Future.Struct()
	return RaftConfiguration{s}, err
}

type ConfigType uint16

// ConfigType_TypeID is the unique identifier for the type ConfigType.
const ConfigType_TypeID = 0xadb2d0b69445303c

// Values of ConfigType.
const (
	ConfigType_system      ConfigType = 0
	ConfigType_exchange    ConfigType = 1
	ConfigType_customerFsm ConfigType = 2
)

// String returns the enum's constant name.
func (c ConfigType) String() string {
	switch c {
	case ConfigType_system:
		return "system"
	case ConfigType_exchange:
		return "exchange"
	case ConfigType_customerFsm:
		return "customerFsm"

	default:
		return ""
	}
}

// ConfigTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ConfigTypeFromString(c string) ConfigType {
	switch c {
	case "system":
		return ConfigType_system
	case "exchange":
		return ConfigType_exchange
	case "customerFsm":
		return ConfigType_customerFsm

	default:
		return 0
	}
}

type ConfigType_List = capnp.EnumList[ConfigType]

func NewConfigType_List(s *capnp.Segment, sz int32) (ConfigType_List, error) {
	return capnp.NewEnumList[ConfigType](s, sz)
}

type ListRaftConfigurationRequest struct{ capnp.Struct }

// ListRaftConfigurationRequest_TypeID is the unique identifier for the type ListRaftConfigurationRequest.
const ListRaftConfigurationRequest_TypeID = 0xc75a0f30e41b37f5

func NewListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func NewRootListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func ReadRootListRaftConfigurationRequest(msg *capnp.Message) (ListRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return ListRaftConfigurationRequest{root.Struct()}, err
}

func (s ListRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc75a0f30e41b37f5, s.Struct)
	return str
}

// ListRaftConfigurationRequest_List is a list of ListRaftConfigurationRequest.
type ListRaftConfigurationRequest_List = capnp.StructList[ListRaftConfigurationRequest]

// NewListRaftConfigurationRequest creates a new list of ListRaftConfigurationRequest.
func NewListRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (ListRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ListRaftConfigurationRequest]{List: l}, err
}

// ListRaftConfigurationRequest_Future is a wrapper for a ListRaftConfigurationRequest promised by a client call.
type ListRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p ListRaftConfigurationRequest_Future) Struct() (ListRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationRequest{s}, err
}

type ListRaftConfigurationResponse struct{ capnp.Struct }

// ListRaftConfigurationResponse_TypeID is the unique identifier for the type ListRaftConfigurationResponse.
const ListRaftConfigurationResponse_TypeID = 0xc5195060b33b8218

func NewListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func NewRootListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func ReadRootListRaftConfigurationResponse(msg *capnp.Message) (ListRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return ListRaftConfigurationResponse{root.Struct()}, err
}

func (s ListRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xc5195060b33b8218, s.Struct)
	return str
}

func (s ListRaftConfigurationResponse) Configs() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s ListRaftConfigurationResponse) HasConfigs() bool {
	return s.Struct.HasPtr(0)
}

func (s ListRaftConfigurationResponse) SetConfigs(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewConfigs sets the configs field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s ListRaftConfigurationResponse) NewConfigs(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListRaftConfigurationResponse_List is a list of ListRaftConfigurationResponse.
type ListRaftConfigurationResponse_List = capnp.StructList[ListRaftConfigurationResponse]

// NewListRaftConfigurationResponse creates a new list of ListRaftConfigurationResponse.
func NewListRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (ListRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ListRaftConfigurationResponse]{List: l}, err
}

// ListRaftConfigurationResponse_Future is a wrapper for a ListRaftConfigurationResponse promised by a client call.
type ListRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p ListRaftConfigurationResponse_Future) Struct() (ListRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationResponse{s}, err
}

type GetRaftConfigurationRequest struct{ capnp.Struct }

// GetRaftConfigurationRequest_TypeID is the unique identifier for the type GetRaftConfigurationRequest.
const GetRaftConfigurationRequest_TypeID = 0xa233c1204c18c976

func NewGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func NewRootGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func ReadRootGetRaftConfigurationRequest(msg *capnp.Message) (GetRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return GetRaftConfigurationRequest{root.Struct()}, err
}

func (s GetRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xa233c1204c18c976, s.Struct)
	return str
}

func (s GetRaftConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRaftConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRaftConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetRaftConfigurationRequest_List is a list of GetRaftConfigurationRequest.
type GetRaftConfigurationRequest_List = capnp.StructList[GetRaftConfigurationRequest]

// NewGetRaftConfigurationRequest creates a new list of GetRaftConfigurationRequest.
func NewGetRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (GetRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationRequest]{List: l}, err
}

// GetRaftConfigurationRequest_Future is a wrapper for a GetRaftConfigurationRequest promised by a client call.
type GetRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p GetRaftConfigurationRequest_Future) Struct() (GetRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationRequest{s}, err
}

type GetRaftConfigurationResponse struct{ capnp.Struct }

// GetRaftConfigurationResponse_TypeID is the unique identifier for the type GetRaftConfigurationResponse.
const GetRaftConfigurationResponse_TypeID = 0xb4fe5e6f0ef85636

func NewGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func NewRootGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func ReadRootGetRaftConfigurationResponse(msg *capnp.Message) (GetRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return GetRaftConfigurationResponse{root.Struct()}, err
}

func (s GetRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xb4fe5e6f0ef85636, s.Struct)
	return str
}

func (s GetRaftConfigurationResponse) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s GetRaftConfigurationResponse) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationResponse) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s GetRaftConfigurationResponse) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GetRaftConfigurationResponse_List is a list of GetRaftConfigurationResponse.
type GetRaftConfigurationResponse_List = capnp.StructList[GetRaftConfigurationResponse]

// NewGetRaftConfigurationResponse creates a new list of GetRaftConfigurationResponse.
func NewGetRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (GetRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationResponse]{List: l}, err
}

// GetRaftConfigurationResponse_Future is a wrapper for a GetRaftConfigurationResponse promised by a client call.
type GetRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p GetRaftConfigurationResponse_Future) Struct() (GetRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationResponse{s}, err
}

func (p GetRaftConfigurationResponse_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutRaftConfigurationRequest struct{ capnp.Struct }

// PutRaftConfigurationRequest_TypeID is the unique identifier for the type PutRaftConfigurationRequest.
const PutRaftConfigurationRequest_TypeID = 0xefe67d057faf5d90

func NewPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func NewRootPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func ReadRootPutRaftConfigurationRequest(msg *capnp.Message) (PutRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return PutRaftConfigurationRequest{root.Struct()}, err
}

func (s PutRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xefe67d057faf5d90, s.Struct)
	return str
}

func (s PutRaftConfigurationRequest) Enable() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationRequest) SetEnable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationRequest) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationRequest) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationRequest) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationRequest) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationRequest) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(1)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutRaftConfigurationRequest) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationRequest) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutRaftConfigurationRequest) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PutRaftConfigurationRequest_List is a list of PutRaftConfigurationRequest.
type PutRaftConfigurationRequest_List = capnp.StructList[PutRaftConfigurationRequest]

// NewPutRaftConfigurationRequest creates a new list of PutRaftConfigurationRequest.
func NewPutRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (PutRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationRequest]{List: l}, err
}

// PutRaftConfigurationRequest_Future is a wrapper for a PutRaftConfigurationRequest promised by a client call.
type PutRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p PutRaftConfigurationRequest_Future) Struct() (PutRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationRequest{s}, err
}

func (p PutRaftConfigurationRequest_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(1, nil)}
}

type PutRaftConfigurationResponse struct{ capnp.Struct }

// PutRaftConfigurationResponse_TypeID is the unique identifier for the type PutRaftConfigurationResponse.
const PutRaftConfigurationResponse_TypeID = 0x8f8f8f8f8f8f8f8f

func NewPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func NewRootPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func ReadRootPutRaftConfigurationResponse(msg *capnp.Message) (PutRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return PutRaftConfigurationResponse{root.Struct()}, err
}

func (s PutRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0x8f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutRaftConfigurationResponse) Valid() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationResponse) SetValid(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationResponse) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationResponse) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationResponse) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationResponse) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// PutRaftConfigurationResponse_List is a list of PutRaftConfigurationResponse.
type PutRaftConfigurationResponse_List = capnp.StructList[PutRaftConfigurationResponse]

// NewPutRaftConfigurationResponse creates a new list of PutRaftConfigurationResponse.
func NewPutRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (PutRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationResponse]{List: l}, err
}

// PutRaftConfigurationResponse_Future is a wrapper for a PutRaftConfigurationResponse promised by a client call.
type PutRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p PutRaftConfigurationResponse_Future) Struct() (PutRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationResponse{s}, err
}

type NodeHostConfiguration struct{ capnp.Struct }

// NodeHostConfiguration_TypeID is the unique identifier for the type NodeHostConfiguration.
const NodeHostConfiguration_TypeID = 0x859698645e9c4a44

func NewNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func NewRootNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func ReadRootNodeHostConfiguration(msg *capnp.Message) (NodeHostConfiguration, error) {
	root, err := msg.Root()
	return NodeHostConfiguration{root.Struct()}, err
}

func (s NodeHostConfiguration) String() string {
	str, _ := text.Marshal(0x859698645e9c4a44, s.Struct)
	return str
}

func (s NodeHostConfiguration) DeploymentId() uint64 {
	return s.Struct.Uint64(0)
}

func (s NodeHostConfiguration) SetDeploymentId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s NodeHostConfiguration) WriteAheadLogDir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasWriteAheadLogDir() bool {
	return s.Struct.HasPtr(0)
}

func (s NodeHostConfiguration) WriteAheadLogDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetWriteAheadLogDir(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NodeHostConfiguration) NodeHostDir() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasNodeHostDir() bool {
	return s.Struct.HasPtr(1)
}

func (s NodeHostConfiguration) NodeHostDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetNodeHostDir(v string) error {
	return s.Struct.SetText(1, v)
}

func (s NodeHostConfiguration) RoundTripTimeMilliseconds() uint64 {
	return s.Struct.Uint64(8)
}

func (s NodeHostConfiguration) SetRoundTripTimeMilliseconds(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s NodeHostConfiguration) RaftAddress() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasRaftAddress() bool {
	return s.Struct.HasPtr(2)
}

func (s NodeHostConfiguration) RaftAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetRaftAddress(v string) error {
	return s.Struct.SetText(2, v)
}

func (s NodeHostConfiguration) ApiAddress() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasApiAddress() bool {
	return s.Struct.HasPtr(3)
}

func (s NodeHostConfiguration) ApiAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetApiAddress(v string) error {
	return s.Struct.SetText(3, v)
}

func (s NodeHostConfiguration) MutualTls() bool {
	return s.Struct.Bit(128)
}

func (s NodeHostConfiguration) SetMutualTls(v bool) {
	s.Struct.SetBit(128, v)
}

func (s NodeHostConfiguration) CaFile() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCaFile() bool {
	return s.Struct.HasPtr(4)
}

func (s NodeHostConfiguration) CaFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCaFile(v string) error {
	return s.Struct.SetText(4, v)
}

func (s NodeHostConfiguration) CertFile() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCertFile() bool {
	return s.Struct.HasPtr(5)
}

func (s NodeHostConfiguration) CertFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCertFile(v string) error {
	return s.Struct.SetText(5, v)
}

func (s NodeHostConfiguration) KeyFile() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasKeyFile() bool {
	return s.Struct.HasPtr(6)
}

func (s NodeHostConfiguration) KeyFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetKeyFile(v string) error {
	return s.Struct.SetText(6, v)
}

// NodeHostConfiguration_List is a list of NodeHostConfiguration.
type NodeHostConfiguration_List = capnp.StructList[NodeHostConfiguration]

// NewNodeHostConfiguration creates a new list of NodeHostConfiguration.
func NewNodeHostConfiguration_List(s *capnp.Segment, sz int32) (NodeHostConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7}, sz)
	return capnp.StructList[NodeHostConfiguration]{List: l}, err
}

// NodeHostConfiguration_Future is a wrapper for a NodeHostConfiguration promised by a client call.
type NodeHostConfiguration_Future struct{ *capnp.Future }

func (p NodeHostConfiguration_Future) Struct() (NodeHostConfiguration, error) {
	s, err := p.Future.Struct()
	return NodeHostConfiguration{s}, err
}

const schema_9f0a9459eb121bf0 = "x\xda\x9cX}l\x14\xe7\xd1\x9f\xd9\xbd\xf3\xd9`s" +
	"\xde\xec\xfa\xe3\xc8\x8b\xcfD\xbc\x0av\xc3W\xdc\xd4\xd4" +
	"\x85\x1a\xb0M\x00\x19\xf0\xfaL\x9b\xd0\x80X\xdf=\xd8" +
	"\x9b\xdc\xed\x9ew\xf7\x0c\x1752\xa1\xa0\x16\x14T\xaa" +
	"\x90\x96DM)\xa9\xa2HQQ\xd44D\"j\x9b" +
	"\x84\x085Q\x8bZ\xda\xb4jH\xaa6\x84TiZ" +
	"ZT)J\xa8\xa2l5\xcfzo\xd7\xf6\x01\xc7\xc7" +
	"?\xe7\xdf373\xcf|=\xbf\xb9\xa5\x1fU\xaf\x8a" +
	",\xab\x1b\xb9\x0d\x84\xd4a\x8cV\xb9\xbd\x1b\xbe\xbf=" +
	"s\xf4\xbb\xfbAM\xa2\xe8^\xbe\xf5\x96\x7f\xdc{d" +
	"\xd61\x88\xc6b\x00\x1d\x09\xe9Y\x94\x97I\xf4q\x91" +
	"\xd4)\x00\xba\xdf\x9e\xfcG\xe2\x18\x12\x17H\xe61\xf9" +
	"\x02\xca?\x91c\x00\xf2\x09\xf99@\xf7\xed\xd7;\x8f" +
	"\xcf\x7f\xfc\xcc\xa3\xd3\xa4\xfb0&\x00t\xf4)/\xa1" +
	"\xbcMi\x02\x90\x99\xb2\x0b\xd0\xfd\xfa-\xdf\xbbp\xf7" +
	"\xe6\x0f\x8eL\x13\x8f\x90\xee3\xcaV\x94\xdf\xe2\xc2\xef" +
	"*\xdd\x81'\xc7\xa6\xeb\x16\xb8nl8\x8dr\xa2\xa1" +
	"\x09\xa0c~C\x12\x01\xdd\xf17\x9a\xfb[_\xedx" +
	"\x0a\xa4d\xd8q$\xe5w5\x9eGYm$\xc77" +
	"6\x92\xf2y\xadg^\xfc\xf9{?{\x0a\xa4\xe5B" +
	"`\x09\xb0#\xd7\xf8!\xca\x07\xb8\xe4\xfe\xc6N@\xf7" +
	"\xce\xbf\x7f\xed\xb1\x89\xcd\xbf\xf9Q9\xb5\x87\x1a\x0f\xa2" +
	"\xfc4\x17>\xce\xd5\xbe\xb6\xf2\xe8\xcbc\xdb;O\x80" +
	"\xb4\x08aR\xe8\\\xe3\x7f\x11P~\x9f\x0b\x9czw" +
	"\xe2\xe3\x07\xf7<z\xa2|\xc0j\x9aN\xa3<\xbf\x89" +
	"\xf4\xcdk\xa2\x80\xadX\xdaw\xe4\xc5\xdf>\x7f\x02\xa4" +
	"\xa4\x10H\x03v\x1ch\x1aD\xf9I.\xf9x\xd3f" +
	"@\xf7\x0b_\xf9d\x8e\xb9\xfd\xb3\x17\xca\xb9y\xb2\xe9" +
	"\x02\xca\xe7\xb8\xf0\xd9&\xf2b\xc1\xc2\x15\xca\x95\x7fm" +
	"\xfa\x05H\x9d\x82\xdbzh\xf6\xc8\xa9/_|\x85\xd4" +
	"^j\x9a+\xc8u\xcd$Y\xd3L\xb7/\x1dN+" +
	"\x07\xaeWj~\x09\xe5\xb6\xe6\xdb\x01\xe4\xd5\xcdT\x0e" +
	"[\xabf\xbf\x8a\xcbn\x7f-|\xfd\xb7\x9a\xffC\xd7" +
	"\xbf\xd4L\x86\x9b\xf7~\xe9\xa7;\x06\x12g\xcayY" +
	"\x97\xf8\x10\xe5\xb6\x04\xd9\xfe\xff\x04\x09\x7f\xd4y\xeb\xc5" +
	"\xa5\xf1\xad\xbf\x9c*\xcc\x8beK\xe2\x02\xcac\x89\x18" +
	"\x88\xee\xae\x1f\xef=\xfe\xca{[\xce\x82\x94\x14\xa7\x84" +
	"hc\xe2~\x945\xaeo[\xe2\x9b\xf2I\xfa\xe4Z" +
	"\x9f^\xd9\x83\xf7e\xfe8\xe3\xe6O\x92\xc6S\\\xfa" +
	"d\x82n^\xd70\x7f\xf7\xdc\x9dO\xbcM7\x9f5" +
	"\xdd\xd7S\x89\x83(\x9f#\xe9\x8e\xb3\x89\x97E@W" +
	"\x1e8\x1c\xdf\xff\xc3\xf6w\xc2W\x8f\xb6\xf0\xcc'Z" +
	"\xe86\xf5\xd5\xc6\xa6\x1f\x1c{\xe6/ }N\x08\x1a" +
	"\x01\xb0ce\xcb^\x94\xd5\x16^\x9b-dy\xed\x0b" +
	"\xbfj\xeb\x11\x8f\xfe3\xacjK\x0b\x8f\xa2\xceU\x1d" +
	"\xde\xf6\xdcD\xf4\xa1\xbf\xfd\xbbl\x8f\x1eh9\x8f\xf2" +
	"\xd3\\\xdd\xf1\x16J\x8a\xf8L2\xf5\xfb7:?\xe6" +
	"W.5,`\xc7\x17\x93\x17P\xde\x92$I5\xd9" +
	"\x09.\xff\xdf\xe5\xe6-\xd31\xd3f6j/\x19_" +
	"\xb6d\xd4\xb4\x9d%i\xd3\xd8\xa9\x8f,Nky#" +
	"\xdf\xb5\xc9\xcc\xb0u\xa6\xed\xf4p\xb0`iqG7" +
	"\x8d\x01Du\xa1\x18\x01\x88 \x15\x0f\xde\x0f\x90\xaaF" +
	"\x11S\x0a\x0a\x88\xa8 \xc1\x12\x1e\x04H)\x04\xb7\xa2" +
	"\x80\x92\x80\x0a\x0aT\xec8\x0c\x90\xfa?\xc2\x17\x12." +
	"\xa2\x82\"\xd5\x01\xfe\x0e u\x07\xe1\xcb\x09\x8f\x08\x0a" +
	"F\x00\xe4\xbb\xb8\xfc\xe7\x09_ExTT0\x0a " +
	"\xaf\xc4\xad\x00\xa9\x15\x84\xaf#\xbcj\x8f\x82U\x00r" +
	"\x1f\x0e\x02\xa4z\x09\x1f <\x16Q\x90\xc7\x1b\xbb\x00" +
	"R\xeb\x08\x1f\"\xbc:\xaa`5\x85\x037\x00\xa4\x06" +
	"\x08\xbf\x8f\xf0\x9a*\x05k\x00\xe4{q\x0d@j\x88" +
	"\xf0\x1d(\xa0\x9ba\xf9\xacY\xcc1\x88\x1b\xce\xfa\x0c" +
	"\xd6\x80\x805\x80\xee.Kw\xd8\xeaQ\x86Z\xa6\xdf" +
	"\x1c\xe9\xd5-\x00\xac\x05\x01k\x01]c2z\x10\xeb" +
	"\xd5\xad\x12j\x99\x05#3d\xe9B~H\xcf\xb1\x8d" +
	"z6\xab\xdb,m\x1a\x19\xb4KZ-m\xa7\xb3:" +
	"\x93\xb1 \xc6l\xbb\xf4M-\xaf\x13\xc8@\x0c\x81\xb9" +
	"\x82S\xd0\xb2CY@\x1b\x11\x04D\xc0\xee\xb4\xb6V" +
	"\xcf\xb2\x92H\x9aY\x0e\x01\x10\xf86\xf1\x00+N\x91" +
	"\xf1+\xa1\xea*\x950Pp\x06\xb5\x9dA!P\x1d" +
	"\x0c2;o\xc6\x0c\x9bQA\xd4\xfa\x05!\xf5\xdd\x09" +
	"\xa0\xae\x12Q\xed/U\x83\xb4\xbe\x1d@\xed\x15Q\x1d" +
	"\x08JA\xdaH\x82\xebDT\x87\x04L\x8ekY=" +
	"\xe3\xdf nh\xb9\x92oIfY\xa65\xc3\xd3\xe8" +
	"\xd5=\x9d\xeae7\x1b+0\xdbQ#\x18n\x10l" +
	"\x8f\x0f\x15\xf3L\xad\x16#\xb5\xae\xcb\x1do#'\x17" +
	"\x88\xa8.\x15\xb0\x0e?s=\xd7\x17m\x00P\xef\x10" +
	"Q].`\x9c\x12\x83\xf5\xc1\xc0\x00\xc4\xfap\xa6\x01" +
	"\xb0>x\x86'O}\x8f#W\xf18\xc5\xacq=" +
	"\xcd\x86\x8ab\x9eq/\x83\xf9\xe1{\x19)E\xb7\x8e" +
	"\x9c\xac\x16QU\x04\x8c;\xc5<\xc3x \x0f\x88\xf1" +
	"\xca\x9293\x91\x86\xcd\x80[\x0f\xdeK\xdf\xba\x12\xc4" +
	"\xe8!2\xbf[Du_8F\x0fS\x8c\xf6\x88\xa8" +
	">B\xe9\xad\xf7\xd2{`\x0d\x80\xbaOD\xf5p\xd0" +
	"\xe6\xd2\xa1.\x00\xf5[\"\xaaG\x82\x1e\x97\xbeCJ" +
	"\x1f\x11Q=z\x93!\x9e\xb0\x0b\xe94\xb5\x8a\xdf\x01" +
	"\xb6\xa39\x85R\x93\xf8q*\xdd\xac\xc28\xdd\xcd\xca" +
	"\x15\xfdX\x81\x89\xb6C5\x1f\xca\xca\xdc +\xa2\x9e" +
	"\xb9\x91\xb6*\x9b\x89\xc5<\xf0d\xa3\x9a\xc7Rj'" +
	"\x9f\xa5\x9a\x0d\x00<@\xe1p\\\xb7#Vg\xb3S" +
	"\x8c\xd8\x00\xd3\xbc\xf7kj\x81\x1f\xff9\x80\x03\"N" +
	"K\xc3\x9c\x0a.\xe4\x19\x9a\xac\xe8\xc5#l\xf2z\x0b" +
	"\x06\xbb\x99]\xc8:v\xd8*\x15M\xad\x88j\xb3\x80" +
	"\xae\xe5\x97 Oo\x89:M\xeb\xa0k$\xaa|A" +
	"\xf3\x08\x86:\xfc\xb6\xb2\x1dN\xd7_(\xa2\xda+`" +
	"L\xcbf\xb1>`\x82\x9e\x03\x15\x06%r\xcd\xa0\x0c" +
	"\x15\xf3\xe8\x8dJ\x9e\xd2y]<\xa5\x0d\x1b\x00P\x90" +
	"\xa4a\x80n\xbbh;,\xe7\xb2\xdd\xe9Q\xcd\x18\xa1" +
	"X\xb8\xe9\x82\xed\x989fAl\xad\x9d\xbb\xc9\x82\x0d" +
	"M\xe9P\xf4\xbb\x82\x8a\xed\xf6\x94\x94\xe9:\xdf`\xac" +
	"\xe2\xc0\xf3Y\xbb8\x95gi}\xa7\x9e\xd6E\xa7\x18" +
	"\xaa\xe2\xdb\xbc*\xde\x0a\x103\x0d\xe6\xb2qf\x15\x9d" +
	"Q\x1dDc\xe4\xbaU<\xc3\x94?\xd7\xab\x11C\\" +
	"\xaf\xa6=Dy\xa3\xc3\xbc\x8f\\\xdf\x1d\x88\xe9N1" +
	"\xfcT\xb5\x07O\x95Tz\xab\xba\x82\xb7\x0a\x85\xc9\xa7" +
	"jn\xf0T\xc5w\x8dj\x0e\xc6\x03\x9b\xde4\xe9\xd6" +
	"rf\xc1\xa0\x83\x92}\xef\xe0F\xe6\xc1\xd4\xf6\xc9\xfb" +
	"\xd3a\xc1@R\xb3\xb4\xdc\x94\xeeY\x13\xe4o\xc2\xf2" +
	"B\x81\xf5a\xd2WQ\xe7\xf4\xebv\xf9\x92\x89\x9b3" +
	"KfM0&&<-\xf6\xcdO\x8a\xabX\x1e+" +
	"\xc4\x18\x9f\xae\x15vU\x8aYq\x0a\x96\xd7\xe9Q\x80" +
	"\x12\xa7F\x7fC\x93\x96\x0d\x82 \xb5\xc50\xd8Z\xd0" +
	"\xe7\xf0\xd2<:k\x88\xb9\xfe\xa8\x02\x1cY\x85\xae\x1f" +
	"y\xfeW\xd8\x99\xaa\x1bl\x84\xa1\xd8\xd49>\xd9\x01" +
	"\xed\x004i\xbcY~\xbd\xca\x9f\x11%o~\xf7\x96" +
	"(\xf8Y\x9c\x0b\x90z\x9d\xb8\xea\x9b!\x0a~\x8eS" +
	"\xde_\x13\xfc\xa70\x05\xff\x03\xa7\xc8o\x12\xfeWN" +
	"\xc1\xf7x\x14\xfc\xcf\x9cj\xbfC\xf8\x07\x9c\x82\x8b\x1e" +
	"\x05\x7f\x1f\xf7\x02\xa4.\x12~\x99S\xf0\x88G\xc1/" +
	"q\x8a\x7f\x99\xf0O9\x05\x8fz\x14\xfc\x0a\x97\xff\x84" +
	"\xf0\x88@\x14\xbc\xca\xa3\xe0(<\x01\x90\x8a\x08\"\xa6" +
	"\xea\x09\xaf~\xd8\xa3\xe0u\xc2yZ\x15\x08o%\xbc" +
	"&\xe6Q\xf0y\\\xbe\x95\xf0;\x08\x9fU\xad\xe0," +
	"\x00\xb9M8M\xab\x02\xe1\xcb\x09\x9f]\xa3\xe0lZ" +
	"\x15\x84g\x01R\xcb\x09\xef%\xbcv\xaf\x82\xb5\xb4\xb0" +
	"\x0a\xcf\xd3J@\xf8\x00\xe1u\xdfP\xb0\x8eV\x02\x81" +
	"V\x88~\xc2\xef!|\xce>\x05\xe7\x00\xc8[\x04\x8a" +
	"\xcf\x10\xe1;\x08\x8f\xefW0N\xab\xa5@+\xc1=" +
	"\x84g\x08\xaf\xafQ\xb0\x1e@\xd6\xb8\x9e\x1d\x84g\x85" +
	")\xef\x7f7=\xd3\xa1m!\x9d-\xd8\x0e\xb3\xd6\x03" +
	"\x86\xb0Q\x96~@-\x98\x10\xb3\x0a9\x9f\xc0\xb8," +
	"\xcb\xd2\x94j\xa4%\xc1,8P\x92\x1fe\x9a\xe5\x0c" +
	"3\x0d\x1d\xff(8\xb3\x0d-o\x8f\x9a\x0e\xf6\x19\x8e" +
	"\xa53;8I\x9b\xb9\xbc\x96vt4\x8d\xcd\xe3\xcc" +
	"\x1ae\xa2\x16\xb8`Z\x19f\xb1L\x8f\x10.\xb2\x9e" +
	"Q\xcd\x10GX\xc9\xa3\x9c\xb6{\xbd\xb1\x91\xe5\xd0\xb4" +
	"\x8a\xfd\xe6HJ\x17\x1fd3\x0c\x0b=f.o1" +
	"\xdb\xd6M\x83&o\xe0\x003\x1c\xab\xd8c\xe6\xd0?" +
	"\xe6\x93\xb9t\x9c\xd1mm8\xcbVc\xc11I\x87" +
	"\x96\xf4\xae\xef[\xd7\xed\xcd\xc36\xb3\xc6AdV\x08" +
	"\xfc\xaa\xee\x18t\xcd\x12\xf3\x9b\x18+\xe8\xccN\x07n" +
	"\xa7'\xdf^\x109\x05,\xfd\xcaR!\x05\xbc\xda@" +
	"\xbe1>\x13\xfa\xd5i\xcaT\x8e^o#\xc8\xb3\xc5" +
	"<\x8c3\x99\xa0\x05\x10w\x98\xedL^0\xc5 \xc9" +
	"\xbfs\xd3\x0c\xad\xe2'&\xf4SJEOL\xf9\xd5" +
	"1`\xd1\xa1\xe7\xb8\xab\xd2\xcd\xb1+x\x8e\xbb\x99A" +
	"\x95Svu\xbc>\xb1\xa9\x9c\x98\x97\x9f\xe7\xd7\xe0\xe5" +
	"\xff\x0b\x00\x00\xff\xff\xd2\xd2\xbd1"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x859698645e9c4a44,
		0x8f8f8f8f8f8f8f8f,
		0x93c59921a137c8db,
		0x94e84f47e297127c,
		0x9f8f8f8f8f8f8f8f,
		0xa233c1204c18c976,
		0xa2bce3bdb6c5201d,
		0xa3cf4f7f955be932,
		0xad375e71bf983dc3,
		0xad93807af77fe1b9,
		0xadb2d0b69445303c,
		0xb4fe5e6f0ef85636,
		0xbe4eeef9143c2824,
		0xc0e43eb9670b8d20,
		0xc3273101c10b065a,
		0xc5195060b33b8218,
		0xc75a0f30e41b37f5,
		0xcd55e3c0a182ac77,
		0xd6645c0180f9fc72,
		0xdb9a661a7821150d,
		0xdc2aa0850f905013,
		0xdfa79f9e4e6e0810,
		0xec98034329cbb446,
		0xefe67d057faf5d90,
		0xf737c9d3531fa703)
}
