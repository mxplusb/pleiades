// Code generated by capnpc-go. DO NOT EDIT.

package host

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type ConfigService struct{ Client *capnp.Client }

// ConfigService_TypeID is the unique identifier for the type ConfigService.
const ConfigService_TypeID = 0xcd55e3c0a182ac77

func (c ConfigService) GetConfig(ctx context.Context, params func(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "getConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_getConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_getConfig_Results_Future{Future: ans.Future()}, release
}
func (c ConfigService) PutConfig(ctx context.Context, params func(ConfigService_putConfig_Params) error) (ConfigService_putConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "putConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_putConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_putConfig_Results_Future{Future: ans.Future()}, release
}

func (c ConfigService) AddRef() ConfigService {
	return ConfigService{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigService) Release() {
	c.Client.Release()
}

// A ConfigService_Server is a ConfigService with a local implementation.
type ConfigService_Server interface {
	GetConfig(context.Context, ConfigService_getConfig) error

	PutConfig(context.Context, ConfigService_putConfig) error
}

// ConfigService_NewServer creates a new Server from an implementation of ConfigService_Server.
func ConfigService_NewServer(s ConfigService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigService_Methods(nil, s), s, c, policy)
}

// ConfigService_ServerToClient creates a new Client from an implementation of ConfigService_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigService_ServerToClient(s ConfigService_Server, policy *server.Policy) ConfigService {
	return ConfigService{Client: capnp.NewClient(ConfigService_NewServer(s, policy))}
}

// ConfigService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigService_Methods(methods []server.Method, s ConfigService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "getConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConfig(ctx, ConfigService_getConfig{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/config.capnp:ConfigService",
			MethodName:    "putConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutConfig(ctx, ConfigService_putConfig{call})
		},
	})

	return methods
}

// ConfigService_getConfig holds the state for a server call to ConfigService.getConfig.
// See server.Call for documentation.
type ConfigService_getConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_getConfig) Args() ConfigService_getConfig_Params {
	return ConfigService_getConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_getConfig) AllocResults() (ConfigService_getConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{Struct: r}, err
}

// ConfigService_putConfig holds the state for a server call to ConfigService.putConfig.
// See server.Call for documentation.
type ConfigService_putConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_putConfig) Args() ConfigService_putConfig_Params {
	return ConfigService_putConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_putConfig) AllocResults() (ConfigService_putConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{Struct: r}, err
}

type ConfigService_getConfig_Params struct{ capnp.Struct }

// ConfigService_getConfig_Params_TypeID is the unique identifier for the type ConfigService_getConfig_Params.
const ConfigService_getConfig_Params_TypeID = 0xec98034329cbb446

func NewConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func NewRootConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func ReadRootConfigService_getConfig_Params(msg *capnp.Message) (ConfigService_getConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Params{root.Struct()}, err
}

func (s ConfigService_getConfig_Params) String() string {
	str, _ := text.Marshal(0xec98034329cbb446, s.Struct)
	return str
}

func (s ConfigService_getConfig_Params) Request() (GetConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Params) SetRequest(v GetConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated GetConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Params) NewRequest() (GetConfigurationRequest, error) {
	ss, err := NewGetConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return GetConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Params_List is a list of ConfigService_getConfig_Params.
type ConfigService_getConfig_Params_List = capnp.StructList[ConfigService_getConfig_Params]

// NewConfigService_getConfig_Params creates a new list of ConfigService_getConfig_Params.
func NewConfigService_getConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Params]{List: l}, err
}

// ConfigService_getConfig_Params_Future is a wrapper for a ConfigService_getConfig_Params promised by a client call.
type ConfigService_getConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Params_Future) Struct() (ConfigService_getConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Params{s}, err
}

func (p ConfigService_getConfig_Params_Future) Request() GetConfigurationRequest_Future {
	return GetConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_getConfig_Results struct{ capnp.Struct }

// ConfigService_getConfig_Results_TypeID is the unique identifier for the type ConfigService_getConfig_Results.
const ConfigService_getConfig_Results_TypeID = 0xad375e71bf983dc3

func NewConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func NewRootConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func ReadRootConfigService_getConfig_Results(msg *capnp.Message) (ConfigService_getConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Results{root.Struct()}, err
}

func (s ConfigService_getConfig_Results) String() string {
	str, _ := text.Marshal(0xad375e71bf983dc3, s.Struct)
	return str
}

func (s ConfigService_getConfig_Results) Response() (GetConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Results) SetResponse(v GetConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated GetConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Results) NewResponse() (GetConfigurationResponse, error) {
	ss, err := NewGetConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return GetConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Results_List is a list of ConfigService_getConfig_Results.
type ConfigService_getConfig_Results_List = capnp.StructList[ConfigService_getConfig_Results]

// NewConfigService_getConfig_Results creates a new list of ConfigService_getConfig_Results.
func NewConfigService_getConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Results]{List: l}, err
}

// ConfigService_getConfig_Results_Future is a wrapper for a ConfigService_getConfig_Results promised by a client call.
type ConfigService_getConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Results_Future) Struct() (ConfigService_getConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Results{s}, err
}

func (p ConfigService_getConfig_Results_Future) Response() GetConfigurationResponse_Future {
	return GetConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Params struct{ capnp.Struct }

// ConfigService_putConfig_Params_TypeID is the unique identifier for the type ConfigService_putConfig_Params.
const ConfigService_putConfig_Params_TypeID = 0xc3273101c10b065a

func NewConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func NewRootConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func ReadRootConfigService_putConfig_Params(msg *capnp.Message) (ConfigService_putConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Params{root.Struct()}, err
}

func (s ConfigService_putConfig_Params) String() string {
	str, _ := text.Marshal(0xc3273101c10b065a, s.Struct)
	return str
}

func (s ConfigService_putConfig_Params) Request() (PutConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Params) SetRequest(v PutConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated PutConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Params) NewRequest() (PutConfigurationRequest, error) {
	ss, err := NewPutConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return PutConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Params_List is a list of ConfigService_putConfig_Params.
type ConfigService_putConfig_Params_List = capnp.StructList[ConfigService_putConfig_Params]

// NewConfigService_putConfig_Params creates a new list of ConfigService_putConfig_Params.
func NewConfigService_putConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Params]{List: l}, err
}

// ConfigService_putConfig_Params_Future is a wrapper for a ConfigService_putConfig_Params promised by a client call.
type ConfigService_putConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Params_Future) Struct() (ConfigService_putConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Params{s}, err
}

func (p ConfigService_putConfig_Params_Future) Request() PutConfigurationRequest_Future {
	return PutConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Results struct{ capnp.Struct }

// ConfigService_putConfig_Results_TypeID is the unique identifier for the type ConfigService_putConfig_Results.
const ConfigService_putConfig_Results_TypeID = 0xdc2aa0850f905013

func NewConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func NewRootConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func ReadRootConfigService_putConfig_Results(msg *capnp.Message) (ConfigService_putConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Results{root.Struct()}, err
}

func (s ConfigService_putConfig_Results) String() string {
	str, _ := text.Marshal(0xdc2aa0850f905013, s.Struct)
	return str
}

func (s ConfigService_putConfig_Results) Response() (PutConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Results) SetResponse(v PutConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated PutConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Results) NewResponse() (PutConfigurationResponse, error) {
	ss, err := NewPutConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return PutConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Results_List is a list of ConfigService_putConfig_Results.
type ConfigService_putConfig_Results_List = capnp.StructList[ConfigService_putConfig_Results]

// NewConfigService_putConfig_Results creates a new list of ConfigService_putConfig_Results.
func NewConfigService_putConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Results]{List: l}, err
}

// ConfigService_putConfig_Results_Future is a wrapper for a ConfigService_putConfig_Results promised by a client call.
type ConfigService_putConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Results_Future) Struct() (ConfigService_putConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Results{s}, err
}

func (p ConfigService_putConfig_Results_Future) Response() PutConfigurationResponse_Future {
	return PutConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type GetConfigurationRequest struct{ capnp.Struct }

// GetConfigurationRequest_TypeID is the unique identifier for the type GetConfigurationRequest.
const GetConfigurationRequest_TypeID = 0xc0e43eb9670b8d20

func NewGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func NewRootGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func ReadRootGetConfigurationRequest(msg *capnp.Message) (GetConfigurationRequest, error) {
	root, err := msg.Root()
	return GetConfigurationRequest{root.Struct()}, err
}

func (s GetConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc0e43eb9670b8d20, s.Struct)
	return str
}

func (s GetConfigurationRequest) What() GetConfigurationRequest_Type {
	return GetConfigurationRequest_Type(s.Struct.Uint16(0))
}

func (s GetConfigurationRequest) SetWhat(v GetConfigurationRequest_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetConfigurationRequest) Amount() GetConfigurationRequest_Specificity {
	return GetConfigurationRequest_Specificity(s.Struct.Uint16(2))
}

func (s GetConfigurationRequest) SetAmount(v GetConfigurationRequest_Specificity) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s GetConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetConfigurationRequest_List is a list of GetConfigurationRequest.
type GetConfigurationRequest_List = capnp.StructList[GetConfigurationRequest]

// NewGetConfigurationRequest creates a new list of GetConfigurationRequest.
func NewGetConfigurationRequest_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationRequest]{List: l}, err
}

// GetConfigurationRequest_Future is a wrapper for a GetConfigurationRequest promised by a client call.
type GetConfigurationRequest_Future struct{ *capnp.Future }

func (p GetConfigurationRequest_Future) Struct() (GetConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetConfigurationRequest{s}, err
}

type GetConfigurationRequest_Type uint16

// GetConfigurationRequest_Type_TypeID is the unique identifier for the type GetConfigurationRequest_Type.
const GetConfigurationRequest_Type_TypeID = 0xd6645c0180f9fc72

// Values of GetConfigurationRequest_Type.
const (
	GetConfigurationRequest_Type_all  GetConfigurationRequest_Type = 0
	GetConfigurationRequest_Type_raft GetConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Type) String() string {
	switch c {
	case GetConfigurationRequest_Type_all:
		return "all"
	case GetConfigurationRequest_Type_raft:
		return "raft"

	default:
		return ""
	}
}

// GetConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_TypeFromString(c string) GetConfigurationRequest_Type {
	switch c {
	case "all":
		return GetConfigurationRequest_Type_all
	case "raft":
		return GetConfigurationRequest_Type_raft

	default:
		return 0
	}
}

type GetConfigurationRequest_Type_List = capnp.EnumList[GetConfigurationRequest_Type]

func NewGetConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Type](s, sz)
}

type GetConfigurationRequest_Specificity uint16

// GetConfigurationRequest_Specificity_TypeID is the unique identifier for the type GetConfigurationRequest_Specificity.
const GetConfigurationRequest_Specificity_TypeID = 0xbe4eeef9143c2824

// Values of GetConfigurationRequest_Specificity.
const (
	GetConfigurationRequest_Specificity_one        GetConfigurationRequest_Specificity = 0
	GetConfigurationRequest_Specificity_everything GetConfigurationRequest_Specificity = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Specificity) String() string {
	switch c {
	case GetConfigurationRequest_Specificity_one:
		return "one"
	case GetConfigurationRequest_Specificity_everything:
		return "everything"

	default:
		return ""
	}
}

// GetConfigurationRequest_SpecificityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_SpecificityFromString(c string) GetConfigurationRequest_Specificity {
	switch c {
	case "one":
		return GetConfigurationRequest_Specificity_one
	case "everything":
		return GetConfigurationRequest_Specificity_everything

	default:
		return 0
	}
}

type GetConfigurationRequest_Specificity_List = capnp.EnumList[GetConfigurationRequest_Specificity]

func NewGetConfigurationRequest_Specificity_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Specificity_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Specificity](s, sz)
}

type GetConfigurationResponse struct{ capnp.Struct }
type GetConfigurationResponse_Which uint16

const (
	GetConfigurationResponse_Which_all  GetConfigurationResponse_Which = 0
	GetConfigurationResponse_Which_raft GetConfigurationResponse_Which = 1
)

func (w GetConfigurationResponse_Which) String() string {
	const s = "allraft"
	switch w {
	case GetConfigurationResponse_Which_all:
		return s[0:3]
	case GetConfigurationResponse_Which_raft:
		return s[3:7]

	}
	return "GetConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GetConfigurationResponse_TypeID is the unique identifier for the type GetConfigurationResponse.
const GetConfigurationResponse_TypeID = 0xad93807af77fe1b9

func NewGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func NewRootGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func ReadRootGetConfigurationResponse(msg *capnp.Message) (GetConfigurationResponse, error) {
	root, err := msg.Root()
	return GetConfigurationResponse{root.Struct()}, err
}

func (s GetConfigurationResponse) String() string {
	str, _ := text.Marshal(0xad93807af77fe1b9, s.Struct)
	return str
}

func (s GetConfigurationResponse) Which() GetConfigurationResponse_Which {
	return GetConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s GetConfigurationResponse) All() (AllConfigurations, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != all")
	}
	p, err := s.Struct.Ptr(0)
	return AllConfigurations{Struct: p.Struct()}, err
}

func (s GetConfigurationResponse) HasAll() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetAll(v AllConfigurations) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAll sets the all field to a newly
// allocated AllConfigurations struct, preferring placement in s's segment.
func (s GetConfigurationResponse) NewAll() (AllConfigurations, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAllConfigurations(s.Struct.Segment())
	if err != nil {
		return AllConfigurations{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetConfigurationResponse) Raft() (RaftConfiguration_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s GetConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetRaft(v RaftConfiguration_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s GetConfigurationResponse) NewRaft(n int32) (RaftConfiguration_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetConfigurationResponse_List is a list of GetConfigurationResponse.
type GetConfigurationResponse_List = capnp.StructList[GetConfigurationResponse]

// NewGetConfigurationResponse creates a new list of GetConfigurationResponse.
func NewGetConfigurationResponse_List(s *capnp.Segment, sz int32) (GetConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationResponse]{List: l}, err
}

// GetConfigurationResponse_Future is a wrapper for a GetConfigurationResponse promised by a client call.
type GetConfigurationResponse_Future struct{ *capnp.Future }

func (p GetConfigurationResponse_Future) Struct() (GetConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetConfigurationResponse{s}, err
}

func (p GetConfigurationResponse_Future) All() AllConfigurations_Future {
	return AllConfigurations_Future{Future: p.Future.Field(0, nil)}
}

type AllConfigurations struct{ capnp.Struct }

// AllConfigurations_TypeID is the unique identifier for the type AllConfigurations.
const AllConfigurations_TypeID = 0xa3cf4f7f955be932

func NewAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func NewRootAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func ReadRootAllConfigurations(msg *capnp.Message) (AllConfigurations, error) {
	root, err := msg.Root()
	return AllConfigurations{root.Struct()}, err
}

func (s AllConfigurations) String() string {
	str, _ := text.Marshal(0xa3cf4f7f955be932, s.Struct)
	return str
}

func (s AllConfigurations) Raft() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s AllConfigurations) HasRaft() bool {
	return s.Struct.HasPtr(0)
}

func (s AllConfigurations) SetRaft(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s AllConfigurations) NewRaft(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllConfigurations_List is a list of AllConfigurations.
type AllConfigurations_List = capnp.StructList[AllConfigurations]

// NewAllConfigurations creates a new list of AllConfigurations.
func NewAllConfigurations_List(s *capnp.Segment, sz int32) (AllConfigurations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AllConfigurations]{List: l}, err
}

// AllConfigurations_Future is a wrapper for a AllConfigurations promised by a client call.
type AllConfigurations_Future struct{ *capnp.Future }

func (p AllConfigurations_Future) Struct() (AllConfigurations, error) {
	s, err := p.Future.Struct()
	return AllConfigurations{s}, err
}

type PutConfigurationRequest struct{ capnp.Struct }
type PutConfigurationRequest_Which uint16

const (
	PutConfigurationRequest_Which_raft     PutConfigurationRequest_Which = 0
	PutConfigurationRequest_Which_nodeHost PutConfigurationRequest_Which = 1
)

func (w PutConfigurationRequest_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationRequest_Which_raft:
		return s[0:4]
	case PutConfigurationRequest_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationRequest_TypeID is the unique identifier for the type PutConfigurationRequest.
const PutConfigurationRequest_TypeID = 0x93c59921a137c8db

func NewPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func NewRootPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func ReadRootPutConfigurationRequest(msg *capnp.Message) (PutConfigurationRequest, error) {
	root, err := msg.Root()
	return PutConfigurationRequest{root.Struct()}, err
}

func (s PutConfigurationRequest) String() string {
	str, _ := text.Marshal(0x93c59921a137c8db, s.Struct)
	return str
}

func (s PutConfigurationRequest) Which() PutConfigurationRequest_Which {
	return PutConfigurationRequest_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationRequest) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationRequest) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PutConfigurationRequest_List is a list of PutConfigurationRequest.
type PutConfigurationRequest_List = capnp.StructList[PutConfigurationRequest]

// NewPutConfigurationRequest creates a new list of PutConfigurationRequest.
func NewPutConfigurationRequest_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PutConfigurationRequest]{List: l}, err
}

// PutConfigurationRequest_Future is a wrapper for a PutConfigurationRequest promised by a client call.
type PutConfigurationRequest_Future struct{ *capnp.Future }

func (p PutConfigurationRequest_Future) Struct() (PutConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutConfigurationRequest{s}, err
}

func (p PutConfigurationRequest_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationRequest_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationRequest_Type uint16

// PutConfigurationRequest_Type_TypeID is the unique identifier for the type PutConfigurationRequest_Type.
const PutConfigurationRequest_Type_TypeID = 0xf737c9d3531fa703

// Values of PutConfigurationRequest_Type.
const (
	PutConfigurationRequest_Type_raft     PutConfigurationRequest_Type = 0
	PutConfigurationRequest_Type_nodeHost PutConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationRequest_Type) String() string {
	switch c {
	case PutConfigurationRequest_Type_raft:
		return "raft"
	case PutConfigurationRequest_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationRequest_TypeFromString(c string) PutConfigurationRequest_Type {
	switch c {
	case "raft":
		return PutConfigurationRequest_Type_raft
	case "nodeHost":
		return PutConfigurationRequest_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationRequest_Type_List = capnp.EnumList[PutConfigurationRequest_Type]

func NewPutConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationRequest_Type](s, sz)
}

type PutConfigurationResponse struct{ capnp.Struct }
type PutConfigurationResponse_Which uint16

const (
	PutConfigurationResponse_Which_raft     PutConfigurationResponse_Which = 0
	PutConfigurationResponse_Which_nodeHost PutConfigurationResponse_Which = 1
)

func (w PutConfigurationResponse_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationResponse_Which_raft:
		return s[0:4]
	case PutConfigurationResponse_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationResponse_TypeID is the unique identifier for the type PutConfigurationResponse.
const PutConfigurationResponse_TypeID = 0x9f8f8f8f8f8f8f8f

func NewPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func NewRootPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func ReadRootPutConfigurationResponse(msg *capnp.Message) (PutConfigurationResponse, error) {
	root, err := msg.Root()
	return PutConfigurationResponse{root.Struct()}, err
}

func (s PutConfigurationResponse) String() string {
	str, _ := text.Marshal(0x9f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutConfigurationResponse) Which() PutConfigurationResponse_Which {
	return PutConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationResponse) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) Success() bool {
	return s.Struct.Bit(16)
}

func (s PutConfigurationResponse) SetSuccess(v bool) {
	s.Struct.SetBit(16, v)
}

func (s PutConfigurationResponse) Status() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutConfigurationResponse) HasStatus() bool {
	return s.Struct.HasPtr(1)
}

func (s PutConfigurationResponse) StatusBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutConfigurationResponse) SetStatus(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PutConfigurationResponse) Type() PutConfigurationResponse_Type {
	return PutConfigurationResponse_Type(s.Struct.Uint16(4))
}

func (s PutConfigurationResponse) SetType(v PutConfigurationResponse_Type) {
	s.Struct.SetUint16(4, uint16(v))
}

// PutConfigurationResponse_List is a list of PutConfigurationResponse.
type PutConfigurationResponse_List = capnp.StructList[PutConfigurationResponse]

// NewPutConfigurationResponse creates a new list of PutConfigurationResponse.
func NewPutConfigurationResponse_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutConfigurationResponse]{List: l}, err
}

// PutConfigurationResponse_Future is a wrapper for a PutConfigurationResponse promised by a client call.
type PutConfigurationResponse_Future struct{ *capnp.Future }

func (p PutConfigurationResponse_Future) Struct() (PutConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutConfigurationResponse{s}, err
}

func (p PutConfigurationResponse_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationResponse_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationResponse_Type uint16

// PutConfigurationResponse_Type_TypeID is the unique identifier for the type PutConfigurationResponse_Type.
const PutConfigurationResponse_Type_TypeID = 0xa2bce3bdb6c5201d

// Values of PutConfigurationResponse_Type.
const (
	PutConfigurationResponse_Type_raft     PutConfigurationResponse_Type = 0
	PutConfigurationResponse_Type_nodeHost PutConfigurationResponse_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationResponse_Type) String() string {
	switch c {
	case PutConfigurationResponse_Type_raft:
		return "raft"
	case PutConfigurationResponse_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationResponse_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationResponse_TypeFromString(c string) PutConfigurationResponse_Type {
	switch c {
	case "raft":
		return PutConfigurationResponse_Type_raft
	case "nodeHost":
		return PutConfigurationResponse_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationResponse_Type_List = capnp.EnumList[PutConfigurationResponse_Type]

func NewPutConfigurationResponse_Type_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationResponse_Type](s, sz)
}

type ServiceType struct{ capnp.Struct }

// ServiceType_TypeID is the unique identifier for the type ServiceType.
const ServiceType_TypeID = 0x94e84f47e297127c

func NewServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func NewRootServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func ReadRootServiceType(msg *capnp.Message) (ServiceType, error) {
	root, err := msg.Root()
	return ServiceType{root.Struct()}, err
}

func (s ServiceType) String() string {
	str, _ := text.Marshal(0x94e84f47e297127c, s.Struct)
	return str
}

func (s ServiceType) Type() ServiceType_Type {
	return ServiceType_Type(s.Struct.Uint16(0))
}

func (s ServiceType) SetType(v ServiceType_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

// ServiceType_List is a list of ServiceType.
type ServiceType_List = capnp.StructList[ServiceType]

// NewServiceType creates a new list of ServiceType.
func NewServiceType_List(s *capnp.Segment, sz int32) (ServiceType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ServiceType]{List: l}, err
}

// ServiceType_Future is a wrapper for a ServiceType promised by a client call.
type ServiceType_Future struct{ *capnp.Future }

func (p ServiceType_Future) Struct() (ServiceType, error) {
	s, err := p.Future.Struct()
	return ServiceType{s}, err
}

type ServiceType_Type uint16

// ServiceType_Type_TypeID is the unique identifier for the type ServiceType_Type.
const ServiceType_Type_TypeID = 0xdfa79f9e4e6e0810

// Values of ServiceType_Type.
const (
	ServiceType_Type_test          ServiceType_Type = 0
	ServiceType_Type_configService ServiceType_Type = 1
)

// String returns the enum's constant name.
func (c ServiceType_Type) String() string {
	switch c {
	case ServiceType_Type_test:
		return "test"
	case ServiceType_Type_configService:
		return "configService"

	default:
		return ""
	}
}

// ServiceType_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceType_TypeFromString(c string) ServiceType_Type {
	switch c {
	case "test":
		return ServiceType_Type_test
	case "configService":
		return ServiceType_Type_configService

	default:
		return 0
	}
}

type ServiceType_Type_List = capnp.EnumList[ServiceType_Type]

func NewServiceType_Type_List(s *capnp.Segment, sz int32) (ServiceType_Type_List, error) {
	return capnp.NewEnumList[ServiceType_Type](s, sz)
}

type RaftConfiguration struct{ capnp.Struct }

// RaftConfiguration_TypeID is the unique identifier for the type RaftConfiguration.
const RaftConfiguration_TypeID = 0xdb9a661a7821150d

func NewRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func NewRootRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func ReadRootRaftConfiguration(msg *capnp.Message) (RaftConfiguration, error) {
	root, err := msg.Root()
	return RaftConfiguration{root.Struct()}, err
}

func (s RaftConfiguration) String() string {
	str, _ := text.Marshal(0xdb9a661a7821150d, s.Struct)
	return str
}

func (s RaftConfiguration) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RaftConfiguration) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RaftConfiguration) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RaftConfiguration) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RaftConfiguration) NodeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s RaftConfiguration) SetNodeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RaftConfiguration) ClusterId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RaftConfiguration) SetClusterId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RaftConfiguration) CheckQuorum() bool {
	return s.Struct.Bit(128)
}

func (s RaftConfiguration) SetCheckQuorum(v bool) {
	s.Struct.SetBit(128, v)
}

func (s RaftConfiguration) ElectionTimeout() uint64 {
	return s.Struct.Uint64(24)
}

func (s RaftConfiguration) SetElectionTimeout(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s RaftConfiguration) HeartbeatTimeout() uint64 {
	return s.Struct.Uint64(32)
}

func (s RaftConfiguration) SetHeartbeatTimeout(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s RaftConfiguration) SnapshotEntries() uint64 {
	return s.Struct.Uint64(40)
}

func (s RaftConfiguration) SetSnapshotEntries(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s RaftConfiguration) CompactionOverhead() uint64 {
	return s.Struct.Uint64(48)
}

func (s RaftConfiguration) SetCompactionOverhead(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s RaftConfiguration) OrderedConfigurationChange() bool {
	return s.Struct.Bit(129)
}

func (s RaftConfiguration) SetOrderedConfigurationChange(v bool) {
	s.Struct.SetBit(129, v)
}

func (s RaftConfiguration) MaxInMemoryLogSize() uint64 {
	return s.Struct.Uint64(56)
}

func (s RaftConfiguration) SetMaxInMemoryLogSize(v uint64) {
	s.Struct.SetUint64(56, v)
}

func (s RaftConfiguration) SnapshotCompressionType() uint64 {
	return s.Struct.Uint64(64)
}

func (s RaftConfiguration) SetSnapshotCompressionType(v uint64) {
	s.Struct.SetUint64(64, v)
}

func (s RaftConfiguration) EntryCompressionType() uint64 {
	return s.Struct.Uint64(72)
}

func (s RaftConfiguration) SetEntryCompressionType(v uint64) {
	s.Struct.SetUint64(72, v)
}

func (s RaftConfiguration) DisableAutoCompaction() bool {
	return s.Struct.Bit(130)
}

func (s RaftConfiguration) SetDisableAutoCompaction(v bool) {
	s.Struct.SetBit(130, v)
}

func (s RaftConfiguration) IsObserver() bool {
	return s.Struct.Bit(131)
}

func (s RaftConfiguration) SetIsObserver(v bool) {
	s.Struct.SetBit(131, v)
}

func (s RaftConfiguration) IsWitness() bool {
	return s.Struct.Bit(132)
}

func (s RaftConfiguration) SetIsWitness(v bool) {
	s.Struct.SetBit(132, v)
}

func (s RaftConfiguration) Quiesce() bool {
	return s.Struct.Bit(133)
}

func (s RaftConfiguration) SetQuiesce(v bool) {
	s.Struct.SetBit(133, v)
}

func (s RaftConfiguration) ConfigType() ConfigType {
	return ConfigType(s.Struct.Uint16(18))
}

func (s RaftConfiguration) SetConfigType(v ConfigType) {
	s.Struct.SetUint16(18, uint16(v))
}

// RaftConfiguration_List is a list of RaftConfiguration.
type RaftConfiguration_List = capnp.StructList[RaftConfiguration]

// NewRaftConfiguration creates a new list of RaftConfiguration.
func NewRaftConfiguration_List(s *capnp.Segment, sz int32) (RaftConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[RaftConfiguration]{List: l}, err
}

// RaftConfiguration_Future is a wrapper for a RaftConfiguration promised by a client call.
type RaftConfiguration_Future struct{ *capnp.Future }

func (p RaftConfiguration_Future) Struct() (RaftConfiguration, error) {
	s, err := p.Future.Struct()
	return RaftConfiguration{s}, err
}

type ConfigType uint16

// ConfigType_TypeID is the unique identifier for the type ConfigType.
const ConfigType_TypeID = 0xadb2d0b69445303c

// Values of ConfigType.
const (
	ConfigType_system      ConfigType = 0
	ConfigType_exchange    ConfigType = 1
	ConfigType_customerFsm ConfigType = 2
)

// String returns the enum's constant name.
func (c ConfigType) String() string {
	switch c {
	case ConfigType_system:
		return "system"
	case ConfigType_exchange:
		return "exchange"
	case ConfigType_customerFsm:
		return "customerFsm"

	default:
		return ""
	}
}

// ConfigTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ConfigTypeFromString(c string) ConfigType {
	switch c {
	case "system":
		return ConfigType_system
	case "exchange":
		return ConfigType_exchange
	case "customerFsm":
		return ConfigType_customerFsm

	default:
		return 0
	}
}

type ConfigType_List = capnp.EnumList[ConfigType]

func NewConfigType_List(s *capnp.Segment, sz int32) (ConfigType_List, error) {
	return capnp.NewEnumList[ConfigType](s, sz)
}

type ListRaftConfigurationRequest struct{ capnp.Struct }

// ListRaftConfigurationRequest_TypeID is the unique identifier for the type ListRaftConfigurationRequest.
const ListRaftConfigurationRequest_TypeID = 0xc75a0f30e41b37f5

func NewListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func NewRootListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func ReadRootListRaftConfigurationRequest(msg *capnp.Message) (ListRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return ListRaftConfigurationRequest{root.Struct()}, err
}

func (s ListRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc75a0f30e41b37f5, s.Struct)
	return str
}

// ListRaftConfigurationRequest_List is a list of ListRaftConfigurationRequest.
type ListRaftConfigurationRequest_List = capnp.StructList[ListRaftConfigurationRequest]

// NewListRaftConfigurationRequest creates a new list of ListRaftConfigurationRequest.
func NewListRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (ListRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ListRaftConfigurationRequest]{List: l}, err
}

// ListRaftConfigurationRequest_Future is a wrapper for a ListRaftConfigurationRequest promised by a client call.
type ListRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p ListRaftConfigurationRequest_Future) Struct() (ListRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationRequest{s}, err
}

type ListRaftConfigurationResponse struct{ capnp.Struct }

// ListRaftConfigurationResponse_TypeID is the unique identifier for the type ListRaftConfigurationResponse.
const ListRaftConfigurationResponse_TypeID = 0xc5195060b33b8218

func NewListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func NewRootListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func ReadRootListRaftConfigurationResponse(msg *capnp.Message) (ListRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return ListRaftConfigurationResponse{root.Struct()}, err
}

func (s ListRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xc5195060b33b8218, s.Struct)
	return str
}

func (s ListRaftConfigurationResponse) Configs() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s ListRaftConfigurationResponse) HasConfigs() bool {
	return s.Struct.HasPtr(0)
}

func (s ListRaftConfigurationResponse) SetConfigs(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewConfigs sets the configs field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s ListRaftConfigurationResponse) NewConfigs(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListRaftConfigurationResponse_List is a list of ListRaftConfigurationResponse.
type ListRaftConfigurationResponse_List = capnp.StructList[ListRaftConfigurationResponse]

// NewListRaftConfigurationResponse creates a new list of ListRaftConfigurationResponse.
func NewListRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (ListRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ListRaftConfigurationResponse]{List: l}, err
}

// ListRaftConfigurationResponse_Future is a wrapper for a ListRaftConfigurationResponse promised by a client call.
type ListRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p ListRaftConfigurationResponse_Future) Struct() (ListRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationResponse{s}, err
}

type GetRaftConfigurationRequest struct{ capnp.Struct }

// GetRaftConfigurationRequest_TypeID is the unique identifier for the type GetRaftConfigurationRequest.
const GetRaftConfigurationRequest_TypeID = 0xa233c1204c18c976

func NewGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func NewRootGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func ReadRootGetRaftConfigurationRequest(msg *capnp.Message) (GetRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return GetRaftConfigurationRequest{root.Struct()}, err
}

func (s GetRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xa233c1204c18c976, s.Struct)
	return str
}

func (s GetRaftConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRaftConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRaftConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetRaftConfigurationRequest_List is a list of GetRaftConfigurationRequest.
type GetRaftConfigurationRequest_List = capnp.StructList[GetRaftConfigurationRequest]

// NewGetRaftConfigurationRequest creates a new list of GetRaftConfigurationRequest.
func NewGetRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (GetRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationRequest]{List: l}, err
}

// GetRaftConfigurationRequest_Future is a wrapper for a GetRaftConfigurationRequest promised by a client call.
type GetRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p GetRaftConfigurationRequest_Future) Struct() (GetRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationRequest{s}, err
}

type GetRaftConfigurationResponse struct{ capnp.Struct }

// GetRaftConfigurationResponse_TypeID is the unique identifier for the type GetRaftConfigurationResponse.
const GetRaftConfigurationResponse_TypeID = 0xb4fe5e6f0ef85636

func NewGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func NewRootGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func ReadRootGetRaftConfigurationResponse(msg *capnp.Message) (GetRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return GetRaftConfigurationResponse{root.Struct()}, err
}

func (s GetRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xb4fe5e6f0ef85636, s.Struct)
	return str
}

func (s GetRaftConfigurationResponse) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s GetRaftConfigurationResponse) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationResponse) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s GetRaftConfigurationResponse) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GetRaftConfigurationResponse_List is a list of GetRaftConfigurationResponse.
type GetRaftConfigurationResponse_List = capnp.StructList[GetRaftConfigurationResponse]

// NewGetRaftConfigurationResponse creates a new list of GetRaftConfigurationResponse.
func NewGetRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (GetRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationResponse]{List: l}, err
}

// GetRaftConfigurationResponse_Future is a wrapper for a GetRaftConfigurationResponse promised by a client call.
type GetRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p GetRaftConfigurationResponse_Future) Struct() (GetRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationResponse{s}, err
}

func (p GetRaftConfigurationResponse_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutRaftConfigurationRequest struct{ capnp.Struct }

// PutRaftConfigurationRequest_TypeID is the unique identifier for the type PutRaftConfigurationRequest.
const PutRaftConfigurationRequest_TypeID = 0xefe67d057faf5d90

func NewPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func NewRootPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func ReadRootPutRaftConfigurationRequest(msg *capnp.Message) (PutRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return PutRaftConfigurationRequest{root.Struct()}, err
}

func (s PutRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xefe67d057faf5d90, s.Struct)
	return str
}

func (s PutRaftConfigurationRequest) Enable() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationRequest) SetEnable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationRequest) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationRequest) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationRequest) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationRequest) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationRequest) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(1)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutRaftConfigurationRequest) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationRequest) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutRaftConfigurationRequest) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PutRaftConfigurationRequest_List is a list of PutRaftConfigurationRequest.
type PutRaftConfigurationRequest_List = capnp.StructList[PutRaftConfigurationRequest]

// NewPutRaftConfigurationRequest creates a new list of PutRaftConfigurationRequest.
func NewPutRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (PutRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationRequest]{List: l}, err
}

// PutRaftConfigurationRequest_Future is a wrapper for a PutRaftConfigurationRequest promised by a client call.
type PutRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p PutRaftConfigurationRequest_Future) Struct() (PutRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationRequest{s}, err
}

func (p PutRaftConfigurationRequest_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(1, nil)}
}

type PutRaftConfigurationResponse struct{ capnp.Struct }

// PutRaftConfigurationResponse_TypeID is the unique identifier for the type PutRaftConfigurationResponse.
const PutRaftConfigurationResponse_TypeID = 0x8f8f8f8f8f8f8f8f

func NewPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func NewRootPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func ReadRootPutRaftConfigurationResponse(msg *capnp.Message) (PutRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return PutRaftConfigurationResponse{root.Struct()}, err
}

func (s PutRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0x8f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutRaftConfigurationResponse) Valid() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationResponse) SetValid(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationResponse) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationResponse) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationResponse) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationResponse) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// PutRaftConfigurationResponse_List is a list of PutRaftConfigurationResponse.
type PutRaftConfigurationResponse_List = capnp.StructList[PutRaftConfigurationResponse]

// NewPutRaftConfigurationResponse creates a new list of PutRaftConfigurationResponse.
func NewPutRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (PutRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationResponse]{List: l}, err
}

// PutRaftConfigurationResponse_Future is a wrapper for a PutRaftConfigurationResponse promised by a client call.
type PutRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p PutRaftConfigurationResponse_Future) Struct() (PutRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationResponse{s}, err
}

type NodeHostConfiguration struct{ capnp.Struct }

// NodeHostConfiguration_TypeID is the unique identifier for the type NodeHostConfiguration.
const NodeHostConfiguration_TypeID = 0x859698645e9c4a44

func NewNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func NewRootNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func ReadRootNodeHostConfiguration(msg *capnp.Message) (NodeHostConfiguration, error) {
	root, err := msg.Root()
	return NodeHostConfiguration{root.Struct()}, err
}

func (s NodeHostConfiguration) String() string {
	str, _ := text.Marshal(0x859698645e9c4a44, s.Struct)
	return str
}

func (s NodeHostConfiguration) DeploymentId() uint64 {
	return s.Struct.Uint64(0)
}

func (s NodeHostConfiguration) SetDeploymentId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s NodeHostConfiguration) WriteAheadLogDir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasWriteAheadLogDir() bool {
	return s.Struct.HasPtr(0)
}

func (s NodeHostConfiguration) WriteAheadLogDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetWriteAheadLogDir(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NodeHostConfiguration) NodeHostDir() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasNodeHostDir() bool {
	return s.Struct.HasPtr(1)
}

func (s NodeHostConfiguration) NodeHostDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetNodeHostDir(v string) error {
	return s.Struct.SetText(1, v)
}

func (s NodeHostConfiguration) RoundTripTimeMilliseconds() uint64 {
	return s.Struct.Uint64(8)
}

func (s NodeHostConfiguration) SetRoundTripTimeMilliseconds(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s NodeHostConfiguration) RaftAddress() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasRaftAddress() bool {
	return s.Struct.HasPtr(2)
}

func (s NodeHostConfiguration) RaftAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetRaftAddress(v string) error {
	return s.Struct.SetText(2, v)
}

func (s NodeHostConfiguration) ApiAddress() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasApiAddress() bool {
	return s.Struct.HasPtr(3)
}

func (s NodeHostConfiguration) ApiAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetApiAddress(v string) error {
	return s.Struct.SetText(3, v)
}

func (s NodeHostConfiguration) MutualTls() bool {
	return s.Struct.Bit(128)
}

func (s NodeHostConfiguration) SetMutualTls(v bool) {
	s.Struct.SetBit(128, v)
}

func (s NodeHostConfiguration) CaFile() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCaFile() bool {
	return s.Struct.HasPtr(4)
}

func (s NodeHostConfiguration) CaFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCaFile(v string) error {
	return s.Struct.SetText(4, v)
}

func (s NodeHostConfiguration) CertFile() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCertFile() bool {
	return s.Struct.HasPtr(5)
}

func (s NodeHostConfiguration) CertFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCertFile(v string) error {
	return s.Struct.SetText(5, v)
}

func (s NodeHostConfiguration) KeyFile() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasKeyFile() bool {
	return s.Struct.HasPtr(6)
}

func (s NodeHostConfiguration) KeyFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetKeyFile(v string) error {
	return s.Struct.SetText(6, v)
}

// NodeHostConfiguration_List is a list of NodeHostConfiguration.
type NodeHostConfiguration_List = capnp.StructList[NodeHostConfiguration]

// NewNodeHostConfiguration creates a new list of NodeHostConfiguration.
func NewNodeHostConfiguration_List(s *capnp.Segment, sz int32) (NodeHostConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7}, sz)
	return capnp.StructList[NodeHostConfiguration]{List: l}, err
}

// NodeHostConfiguration_Future is a wrapper for a NodeHostConfiguration promised by a client call.
type NodeHostConfiguration_Future struct{ *capnp.Future }

func (p NodeHostConfiguration_Future) Struct() (NodeHostConfiguration, error) {
	s, err := p.Future.Struct()
	return NodeHostConfiguration{s}, err
}

const schema_9f0a9459eb121bf0 = "x\xda\x9cX\x7fl\x13\xe7\x19~\xdf;;\xb6c;" +
	"\x8e\xf3\x19\xad\xa5C\x09\x15S!k)i\xd6\x05e" +
	"t!$P\x82\x12\xc8\xc5a+\xac0.\xf6Gr" +
	"\xad}g\xee\xce\x01WC\x01\x06\xda@Ec*l" +
	"\xb4Z\xc7\xe8TU\xab\x86\xaau]%\xaau-T" +
	"hE\x1b\xda\xd8\xbai\xa5\xad\xb6\xa6tj\xbbuC" +
	"\x93\xa6\x96\xa9\xeaM\xef\xe7\x9c\xef\x92\x180\xf0\x17y" +
	"\xbe\xd7\xef\xef\xf7\xfd\x9e\xef\x96\xa4\xea\x96\x07\xda\xe2_" +
	"\x8f\x82\xa4\xec\x0d\xd69\xbdk~\xb09{\xf4{\xfb" +
	"@iF\xd9\xb9tK\xd3?6\x1c\xae?\x06\xc1P" +
	"\x08\xa0\xfdH\xf0id'\x82\xf4\xdf\x9f\x04;$@" +
	"\xe7;S\xffH\x1c}\xe2\x12\xc9$\xc3\x93\xc8\xee\x08" +
	"\x87\x00\xd8\xa2\xf03\x80\xce\x1b\xafv\x1c\x9f\xff\xe8\x99" +
	"GfH\xaf\xc4\x90\x04\xd0~*\xfc\x02\xb2\xd7\xc3\x9f" +
	"\x01`o\x87\xb7\x03:\xdfh\xfa\xfe\xe4\xbd\xeb\xde;" +
	"<C<@\xba\xbb#\x1b\x91\xad\x8f\x90\xf0\xa6H\x97" +
	"\xe7\xc9\xb1\x99\xba%\xa1{g\xe44\xb2#$\xde\xfe" +
	"x\xa4\x19\x01\x9d\xf1\xb37\xf5\xb7\x9cj\x7f\x02\x92\xcd" +
	"~\xc7\x91\x94\xff\xac\xfe\x02\xb2s\xf5\xe4\xf8\xd9zR" +
	">\xaf\xe5\xcc\xf3/\xbe\xf3\xcb' \xb9T\xf2,\x01" +
	"\xb6\xbf_\xff\x01\xb2`\x94$1\xda\x01\xe8\xdc\xf5\xfe" +
	"\xd7\x8eL\xac\xfb\xdd\x8f\xab\xa9\x8dD\x0f \x9b/\x84" +
	"\xe7EI\xed+\xf7\x1c}i\xdb\xe6\x8e\x13\x90\xbc\x03" +
	"aJh \xfa?\x04d\xaa\x108\xf9\xf6\xc4G\x0f" +
	"\xedz\xe4D\xf5\x84\xed\x8b\x9eF\xf6\xb8\xd0\xf7h\x94" +
	"\x12\xb6l\xc9\xca\xc3\xcf\xff\xfe\xd9\x13\x90l\x96<i" +
	"\xc0\xf6`l\x08\xd9\xcd1\x92\x9c\x13[\x07\xe8|\xf1" +
	"+\x1f7\x18\x9b?}\xae\x9a\x9bm\xb1Id\x03B" +
	"\xb8/F^,X\xb8,u\xf9_k\x7f\x05\xc9\x0e" +
	"\xc9i9\x18\x1d=\xf9\xe5\x8b/\x93Z-6Wb" +
	"\xfb\x85\xe4\xbe\x18E_9\x9c\xd1\x0eB\xef\xc1\xd8\x0b" +
	"\xc8\x9e\x8c\xdd\x06\xc0^\x8cQ;l\xac\x8b\x9e\xc2\xb6" +
	"\xdb^\xf1\x87\xbf>\xfe\x1f\x0a_\x8b\x93\xe1\x9b\xf6|" +
	"\xe9\xe7[\x06o>S\xcd\xcb\xfd\xf1\x0f\x90=\x19'" +
	"\xdb\xc7\x85\xf0\x7f;n\xb9\xb8$\xb1\xf1\xd7\xd3\x85E" +
	"\xb3\x9c\x8fO\"\xfb0\x1e\x02\xd9\xd9\xfe\xd3=\xc7_" +
	"~g\xfd9H6\xcb\xd3Rt6\xfe\x00\xb2\xb7\x84" +
	"\xbe\xd7\xe3\xdfbm\x0d!\x00\xc7\xfc\xe4\xf2.\xbc?" +
	"\xfb\xe7Y\x91\xdf\xdc0\x89\xecn\x92am\x0d\x14y" +
	"|\xce\xfc\x1ds\xb7>\xf6\x06E^?\xd3\xd7\xbb\x1b" +
	"\x0e \x1b \xe9\xf6\xbe\x86\x97d@\x87\x0d\x1eJ\xec" +
	"\xfbQ\xeb\x9b\xfe\xd0w7\x89\xca\x1fi\xa2h\x1a\xc3" +
	"\xfa\xda\x1f\x1e{\xea\xaf\x90\xfc\xbc\xe4\x0d\x02`\xfb\xc9" +
	"\xa6=\xc8\xce5\x89\xdel\"\xcb\xab\x9e\xfb\xcd\xa2\x1e" +
	"\xf9\xe8?\xfd\xaa\xce7\x89,\xbe+T\x1d\xda\xf4\xcc" +
	"Dp\xe7\xdf\xff]uF\x83\xec\x02\xb2\xf9L\xf4$" +
	"\xa3\xa2\xc8O5\xa7\xffx\xb6\xe3#\x11re`\x01" +
	"\xdb\x7f\xc1&\x91\x9d\x17\x92\xe7X\x07lp\x0a\xa6a" +
	"\x1b\x19#\x17\xb4\xee\x1co\xbbs\xcc\xb0\xec;3\x86" +
	"\xbeU\x1b]\x9cQ\x0bz\xa1s\xad\x91\xe5\xab\x0d\xcb" +
	"\xee\x11`\xd1T\x13\xb6f\xe8\x83\x88\xcaB9\x00\x10" +
	"@\x00\x16\xc1\x07\x00\xd2a\x941\x9dB\x09\x11SH" +
	"p\x12\x0f\x00\xa4S\x04\xb7\xa0\x84I\x09S(\x91\x8b" +
	"8\x02\x90\xfe,\xe1\x0b\x09\x971\x852\x00\xfb\x1c\xfe" +
	"\x01 };\xe1K\x09\x0fH)\x0c\x00\xb0\xbb\x85\xfc" +
	"\x17\x08_NxPNa\x10\x80\xdd\x83\x1b\x01\xd2\xcb" +
	"\x08_Mx\xdd\xae\x14\xd6\x01\xb0\x958\x04\x90\xee%" +
	"|\x90\xf0P E\xf9d\x03\xd8\x09\x90^M\xf80" +
	"\xe1\xe1`\x0a\xc3\x00L\xc15\x00\xe9A\xc2\xef'<" +
	"R\x97\xc2\x08\x00\xdb\x80+\x00\xd2\xc3\x84oA\x09\x9d" +
	",/\xe4\x8cR\x9eCB\xb7\xfb\xb2\x18\x01\x09#\x80" +
	"\xcevS\xb3y\xf7\x18G5\xdbo\x8c\xf6j&\x00" +
	"\xc6@\xc2\x18\xa0\xa3Oe\x0fB\xbd\x9aYAM\xa3" +
	"\xa8g\x87MM*\x0cky>\xa0\xe5r\x9a\xc53" +
	"\x86\x9eE\xab\xa2\xd5T\xb7\xda\xdd\xd9\xac\x09!nY" +
	"\x95_\xaa\x05\x8d@\x0e\xb2\x0f\xcc\x17\xed\xa2\x9a\x1b\xce" +
	"\x01Z\x88 !\x02ve\xd4UZ\x8eWD2\xdc" +
	"\xb4\x09\x00\xcf\xb7\x89\x07yi\x9a\x8c\xdb\x09uW\xe8" +
	"\x84\xc1\xa2=\xa4n\xf5\x1a\x81\xfa`\x88[\x05#\xa4" +
	"[\x9c\x1a\"\xe66Dr\xe5]\x00\xcar\x19\x95\xfe" +
	"J7$\xfbZ\x01\x94^\x19\x95A\xaf\x15\x92\x03$" +
	"\xb8ZFeX\xc2\xe6q5\xa7e\xdd\x08\x12\xba\x9a" +
	"\xaf\xf8\xd6\xccM\xd30gy\x1a\xbc\xb2\xa7\xd3\xbd\xec" +
	"\xe2\xdb\x8a\xdc\xb2\x95\x00\xfaG\x03[\x13\xc3\xa5\x02W" +
	"\xc2r \xe68\xc2\xf1E\xe4\xe4\x02\x19\x95%\x12\xc6" +
	"\xf1S\xa7\xec\xfa\x1dk\x00\x94\xdbeT\x96J\x98\xa0" +
	"\xc2`\xa3\xb7*\x00\xb1\xd1_i\x00l\xf4.\xe0\xa9" +
	"S\xd7\xe3\xc0\x15<Nss\\\xcb\xf0\xe1\x92\\\xe0" +
	"\xc2Kos\xb8^\x06*\xd9\x8d\x93\x93a\x19\x95\x94" +
	"\x84\x09\xbbT\xe0\x98\xf0\xe4\x011Q[1g\x17R" +
	"\xb78\x08\xeb\xdeM\xe9ZOy9\xdaI\xe6w\xc8" +
	"\xa8\xec\xf5\xe7h7\xe5h\x97\x8c\xca\xc3T\xde\xc6r" +
	"y\xf7\xaf\x00P\xf6\xca\xa8\x1c\xf2\xc6<y\xb0\x13@" +
	"\xf9\xb6\x8c\xcaao\xc6\x93\xdf%\xa5\x0f\xcb\xa8\x1c\xbd" +
	"\xc1\x14OX\xc5L\x86F\xc5\x9d\x00\xcbV\xedbe" +
	"H\xdc<U\"\xab1O\xf7\xf2jM\xbf\xad\xc8e" +
	"\xcb\xa6\x9e\xf7Ue\xaeW\x15Y\xcb^\xcfXU\xad" +
	"\xc4b\x91x\xb2\x11\x16\xb9L\xb6\x92\xcf\xc9\xc8\x1a\x00" +
	"\x91 \x7f:\xae9\x11\xdd\xb9\xdc4#\x16\xc0\x0c\xef" +
	"\xdd\x9eZ\xe0\xe6\xbf\x01pP\xc6\x19eh\xa8!\xa0" +
	"\xb2\xa1\xa9\x8e^<\xca\xa7\xc2[0\xd4\xc5\xadb\xce" +
	"\xb6\xfcV\xa9ib2*7I\xe8\x98n\x0b\x8a\xf2" +
	"VH\xd3\x8c\x09\xbaJ\xa1\xaa7\xb4\xc8\xa0o\xc2o" +
	"\xad:\xe1\x14\xfeB\x19\x95^\x09Cj.\x87\x8d\x1e" +
	"\x07,;PcR\x02WM\xcap\xa9\x80\xe5U)" +
	"J:\xafS\x94t\xce\x1a\x00\x94\x92\xc9\x11\x80.\xab" +
	"d\xd9<\xef\xf0\x1d\x991U\x1f\xa5\\8\x99\xa2e" +
	"\x1bynBh\x95\x95\xbf\xc1\x86\xf5mi_\xf6;" +
	"\xbd\x8e\xed*+\xa92u\xae\xc1P\xcd\x89\x17\xbbv" +
	"q\xba\xc03\xdaV-\xa3\xc9v\xc9\xd7\xc5\xb7\x96\xbb" +
	"x#@\xc8\xd0\xb9\xc3\xc7\xb9Y\xb2\xc74\x90\xf5\xd1" +
	"kv\xf1,S\xee^\x0f#\xfaX^\xa4\xd5Gv" +
	"\x83#b\x8e\x1c\xd7\x1d\x08iv\xc9\x7fU\xb5zW" +
	"U\xb2rWuzw\x15JSW\xd5\\\xef\xaaJ" +
	"l\x1fSmLx6\xcb\xdb\xa4K\xcd\x1bE\x9d\x0e" +
	"*\xf6\xcb\x07\xd7\xb3\x0f\xa6\x8fO\xc1\xdd\x0e\x0b\x06\x9b" +
	"US\xcdO\x9b\x9e\x15^\xfd&\xccr*\xb0\xd1O" +
	"\xf7j\x9a\x9c~\xcd\xaa\xde2\x09cv\xcb\xac\xf0\xd6" +
	"\xc4DY\x8bu\xe3\x9b\xe2\x0a\x96\xb7\x15C\\l\xd7" +
	"\x1a\xa7*\xcd\xcd\x04%\xab<\xe9A\x80\x0a\x9bF\xf7" +
	"m\x96l\x1b\x02)\xb9(\x84\xde{\x05]\xf6\x9e\x9c" +
	"GgsB\x8e\xbb\xaa\x00G\x97\xa3\xe3f^\xfc\xe5" +
	"w\xa6\xee:\x07a84}\x8fOM@+\x00m" +
	"\x9a\xf2.\xbfV\xe7\xcf\xcaRy\x7f\xf7V(\xf89" +
	"\x9c\x0b\x90~\x95\xb8\xeak>\x0a~^P\xde\xdf\x12" +
	"\xfc\x17?\x05\xff\x93\xa0\xc8\xaf\x11\xfe7A\xc1w\x95" +
	")\xf8[\x82j\xbfI\xf8{\x82\x82\xcbe\x0a\xfe." +
	"\xee\x01H_$\xfc\x92\xa0\xe0\x812\x05\xffPP\xfc" +
	"K\x84\x7f\"(x\xb0L\xc1/\x0b\xf9\x8f\x09\x0fH" +
	"D\xc1\xeb\xca\x14\x1c\xa5\xc7\x00\xd2\x01I\xc6t#\xe1" +
	"\xe1\xdde\x0a\x1e\x97.\xd0S\x81\xf0\x16\xc2#\xa12" +
	"\x05\x9f'\xe4[\x08\xbf\x9d\xf0\xfap\x0a\xeb\x01\xd8\"" +
	"\xe94=\x15\x08_Jx4\x92\xc2(=\x15\xa4\xa7" +
	"\x01\xd2K\x09\xef%<\xb6'\x851\x00\xd6-=K" +
	"O\x02\xc2\x07\x09\x8f\x7f3\x85qz\x12H\xf4\x84\xe8" +
	"'\xfc>\xc2\x1b\xf6\xa6\xb0\x01\x80\xad\x97(?\xc3\x84" +
	"o!<\xb1/\x85\x09\x00\xb6I\xa2'\xc1}\x84g" +
	"\x09o\x8c\xa4\xb0\x11\x80\xa9B\xcf\x16\xc2s\xd2\xb4\xfb" +
	"\xbf\x8b\xaei\xdfk!\x93+Z67\xfb\x00}\xd8" +
	"\x18\xcf<\xa8\x14\x0d\x08\x99\xc5\xbcK`\x1c\x9e\xe3\x19" +
	"*5\xd2#\xc1(\xdaP\x91\x1f\xe3\xaai\x8fp\x15" +
	"m\xf7\xc8;\xb3t\xb5`\x8d\x196\xae\xd4mS\xe3" +
	"\x96w\x921\xf2\x055ckh\xe8\xeb\xc6\xb99\xc6" +
	"e\xd5s\xc10\xb3\xdc\xe4\xd9\x1e\xc9\xdfd=c\xaa" +
	".\x8f\xf2\x8aGyuG\x9f>\xc0\xf3h\x98\xa5~" +
	"c4\xad\xc9\x0f\xf1Y\x86\xa5\x1e#_0\xb9ei" +
	"\x86N\x9b\xd7s\x80\xeb\xb6Y\xea1\xf2\xe8\x1e\x8b\xcd" +
	"\\9\xcej\x96:\x92\xe3\xddX\xb4\x0d\xd2\xa16\x97" +
	"\xc3w\xadk\xd6\xba\x11\x8b\x9b\xe3 s\xd3\x07~U" +
	"\xb3u\x0a\xb3\xc2\xfc&\xb6\x155ne<\xb73S" +
	"w/\xc8\x82\x02V\xbe\xaf\xd4H\x01\xaf\xb4\x90\xaf\x8f" +
	"\xcf\xf8\xbe7M\xdb\xca\xc1k\xbd\x08\x0a|\xb1H\xe3" +
	"l&h\x02$ln\xd9S\x01\xa694\x8b\xdf\xdc" +
	"0C\xab\xf9\x8a\xf1}D\xa9\xe9\x8a\xa9\xfet\xf4X" +
	"\xb4\xef:\xee\xac\xf5\xe5\xd8\xe9]\xc7]\\\xa7\xce\xa9" +
	"\xfat\xbc6\xb1\xa9\x9d\x98W\xdf\xe7W\xe1\xe5\xff\x0f" +
	"\x00\x00\xff\xffc\xfb\xb8r"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x859698645e9c4a44,
		0x8f8f8f8f8f8f8f8f,
		0x93c59921a137c8db,
		0x94e84f47e297127c,
		0x9f8f8f8f8f8f8f8f,
		0xa233c1204c18c976,
		0xa2bce3bdb6c5201d,
		0xa3cf4f7f955be932,
		0xad375e71bf983dc3,
		0xad93807af77fe1b9,
		0xadb2d0b69445303c,
		0xb4fe5e6f0ef85636,
		0xbe4eeef9143c2824,
		0xc0e43eb9670b8d20,
		0xc3273101c10b065a,
		0xc5195060b33b8218,
		0xc75a0f30e41b37f5,
		0xcd55e3c0a182ac77,
		0xd6645c0180f9fc72,
		0xdb9a661a7821150d,
		0xdc2aa0850f905013,
		0xdfa79f9e4e6e0810,
		0xec98034329cbb446,
		0xefe67d057faf5d90,
		0xf737c9d3531fa703)
}
