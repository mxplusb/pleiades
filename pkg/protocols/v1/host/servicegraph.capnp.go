// Code generated by capnpc-go. DO NOT EDIT.

package host

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Service struct{ Client capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xed78136d1400ca3e

func (c Service) SetNodeId(ctx context.Context, params func(Service_setNodeId_Params) error) (Service_setNodeId_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "setNodeId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_setNodeId_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_setNodeId_Results_Future{Future: ans.Future()}, release
}
func (c Service) GetServiceName(ctx context.Context, params func(Service_getServiceName_Params) error) (Service_getServiceName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getServiceName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getServiceName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getServiceName_Results_Future{Future: ans.Future()}, release
}
func (c Service) GetServiceType(ctx context.Context, params func(Service_getServiceType_Params) error) (Service_getServiceType_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getServiceType",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getServiceType_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getServiceType_Results_Future{Future: ans.Future()}, release
}
func (c Service) GetDependencies(ctx context.Context, params func(Service_getDependencies_Params) error) (Service_getDependencies_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getDependencies",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getDependencies_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getDependencies_Results_Future{Future: ans.Future()}, release
}
func (c Service) PrepareToRun(ctx context.Context, params func(Service_prepareToRun_Params) error) (Service_prepareToRun_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "prepareToRun",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_prepareToRun_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_prepareToRun_Results_Future{Future: ans.Future()}, release
}
func (c Service) IsRunning(ctx context.Context, params func(Service_isRunning_Params) error) (Service_isRunning_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      5,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "isRunning",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_isRunning_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_isRunning_Results_Future{Future: ans.Future()}, release
}
func (c Service) Start(ctx context.Context, params func(Service_start_Params) error) (Service_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      6,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_start_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_start_Results_Future{Future: ans.Future()}, release
}
func (c Service) Stop(ctx context.Context, params func(Service_stop_Params) error) (Service_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      7,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_stop_Results_Future{Future: ans.Future()}, release
}
func (c Service) Id(ctx context.Context, params func(Node_id_Params) error) (Node_id_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe322c44e33fc17b4,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Node",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_id_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_id_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	SetNodeId(context.Context, Service_setNodeId) error

	GetServiceName(context.Context, Service_getServiceName) error

	GetServiceType(context.Context, Service_getServiceType) error

	GetDependencies(context.Context, Service_getDependencies) error

	PrepareToRun(context.Context, Service_prepareToRun) error

	IsRunning(context.Context, Service_isRunning) error

	Start(context.Context, Service_start) error

	Stop(context.Context, Service_stop) error

	Id(context.Context, Node_id) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "setNodeId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetNodeId(ctx, Service_setNodeId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getServiceName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceName(ctx, Service_getServiceName{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getServiceType",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceType(ctx, Service_getServiceType{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "getDependencies",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDependencies(ctx, Service_getDependencies{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "prepareToRun",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PrepareToRun(ctx, Service_prepareToRun{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      5,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "isRunning",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.IsRunning(ctx, Service_isRunning{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      6,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Service_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xed78136d1400ca3e,
			MethodID:      7,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Service",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Service_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe322c44e33fc17b4,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Node",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Node_id{call})
		},
	})

	return methods
}

// Service_setNodeId holds the state for a server call to Service.setNodeId.
// See server.Call for documentation.
type Service_setNodeId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_setNodeId) Args() Service_setNodeId_Params {
	return Service_setNodeId_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_setNodeId) AllocResults() (Service_setNodeId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_setNodeId_Results{Struct: r}, err
}

// Service_getServiceName holds the state for a server call to Service.getServiceName.
// See server.Call for documentation.
type Service_getServiceName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getServiceName) Args() Service_getServiceName_Params {
	return Service_getServiceName_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getServiceName) AllocResults() (Service_getServiceName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceName_Results{Struct: r}, err
}

// Service_getServiceType holds the state for a server call to Service.getServiceType.
// See server.Call for documentation.
type Service_getServiceType struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getServiceType) Args() Service_getServiceType_Params {
	return Service_getServiceType_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getServiceType) AllocResults() (Service_getServiceType_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceType_Results{Struct: r}, err
}

// Service_getDependencies holds the state for a server call to Service.getDependencies.
// See server.Call for documentation.
type Service_getDependencies struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getDependencies) Args() Service_getDependencies_Params {
	return Service_getDependencies_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getDependencies) AllocResults() (Service_getDependencies_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDependencies_Results{Struct: r}, err
}

// Service_prepareToRun holds the state for a server call to Service.prepareToRun.
// See server.Call for documentation.
type Service_prepareToRun struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_prepareToRun) Args() Service_prepareToRun_Params {
	return Service_prepareToRun_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_prepareToRun) AllocResults() (Service_prepareToRun_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_prepareToRun_Results{Struct: r}, err
}

// Service_isRunning holds the state for a server call to Service.isRunning.
// See server.Call for documentation.
type Service_isRunning struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_isRunning) Args() Service_isRunning_Params {
	return Service_isRunning_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_isRunning) AllocResults() (Service_isRunning_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_isRunning_Results{Struct: r}, err
}

// Service_start holds the state for a server call to Service.start.
// See server.Call for documentation.
type Service_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_start) Args() Service_start_Params {
	return Service_start_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_start) AllocResults() (Service_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_start_Results{Struct: r}, err
}

// Service_stop holds the state for a server call to Service.stop.
// See server.Call for documentation.
type Service_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_stop) Args() Service_stop_Params {
	return Service_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_stop) AllocResults() (Service_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_stop_Results{Struct: r}, err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_setNodeId_Params struct{ capnp.Struct }

// Service_setNodeId_Params_TypeID is the unique identifier for the type Service_setNodeId_Params.
const Service_setNodeId_Params_TypeID = 0x8a3d9f63a0ed0f30

func NewService_setNodeId_Params(s *capnp.Segment) (Service_setNodeId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_setNodeId_Params{st}, err
}

func NewRootService_setNodeId_Params(s *capnp.Segment) (Service_setNodeId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_setNodeId_Params{st}, err
}

func ReadRootService_setNodeId_Params(msg *capnp.Message) (Service_setNodeId_Params, error) {
	root, err := msg.Root()
	return Service_setNodeId_Params{root.Struct()}, err
}

func (s Service_setNodeId_Params) String() string {
	str, _ := text.Marshal(0x8a3d9f63a0ed0f30, s.Struct)
	return str
}

func (s Service_setNodeId_Params) NodeId() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Service_setNodeId_Params) SetNodeId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Service_setNodeId_Params_List is a list of Service_setNodeId_Params.
type Service_setNodeId_Params_List = capnp.StructList[Service_setNodeId_Params]

// NewService_setNodeId_Params creates a new list of Service_setNodeId_Params.
func NewService_setNodeId_Params_List(s *capnp.Segment, sz int32) (Service_setNodeId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_setNodeId_Params]{List: l}, err
}

// Service_setNodeId_Params_Future is a wrapper for a Service_setNodeId_Params promised by a client call.
type Service_setNodeId_Params_Future struct{ *capnp.Future }

func (p Service_setNodeId_Params_Future) Struct() (Service_setNodeId_Params, error) {
	s, err := p.Future.Struct()
	return Service_setNodeId_Params{s}, err
}

type Service_setNodeId_Results struct{ capnp.Struct }

// Service_setNodeId_Results_TypeID is the unique identifier for the type Service_setNodeId_Results.
const Service_setNodeId_Results_TypeID = 0x978ee3cdcabf2c30

func NewService_setNodeId_Results(s *capnp.Segment) (Service_setNodeId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_setNodeId_Results{st}, err
}

func NewRootService_setNodeId_Results(s *capnp.Segment) (Service_setNodeId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_setNodeId_Results{st}, err
}

func ReadRootService_setNodeId_Results(msg *capnp.Message) (Service_setNodeId_Results, error) {
	root, err := msg.Root()
	return Service_setNodeId_Results{root.Struct()}, err
}

func (s Service_setNodeId_Results) String() string {
	str, _ := text.Marshal(0x978ee3cdcabf2c30, s.Struct)
	return str
}

// Service_setNodeId_Results_List is a list of Service_setNodeId_Results.
type Service_setNodeId_Results_List = capnp.StructList[Service_setNodeId_Results]

// NewService_setNodeId_Results creates a new list of Service_setNodeId_Results.
func NewService_setNodeId_Results_List(s *capnp.Segment, sz int32) (Service_setNodeId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_setNodeId_Results]{List: l}, err
}

// Service_setNodeId_Results_Future is a wrapper for a Service_setNodeId_Results promised by a client call.
type Service_setNodeId_Results_Future struct{ *capnp.Future }

func (p Service_setNodeId_Results_Future) Struct() (Service_setNodeId_Results, error) {
	s, err := p.Future.Struct()
	return Service_setNodeId_Results{s}, err
}

type Service_getServiceName_Params struct{ capnp.Struct }

// Service_getServiceName_Params_TypeID is the unique identifier for the type Service_getServiceName_Params.
const Service_getServiceName_Params_TypeID = 0xf3330a5e34c9de63

func NewService_getServiceName_Params(s *capnp.Segment) (Service_getServiceName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getServiceName_Params{st}, err
}

func NewRootService_getServiceName_Params(s *capnp.Segment) (Service_getServiceName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getServiceName_Params{st}, err
}

func ReadRootService_getServiceName_Params(msg *capnp.Message) (Service_getServiceName_Params, error) {
	root, err := msg.Root()
	return Service_getServiceName_Params{root.Struct()}, err
}

func (s Service_getServiceName_Params) String() string {
	str, _ := text.Marshal(0xf3330a5e34c9de63, s.Struct)
	return str
}

// Service_getServiceName_Params_List is a list of Service_getServiceName_Params.
type Service_getServiceName_Params_List = capnp.StructList[Service_getServiceName_Params]

// NewService_getServiceName_Params creates a new list of Service_getServiceName_Params.
func NewService_getServiceName_Params_List(s *capnp.Segment, sz int32) (Service_getServiceName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getServiceName_Params]{List: l}, err
}

// Service_getServiceName_Params_Future is a wrapper for a Service_getServiceName_Params promised by a client call.
type Service_getServiceName_Params_Future struct{ *capnp.Future }

func (p Service_getServiceName_Params_Future) Struct() (Service_getServiceName_Params, error) {
	s, err := p.Future.Struct()
	return Service_getServiceName_Params{s}, err
}

type Service_getServiceName_Results struct{ capnp.Struct }

// Service_getServiceName_Results_TypeID is the unique identifier for the type Service_getServiceName_Results.
const Service_getServiceName_Results_TypeID = 0xa0d117c23a43bfbd

func NewService_getServiceName_Results(s *capnp.Segment) (Service_getServiceName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceName_Results{st}, err
}

func NewRootService_getServiceName_Results(s *capnp.Segment) (Service_getServiceName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceName_Results{st}, err
}

func ReadRootService_getServiceName_Results(msg *capnp.Message) (Service_getServiceName_Results, error) {
	root, err := msg.Root()
	return Service_getServiceName_Results{root.Struct()}, err
}

func (s Service_getServiceName_Results) String() string {
	str, _ := text.Marshal(0xa0d117c23a43bfbd, s.Struct)
	return str
}

func (s Service_getServiceName_Results) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Service_getServiceName_Results) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getServiceName_Results) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Service_getServiceName_Results) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Service_getServiceName_Results_List is a list of Service_getServiceName_Results.
type Service_getServiceName_Results_List = capnp.StructList[Service_getServiceName_Results]

// NewService_getServiceName_Results creates a new list of Service_getServiceName_Results.
func NewService_getServiceName_Results_List(s *capnp.Segment, sz int32) (Service_getServiceName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getServiceName_Results]{List: l}, err
}

// Service_getServiceName_Results_Future is a wrapper for a Service_getServiceName_Results promised by a client call.
type Service_getServiceName_Results_Future struct{ *capnp.Future }

func (p Service_getServiceName_Results_Future) Struct() (Service_getServiceName_Results, error) {
	s, err := p.Future.Struct()
	return Service_getServiceName_Results{s}, err
}

type Service_getServiceType_Params struct{ capnp.Struct }

// Service_getServiceType_Params_TypeID is the unique identifier for the type Service_getServiceType_Params.
const Service_getServiceType_Params_TypeID = 0xc70e1f858a8ade5d

func NewService_getServiceType_Params(s *capnp.Segment) (Service_getServiceType_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getServiceType_Params{st}, err
}

func NewRootService_getServiceType_Params(s *capnp.Segment) (Service_getServiceType_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getServiceType_Params{st}, err
}

func ReadRootService_getServiceType_Params(msg *capnp.Message) (Service_getServiceType_Params, error) {
	root, err := msg.Root()
	return Service_getServiceType_Params{root.Struct()}, err
}

func (s Service_getServiceType_Params) String() string {
	str, _ := text.Marshal(0xc70e1f858a8ade5d, s.Struct)
	return str
}

// Service_getServiceType_Params_List is a list of Service_getServiceType_Params.
type Service_getServiceType_Params_List = capnp.StructList[Service_getServiceType_Params]

// NewService_getServiceType_Params creates a new list of Service_getServiceType_Params.
func NewService_getServiceType_Params_List(s *capnp.Segment, sz int32) (Service_getServiceType_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getServiceType_Params]{List: l}, err
}

// Service_getServiceType_Params_Future is a wrapper for a Service_getServiceType_Params promised by a client call.
type Service_getServiceType_Params_Future struct{ *capnp.Future }

func (p Service_getServiceType_Params_Future) Struct() (Service_getServiceType_Params, error) {
	s, err := p.Future.Struct()
	return Service_getServiceType_Params{s}, err
}

type Service_getServiceType_Results struct{ capnp.Struct }

// Service_getServiceType_Results_TypeID is the unique identifier for the type Service_getServiceType_Results.
const Service_getServiceType_Results_TypeID = 0xb09788b04428ce2a

func NewService_getServiceType_Results(s *capnp.Segment) (Service_getServiceType_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceType_Results{st}, err
}

func NewRootService_getServiceType_Results(s *capnp.Segment) (Service_getServiceType_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getServiceType_Results{st}, err
}

func ReadRootService_getServiceType_Results(msg *capnp.Message) (Service_getServiceType_Results, error) {
	root, err := msg.Root()
	return Service_getServiceType_Results{root.Struct()}, err
}

func (s Service_getServiceType_Results) String() string {
	str, _ := text.Marshal(0xb09788b04428ce2a, s.Struct)
	return str
}

func (s Service_getServiceType_Results) Type() (ServiceType, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType{Struct: p.Struct()}, err
}

func (s Service_getServiceType_Results) HasType() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getServiceType_Results) SetType(v ServiceType) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewType sets the type field to a newly
// allocated ServiceType struct, preferring placement in s's segment.
func (s Service_getServiceType_Results) NewType() (ServiceType, error) {
	ss, err := NewServiceType(s.Struct.Segment())
	if err != nil {
		return ServiceType{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Service_getServiceType_Results_List is a list of Service_getServiceType_Results.
type Service_getServiceType_Results_List = capnp.StructList[Service_getServiceType_Results]

// NewService_getServiceType_Results creates a new list of Service_getServiceType_Results.
func NewService_getServiceType_Results_List(s *capnp.Segment, sz int32) (Service_getServiceType_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getServiceType_Results]{List: l}, err
}

// Service_getServiceType_Results_Future is a wrapper for a Service_getServiceType_Results promised by a client call.
type Service_getServiceType_Results_Future struct{ *capnp.Future }

func (p Service_getServiceType_Results_Future) Struct() (Service_getServiceType_Results, error) {
	s, err := p.Future.Struct()
	return Service_getServiceType_Results{s}, err
}

func (p Service_getServiceType_Results_Future) Type() ServiceType_Future {
	return ServiceType_Future{Future: p.Future.Field(0, nil)}
}

type Service_getDependencies_Params struct{ capnp.Struct }

// Service_getDependencies_Params_TypeID is the unique identifier for the type Service_getDependencies_Params.
const Service_getDependencies_Params_TypeID = 0xae658051dc8a4741

func NewService_getDependencies_Params(s *capnp.Segment) (Service_getDependencies_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getDependencies_Params{st}, err
}

func NewRootService_getDependencies_Params(s *capnp.Segment) (Service_getDependencies_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getDependencies_Params{st}, err
}

func ReadRootService_getDependencies_Params(msg *capnp.Message) (Service_getDependencies_Params, error) {
	root, err := msg.Root()
	return Service_getDependencies_Params{root.Struct()}, err
}

func (s Service_getDependencies_Params) String() string {
	str, _ := text.Marshal(0xae658051dc8a4741, s.Struct)
	return str
}

// Service_getDependencies_Params_List is a list of Service_getDependencies_Params.
type Service_getDependencies_Params_List = capnp.StructList[Service_getDependencies_Params]

// NewService_getDependencies_Params creates a new list of Service_getDependencies_Params.
func NewService_getDependencies_Params_List(s *capnp.Segment, sz int32) (Service_getDependencies_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getDependencies_Params]{List: l}, err
}

// Service_getDependencies_Params_Future is a wrapper for a Service_getDependencies_Params promised by a client call.
type Service_getDependencies_Params_Future struct{ *capnp.Future }

func (p Service_getDependencies_Params_Future) Struct() (Service_getDependencies_Params, error) {
	s, err := p.Future.Struct()
	return Service_getDependencies_Params{s}, err
}

type Service_getDependencies_Results struct{ capnp.Struct }

// Service_getDependencies_Results_TypeID is the unique identifier for the type Service_getDependencies_Results.
const Service_getDependencies_Results_TypeID = 0xe7bd4745027c718a

func NewService_getDependencies_Results(s *capnp.Segment) (Service_getDependencies_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDependencies_Results{st}, err
}

func NewRootService_getDependencies_Results(s *capnp.Segment) (Service_getDependencies_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDependencies_Results{st}, err
}

func ReadRootService_getDependencies_Results(msg *capnp.Message) (Service_getDependencies_Results, error) {
	root, err := msg.Root()
	return Service_getDependencies_Results{root.Struct()}, err
}

func (s Service_getDependencies_Results) String() string {
	str, _ := text.Marshal(0xe7bd4745027c718a, s.Struct)
	return str
}

func (s Service_getDependencies_Results) Dependencies() (Service_List, error) {
	p, err := s.Struct.Ptr(0)
	return Service_List{List: p.List()}, err
}

func (s Service_getDependencies_Results) HasDependencies() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getDependencies_Results) SetDependencies(v Service_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDependencies sets the dependencies field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s Service_getDependencies_Results) NewDependencies(n int32) (Service_List, error) {
	l, err := NewService_List(s.Struct.Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_getDependencies_Results_List is a list of Service_getDependencies_Results.
type Service_getDependencies_Results_List = capnp.StructList[Service_getDependencies_Results]

// NewService_getDependencies_Results creates a new list of Service_getDependencies_Results.
func NewService_getDependencies_Results_List(s *capnp.Segment, sz int32) (Service_getDependencies_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDependencies_Results]{List: l}, err
}

// Service_getDependencies_Results_Future is a wrapper for a Service_getDependencies_Results promised by a client call.
type Service_getDependencies_Results_Future struct{ *capnp.Future }

func (p Service_getDependencies_Results_Future) Struct() (Service_getDependencies_Results, error) {
	s, err := p.Future.Struct()
	return Service_getDependencies_Results{s}, err
}

type Service_prepareToRun_Params struct{ capnp.Struct }

// Service_prepareToRun_Params_TypeID is the unique identifier for the type Service_prepareToRun_Params.
const Service_prepareToRun_Params_TypeID = 0xf468e58c931ac35f

func NewService_prepareToRun_Params(s *capnp.Segment) (Service_prepareToRun_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_prepareToRun_Params{st}, err
}

func NewRootService_prepareToRun_Params(s *capnp.Segment) (Service_prepareToRun_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_prepareToRun_Params{st}, err
}

func ReadRootService_prepareToRun_Params(msg *capnp.Message) (Service_prepareToRun_Params, error) {
	root, err := msg.Root()
	return Service_prepareToRun_Params{root.Struct()}, err
}

func (s Service_prepareToRun_Params) String() string {
	str, _ := text.Marshal(0xf468e58c931ac35f, s.Struct)
	return str
}

// Service_prepareToRun_Params_List is a list of Service_prepareToRun_Params.
type Service_prepareToRun_Params_List = capnp.StructList[Service_prepareToRun_Params]

// NewService_prepareToRun_Params creates a new list of Service_prepareToRun_Params.
func NewService_prepareToRun_Params_List(s *capnp.Segment, sz int32) (Service_prepareToRun_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_prepareToRun_Params]{List: l}, err
}

// Service_prepareToRun_Params_Future is a wrapper for a Service_prepareToRun_Params promised by a client call.
type Service_prepareToRun_Params_Future struct{ *capnp.Future }

func (p Service_prepareToRun_Params_Future) Struct() (Service_prepareToRun_Params, error) {
	s, err := p.Future.Struct()
	return Service_prepareToRun_Params{s}, err
}

type Service_prepareToRun_Results struct{ capnp.Struct }

// Service_prepareToRun_Results_TypeID is the unique identifier for the type Service_prepareToRun_Results.
const Service_prepareToRun_Results_TypeID = 0xba6083c6a6fef911

func NewService_prepareToRun_Results(s *capnp.Segment) (Service_prepareToRun_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_prepareToRun_Results{st}, err
}

func NewRootService_prepareToRun_Results(s *capnp.Segment) (Service_prepareToRun_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_prepareToRun_Results{st}, err
}

func ReadRootService_prepareToRun_Results(msg *capnp.Message) (Service_prepareToRun_Results, error) {
	root, err := msg.Root()
	return Service_prepareToRun_Results{root.Struct()}, err
}

func (s Service_prepareToRun_Results) String() string {
	str, _ := text.Marshal(0xba6083c6a6fef911, s.Struct)
	return str
}

func (s Service_prepareToRun_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Service_prepareToRun_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_prepareToRun_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Service_prepareToRun_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// Service_prepareToRun_Results_List is a list of Service_prepareToRun_Results.
type Service_prepareToRun_Results_List = capnp.StructList[Service_prepareToRun_Results]

// NewService_prepareToRun_Results creates a new list of Service_prepareToRun_Results.
func NewService_prepareToRun_Results_List(s *capnp.Segment, sz int32) (Service_prepareToRun_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_prepareToRun_Results]{List: l}, err
}

// Service_prepareToRun_Results_Future is a wrapper for a Service_prepareToRun_Results promised by a client call.
type Service_prepareToRun_Results_Future struct{ *capnp.Future }

func (p Service_prepareToRun_Results_Future) Struct() (Service_prepareToRun_Results, error) {
	s, err := p.Future.Struct()
	return Service_prepareToRun_Results{s}, err
}

type Service_isRunning_Params struct{ capnp.Struct }

// Service_isRunning_Params_TypeID is the unique identifier for the type Service_isRunning_Params.
const Service_isRunning_Params_TypeID = 0x98fb74c57334211d

func NewService_isRunning_Params(s *capnp.Segment) (Service_isRunning_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_isRunning_Params{st}, err
}

func NewRootService_isRunning_Params(s *capnp.Segment) (Service_isRunning_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_isRunning_Params{st}, err
}

func ReadRootService_isRunning_Params(msg *capnp.Message) (Service_isRunning_Params, error) {
	root, err := msg.Root()
	return Service_isRunning_Params{root.Struct()}, err
}

func (s Service_isRunning_Params) String() string {
	str, _ := text.Marshal(0x98fb74c57334211d, s.Struct)
	return str
}

// Service_isRunning_Params_List is a list of Service_isRunning_Params.
type Service_isRunning_Params_List = capnp.StructList[Service_isRunning_Params]

// NewService_isRunning_Params creates a new list of Service_isRunning_Params.
func NewService_isRunning_Params_List(s *capnp.Segment, sz int32) (Service_isRunning_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_isRunning_Params]{List: l}, err
}

// Service_isRunning_Params_Future is a wrapper for a Service_isRunning_Params promised by a client call.
type Service_isRunning_Params_Future struct{ *capnp.Future }

func (p Service_isRunning_Params_Future) Struct() (Service_isRunning_Params, error) {
	s, err := p.Future.Struct()
	return Service_isRunning_Params{s}, err
}

type Service_isRunning_Results struct{ capnp.Struct }

// Service_isRunning_Results_TypeID is the unique identifier for the type Service_isRunning_Results.
const Service_isRunning_Results_TypeID = 0xb654605147b9d8e3

func NewService_isRunning_Results(s *capnp.Segment) (Service_isRunning_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_isRunning_Results{st}, err
}

func NewRootService_isRunning_Results(s *capnp.Segment) (Service_isRunning_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_isRunning_Results{st}, err
}

func ReadRootService_isRunning_Results(msg *capnp.Message) (Service_isRunning_Results, error) {
	root, err := msg.Root()
	return Service_isRunning_Results{root.Struct()}, err
}

func (s Service_isRunning_Results) String() string {
	str, _ := text.Marshal(0xb654605147b9d8e3, s.Struct)
	return str
}

func (s Service_isRunning_Results) Running() bool {
	return s.Struct.Bit(0)
}

func (s Service_isRunning_Results) SetRunning(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_isRunning_Results_List is a list of Service_isRunning_Results.
type Service_isRunning_Results_List = capnp.StructList[Service_isRunning_Results]

// NewService_isRunning_Results creates a new list of Service_isRunning_Results.
func NewService_isRunning_Results_List(s *capnp.Segment, sz int32) (Service_isRunning_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_isRunning_Results]{List: l}, err
}

// Service_isRunning_Results_Future is a wrapper for a Service_isRunning_Results promised by a client call.
type Service_isRunning_Results_Future struct{ *capnp.Future }

func (p Service_isRunning_Results_Future) Struct() (Service_isRunning_Results, error) {
	s, err := p.Future.Struct()
	return Service_isRunning_Results{s}, err
}

type Service_start_Params struct{ capnp.Struct }

// Service_start_Params_TypeID is the unique identifier for the type Service_start_Params.
const Service_start_Params_TypeID = 0x832e7a13591793a4

func NewService_start_Params(s *capnp.Segment) (Service_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_start_Params{st}, err
}

func NewRootService_start_Params(s *capnp.Segment) (Service_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_start_Params{st}, err
}

func ReadRootService_start_Params(msg *capnp.Message) (Service_start_Params, error) {
	root, err := msg.Root()
	return Service_start_Params{root.Struct()}, err
}

func (s Service_start_Params) String() string {
	str, _ := text.Marshal(0x832e7a13591793a4, s.Struct)
	return str
}

func (s Service_start_Params) Retry() bool {
	return s.Struct.Bit(0)
}

func (s Service_start_Params) SetRetry(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_start_Params_List is a list of Service_start_Params.
type Service_start_Params_List = capnp.StructList[Service_start_Params]

// NewService_start_Params creates a new list of Service_start_Params.
func NewService_start_Params_List(s *capnp.Segment, sz int32) (Service_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_start_Params]{List: l}, err
}

// Service_start_Params_Future is a wrapper for a Service_start_Params promised by a client call.
type Service_start_Params_Future struct{ *capnp.Future }

func (p Service_start_Params_Future) Struct() (Service_start_Params, error) {
	s, err := p.Future.Struct()
	return Service_start_Params{s}, err
}

type Service_start_Results struct{ capnp.Struct }

// Service_start_Results_TypeID is the unique identifier for the type Service_start_Results.
const Service_start_Results_TypeID = 0xdfe5e4ef75efea83

func NewService_start_Results(s *capnp.Segment) (Service_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_start_Results{st}, err
}

func NewRootService_start_Results(s *capnp.Segment) (Service_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_start_Results{st}, err
}

func ReadRootService_start_Results(msg *capnp.Message) (Service_start_Results, error) {
	root, err := msg.Root()
	return Service_start_Results{root.Struct()}, err
}

func (s Service_start_Results) String() string {
	str, _ := text.Marshal(0xdfe5e4ef75efea83, s.Struct)
	return str
}

func (s Service_start_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Service_start_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_start_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Service_start_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// Service_start_Results_List is a list of Service_start_Results.
type Service_start_Results_List = capnp.StructList[Service_start_Results]

// NewService_start_Results creates a new list of Service_start_Results.
func NewService_start_Results_List(s *capnp.Segment, sz int32) (Service_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_start_Results]{List: l}, err
}

// Service_start_Results_Future is a wrapper for a Service_start_Results promised by a client call.
type Service_start_Results_Future struct{ *capnp.Future }

func (p Service_start_Results_Future) Struct() (Service_start_Results, error) {
	s, err := p.Future.Struct()
	return Service_start_Results{s}, err
}

type Service_stop_Params struct{ capnp.Struct }

// Service_stop_Params_TypeID is the unique identifier for the type Service_stop_Params.
const Service_stop_Params_TypeID = 0xd4b3d8b83ac9969e

func NewService_stop_Params(s *capnp.Segment) (Service_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_stop_Params{st}, err
}

func NewRootService_stop_Params(s *capnp.Segment) (Service_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_stop_Params{st}, err
}

func ReadRootService_stop_Params(msg *capnp.Message) (Service_stop_Params, error) {
	root, err := msg.Root()
	return Service_stop_Params{root.Struct()}, err
}

func (s Service_stop_Params) String() string {
	str, _ := text.Marshal(0xd4b3d8b83ac9969e, s.Struct)
	return str
}

func (s Service_stop_Params) Retry() bool {
	return s.Struct.Bit(0)
}

func (s Service_stop_Params) SetRetry(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Service_stop_Params) Force() bool {
	return s.Struct.Bit(1)
}

func (s Service_stop_Params) SetForce(v bool) {
	s.Struct.SetBit(1, v)
}

// Service_stop_Params_List is a list of Service_stop_Params.
type Service_stop_Params_List = capnp.StructList[Service_stop_Params]

// NewService_stop_Params creates a new list of Service_stop_Params.
func NewService_stop_Params_List(s *capnp.Segment, sz int32) (Service_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_stop_Params]{List: l}, err
}

// Service_stop_Params_Future is a wrapper for a Service_stop_Params promised by a client call.
type Service_stop_Params_Future struct{ *capnp.Future }

func (p Service_stop_Params_Future) Struct() (Service_stop_Params, error) {
	s, err := p.Future.Struct()
	return Service_stop_Params{s}, err
}

type Service_stop_Results struct{ capnp.Struct }

// Service_stop_Results_TypeID is the unique identifier for the type Service_stop_Results.
const Service_stop_Results_TypeID = 0x8bde3dbf3dc07ecf

func NewService_stop_Results(s *capnp.Segment) (Service_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_stop_Results{st}, err
}

func NewRootService_stop_Results(s *capnp.Segment) (Service_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_stop_Results{st}, err
}

func ReadRootService_stop_Results(msg *capnp.Message) (Service_stop_Results, error) {
	root, err := msg.Root()
	return Service_stop_Results{root.Struct()}, err
}

func (s Service_stop_Results) String() string {
	str, _ := text.Marshal(0x8bde3dbf3dc07ecf, s.Struct)
	return str
}

func (s Service_stop_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Service_stop_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_stop_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Service_stop_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// Service_stop_Results_List is a list of Service_stop_Results.
type Service_stop_Results_List = capnp.StructList[Service_stop_Results]

// NewService_stop_Results creates a new list of Service_stop_Results.
func NewService_stop_Results_List(s *capnp.Segment, sz int32) (Service_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_stop_Results]{List: l}, err
}

// Service_stop_Results_Future is a wrapper for a Service_stop_Results promised by a client call.
type Service_stop_Results_Future struct{ *capnp.Future }

func (p Service_stop_Results_Future) Struct() (Service_stop_Results, error) {
	s, err := p.Future.Struct()
	return Service_stop_Results{s}, err
}

type Node struct{ Client capnp.Client }

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xe322c44e33fc17b4

func (c Node) Id(ctx context.Context, params func(Node_id_Params) error) (Node_id_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe322c44e33fc17b4,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Node",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_id_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_id_Results_Future{Future: ans.Future()}, release
}

func (c Node) AddRef() Node {
	return Node{
		Client: c.Client.AddRef(),
	}
}

func (c Node) Release() {
	c.Client.Release()
}

// A Node_Server is a Node with a local implementation.
type Node_Server interface {
	Id(context.Context, Node_id) error
}

// Node_NewServer creates a new Server from an implementation of Node_Server.
func Node_NewServer(s Node_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Node_Methods(nil, s), s, c, policy)
}

// Node_ServerToClient creates a new Client from an implementation of Node_Server.
// The caller is responsible for calling Release on the returned Client.
func Node_ServerToClient(s Node_Server, policy *server.Policy) Node {
	return Node{Client: capnp.NewClient(Node_NewServer(s, policy))}
}

// Node_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Node_Methods(methods []server.Method, s Node_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe322c44e33fc17b4,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Node",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Node_id{call})
		},
	})

	return methods
}

// Node_id holds the state for a server call to Node.id.
// See server.Call for documentation.
type Node_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Node_id) Args() Node_id_Params {
	return Node_id_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Node_id) AllocResults() (Node_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Node_id_Results{Struct: r}, err
}

// Node_List is a list of Node.
type Node_List = capnp.CapList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Node](l), err
}

type Node_id_Params struct{ capnp.Struct }

// Node_id_Params_TypeID is the unique identifier for the type Node_id_Params.
const Node_id_Params_TypeID = 0xc7bb459c0ad3b752

func NewNode_id_Params(s *capnp.Segment) (Node_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Node_id_Params{st}, err
}

func NewRootNode_id_Params(s *capnp.Segment) (Node_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Node_id_Params{st}, err
}

func ReadRootNode_id_Params(msg *capnp.Message) (Node_id_Params, error) {
	root, err := msg.Root()
	return Node_id_Params{root.Struct()}, err
}

func (s Node_id_Params) String() string {
	str, _ := text.Marshal(0xc7bb459c0ad3b752, s.Struct)
	return str
}

// Node_id_Params_List is a list of Node_id_Params.
type Node_id_Params_List = capnp.StructList[Node_id_Params]

// NewNode_id_Params creates a new list of Node_id_Params.
func NewNode_id_Params_List(s *capnp.Segment, sz int32) (Node_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Node_id_Params]{List: l}, err
}

// Node_id_Params_Future is a wrapper for a Node_id_Params promised by a client call.
type Node_id_Params_Future struct{ *capnp.Future }

func (p Node_id_Params_Future) Struct() (Node_id_Params, error) {
	s, err := p.Future.Struct()
	return Node_id_Params{s}, err
}

type Node_id_Results struct{ capnp.Struct }

// Node_id_Results_TypeID is the unique identifier for the type Node_id_Results.
const Node_id_Results_TypeID = 0xd1f05c2966f0483c

func NewNode_id_Results(s *capnp.Segment) (Node_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Node_id_Results{st}, err
}

func NewRootNode_id_Results(s *capnp.Segment) (Node_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Node_id_Results{st}, err
}

func ReadRootNode_id_Results(msg *capnp.Message) (Node_id_Results, error) {
	root, err := msg.Root()
	return Node_id_Results{root.Struct()}, err
}

func (s Node_id_Results) String() string {
	str, _ := text.Marshal(0xd1f05c2966f0483c, s.Struct)
	return str
}

func (s Node_id_Results) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Node_id_Results) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Node_id_Results_List is a list of Node_id_Results.
type Node_id_Results_List = capnp.StructList[Node_id_Results]

// NewNode_id_Results creates a new list of Node_id_Results.
func NewNode_id_Results_List(s *capnp.Segment, sz int32) (Node_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Node_id_Results]{List: l}, err
}

// Node_id_Results_Future is a wrapper for a Node_id_Results promised by a client call.
type Node_id_Results_Future struct{ *capnp.Future }

func (p Node_id_Results_Future) Struct() (Node_id_Results, error) {
	s, err := p.Future.Struct()
	return Node_id_Results{s}, err
}

type Edge struct{ Client capnp.Client }

// Edge_TypeID is the unique identifier for the type Edge.
const Edge_TypeID = 0x9d51abb4c18add06

func (c Edge) From(ctx context.Context, params func(Edge_from_Params) error) (Edge_from_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "from",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Edge_from_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Edge_from_Results_Future{Future: ans.Future()}, release
}
func (c Edge) To(ctx context.Context, params func(Edge_to_Params) error) (Edge_to_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "to",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Edge_to_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Edge_to_Results_Future{Future: ans.Future()}, release
}
func (c Edge) ReversedEdge(ctx context.Context, params func(Edge_reversedEdge_Params) error) (Edge_reversedEdge_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "reversedEdge",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Edge_reversedEdge_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Edge_reversedEdge_Results_Future{Future: ans.Future()}, release
}

func (c Edge) AddRef() Edge {
	return Edge{
		Client: c.Client.AddRef(),
	}
}

func (c Edge) Release() {
	c.Client.Release()
}

// A Edge_Server is a Edge with a local implementation.
type Edge_Server interface {
	From(context.Context, Edge_from) error

	To(context.Context, Edge_to) error

	ReversedEdge(context.Context, Edge_reversedEdge) error
}

// Edge_NewServer creates a new Server from an implementation of Edge_Server.
func Edge_NewServer(s Edge_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Edge_Methods(nil, s), s, c, policy)
}

// Edge_ServerToClient creates a new Client from an implementation of Edge_Server.
// The caller is responsible for calling Release on the returned Client.
func Edge_ServerToClient(s Edge_Server, policy *server.Policy) Edge {
	return Edge{Client: capnp.NewClient(Edge_NewServer(s, policy))}
}

// Edge_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Edge_Methods(methods []server.Method, s Edge_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "from",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.From(ctx, Edge_from{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "to",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.To(ctx, Edge_to{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d51abb4c18add06,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Edge",
			MethodName:    "reversedEdge",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReversedEdge(ctx, Edge_reversedEdge{call})
		},
	})

	return methods
}

// Edge_from holds the state for a server call to Edge.from.
// See server.Call for documentation.
type Edge_from struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Edge_from) Args() Edge_from_Params {
	return Edge_from_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Edge_from) AllocResults() (Edge_from_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_from_Results{Struct: r}, err
}

// Edge_to holds the state for a server call to Edge.to.
// See server.Call for documentation.
type Edge_to struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Edge_to) Args() Edge_to_Params {
	return Edge_to_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Edge_to) AllocResults() (Edge_to_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_to_Results{Struct: r}, err
}

// Edge_reversedEdge holds the state for a server call to Edge.reversedEdge.
// See server.Call for documentation.
type Edge_reversedEdge struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Edge_reversedEdge) Args() Edge_reversedEdge_Params {
	return Edge_reversedEdge_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Edge_reversedEdge) AllocResults() (Edge_reversedEdge_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_reversedEdge_Results{Struct: r}, err
}

// Edge_List is a list of Edge.
type Edge_List = capnp.CapList[Edge]

// NewEdge creates a new list of Edge.
func NewEdge_List(s *capnp.Segment, sz int32) (Edge_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Edge](l), err
}

type Edge_from_Params struct{ capnp.Struct }

// Edge_from_Params_TypeID is the unique identifier for the type Edge_from_Params.
const Edge_from_Params_TypeID = 0xa28f2fee930c49af

func NewEdge_from_Params(s *capnp.Segment) (Edge_from_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_from_Params{st}, err
}

func NewRootEdge_from_Params(s *capnp.Segment) (Edge_from_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_from_Params{st}, err
}

func ReadRootEdge_from_Params(msg *capnp.Message) (Edge_from_Params, error) {
	root, err := msg.Root()
	return Edge_from_Params{root.Struct()}, err
}

func (s Edge_from_Params) String() string {
	str, _ := text.Marshal(0xa28f2fee930c49af, s.Struct)
	return str
}

// Edge_from_Params_List is a list of Edge_from_Params.
type Edge_from_Params_List = capnp.StructList[Edge_from_Params]

// NewEdge_from_Params creates a new list of Edge_from_Params.
func NewEdge_from_Params_List(s *capnp.Segment, sz int32) (Edge_from_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Edge_from_Params]{List: l}, err
}

// Edge_from_Params_Future is a wrapper for a Edge_from_Params promised by a client call.
type Edge_from_Params_Future struct{ *capnp.Future }

func (p Edge_from_Params_Future) Struct() (Edge_from_Params, error) {
	s, err := p.Future.Struct()
	return Edge_from_Params{s}, err
}

type Edge_from_Results struct{ capnp.Struct }

// Edge_from_Results_TypeID is the unique identifier for the type Edge_from_Results.
const Edge_from_Results_TypeID = 0xefd6ff2a54277976

func NewEdge_from_Results(s *capnp.Segment) (Edge_from_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_from_Results{st}, err
}

func NewRootEdge_from_Results(s *capnp.Segment) (Edge_from_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_from_Results{st}, err
}

func ReadRootEdge_from_Results(msg *capnp.Message) (Edge_from_Results, error) {
	root, err := msg.Root()
	return Edge_from_Results{root.Struct()}, err
}

func (s Edge_from_Results) String() string {
	str, _ := text.Marshal(0xefd6ff2a54277976, s.Struct)
	return str
}

func (s Edge_from_Results) Node() Node {
	p, _ := s.Struct.Ptr(0)
	return Node{Client: p.Interface().Client()}
}

func (s Edge_from_Results) HasNode() bool {
	return s.Struct.HasPtr(0)
}

func (s Edge_from_Results) SetNode(v Node) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Edge_from_Results_List is a list of Edge_from_Results.
type Edge_from_Results_List = capnp.StructList[Edge_from_Results]

// NewEdge_from_Results creates a new list of Edge_from_Results.
func NewEdge_from_Results_List(s *capnp.Segment, sz int32) (Edge_from_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Edge_from_Results]{List: l}, err
}

// Edge_from_Results_Future is a wrapper for a Edge_from_Results promised by a client call.
type Edge_from_Results_Future struct{ *capnp.Future }

func (p Edge_from_Results_Future) Struct() (Edge_from_Results, error) {
	s, err := p.Future.Struct()
	return Edge_from_Results{s}, err
}

func (p Edge_from_Results_Future) Node() Node {
	return Node{Client: p.Future.Field(0, nil).Client()}
}

type Edge_to_Params struct{ capnp.Struct }

// Edge_to_Params_TypeID is the unique identifier for the type Edge_to_Params.
const Edge_to_Params_TypeID = 0xa03fc14e1c42c4ec

func NewEdge_to_Params(s *capnp.Segment) (Edge_to_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_to_Params{st}, err
}

func NewRootEdge_to_Params(s *capnp.Segment) (Edge_to_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_to_Params{st}, err
}

func ReadRootEdge_to_Params(msg *capnp.Message) (Edge_to_Params, error) {
	root, err := msg.Root()
	return Edge_to_Params{root.Struct()}, err
}

func (s Edge_to_Params) String() string {
	str, _ := text.Marshal(0xa03fc14e1c42c4ec, s.Struct)
	return str
}

// Edge_to_Params_List is a list of Edge_to_Params.
type Edge_to_Params_List = capnp.StructList[Edge_to_Params]

// NewEdge_to_Params creates a new list of Edge_to_Params.
func NewEdge_to_Params_List(s *capnp.Segment, sz int32) (Edge_to_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Edge_to_Params]{List: l}, err
}

// Edge_to_Params_Future is a wrapper for a Edge_to_Params promised by a client call.
type Edge_to_Params_Future struct{ *capnp.Future }

func (p Edge_to_Params_Future) Struct() (Edge_to_Params, error) {
	s, err := p.Future.Struct()
	return Edge_to_Params{s}, err
}

type Edge_to_Results struct{ capnp.Struct }

// Edge_to_Results_TypeID is the unique identifier for the type Edge_to_Results.
const Edge_to_Results_TypeID = 0xbc2149074476f2ec

func NewEdge_to_Results(s *capnp.Segment) (Edge_to_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_to_Results{st}, err
}

func NewRootEdge_to_Results(s *capnp.Segment) (Edge_to_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_to_Results{st}, err
}

func ReadRootEdge_to_Results(msg *capnp.Message) (Edge_to_Results, error) {
	root, err := msg.Root()
	return Edge_to_Results{root.Struct()}, err
}

func (s Edge_to_Results) String() string {
	str, _ := text.Marshal(0xbc2149074476f2ec, s.Struct)
	return str
}

func (s Edge_to_Results) Node() Node {
	p, _ := s.Struct.Ptr(0)
	return Node{Client: p.Interface().Client()}
}

func (s Edge_to_Results) HasNode() bool {
	return s.Struct.HasPtr(0)
}

func (s Edge_to_Results) SetNode(v Node) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Edge_to_Results_List is a list of Edge_to_Results.
type Edge_to_Results_List = capnp.StructList[Edge_to_Results]

// NewEdge_to_Results creates a new list of Edge_to_Results.
func NewEdge_to_Results_List(s *capnp.Segment, sz int32) (Edge_to_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Edge_to_Results]{List: l}, err
}

// Edge_to_Results_Future is a wrapper for a Edge_to_Results promised by a client call.
type Edge_to_Results_Future struct{ *capnp.Future }

func (p Edge_to_Results_Future) Struct() (Edge_to_Results, error) {
	s, err := p.Future.Struct()
	return Edge_to_Results{s}, err
}

func (p Edge_to_Results_Future) Node() Node {
	return Node{Client: p.Future.Field(0, nil).Client()}
}

type Edge_reversedEdge_Params struct{ capnp.Struct }

// Edge_reversedEdge_Params_TypeID is the unique identifier for the type Edge_reversedEdge_Params.
const Edge_reversedEdge_Params_TypeID = 0x8e7a389fc4d001b5

func NewEdge_reversedEdge_Params(s *capnp.Segment) (Edge_reversedEdge_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_reversedEdge_Params{st}, err
}

func NewRootEdge_reversedEdge_Params(s *capnp.Segment) (Edge_reversedEdge_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Edge_reversedEdge_Params{st}, err
}

func ReadRootEdge_reversedEdge_Params(msg *capnp.Message) (Edge_reversedEdge_Params, error) {
	root, err := msg.Root()
	return Edge_reversedEdge_Params{root.Struct()}, err
}

func (s Edge_reversedEdge_Params) String() string {
	str, _ := text.Marshal(0x8e7a389fc4d001b5, s.Struct)
	return str
}

// Edge_reversedEdge_Params_List is a list of Edge_reversedEdge_Params.
type Edge_reversedEdge_Params_List = capnp.StructList[Edge_reversedEdge_Params]

// NewEdge_reversedEdge_Params creates a new list of Edge_reversedEdge_Params.
func NewEdge_reversedEdge_Params_List(s *capnp.Segment, sz int32) (Edge_reversedEdge_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Edge_reversedEdge_Params]{List: l}, err
}

// Edge_reversedEdge_Params_Future is a wrapper for a Edge_reversedEdge_Params promised by a client call.
type Edge_reversedEdge_Params_Future struct{ *capnp.Future }

func (p Edge_reversedEdge_Params_Future) Struct() (Edge_reversedEdge_Params, error) {
	s, err := p.Future.Struct()
	return Edge_reversedEdge_Params{s}, err
}

type Edge_reversedEdge_Results struct{ capnp.Struct }

// Edge_reversedEdge_Results_TypeID is the unique identifier for the type Edge_reversedEdge_Results.
const Edge_reversedEdge_Results_TypeID = 0xfaeadf7102939159

func NewEdge_reversedEdge_Results(s *capnp.Segment) (Edge_reversedEdge_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_reversedEdge_Results{st}, err
}

func NewRootEdge_reversedEdge_Results(s *capnp.Segment) (Edge_reversedEdge_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Edge_reversedEdge_Results{st}, err
}

func ReadRootEdge_reversedEdge_Results(msg *capnp.Message) (Edge_reversedEdge_Results, error) {
	root, err := msg.Root()
	return Edge_reversedEdge_Results{root.Struct()}, err
}

func (s Edge_reversedEdge_Results) String() string {
	str, _ := text.Marshal(0xfaeadf7102939159, s.Struct)
	return str
}

func (s Edge_reversedEdge_Results) Edge() Edge {
	p, _ := s.Struct.Ptr(0)
	return Edge{Client: p.Interface().Client()}
}

func (s Edge_reversedEdge_Results) HasEdge() bool {
	return s.Struct.HasPtr(0)
}

func (s Edge_reversedEdge_Results) SetEdge(v Edge) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Edge_reversedEdge_Results_List is a list of Edge_reversedEdge_Results.
type Edge_reversedEdge_Results_List = capnp.StructList[Edge_reversedEdge_Results]

// NewEdge_reversedEdge_Results creates a new list of Edge_reversedEdge_Results.
func NewEdge_reversedEdge_Results_List(s *capnp.Segment, sz int32) (Edge_reversedEdge_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Edge_reversedEdge_Results]{List: l}, err
}

// Edge_reversedEdge_Results_Future is a wrapper for a Edge_reversedEdge_Results promised by a client call.
type Edge_reversedEdge_Results_Future struct{ *capnp.Future }

func (p Edge_reversedEdge_Results_Future) Struct() (Edge_reversedEdge_Results, error) {
	s, err := p.Future.Struct()
	return Edge_reversedEdge_Results{s}, err
}

func (p Edge_reversedEdge_Results_Future) Edge() Edge {
	return Edge{Client: p.Future.Field(0, nil).Client()}
}

type Graph struct{ Client capnp.Client }

// Graph_TypeID is the unique identifier for the type Graph.
const Graph_TypeID = 0xc20098da5460c109

func (c Graph) Node(ctx context.Context, params func(Graph_node_Params) error) (Graph_node_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "node",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_node_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_node_Results_Future{Future: ans.Future()}, release
}
func (c Graph) Nodes(ctx context.Context, params func(Graph_nodes_Params) error) (Graph_nodes_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "nodes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_nodes_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_nodes_Results_Future{Future: ans.Future()}, release
}
func (c Graph) From(ctx context.Context, params func(Graph_from_Params) error) (Graph_from_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "from",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_from_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_from_Results_Future{Future: ans.Future()}, release
}
func (c Graph) HasEdgeBetween(ctx context.Context, params func(Graph_hasEdgeBetween_Params) error) (Graph_hasEdgeBetween_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "hasEdgeBetween",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_hasEdgeBetween_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_hasEdgeBetween_Results_Future{Future: ans.Future()}, release
}
func (c Graph) Edge(ctx context.Context, params func(Graph_edge_Params) error) (Graph_edge_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "edge",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_edge_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_edge_Results_Future{Future: ans.Future()}, release
}

func (c Graph) AddRef() Graph {
	return Graph{
		Client: c.Client.AddRef(),
	}
}

func (c Graph) Release() {
	c.Client.Release()
}

// A Graph_Server is a Graph with a local implementation.
type Graph_Server interface {
	Node(context.Context, Graph_node) error

	Nodes(context.Context, Graph_nodes) error

	From(context.Context, Graph_from) error

	HasEdgeBetween(context.Context, Graph_hasEdgeBetween) error

	Edge(context.Context, Graph_edge) error
}

// Graph_NewServer creates a new Server from an implementation of Graph_Server.
func Graph_NewServer(s Graph_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Graph_Methods(nil, s), s, c, policy)
}

// Graph_ServerToClient creates a new Client from an implementation of Graph_Server.
// The caller is responsible for calling Release on the returned Client.
func Graph_ServerToClient(s Graph_Server, policy *server.Policy) Graph {
	return Graph{Client: capnp.NewClient(Graph_NewServer(s, policy))}
}

// Graph_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Graph_Methods(methods []server.Method, s Graph_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "node",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Node(ctx, Graph_node{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "nodes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Nodes(ctx, Graph_nodes{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "from",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.From(ctx, Graph_from{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "hasEdgeBetween",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HasEdgeBetween(ctx, Graph_hasEdgeBetween{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "edge",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Edge(ctx, Graph_edge{call})
		},
	})

	return methods
}

// Graph_node holds the state for a server call to Graph.node.
// See server.Call for documentation.
type Graph_node struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Graph_node) Args() Graph_node_Params {
	return Graph_node_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Graph_node) AllocResults() (Graph_node_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_node_Results{Struct: r}, err
}

// Graph_nodes holds the state for a server call to Graph.nodes.
// See server.Call for documentation.
type Graph_nodes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Graph_nodes) Args() Graph_nodes_Params {
	return Graph_nodes_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Graph_nodes) AllocResults() (Graph_nodes_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_nodes_Results{Struct: r}, err
}

// Graph_from holds the state for a server call to Graph.from.
// See server.Call for documentation.
type Graph_from struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Graph_from) Args() Graph_from_Params {
	return Graph_from_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Graph_from) AllocResults() (Graph_from_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_from_Results{Struct: r}, err
}

// Graph_hasEdgeBetween holds the state for a server call to Graph.hasEdgeBetween.
// See server.Call for documentation.
type Graph_hasEdgeBetween struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Graph_hasEdgeBetween) Args() Graph_hasEdgeBetween_Params {
	return Graph_hasEdgeBetween_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Graph_hasEdgeBetween) AllocResults() (Graph_hasEdgeBetween_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_hasEdgeBetween_Results{Struct: r}, err
}

// Graph_edge holds the state for a server call to Graph.edge.
// See server.Call for documentation.
type Graph_edge struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Graph_edge) Args() Graph_edge_Params {
	return Graph_edge_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Graph_edge) AllocResults() (Graph_edge_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_edge_Results{Struct: r}, err
}

// Graph_List is a list of Graph.
type Graph_List = capnp.CapList[Graph]

// NewGraph creates a new list of Graph.
func NewGraph_List(s *capnp.Segment, sz int32) (Graph_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Graph](l), err
}

type Graph_node_Params struct{ capnp.Struct }

// Graph_node_Params_TypeID is the unique identifier for the type Graph_node_Params.
const Graph_node_Params_TypeID = 0x8c48060a80277f88

func NewGraph_node_Params(s *capnp.Segment) (Graph_node_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_node_Params{st}, err
}

func NewRootGraph_node_Params(s *capnp.Segment) (Graph_node_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_node_Params{st}, err
}

func ReadRootGraph_node_Params(msg *capnp.Message) (Graph_node_Params, error) {
	root, err := msg.Root()
	return Graph_node_Params{root.Struct()}, err
}

func (s Graph_node_Params) String() string {
	str, _ := text.Marshal(0x8c48060a80277f88, s.Struct)
	return str
}

func (s Graph_node_Params) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Graph_node_Params) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Graph_node_Params_List is a list of Graph_node_Params.
type Graph_node_Params_List = capnp.StructList[Graph_node_Params]

// NewGraph_node_Params creates a new list of Graph_node_Params.
func NewGraph_node_Params_List(s *capnp.Segment, sz int32) (Graph_node_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Graph_node_Params]{List: l}, err
}

// Graph_node_Params_Future is a wrapper for a Graph_node_Params promised by a client call.
type Graph_node_Params_Future struct{ *capnp.Future }

func (p Graph_node_Params_Future) Struct() (Graph_node_Params, error) {
	s, err := p.Future.Struct()
	return Graph_node_Params{s}, err
}

type Graph_node_Results struct{ capnp.Struct }

// Graph_node_Results_TypeID is the unique identifier for the type Graph_node_Results.
const Graph_node_Results_TypeID = 0x9594b657bb806df8

func NewGraph_node_Results(s *capnp.Segment) (Graph_node_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_node_Results{st}, err
}

func NewRootGraph_node_Results(s *capnp.Segment) (Graph_node_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_node_Results{st}, err
}

func ReadRootGraph_node_Results(msg *capnp.Message) (Graph_node_Results, error) {
	root, err := msg.Root()
	return Graph_node_Results{root.Struct()}, err
}

func (s Graph_node_Results) String() string {
	str, _ := text.Marshal(0x9594b657bb806df8, s.Struct)
	return str
}

func (s Graph_node_Results) Node() Node {
	p, _ := s.Struct.Ptr(0)
	return Node{Client: p.Interface().Client()}
}

func (s Graph_node_Results) HasNode() bool {
	return s.Struct.HasPtr(0)
}

func (s Graph_node_Results) SetNode(v Node) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Graph_node_Results_List is a list of Graph_node_Results.
type Graph_node_Results_List = capnp.StructList[Graph_node_Results]

// NewGraph_node_Results creates a new list of Graph_node_Results.
func NewGraph_node_Results_List(s *capnp.Segment, sz int32) (Graph_node_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Graph_node_Results]{List: l}, err
}

// Graph_node_Results_Future is a wrapper for a Graph_node_Results promised by a client call.
type Graph_node_Results_Future struct{ *capnp.Future }

func (p Graph_node_Results_Future) Struct() (Graph_node_Results, error) {
	s, err := p.Future.Struct()
	return Graph_node_Results{s}, err
}

func (p Graph_node_Results_Future) Node() Node {
	return Node{Client: p.Future.Field(0, nil).Client()}
}

type Graph_nodes_Params struct{ capnp.Struct }

// Graph_nodes_Params_TypeID is the unique identifier for the type Graph_nodes_Params.
const Graph_nodes_Params_TypeID = 0xe723d6ac7a6de2de

func NewGraph_nodes_Params(s *capnp.Segment) (Graph_nodes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Graph_nodes_Params{st}, err
}

func NewRootGraph_nodes_Params(s *capnp.Segment) (Graph_nodes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Graph_nodes_Params{st}, err
}

func ReadRootGraph_nodes_Params(msg *capnp.Message) (Graph_nodes_Params, error) {
	root, err := msg.Root()
	return Graph_nodes_Params{root.Struct()}, err
}

func (s Graph_nodes_Params) String() string {
	str, _ := text.Marshal(0xe723d6ac7a6de2de, s.Struct)
	return str
}

// Graph_nodes_Params_List is a list of Graph_nodes_Params.
type Graph_nodes_Params_List = capnp.StructList[Graph_nodes_Params]

// NewGraph_nodes_Params creates a new list of Graph_nodes_Params.
func NewGraph_nodes_Params_List(s *capnp.Segment, sz int32) (Graph_nodes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Graph_nodes_Params]{List: l}, err
}

// Graph_nodes_Params_Future is a wrapper for a Graph_nodes_Params promised by a client call.
type Graph_nodes_Params_Future struct{ *capnp.Future }

func (p Graph_nodes_Params_Future) Struct() (Graph_nodes_Params, error) {
	s, err := p.Future.Struct()
	return Graph_nodes_Params{s}, err
}

type Graph_nodes_Results struct{ capnp.Struct }

// Graph_nodes_Results_TypeID is the unique identifier for the type Graph_nodes_Results.
const Graph_nodes_Results_TypeID = 0xe16f7f23da0e53f0

func NewGraph_nodes_Results(s *capnp.Segment) (Graph_nodes_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_nodes_Results{st}, err
}

func NewRootGraph_nodes_Results(s *capnp.Segment) (Graph_nodes_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_nodes_Results{st}, err
}

func ReadRootGraph_nodes_Results(msg *capnp.Message) (Graph_nodes_Results, error) {
	root, err := msg.Root()
	return Graph_nodes_Results{root.Struct()}, err
}

func (s Graph_nodes_Results) String() string {
	str, _ := text.Marshal(0xe16f7f23da0e53f0, s.Struct)
	return str
}

func (s Graph_nodes_Results) Nodes() (Node_List, error) {
	p, err := s.Struct.Ptr(0)
	return Node_List{List: p.List()}, err
}

func (s Graph_nodes_Results) HasNodes() bool {
	return s.Struct.HasPtr(0)
}

func (s Graph_nodes_Results) SetNodes(v Node_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Node_List, preferring placement in s's segment.
func (s Graph_nodes_Results) NewNodes(n int32) (Node_List, error) {
	l, err := NewNode_List(s.Struct.Segment(), n)
	if err != nil {
		return Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Graph_nodes_Results_List is a list of Graph_nodes_Results.
type Graph_nodes_Results_List = capnp.StructList[Graph_nodes_Results]

// NewGraph_nodes_Results creates a new list of Graph_nodes_Results.
func NewGraph_nodes_Results_List(s *capnp.Segment, sz int32) (Graph_nodes_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Graph_nodes_Results]{List: l}, err
}

// Graph_nodes_Results_Future is a wrapper for a Graph_nodes_Results promised by a client call.
type Graph_nodes_Results_Future struct{ *capnp.Future }

func (p Graph_nodes_Results_Future) Struct() (Graph_nodes_Results, error) {
	s, err := p.Future.Struct()
	return Graph_nodes_Results{s}, err
}

type Graph_from_Params struct{ capnp.Struct }

// Graph_from_Params_TypeID is the unique identifier for the type Graph_from_Params.
const Graph_from_Params_TypeID = 0xc06690f42ee88274

func NewGraph_from_Params(s *capnp.Segment) (Graph_from_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_from_Params{st}, err
}

func NewRootGraph_from_Params(s *capnp.Segment) (Graph_from_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_from_Params{st}, err
}

func ReadRootGraph_from_Params(msg *capnp.Message) (Graph_from_Params, error) {
	root, err := msg.Root()
	return Graph_from_Params{root.Struct()}, err
}

func (s Graph_from_Params) String() string {
	str, _ := text.Marshal(0xc06690f42ee88274, s.Struct)
	return str
}

func (s Graph_from_Params) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Graph_from_Params) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Graph_from_Params_List is a list of Graph_from_Params.
type Graph_from_Params_List = capnp.StructList[Graph_from_Params]

// NewGraph_from_Params creates a new list of Graph_from_Params.
func NewGraph_from_Params_List(s *capnp.Segment, sz int32) (Graph_from_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Graph_from_Params]{List: l}, err
}

// Graph_from_Params_Future is a wrapper for a Graph_from_Params promised by a client call.
type Graph_from_Params_Future struct{ *capnp.Future }

func (p Graph_from_Params_Future) Struct() (Graph_from_Params, error) {
	s, err := p.Future.Struct()
	return Graph_from_Params{s}, err
}

type Graph_from_Results struct{ capnp.Struct }

// Graph_from_Results_TypeID is the unique identifier for the type Graph_from_Results.
const Graph_from_Results_TypeID = 0xdf204b8369443fb0

func NewGraph_from_Results(s *capnp.Segment) (Graph_from_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_from_Results{st}, err
}

func NewRootGraph_from_Results(s *capnp.Segment) (Graph_from_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_from_Results{st}, err
}

func ReadRootGraph_from_Results(msg *capnp.Message) (Graph_from_Results, error) {
	root, err := msg.Root()
	return Graph_from_Results{root.Struct()}, err
}

func (s Graph_from_Results) String() string {
	str, _ := text.Marshal(0xdf204b8369443fb0, s.Struct)
	return str
}

func (s Graph_from_Results) Nodes() (Node_List, error) {
	p, err := s.Struct.Ptr(0)
	return Node_List{List: p.List()}, err
}

func (s Graph_from_Results) HasNodes() bool {
	return s.Struct.HasPtr(0)
}

func (s Graph_from_Results) SetNodes(v Node_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Node_List, preferring placement in s's segment.
func (s Graph_from_Results) NewNodes(n int32) (Node_List, error) {
	l, err := NewNode_List(s.Struct.Segment(), n)
	if err != nil {
		return Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Graph_from_Results_List is a list of Graph_from_Results.
type Graph_from_Results_List = capnp.StructList[Graph_from_Results]

// NewGraph_from_Results creates a new list of Graph_from_Results.
func NewGraph_from_Results_List(s *capnp.Segment, sz int32) (Graph_from_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Graph_from_Results]{List: l}, err
}

// Graph_from_Results_Future is a wrapper for a Graph_from_Results promised by a client call.
type Graph_from_Results_Future struct{ *capnp.Future }

func (p Graph_from_Results_Future) Struct() (Graph_from_Results, error) {
	s, err := p.Future.Struct()
	return Graph_from_Results{s}, err
}

type Graph_hasEdgeBetween_Params struct{ capnp.Struct }

// Graph_hasEdgeBetween_Params_TypeID is the unique identifier for the type Graph_hasEdgeBetween_Params.
const Graph_hasEdgeBetween_Params_TypeID = 0xdbffc271e0dc1a73

func NewGraph_hasEdgeBetween_Params(s *capnp.Segment) (Graph_hasEdgeBetween_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Graph_hasEdgeBetween_Params{st}, err
}

func NewRootGraph_hasEdgeBetween_Params(s *capnp.Segment) (Graph_hasEdgeBetween_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Graph_hasEdgeBetween_Params{st}, err
}

func ReadRootGraph_hasEdgeBetween_Params(msg *capnp.Message) (Graph_hasEdgeBetween_Params, error) {
	root, err := msg.Root()
	return Graph_hasEdgeBetween_Params{root.Struct()}, err
}

func (s Graph_hasEdgeBetween_Params) String() string {
	str, _ := text.Marshal(0xdbffc271e0dc1a73, s.Struct)
	return str
}

func (s Graph_hasEdgeBetween_Params) XId() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Graph_hasEdgeBetween_Params) SetXId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Graph_hasEdgeBetween_Params) YId() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Graph_hasEdgeBetween_Params) SetYId(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// Graph_hasEdgeBetween_Params_List is a list of Graph_hasEdgeBetween_Params.
type Graph_hasEdgeBetween_Params_List = capnp.StructList[Graph_hasEdgeBetween_Params]

// NewGraph_hasEdgeBetween_Params creates a new list of Graph_hasEdgeBetween_Params.
func NewGraph_hasEdgeBetween_Params_List(s *capnp.Segment, sz int32) (Graph_hasEdgeBetween_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Graph_hasEdgeBetween_Params]{List: l}, err
}

// Graph_hasEdgeBetween_Params_Future is a wrapper for a Graph_hasEdgeBetween_Params promised by a client call.
type Graph_hasEdgeBetween_Params_Future struct{ *capnp.Future }

func (p Graph_hasEdgeBetween_Params_Future) Struct() (Graph_hasEdgeBetween_Params, error) {
	s, err := p.Future.Struct()
	return Graph_hasEdgeBetween_Params{s}, err
}

type Graph_hasEdgeBetween_Results struct{ capnp.Struct }

// Graph_hasEdgeBetween_Results_TypeID is the unique identifier for the type Graph_hasEdgeBetween_Results.
const Graph_hasEdgeBetween_Results_TypeID = 0x9aa329db62ea678c

func NewGraph_hasEdgeBetween_Results(s *capnp.Segment) (Graph_hasEdgeBetween_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_hasEdgeBetween_Results{st}, err
}

func NewRootGraph_hasEdgeBetween_Results(s *capnp.Segment) (Graph_hasEdgeBetween_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Graph_hasEdgeBetween_Results{st}, err
}

func ReadRootGraph_hasEdgeBetween_Results(msg *capnp.Message) (Graph_hasEdgeBetween_Results, error) {
	root, err := msg.Root()
	return Graph_hasEdgeBetween_Results{root.Struct()}, err
}

func (s Graph_hasEdgeBetween_Results) String() string {
	str, _ := text.Marshal(0x9aa329db62ea678c, s.Struct)
	return str
}

func (s Graph_hasEdgeBetween_Results) Connected() bool {
	return s.Struct.Bit(0)
}

func (s Graph_hasEdgeBetween_Results) SetConnected(v bool) {
	s.Struct.SetBit(0, v)
}

// Graph_hasEdgeBetween_Results_List is a list of Graph_hasEdgeBetween_Results.
type Graph_hasEdgeBetween_Results_List = capnp.StructList[Graph_hasEdgeBetween_Results]

// NewGraph_hasEdgeBetween_Results creates a new list of Graph_hasEdgeBetween_Results.
func NewGraph_hasEdgeBetween_Results_List(s *capnp.Segment, sz int32) (Graph_hasEdgeBetween_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Graph_hasEdgeBetween_Results]{List: l}, err
}

// Graph_hasEdgeBetween_Results_Future is a wrapper for a Graph_hasEdgeBetween_Results promised by a client call.
type Graph_hasEdgeBetween_Results_Future struct{ *capnp.Future }

func (p Graph_hasEdgeBetween_Results_Future) Struct() (Graph_hasEdgeBetween_Results, error) {
	s, err := p.Future.Struct()
	return Graph_hasEdgeBetween_Results{s}, err
}

type Graph_edge_Params struct{ capnp.Struct }

// Graph_edge_Params_TypeID is the unique identifier for the type Graph_edge_Params.
const Graph_edge_Params_TypeID = 0xc85baacdea364d8d

func NewGraph_edge_Params(s *capnp.Segment) (Graph_edge_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Graph_edge_Params{st}, err
}

func NewRootGraph_edge_Params(s *capnp.Segment) (Graph_edge_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Graph_edge_Params{st}, err
}

func ReadRootGraph_edge_Params(msg *capnp.Message) (Graph_edge_Params, error) {
	root, err := msg.Root()
	return Graph_edge_Params{root.Struct()}, err
}

func (s Graph_edge_Params) String() string {
	str, _ := text.Marshal(0xc85baacdea364d8d, s.Struct)
	return str
}

func (s Graph_edge_Params) UId() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Graph_edge_Params) SetUId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Graph_edge_Params) VId() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Graph_edge_Params) SetVId(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// Graph_edge_Params_List is a list of Graph_edge_Params.
type Graph_edge_Params_List = capnp.StructList[Graph_edge_Params]

// NewGraph_edge_Params creates a new list of Graph_edge_Params.
func NewGraph_edge_Params_List(s *capnp.Segment, sz int32) (Graph_edge_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Graph_edge_Params]{List: l}, err
}

// Graph_edge_Params_Future is a wrapper for a Graph_edge_Params promised by a client call.
type Graph_edge_Params_Future struct{ *capnp.Future }

func (p Graph_edge_Params_Future) Struct() (Graph_edge_Params, error) {
	s, err := p.Future.Struct()
	return Graph_edge_Params{s}, err
}

type Graph_edge_Results struct{ capnp.Struct }

// Graph_edge_Results_TypeID is the unique identifier for the type Graph_edge_Results.
const Graph_edge_Results_TypeID = 0x80a0478a44baf5b7

func NewGraph_edge_Results(s *capnp.Segment) (Graph_edge_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_edge_Results{st}, err
}

func NewRootGraph_edge_Results(s *capnp.Segment) (Graph_edge_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Graph_edge_Results{st}, err
}

func ReadRootGraph_edge_Results(msg *capnp.Message) (Graph_edge_Results, error) {
	root, err := msg.Root()
	return Graph_edge_Results{root.Struct()}, err
}

func (s Graph_edge_Results) String() string {
	str, _ := text.Marshal(0x80a0478a44baf5b7, s.Struct)
	return str
}

func (s Graph_edge_Results) Edge() Edge {
	p, _ := s.Struct.Ptr(0)
	return Edge{Client: p.Interface().Client()}
}

func (s Graph_edge_Results) HasEdge() bool {
	return s.Struct.HasPtr(0)
}

func (s Graph_edge_Results) SetEdge(v Edge) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Graph_edge_Results_List is a list of Graph_edge_Results.
type Graph_edge_Results_List = capnp.StructList[Graph_edge_Results]

// NewGraph_edge_Results creates a new list of Graph_edge_Results.
func NewGraph_edge_Results_List(s *capnp.Segment, sz int32) (Graph_edge_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Graph_edge_Results]{List: l}, err
}

// Graph_edge_Results_Future is a wrapper for a Graph_edge_Results promised by a client call.
type Graph_edge_Results_Future struct{ *capnp.Future }

func (p Graph_edge_Results_Future) Struct() (Graph_edge_Results, error) {
	s, err := p.Future.Struct()
	return Graph_edge_Results{s}, err
}

func (p Graph_edge_Results_Future) Edge() Edge {
	return Edge{Client: p.Future.Field(0, nil).Client()}
}

type DirectedGraph struct{ Client capnp.Client }

// DirectedGraph_TypeID is the unique identifier for the type DirectedGraph.
const DirectedGraph_TypeID = 0xca335475fc06b787

func (c DirectedGraph) HasEdgeFromTo(ctx context.Context, params func(DirectedGraph_hasEdgeFromTo_Params) error) (DirectedGraph_hasEdgeFromTo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca335475fc06b787,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:DirectedGraph",
			MethodName:    "hasEdgeFromTo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DirectedGraph_hasEdgeFromTo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DirectedGraph_hasEdgeFromTo_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) To(ctx context.Context, params func(DirectedGraph_to_Params) error) (DirectedGraph_to_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca335475fc06b787,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:DirectedGraph",
			MethodName:    "to",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DirectedGraph_to_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DirectedGraph_to_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) Node(ctx context.Context, params func(Graph_node_Params) error) (Graph_node_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "node",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_node_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_node_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) Nodes(ctx context.Context, params func(Graph_nodes_Params) error) (Graph_nodes_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "nodes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_nodes_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_nodes_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) From(ctx context.Context, params func(Graph_from_Params) error) (Graph_from_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "from",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_from_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_from_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) HasEdgeBetween(ctx context.Context, params func(Graph_hasEdgeBetween_Params) error) (Graph_hasEdgeBetween_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "hasEdgeBetween",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_hasEdgeBetween_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_hasEdgeBetween_Results_Future{Future: ans.Future()}, release
}
func (c DirectedGraph) Edge(ctx context.Context, params func(Graph_edge_Params) error) (Graph_edge_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "edge",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Graph_edge_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Graph_edge_Results_Future{Future: ans.Future()}, release
}

func (c DirectedGraph) AddRef() DirectedGraph {
	return DirectedGraph{
		Client: c.Client.AddRef(),
	}
}

func (c DirectedGraph) Release() {
	c.Client.Release()
}

// A DirectedGraph_Server is a DirectedGraph with a local implementation.
type DirectedGraph_Server interface {
	HasEdgeFromTo(context.Context, DirectedGraph_hasEdgeFromTo) error

	To(context.Context, DirectedGraph_to) error

	Node(context.Context, Graph_node) error

	Nodes(context.Context, Graph_nodes) error

	From(context.Context, Graph_from) error

	HasEdgeBetween(context.Context, Graph_hasEdgeBetween) error

	Edge(context.Context, Graph_edge) error
}

// DirectedGraph_NewServer creates a new Server from an implementation of DirectedGraph_Server.
func DirectedGraph_NewServer(s DirectedGraph_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DirectedGraph_Methods(nil, s), s, c, policy)
}

// DirectedGraph_ServerToClient creates a new Client from an implementation of DirectedGraph_Server.
// The caller is responsible for calling Release on the returned Client.
func DirectedGraph_ServerToClient(s DirectedGraph_Server, policy *server.Policy) DirectedGraph {
	return DirectedGraph{Client: capnp.NewClient(DirectedGraph_NewServer(s, policy))}
}

// DirectedGraph_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DirectedGraph_Methods(methods []server.Method, s DirectedGraph_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca335475fc06b787,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:DirectedGraph",
			MethodName:    "hasEdgeFromTo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HasEdgeFromTo(ctx, DirectedGraph_hasEdgeFromTo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca335475fc06b787,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:DirectedGraph",
			MethodName:    "to",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.To(ctx, DirectedGraph_to{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "node",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Node(ctx, Graph_node{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "nodes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Nodes(ctx, Graph_nodes{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "from",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.From(ctx, Graph_from{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "hasEdgeBetween",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HasEdgeBetween(ctx, Graph_hasEdgeBetween{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc20098da5460c109,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:Graph",
			MethodName:    "edge",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Edge(ctx, Graph_edge{call})
		},
	})

	return methods
}

// DirectedGraph_hasEdgeFromTo holds the state for a server call to DirectedGraph.hasEdgeFromTo.
// See server.Call for documentation.
type DirectedGraph_hasEdgeFromTo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DirectedGraph_hasEdgeFromTo) Args() DirectedGraph_hasEdgeFromTo_Params {
	return DirectedGraph_hasEdgeFromTo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DirectedGraph_hasEdgeFromTo) AllocResults() (DirectedGraph_hasEdgeFromTo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DirectedGraph_hasEdgeFromTo_Results{Struct: r}, err
}

// DirectedGraph_to holds the state for a server call to DirectedGraph.to.
// See server.Call for documentation.
type DirectedGraph_to struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DirectedGraph_to) Args() DirectedGraph_to_Params {
	return DirectedGraph_to_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DirectedGraph_to) AllocResults() (DirectedGraph_to_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DirectedGraph_to_Results{Struct: r}, err
}

// DirectedGraph_List is a list of DirectedGraph.
type DirectedGraph_List = capnp.CapList[DirectedGraph]

// NewDirectedGraph creates a new list of DirectedGraph.
func NewDirectedGraph_List(s *capnp.Segment, sz int32) (DirectedGraph_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[DirectedGraph](l), err
}

type DirectedGraph_hasEdgeFromTo_Params struct{ capnp.Struct }

// DirectedGraph_hasEdgeFromTo_Params_TypeID is the unique identifier for the type DirectedGraph_hasEdgeFromTo_Params.
const DirectedGraph_hasEdgeFromTo_Params_TypeID = 0x84551ffd56015503

func NewDirectedGraph_hasEdgeFromTo_Params(s *capnp.Segment) (DirectedGraph_hasEdgeFromTo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DirectedGraph_hasEdgeFromTo_Params{st}, err
}

func NewRootDirectedGraph_hasEdgeFromTo_Params(s *capnp.Segment) (DirectedGraph_hasEdgeFromTo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DirectedGraph_hasEdgeFromTo_Params{st}, err
}

func ReadRootDirectedGraph_hasEdgeFromTo_Params(msg *capnp.Message) (DirectedGraph_hasEdgeFromTo_Params, error) {
	root, err := msg.Root()
	return DirectedGraph_hasEdgeFromTo_Params{root.Struct()}, err
}

func (s DirectedGraph_hasEdgeFromTo_Params) String() string {
	str, _ := text.Marshal(0x84551ffd56015503, s.Struct)
	return str
}

func (s DirectedGraph_hasEdgeFromTo_Params) UId() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s DirectedGraph_hasEdgeFromTo_Params) SetUId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s DirectedGraph_hasEdgeFromTo_Params) VId() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s DirectedGraph_hasEdgeFromTo_Params) SetVId(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// DirectedGraph_hasEdgeFromTo_Params_List is a list of DirectedGraph_hasEdgeFromTo_Params.
type DirectedGraph_hasEdgeFromTo_Params_List = capnp.StructList[DirectedGraph_hasEdgeFromTo_Params]

// NewDirectedGraph_hasEdgeFromTo_Params creates a new list of DirectedGraph_hasEdgeFromTo_Params.
func NewDirectedGraph_hasEdgeFromTo_Params_List(s *capnp.Segment, sz int32) (DirectedGraph_hasEdgeFromTo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DirectedGraph_hasEdgeFromTo_Params]{List: l}, err
}

// DirectedGraph_hasEdgeFromTo_Params_Future is a wrapper for a DirectedGraph_hasEdgeFromTo_Params promised by a client call.
type DirectedGraph_hasEdgeFromTo_Params_Future struct{ *capnp.Future }

func (p DirectedGraph_hasEdgeFromTo_Params_Future) Struct() (DirectedGraph_hasEdgeFromTo_Params, error) {
	s, err := p.Future.Struct()
	return DirectedGraph_hasEdgeFromTo_Params{s}, err
}

type DirectedGraph_hasEdgeFromTo_Results struct{ capnp.Struct }

// DirectedGraph_hasEdgeFromTo_Results_TypeID is the unique identifier for the type DirectedGraph_hasEdgeFromTo_Results.
const DirectedGraph_hasEdgeFromTo_Results_TypeID = 0xdda85ed5aea8e3b8

func NewDirectedGraph_hasEdgeFromTo_Results(s *capnp.Segment) (DirectedGraph_hasEdgeFromTo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DirectedGraph_hasEdgeFromTo_Results{st}, err
}

func NewRootDirectedGraph_hasEdgeFromTo_Results(s *capnp.Segment) (DirectedGraph_hasEdgeFromTo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DirectedGraph_hasEdgeFromTo_Results{st}, err
}

func ReadRootDirectedGraph_hasEdgeFromTo_Results(msg *capnp.Message) (DirectedGraph_hasEdgeFromTo_Results, error) {
	root, err := msg.Root()
	return DirectedGraph_hasEdgeFromTo_Results{root.Struct()}, err
}

func (s DirectedGraph_hasEdgeFromTo_Results) String() string {
	str, _ := text.Marshal(0xdda85ed5aea8e3b8, s.Struct)
	return str
}

func (s DirectedGraph_hasEdgeFromTo_Results) Connected() bool {
	return s.Struct.Bit(0)
}

func (s DirectedGraph_hasEdgeFromTo_Results) SetConnected(v bool) {
	s.Struct.SetBit(0, v)
}

// DirectedGraph_hasEdgeFromTo_Results_List is a list of DirectedGraph_hasEdgeFromTo_Results.
type DirectedGraph_hasEdgeFromTo_Results_List = capnp.StructList[DirectedGraph_hasEdgeFromTo_Results]

// NewDirectedGraph_hasEdgeFromTo_Results creates a new list of DirectedGraph_hasEdgeFromTo_Results.
func NewDirectedGraph_hasEdgeFromTo_Results_List(s *capnp.Segment, sz int32) (DirectedGraph_hasEdgeFromTo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DirectedGraph_hasEdgeFromTo_Results]{List: l}, err
}

// DirectedGraph_hasEdgeFromTo_Results_Future is a wrapper for a DirectedGraph_hasEdgeFromTo_Results promised by a client call.
type DirectedGraph_hasEdgeFromTo_Results_Future struct{ *capnp.Future }

func (p DirectedGraph_hasEdgeFromTo_Results_Future) Struct() (DirectedGraph_hasEdgeFromTo_Results, error) {
	s, err := p.Future.Struct()
	return DirectedGraph_hasEdgeFromTo_Results{s}, err
}

type DirectedGraph_to_Params struct{ capnp.Struct }

// DirectedGraph_to_Params_TypeID is the unique identifier for the type DirectedGraph_to_Params.
const DirectedGraph_to_Params_TypeID = 0xe4cd34f8ffccea01

func NewDirectedGraph_to_Params(s *capnp.Segment) (DirectedGraph_to_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DirectedGraph_to_Params{st}, err
}

func NewRootDirectedGraph_to_Params(s *capnp.Segment) (DirectedGraph_to_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DirectedGraph_to_Params{st}, err
}

func ReadRootDirectedGraph_to_Params(msg *capnp.Message) (DirectedGraph_to_Params, error) {
	root, err := msg.Root()
	return DirectedGraph_to_Params{root.Struct()}, err
}

func (s DirectedGraph_to_Params) String() string {
	str, _ := text.Marshal(0xe4cd34f8ffccea01, s.Struct)
	return str
}

func (s DirectedGraph_to_Params) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s DirectedGraph_to_Params) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// DirectedGraph_to_Params_List is a list of DirectedGraph_to_Params.
type DirectedGraph_to_Params_List = capnp.StructList[DirectedGraph_to_Params]

// NewDirectedGraph_to_Params creates a new list of DirectedGraph_to_Params.
func NewDirectedGraph_to_Params_List(s *capnp.Segment, sz int32) (DirectedGraph_to_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DirectedGraph_to_Params]{List: l}, err
}

// DirectedGraph_to_Params_Future is a wrapper for a DirectedGraph_to_Params promised by a client call.
type DirectedGraph_to_Params_Future struct{ *capnp.Future }

func (p DirectedGraph_to_Params_Future) Struct() (DirectedGraph_to_Params, error) {
	s, err := p.Future.Struct()
	return DirectedGraph_to_Params{s}, err
}

type DirectedGraph_to_Results struct{ capnp.Struct }

// DirectedGraph_to_Results_TypeID is the unique identifier for the type DirectedGraph_to_Results.
const DirectedGraph_to_Results_TypeID = 0x83fc0f4a88453a21

func NewDirectedGraph_to_Results(s *capnp.Segment) (DirectedGraph_to_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DirectedGraph_to_Results{st}, err
}

func NewRootDirectedGraph_to_Results(s *capnp.Segment) (DirectedGraph_to_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DirectedGraph_to_Results{st}, err
}

func ReadRootDirectedGraph_to_Results(msg *capnp.Message) (DirectedGraph_to_Results, error) {
	root, err := msg.Root()
	return DirectedGraph_to_Results{root.Struct()}, err
}

func (s DirectedGraph_to_Results) String() string {
	str, _ := text.Marshal(0x83fc0f4a88453a21, s.Struct)
	return str
}

func (s DirectedGraph_to_Results) Nodes() (Node_List, error) {
	p, err := s.Struct.Ptr(0)
	return Node_List{List: p.List()}, err
}

func (s DirectedGraph_to_Results) HasNodes() bool {
	return s.Struct.HasPtr(0)
}

func (s DirectedGraph_to_Results) SetNodes(v Node_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Node_List, preferring placement in s's segment.
func (s DirectedGraph_to_Results) NewNodes(n int32) (Node_List, error) {
	l, err := NewNode_List(s.Struct.Segment(), n)
	if err != nil {
		return Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// DirectedGraph_to_Results_List is a list of DirectedGraph_to_Results.
type DirectedGraph_to_Results_List = capnp.StructList[DirectedGraph_to_Results]

// NewDirectedGraph_to_Results creates a new list of DirectedGraph_to_Results.
func NewDirectedGraph_to_Results_List(s *capnp.Segment, sz int32) (DirectedGraph_to_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DirectedGraph_to_Results]{List: l}, err
}

// DirectedGraph_to_Results_Future is a wrapper for a DirectedGraph_to_Results promised by a client call.
type DirectedGraph_to_Results_Future struct{ *capnp.Future }

func (p DirectedGraph_to_Results_Future) Struct() (DirectedGraph_to_Results, error) {
	s, err := p.Future.Struct()
	return DirectedGraph_to_Results{s}, err
}

type ServiceLibrary struct{ Client capnp.Client }

// ServiceLibrary_TypeID is the unique identifier for the type ServiceLibrary.
const ServiceLibrary_TypeID = 0x8930b538011a6d48

func (c ServiceLibrary) AddService(ctx context.Context, params func(ServiceLibrary_addService_Params) error) (ServiceLibrary_addService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "addService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_addService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_addService_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) AddServices(ctx context.Context, params func(ServiceLibrary_addServices_Params) error) (ServiceLibrary_addServices_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "addServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_addServices_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_addServices_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) GetService(ctx context.Context, params func(ServiceLibrary_getService_Params) error) (ServiceLibrary_getService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_getService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_getService_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) GetServices(ctx context.Context, params func(ServiceLibrary_getServices_Params) error) (ServiceLibrary_getServices_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_getServices_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_getServices_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) StartService(ctx context.Context, params func(ServiceLibrary_startService_Params) error) (ServiceLibrary_startService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "startService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_startService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_startService_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) StopService(ctx context.Context, params func(ServiceLibrary_stopService_Params) error) (ServiceLibrary_stopService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      5,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "stopService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_stopService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_stopService_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) StopServices(ctx context.Context, params func(ServiceLibrary_stopServices_Params) error) (ServiceLibrary_stopServices_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      6,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "stopServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_stopServices_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_stopServices_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) GetServiceStatus(ctx context.Context, params func(ServiceLibrary_getServiceStatus_Params) error) (ServiceLibrary_getServiceStatus_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      7,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServiceStatus",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_getServiceStatus_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_getServiceStatus_Results_Future{Future: ans.Future()}, release
}
func (c ServiceLibrary) GetServiceStatuses(ctx context.Context, params func(ServiceLibrary_getServiceStatuses_Params) error) (ServiceLibrary_getServiceStatuses_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      8,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServiceStatuses",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceLibrary_getServiceStatuses_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceLibrary_getServiceStatuses_Results_Future{Future: ans.Future()}, release
}

func (c ServiceLibrary) AddRef() ServiceLibrary {
	return ServiceLibrary{
		Client: c.Client.AddRef(),
	}
}

func (c ServiceLibrary) Release() {
	c.Client.Release()
}

// A ServiceLibrary_Server is a ServiceLibrary with a local implementation.
type ServiceLibrary_Server interface {
	AddService(context.Context, ServiceLibrary_addService) error

	AddServices(context.Context, ServiceLibrary_addServices) error

	GetService(context.Context, ServiceLibrary_getService) error

	GetServices(context.Context, ServiceLibrary_getServices) error

	StartService(context.Context, ServiceLibrary_startService) error

	StopService(context.Context, ServiceLibrary_stopService) error

	StopServices(context.Context, ServiceLibrary_stopServices) error

	GetServiceStatus(context.Context, ServiceLibrary_getServiceStatus) error

	GetServiceStatuses(context.Context, ServiceLibrary_getServiceStatuses) error
}

// ServiceLibrary_NewServer creates a new Server from an implementation of ServiceLibrary_Server.
func ServiceLibrary_NewServer(s ServiceLibrary_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceLibrary_Methods(nil, s), s, c, policy)
}

// ServiceLibrary_ServerToClient creates a new Client from an implementation of ServiceLibrary_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceLibrary_ServerToClient(s ServiceLibrary_Server, policy *server.Policy) ServiceLibrary {
	return ServiceLibrary{Client: capnp.NewClient(ServiceLibrary_NewServer(s, policy))}
}

// ServiceLibrary_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceLibrary_Methods(methods []server.Method, s ServiceLibrary_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "addService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddService(ctx, ServiceLibrary_addService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      1,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "addServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddServices(ctx, ServiceLibrary_addServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      2,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetService(ctx, ServiceLibrary_getService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      3,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServices(ctx, ServiceLibrary_getServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      4,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "startService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartService(ctx, ServiceLibrary_startService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      5,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "stopService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StopService(ctx, ServiceLibrary_stopService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      6,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "stopServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StopServices(ctx, ServiceLibrary_stopServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      7,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServiceStatus",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceStatus(ctx, ServiceLibrary_getServiceStatus{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8930b538011a6d48,
			MethodID:      8,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceLibrary",
			MethodName:    "getServiceStatuses",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceStatuses(ctx, ServiceLibrary_getServiceStatuses{call})
		},
	})

	return methods
}

// ServiceLibrary_addService holds the state for a server call to ServiceLibrary.addService.
// See server.Call for documentation.
type ServiceLibrary_addService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_addService) Args() ServiceLibrary_addService_Params {
	return ServiceLibrary_addService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_addService) AllocResults() (ServiceLibrary_addService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addService_Results{Struct: r}, err
}

// ServiceLibrary_addServices holds the state for a server call to ServiceLibrary.addServices.
// See server.Call for documentation.
type ServiceLibrary_addServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_addServices) Args() ServiceLibrary_addServices_Params {
	return ServiceLibrary_addServices_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_addServices) AllocResults() (ServiceLibrary_addServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addServices_Results{Struct: r}, err
}

// ServiceLibrary_getService holds the state for a server call to ServiceLibrary.getService.
// See server.Call for documentation.
type ServiceLibrary_getService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_getService) Args() ServiceLibrary_getService_Params {
	return ServiceLibrary_getService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_getService) AllocResults() (ServiceLibrary_getService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getService_Results{Struct: r}, err
}

// ServiceLibrary_getServices holds the state for a server call to ServiceLibrary.getServices.
// See server.Call for documentation.
type ServiceLibrary_getServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_getServices) Args() ServiceLibrary_getServices_Params {
	return ServiceLibrary_getServices_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_getServices) AllocResults() (ServiceLibrary_getServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getServices_Results{Struct: r}, err
}

// ServiceLibrary_startService holds the state for a server call to ServiceLibrary.startService.
// See server.Call for documentation.
type ServiceLibrary_startService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_startService) Args() ServiceLibrary_startService_Params {
	return ServiceLibrary_startService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_startService) AllocResults() (ServiceLibrary_startService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_startService_Results{Struct: r}, err
}

// ServiceLibrary_stopService holds the state for a server call to ServiceLibrary.stopService.
// See server.Call for documentation.
type ServiceLibrary_stopService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_stopService) Args() ServiceLibrary_stopService_Params {
	return ServiceLibrary_stopService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_stopService) AllocResults() (ServiceLibrary_stopService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopService_Results{Struct: r}, err
}

// ServiceLibrary_stopServices holds the state for a server call to ServiceLibrary.stopServices.
// See server.Call for documentation.
type ServiceLibrary_stopServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_stopServices) Args() ServiceLibrary_stopServices_Params {
	return ServiceLibrary_stopServices_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_stopServices) AllocResults() (ServiceLibrary_stopServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopServices_Results{Struct: r}, err
}

// ServiceLibrary_getServiceStatus holds the state for a server call to ServiceLibrary.getServiceStatus.
// See server.Call for documentation.
type ServiceLibrary_getServiceStatus struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_getServiceStatus) Args() ServiceLibrary_getServiceStatus_Params {
	return ServiceLibrary_getServiceStatus_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_getServiceStatus) AllocResults() (ServiceLibrary_getServiceStatus_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatus_Results{Struct: r}, err
}

// ServiceLibrary_getServiceStatuses holds the state for a server call to ServiceLibrary.getServiceStatuses.
// See server.Call for documentation.
type ServiceLibrary_getServiceStatuses struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceLibrary_getServiceStatuses) Args() ServiceLibrary_getServiceStatuses_Params {
	return ServiceLibrary_getServiceStatuses_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceLibrary_getServiceStatuses) AllocResults() (ServiceLibrary_getServiceStatuses_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatuses_Results{Struct: r}, err
}

// ServiceLibrary_List is a list of ServiceLibrary.
type ServiceLibrary_List = capnp.CapList[ServiceLibrary]

// NewServiceLibrary creates a new list of ServiceLibrary.
func NewServiceLibrary_List(s *capnp.Segment, sz int32) (ServiceLibrary_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceLibrary](l), err
}

type ServiceLibrary_addService_Params struct{ capnp.Struct }

// ServiceLibrary_addService_Params_TypeID is the unique identifier for the type ServiceLibrary_addService_Params.
const ServiceLibrary_addService_Params_TypeID = 0x96be6c6b7c208630

func NewServiceLibrary_addService_Params(s *capnp.Segment) (ServiceLibrary_addService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addService_Params{st}, err
}

func NewRootServiceLibrary_addService_Params(s *capnp.Segment) (ServiceLibrary_addService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addService_Params{st}, err
}

func ReadRootServiceLibrary_addService_Params(msg *capnp.Message) (ServiceLibrary_addService_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_addService_Params{root.Struct()}, err
}

func (s ServiceLibrary_addService_Params) String() string {
	str, _ := text.Marshal(0x96be6c6b7c208630, s.Struct)
	return str
}

func (s ServiceLibrary_addService_Params) Svc() Service {
	p, _ := s.Struct.Ptr(0)
	return Service{Client: p.Interface().Client()}
}

func (s ServiceLibrary_addService_Params) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_addService_Params) SetSvc(v Service) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ServiceLibrary_addService_Params_List is a list of ServiceLibrary_addService_Params.
type ServiceLibrary_addService_Params_List = capnp.StructList[ServiceLibrary_addService_Params]

// NewServiceLibrary_addService_Params creates a new list of ServiceLibrary_addService_Params.
func NewServiceLibrary_addService_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_addService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_addService_Params]{List: l}, err
}

// ServiceLibrary_addService_Params_Future is a wrapper for a ServiceLibrary_addService_Params promised by a client call.
type ServiceLibrary_addService_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_addService_Params_Future) Struct() (ServiceLibrary_addService_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_addService_Params{s}, err
}

func (p ServiceLibrary_addService_Params_Future) Svc() Service {
	return Service{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_addService_Results struct{ capnp.Struct }

// ServiceLibrary_addService_Results_TypeID is the unique identifier for the type ServiceLibrary_addService_Results.
const ServiceLibrary_addService_Results_TypeID = 0xa21e52797a55b441

func NewServiceLibrary_addService_Results(s *capnp.Segment) (ServiceLibrary_addService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addService_Results{st}, err
}

func NewRootServiceLibrary_addService_Results(s *capnp.Segment) (ServiceLibrary_addService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addService_Results{st}, err
}

func ReadRootServiceLibrary_addService_Results(msg *capnp.Message) (ServiceLibrary_addService_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_addService_Results{root.Struct()}, err
}

func (s ServiceLibrary_addService_Results) String() string {
	str, _ := text.Marshal(0xa21e52797a55b441, s.Struct)
	return str
}

func (s ServiceLibrary_addService_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_addService_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_addService_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_addService_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_addService_Results_List is a list of ServiceLibrary_addService_Results.
type ServiceLibrary_addService_Results_List = capnp.StructList[ServiceLibrary_addService_Results]

// NewServiceLibrary_addService_Results creates a new list of ServiceLibrary_addService_Results.
func NewServiceLibrary_addService_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_addService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_addService_Results]{List: l}, err
}

// ServiceLibrary_addService_Results_Future is a wrapper for a ServiceLibrary_addService_Results promised by a client call.
type ServiceLibrary_addService_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_addService_Results_Future) Struct() (ServiceLibrary_addService_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_addService_Results{s}, err
}

type ServiceLibrary_addServices_Params struct{ capnp.Struct }

// ServiceLibrary_addServices_Params_TypeID is the unique identifier for the type ServiceLibrary_addServices_Params.
const ServiceLibrary_addServices_Params_TypeID = 0xa5c0950917c3ef59

func NewServiceLibrary_addServices_Params(s *capnp.Segment) (ServiceLibrary_addServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addServices_Params{st}, err
}

func NewRootServiceLibrary_addServices_Params(s *capnp.Segment) (ServiceLibrary_addServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addServices_Params{st}, err
}

func ReadRootServiceLibrary_addServices_Params(msg *capnp.Message) (ServiceLibrary_addServices_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_addServices_Params{root.Struct()}, err
}

func (s ServiceLibrary_addServices_Params) String() string {
	str, _ := text.Marshal(0xa5c0950917c3ef59, s.Struct)
	return str
}

func (s ServiceLibrary_addServices_Params) Svcs() (Service_List, error) {
	p, err := s.Struct.Ptr(0)
	return Service_List{List: p.List()}, err
}

func (s ServiceLibrary_addServices_Params) HasSvcs() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_addServices_Params) SetSvcs(v Service_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSvcs sets the svcs field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceLibrary_addServices_Params) NewSvcs(n int32) (Service_List, error) {
	l, err := NewService_List(s.Struct.Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceLibrary_addServices_Params_List is a list of ServiceLibrary_addServices_Params.
type ServiceLibrary_addServices_Params_List = capnp.StructList[ServiceLibrary_addServices_Params]

// NewServiceLibrary_addServices_Params creates a new list of ServiceLibrary_addServices_Params.
func NewServiceLibrary_addServices_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_addServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_addServices_Params]{List: l}, err
}

// ServiceLibrary_addServices_Params_Future is a wrapper for a ServiceLibrary_addServices_Params promised by a client call.
type ServiceLibrary_addServices_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_addServices_Params_Future) Struct() (ServiceLibrary_addServices_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_addServices_Params{s}, err
}

type ServiceLibrary_addServices_Results struct{ capnp.Struct }

// ServiceLibrary_addServices_Results_TypeID is the unique identifier for the type ServiceLibrary_addServices_Results.
const ServiceLibrary_addServices_Results_TypeID = 0x8f1ab624a1406391

func NewServiceLibrary_addServices_Results(s *capnp.Segment) (ServiceLibrary_addServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addServices_Results{st}, err
}

func NewRootServiceLibrary_addServices_Results(s *capnp.Segment) (ServiceLibrary_addServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_addServices_Results{st}, err
}

func ReadRootServiceLibrary_addServices_Results(msg *capnp.Message) (ServiceLibrary_addServices_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_addServices_Results{root.Struct()}, err
}

func (s ServiceLibrary_addServices_Results) String() string {
	str, _ := text.Marshal(0x8f1ab624a1406391, s.Struct)
	return str
}

func (s ServiceLibrary_addServices_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_addServices_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_addServices_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_addServices_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_addServices_Results_List is a list of ServiceLibrary_addServices_Results.
type ServiceLibrary_addServices_Results_List = capnp.StructList[ServiceLibrary_addServices_Results]

// NewServiceLibrary_addServices_Results creates a new list of ServiceLibrary_addServices_Results.
func NewServiceLibrary_addServices_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_addServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_addServices_Results]{List: l}, err
}

// ServiceLibrary_addServices_Results_Future is a wrapper for a ServiceLibrary_addServices_Results promised by a client call.
type ServiceLibrary_addServices_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_addServices_Results_Future) Struct() (ServiceLibrary_addServices_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_addServices_Results{s}, err
}

type ServiceLibrary_getService_Params struct{ capnp.Struct }

// ServiceLibrary_getService_Params_TypeID is the unique identifier for the type ServiceLibrary_getService_Params.
const ServiceLibrary_getService_Params_TypeID = 0x8e6a3cc6cbb68627

func NewServiceLibrary_getService_Params(s *capnp.Segment) (ServiceLibrary_getService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getService_Params{st}, err
}

func NewRootServiceLibrary_getService_Params(s *capnp.Segment) (ServiceLibrary_getService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getService_Params{st}, err
}

func ReadRootServiceLibrary_getService_Params(msg *capnp.Message) (ServiceLibrary_getService_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_getService_Params{root.Struct()}, err
}

func (s ServiceLibrary_getService_Params) String() string {
	str, _ := text.Marshal(0x8e6a3cc6cbb68627, s.Struct)
	return str
}

func (s ServiceLibrary_getService_Params) Svc() Service {
	p, _ := s.Struct.Ptr(0)
	return Service{Client: p.Interface().Client()}
}

func (s ServiceLibrary_getService_Params) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getService_Params) SetSvc(v Service) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ServiceLibrary_getService_Params_List is a list of ServiceLibrary_getService_Params.
type ServiceLibrary_getService_Params_List = capnp.StructList[ServiceLibrary_getService_Params]

// NewServiceLibrary_getService_Params creates a new list of ServiceLibrary_getService_Params.
func NewServiceLibrary_getService_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_getService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getService_Params]{List: l}, err
}

// ServiceLibrary_getService_Params_Future is a wrapper for a ServiceLibrary_getService_Params promised by a client call.
type ServiceLibrary_getService_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_getService_Params_Future) Struct() (ServiceLibrary_getService_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getService_Params{s}, err
}

func (p ServiceLibrary_getService_Params_Future) Svc() Service {
	return Service{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_getService_Results struct{ capnp.Struct }

// ServiceLibrary_getService_Results_TypeID is the unique identifier for the type ServiceLibrary_getService_Results.
const ServiceLibrary_getService_Results_TypeID = 0xf450b7e94e249a67

func NewServiceLibrary_getService_Results(s *capnp.Segment) (ServiceLibrary_getService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getService_Results{st}, err
}

func NewRootServiceLibrary_getService_Results(s *capnp.Segment) (ServiceLibrary_getService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getService_Results{st}, err
}

func ReadRootServiceLibrary_getService_Results(msg *capnp.Message) (ServiceLibrary_getService_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_getService_Results{root.Struct()}, err
}

func (s ServiceLibrary_getService_Results) String() string {
	str, _ := text.Marshal(0xf450b7e94e249a67, s.Struct)
	return str
}

func (s ServiceLibrary_getService_Results) Svc() Service {
	p, _ := s.Struct.Ptr(0)
	return Service{Client: p.Interface().Client()}
}

func (s ServiceLibrary_getService_Results) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getService_Results) SetSvc(v Service) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s ServiceLibrary_getService_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ServiceLibrary_getService_Results) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s ServiceLibrary_getService_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceLibrary_getService_Results) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// ServiceLibrary_getService_Results_List is a list of ServiceLibrary_getService_Results.
type ServiceLibrary_getService_Results_List = capnp.StructList[ServiceLibrary_getService_Results]

// NewServiceLibrary_getService_Results creates a new list of ServiceLibrary_getService_Results.
func NewServiceLibrary_getService_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_getService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ServiceLibrary_getService_Results]{List: l}, err
}

// ServiceLibrary_getService_Results_Future is a wrapper for a ServiceLibrary_getService_Results promised by a client call.
type ServiceLibrary_getService_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_getService_Results_Future) Struct() (ServiceLibrary_getService_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getService_Results{s}, err
}

func (p ServiceLibrary_getService_Results_Future) Svc() Service {
	return Service{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_getServices_Params struct{ capnp.Struct }

// ServiceLibrary_getServices_Params_TypeID is the unique identifier for the type ServiceLibrary_getServices_Params.
const ServiceLibrary_getServices_Params_TypeID = 0xf898401e67ff5afe

func NewServiceLibrary_getServices_Params(s *capnp.Segment) (ServiceLibrary_getServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServices_Params{st}, err
}

func NewRootServiceLibrary_getServices_Params(s *capnp.Segment) (ServiceLibrary_getServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServices_Params{st}, err
}

func ReadRootServiceLibrary_getServices_Params(msg *capnp.Message) (ServiceLibrary_getServices_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServices_Params{root.Struct()}, err
}

func (s ServiceLibrary_getServices_Params) String() string {
	str, _ := text.Marshal(0xf898401e67ff5afe, s.Struct)
	return str
}

func (s ServiceLibrary_getServices_Params) Svcs() (Service_List, error) {
	p, err := s.Struct.Ptr(0)
	return Service_List{List: p.List()}, err
}

func (s ServiceLibrary_getServices_Params) HasSvcs() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServices_Params) SetSvcs(v Service_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSvcs sets the svcs field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceLibrary_getServices_Params) NewSvcs(n int32) (Service_List, error) {
	l, err := NewService_List(s.Struct.Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceLibrary_getServices_Params_List is a list of ServiceLibrary_getServices_Params.
type ServiceLibrary_getServices_Params_List = capnp.StructList[ServiceLibrary_getServices_Params]

// NewServiceLibrary_getServices_Params creates a new list of ServiceLibrary_getServices_Params.
func NewServiceLibrary_getServices_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getServices_Params]{List: l}, err
}

// ServiceLibrary_getServices_Params_Future is a wrapper for a ServiceLibrary_getServices_Params promised by a client call.
type ServiceLibrary_getServices_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServices_Params_Future) Struct() (ServiceLibrary_getServices_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServices_Params{s}, err
}

type ServiceLibrary_getServices_Results struct{ capnp.Struct }

// ServiceLibrary_getServices_Results_TypeID is the unique identifier for the type ServiceLibrary_getServices_Results.
const ServiceLibrary_getServices_Results_TypeID = 0x8703fa2559f00c00

func NewServiceLibrary_getServices_Results(s *capnp.Segment) (ServiceLibrary_getServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getServices_Results{st}, err
}

func NewRootServiceLibrary_getServices_Results(s *capnp.Segment) (ServiceLibrary_getServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceLibrary_getServices_Results{st}, err
}

func ReadRootServiceLibrary_getServices_Results(msg *capnp.Message) (ServiceLibrary_getServices_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServices_Results{root.Struct()}, err
}

func (s ServiceLibrary_getServices_Results) String() string {
	str, _ := text.Marshal(0x8703fa2559f00c00, s.Struct)
	return str
}

func (s ServiceLibrary_getServices_Results) Svcs() (Service_List, error) {
	p, err := s.Struct.Ptr(0)
	return Service_List{List: p.List()}, err
}

func (s ServiceLibrary_getServices_Results) HasSvcs() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServices_Results) SetSvcs(v Service_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSvcs sets the svcs field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceLibrary_getServices_Results) NewSvcs(n int32) (Service_List, error) {
	l, err := NewService_List(s.Struct.Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ServiceLibrary_getServices_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ServiceLibrary_getServices_Results) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s ServiceLibrary_getServices_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceLibrary_getServices_Results) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// ServiceLibrary_getServices_Results_List is a list of ServiceLibrary_getServices_Results.
type ServiceLibrary_getServices_Results_List = capnp.StructList[ServiceLibrary_getServices_Results]

// NewServiceLibrary_getServices_Results creates a new list of ServiceLibrary_getServices_Results.
func NewServiceLibrary_getServices_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ServiceLibrary_getServices_Results]{List: l}, err
}

// ServiceLibrary_getServices_Results_Future is a wrapper for a ServiceLibrary_getServices_Results promised by a client call.
type ServiceLibrary_getServices_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServices_Results_Future) Struct() (ServiceLibrary_getServices_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServices_Results{s}, err
}

type ServiceLibrary_startService_Params struct{ capnp.Struct }

// ServiceLibrary_startService_Params_TypeID is the unique identifier for the type ServiceLibrary_startService_Params.
const ServiceLibrary_startService_Params_TypeID = 0x97548400efb536ab

func NewServiceLibrary_startService_Params(s *capnp.Segment) (ServiceLibrary_startService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_startService_Params{st}, err
}

func NewRootServiceLibrary_startService_Params(s *capnp.Segment) (ServiceLibrary_startService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_startService_Params{st}, err
}

func ReadRootServiceLibrary_startService_Params(msg *capnp.Message) (ServiceLibrary_startService_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_startService_Params{root.Struct()}, err
}

func (s ServiceLibrary_startService_Params) String() string {
	str, _ := text.Marshal(0x97548400efb536ab, s.Struct)
	return str
}

func (s ServiceLibrary_startService_Params) Svc() Service {
	p, _ := s.Struct.Ptr(0)
	return Service{Client: p.Interface().Client()}
}

func (s ServiceLibrary_startService_Params) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_startService_Params) SetSvc(v Service) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s ServiceLibrary_startService_Params) Retry() bool {
	return s.Struct.Bit(0)
}

func (s ServiceLibrary_startService_Params) SetRetry(v bool) {
	s.Struct.SetBit(0, v)
}

// ServiceLibrary_startService_Params_List is a list of ServiceLibrary_startService_Params.
type ServiceLibrary_startService_Params_List = capnp.StructList[ServiceLibrary_startService_Params]

// NewServiceLibrary_startService_Params creates a new list of ServiceLibrary_startService_Params.
func NewServiceLibrary_startService_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_startService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_startService_Params]{List: l}, err
}

// ServiceLibrary_startService_Params_Future is a wrapper for a ServiceLibrary_startService_Params promised by a client call.
type ServiceLibrary_startService_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_startService_Params_Future) Struct() (ServiceLibrary_startService_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_startService_Params{s}, err
}

func (p ServiceLibrary_startService_Params_Future) Svc() Service {
	return Service{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_startService_Results struct{ capnp.Struct }

// ServiceLibrary_startService_Results_TypeID is the unique identifier for the type ServiceLibrary_startService_Results.
const ServiceLibrary_startService_Results_TypeID = 0x8d8acd47d84dd0f6

func NewServiceLibrary_startService_Results(s *capnp.Segment) (ServiceLibrary_startService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_startService_Results{st}, err
}

func NewRootServiceLibrary_startService_Results(s *capnp.Segment) (ServiceLibrary_startService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_startService_Results{st}, err
}

func ReadRootServiceLibrary_startService_Results(msg *capnp.Message) (ServiceLibrary_startService_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_startService_Results{root.Struct()}, err
}

func (s ServiceLibrary_startService_Results) String() string {
	str, _ := text.Marshal(0x8d8acd47d84dd0f6, s.Struct)
	return str
}

func (s ServiceLibrary_startService_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_startService_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_startService_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_startService_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_startService_Results_List is a list of ServiceLibrary_startService_Results.
type ServiceLibrary_startService_Results_List = capnp.StructList[ServiceLibrary_startService_Results]

// NewServiceLibrary_startService_Results creates a new list of ServiceLibrary_startService_Results.
func NewServiceLibrary_startService_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_startService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_startService_Results]{List: l}, err
}

// ServiceLibrary_startService_Results_Future is a wrapper for a ServiceLibrary_startService_Results promised by a client call.
type ServiceLibrary_startService_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_startService_Results_Future) Struct() (ServiceLibrary_startService_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_startService_Results{s}, err
}

type ServiceLibrary_stopService_Params struct{ capnp.Struct }

// ServiceLibrary_stopService_Params_TypeID is the unique identifier for the type ServiceLibrary_stopService_Params.
const ServiceLibrary_stopService_Params_TypeID = 0x9f027b38b5d831c3

func NewServiceLibrary_stopService_Params(s *capnp.Segment) (ServiceLibrary_stopService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_stopService_Params{st}, err
}

func NewRootServiceLibrary_stopService_Params(s *capnp.Segment) (ServiceLibrary_stopService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_stopService_Params{st}, err
}

func ReadRootServiceLibrary_stopService_Params(msg *capnp.Message) (ServiceLibrary_stopService_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_stopService_Params{root.Struct()}, err
}

func (s ServiceLibrary_stopService_Params) String() string {
	str, _ := text.Marshal(0x9f027b38b5d831c3, s.Struct)
	return str
}

func (s ServiceLibrary_stopService_Params) Retry() bool {
	return s.Struct.Bit(0)
}

func (s ServiceLibrary_stopService_Params) SetRetry(v bool) {
	s.Struct.SetBit(0, v)
}

func (s ServiceLibrary_stopService_Params) Force() bool {
	return s.Struct.Bit(1)
}

func (s ServiceLibrary_stopService_Params) SetForce(v bool) {
	s.Struct.SetBit(1, v)
}

func (s ServiceLibrary_stopService_Params) Svc() Service {
	p, _ := s.Struct.Ptr(0)
	return Service{Client: p.Interface().Client()}
}

func (s ServiceLibrary_stopService_Params) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_stopService_Params) SetSvc(v Service) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ServiceLibrary_stopService_Params_List is a list of ServiceLibrary_stopService_Params.
type ServiceLibrary_stopService_Params_List = capnp.StructList[ServiceLibrary_stopService_Params]

// NewServiceLibrary_stopService_Params creates a new list of ServiceLibrary_stopService_Params.
func NewServiceLibrary_stopService_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_stopService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_stopService_Params]{List: l}, err
}

// ServiceLibrary_stopService_Params_Future is a wrapper for a ServiceLibrary_stopService_Params promised by a client call.
type ServiceLibrary_stopService_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_stopService_Params_Future) Struct() (ServiceLibrary_stopService_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_stopService_Params{s}, err
}

func (p ServiceLibrary_stopService_Params_Future) Svc() Service {
	return Service{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_stopService_Results struct{ capnp.Struct }

// ServiceLibrary_stopService_Results_TypeID is the unique identifier for the type ServiceLibrary_stopService_Results.
const ServiceLibrary_stopService_Results_TypeID = 0xfeb05f4147f3c518

func NewServiceLibrary_stopService_Results(s *capnp.Segment) (ServiceLibrary_stopService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopService_Results{st}, err
}

func NewRootServiceLibrary_stopService_Results(s *capnp.Segment) (ServiceLibrary_stopService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopService_Results{st}, err
}

func ReadRootServiceLibrary_stopService_Results(msg *capnp.Message) (ServiceLibrary_stopService_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_stopService_Results{root.Struct()}, err
}

func (s ServiceLibrary_stopService_Results) String() string {
	str, _ := text.Marshal(0xfeb05f4147f3c518, s.Struct)
	return str
}

func (s ServiceLibrary_stopService_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_stopService_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_stopService_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_stopService_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_stopService_Results_List is a list of ServiceLibrary_stopService_Results.
type ServiceLibrary_stopService_Results_List = capnp.StructList[ServiceLibrary_stopService_Results]

// NewServiceLibrary_stopService_Results creates a new list of ServiceLibrary_stopService_Results.
func NewServiceLibrary_stopService_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_stopService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_stopService_Results]{List: l}, err
}

// ServiceLibrary_stopService_Results_Future is a wrapper for a ServiceLibrary_stopService_Results promised by a client call.
type ServiceLibrary_stopService_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_stopService_Results_Future) Struct() (ServiceLibrary_stopService_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_stopService_Results{s}, err
}

type ServiceLibrary_stopServices_Params struct{ capnp.Struct }

// ServiceLibrary_stopServices_Params_TypeID is the unique identifier for the type ServiceLibrary_stopServices_Params.
const ServiceLibrary_stopServices_Params_TypeID = 0xab59043a27f1e493

func NewServiceLibrary_stopServices_Params(s *capnp.Segment) (ServiceLibrary_stopServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_stopServices_Params{st}, err
}

func NewRootServiceLibrary_stopServices_Params(s *capnp.Segment) (ServiceLibrary_stopServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceLibrary_stopServices_Params{st}, err
}

func ReadRootServiceLibrary_stopServices_Params(msg *capnp.Message) (ServiceLibrary_stopServices_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_stopServices_Params{root.Struct()}, err
}

func (s ServiceLibrary_stopServices_Params) String() string {
	str, _ := text.Marshal(0xab59043a27f1e493, s.Struct)
	return str
}

func (s ServiceLibrary_stopServices_Params) Retry() bool {
	return s.Struct.Bit(0)
}

func (s ServiceLibrary_stopServices_Params) SetRetry(v bool) {
	s.Struct.SetBit(0, v)
}

func (s ServiceLibrary_stopServices_Params) Force() bool {
	return s.Struct.Bit(1)
}

func (s ServiceLibrary_stopServices_Params) SetForce(v bool) {
	s.Struct.SetBit(1, v)
}

func (s ServiceLibrary_stopServices_Params) Svcs() (Service_List, error) {
	p, err := s.Struct.Ptr(0)
	return Service_List{List: p.List()}, err
}

func (s ServiceLibrary_stopServices_Params) HasSvcs() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_stopServices_Params) SetSvcs(v Service_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSvcs sets the svcs field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceLibrary_stopServices_Params) NewSvcs(n int32) (Service_List, error) {
	l, err := NewService_List(s.Struct.Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceLibrary_stopServices_Params_List is a list of ServiceLibrary_stopServices_Params.
type ServiceLibrary_stopServices_Params_List = capnp.StructList[ServiceLibrary_stopServices_Params]

// NewServiceLibrary_stopServices_Params creates a new list of ServiceLibrary_stopServices_Params.
func NewServiceLibrary_stopServices_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_stopServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_stopServices_Params]{List: l}, err
}

// ServiceLibrary_stopServices_Params_Future is a wrapper for a ServiceLibrary_stopServices_Params promised by a client call.
type ServiceLibrary_stopServices_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_stopServices_Params_Future) Struct() (ServiceLibrary_stopServices_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_stopServices_Params{s}, err
}

type ServiceLibrary_stopServices_Results struct{ capnp.Struct }

// ServiceLibrary_stopServices_Results_TypeID is the unique identifier for the type ServiceLibrary_stopServices_Results.
const ServiceLibrary_stopServices_Results_TypeID = 0xbde55697ebd0c77c

func NewServiceLibrary_stopServices_Results(s *capnp.Segment) (ServiceLibrary_stopServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopServices_Results{st}, err
}

func NewRootServiceLibrary_stopServices_Results(s *capnp.Segment) (ServiceLibrary_stopServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_stopServices_Results{st}, err
}

func ReadRootServiceLibrary_stopServices_Results(msg *capnp.Message) (ServiceLibrary_stopServices_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_stopServices_Results{root.Struct()}, err
}

func (s ServiceLibrary_stopServices_Results) String() string {
	str, _ := text.Marshal(0xbde55697ebd0c77c, s.Struct)
	return str
}

func (s ServiceLibrary_stopServices_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_stopServices_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_stopServices_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_stopServices_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_stopServices_Results_List is a list of ServiceLibrary_stopServices_Results.
type ServiceLibrary_stopServices_Results_List = capnp.StructList[ServiceLibrary_stopServices_Results]

// NewServiceLibrary_stopServices_Results creates a new list of ServiceLibrary_stopServices_Results.
func NewServiceLibrary_stopServices_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_stopServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_stopServices_Results]{List: l}, err
}

// ServiceLibrary_stopServices_Results_Future is a wrapper for a ServiceLibrary_stopServices_Results promised by a client call.
type ServiceLibrary_stopServices_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_stopServices_Results_Future) Struct() (ServiceLibrary_stopServices_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_stopServices_Results{s}, err
}

type ServiceLibrary_getServiceStatus_Params struct{ capnp.Struct }

// ServiceLibrary_getServiceStatus_Params_TypeID is the unique identifier for the type ServiceLibrary_getServiceStatus_Params.
const ServiceLibrary_getServiceStatus_Params_TypeID = 0xdbb469b8dbffb9a1

func NewServiceLibrary_getServiceStatus_Params(s *capnp.Segment) (ServiceLibrary_getServiceStatus_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatus_Params{st}, err
}

func NewRootServiceLibrary_getServiceStatus_Params(s *capnp.Segment) (ServiceLibrary_getServiceStatus_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatus_Params{st}, err
}

func ReadRootServiceLibrary_getServiceStatus_Params(msg *capnp.Message) (ServiceLibrary_getServiceStatus_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServiceStatus_Params{root.Struct()}, err
}

func (s ServiceLibrary_getServiceStatus_Params) String() string {
	str, _ := text.Marshal(0xdbb469b8dbffb9a1, s.Struct)
	return str
}

func (s ServiceLibrary_getServiceStatus_Params) Svc() ServiceStatus {
	p, _ := s.Struct.Ptr(0)
	return ServiceStatus{Client: p.Interface().Client()}
}

func (s ServiceLibrary_getServiceStatus_Params) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServiceStatus_Params) SetSvc(v ServiceStatus) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ServiceLibrary_getServiceStatus_Params_List is a list of ServiceLibrary_getServiceStatus_Params.
type ServiceLibrary_getServiceStatus_Params_List = capnp.StructList[ServiceLibrary_getServiceStatus_Params]

// NewServiceLibrary_getServiceStatus_Params creates a new list of ServiceLibrary_getServiceStatus_Params.
func NewServiceLibrary_getServiceStatus_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServiceStatus_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getServiceStatus_Params]{List: l}, err
}

// ServiceLibrary_getServiceStatus_Params_Future is a wrapper for a ServiceLibrary_getServiceStatus_Params promised by a client call.
type ServiceLibrary_getServiceStatus_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServiceStatus_Params_Future) Struct() (ServiceLibrary_getServiceStatus_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServiceStatus_Params{s}, err
}

func (p ServiceLibrary_getServiceStatus_Params_Future) Svc() ServiceStatus {
	return ServiceStatus{Client: p.Future.Field(0, nil).Client()}
}

type ServiceLibrary_getServiceStatus_Results struct{ capnp.Struct }

// ServiceLibrary_getServiceStatus_Results_TypeID is the unique identifier for the type ServiceLibrary_getServiceStatus_Results.
const ServiceLibrary_getServiceStatus_Results_TypeID = 0xdc72ab1aa482b4a4

func NewServiceLibrary_getServiceStatus_Results(s *capnp.Segment) (ServiceLibrary_getServiceStatus_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatus_Results{st}, err
}

func NewRootServiceLibrary_getServiceStatus_Results(s *capnp.Segment) (ServiceLibrary_getServiceStatus_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatus_Results{st}, err
}

func ReadRootServiceLibrary_getServiceStatus_Results(msg *capnp.Message) (ServiceLibrary_getServiceStatus_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServiceStatus_Results{root.Struct()}, err
}

func (s ServiceLibrary_getServiceStatus_Results) String() string {
	str, _ := text.Marshal(0xdc72ab1aa482b4a4, s.Struct)
	return str
}

func (s ServiceLibrary_getServiceStatus_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_getServiceStatus_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServiceStatus_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_getServiceStatus_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_getServiceStatus_Results_List is a list of ServiceLibrary_getServiceStatus_Results.
type ServiceLibrary_getServiceStatus_Results_List = capnp.StructList[ServiceLibrary_getServiceStatus_Results]

// NewServiceLibrary_getServiceStatus_Results creates a new list of ServiceLibrary_getServiceStatus_Results.
func NewServiceLibrary_getServiceStatus_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServiceStatus_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getServiceStatus_Results]{List: l}, err
}

// ServiceLibrary_getServiceStatus_Results_Future is a wrapper for a ServiceLibrary_getServiceStatus_Results promised by a client call.
type ServiceLibrary_getServiceStatus_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServiceStatus_Results_Future) Struct() (ServiceLibrary_getServiceStatus_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServiceStatus_Results{s}, err
}

type ServiceLibrary_getServiceStatuses_Params struct{ capnp.Struct }

// ServiceLibrary_getServiceStatuses_Params_TypeID is the unique identifier for the type ServiceLibrary_getServiceStatuses_Params.
const ServiceLibrary_getServiceStatuses_Params_TypeID = 0xaf52db82388939a4

func NewServiceLibrary_getServiceStatuses_Params(s *capnp.Segment) (ServiceLibrary_getServiceStatuses_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatuses_Params{st}, err
}

func NewRootServiceLibrary_getServiceStatuses_Params(s *capnp.Segment) (ServiceLibrary_getServiceStatuses_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatuses_Params{st}, err
}

func ReadRootServiceLibrary_getServiceStatuses_Params(msg *capnp.Message) (ServiceLibrary_getServiceStatuses_Params, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServiceStatuses_Params{root.Struct()}, err
}

func (s ServiceLibrary_getServiceStatuses_Params) String() string {
	str, _ := text.Marshal(0xaf52db82388939a4, s.Struct)
	return str
}

func (s ServiceLibrary_getServiceStatuses_Params) Svcs() (ServiceStatus_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceStatus_List{List: p.List()}, err
}

func (s ServiceLibrary_getServiceStatuses_Params) HasSvcs() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServiceStatuses_Params) SetSvcs(v ServiceStatus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSvcs sets the svcs field to a newly
// allocated ServiceStatus_List, preferring placement in s's segment.
func (s ServiceLibrary_getServiceStatuses_Params) NewSvcs(n int32) (ServiceStatus_List, error) {
	l, err := NewServiceStatus_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceStatus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceLibrary_getServiceStatuses_Params_List is a list of ServiceLibrary_getServiceStatuses_Params.
type ServiceLibrary_getServiceStatuses_Params_List = capnp.StructList[ServiceLibrary_getServiceStatuses_Params]

// NewServiceLibrary_getServiceStatuses_Params creates a new list of ServiceLibrary_getServiceStatuses_Params.
func NewServiceLibrary_getServiceStatuses_Params_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServiceStatuses_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getServiceStatuses_Params]{List: l}, err
}

// ServiceLibrary_getServiceStatuses_Params_Future is a wrapper for a ServiceLibrary_getServiceStatuses_Params promised by a client call.
type ServiceLibrary_getServiceStatuses_Params_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServiceStatuses_Params_Future) Struct() (ServiceLibrary_getServiceStatuses_Params, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServiceStatuses_Params{s}, err
}

type ServiceLibrary_getServiceStatuses_Results struct{ capnp.Struct }

// ServiceLibrary_getServiceStatuses_Results_TypeID is the unique identifier for the type ServiceLibrary_getServiceStatuses_Results.
const ServiceLibrary_getServiceStatuses_Results_TypeID = 0xe7a497ce5a948720

func NewServiceLibrary_getServiceStatuses_Results(s *capnp.Segment) (ServiceLibrary_getServiceStatuses_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatuses_Results{st}, err
}

func NewRootServiceLibrary_getServiceStatuses_Results(s *capnp.Segment) (ServiceLibrary_getServiceStatuses_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceLibrary_getServiceStatuses_Results{st}, err
}

func ReadRootServiceLibrary_getServiceStatuses_Results(msg *capnp.Message) (ServiceLibrary_getServiceStatuses_Results, error) {
	root, err := msg.Root()
	return ServiceLibrary_getServiceStatuses_Results{root.Struct()}, err
}

func (s ServiceLibrary_getServiceStatuses_Results) String() string {
	str, _ := text.Marshal(0xe7a497ce5a948720, s.Struct)
	return str
}

func (s ServiceLibrary_getServiceStatuses_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceLibrary_getServiceStatuses_Results) HasError() bool {
	return s.Struct.HasPtr(0)
}

func (s ServiceLibrary_getServiceStatuses_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceLibrary_getServiceStatuses_Results) SetError(v string) error {
	return s.Struct.SetText(0, v)
}

// ServiceLibrary_getServiceStatuses_Results_List is a list of ServiceLibrary_getServiceStatuses_Results.
type ServiceLibrary_getServiceStatuses_Results_List = capnp.StructList[ServiceLibrary_getServiceStatuses_Results]

// NewServiceLibrary_getServiceStatuses_Results creates a new list of ServiceLibrary_getServiceStatuses_Results.
func NewServiceLibrary_getServiceStatuses_Results_List(s *capnp.Segment, sz int32) (ServiceLibrary_getServiceStatuses_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceLibrary_getServiceStatuses_Results]{List: l}, err
}

// ServiceLibrary_getServiceStatuses_Results_Future is a wrapper for a ServiceLibrary_getServiceStatuses_Results promised by a client call.
type ServiceLibrary_getServiceStatuses_Results_Future struct{ *capnp.Future }

func (p ServiceLibrary_getServiceStatuses_Results_Future) Struct() (ServiceLibrary_getServiceStatuses_Results, error) {
	s, err := p.Future.Struct()
	return ServiceLibrary_getServiceStatuses_Results{s}, err
}

type ServiceStatus struct{ Client capnp.Client }

// ServiceStatus_TypeID is the unique identifier for the type ServiceStatus.
const ServiceStatus_TypeID = 0xfe5ad4396565b592

func (c ServiceStatus) Status(ctx context.Context, params func(ServiceStatus_status_Params) error) (ServiceStatus_status_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe5ad4396565b592,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceStatus",
			MethodName:    "status",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceStatus_status_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ServiceStatus_status_Results_Future{Future: ans.Future()}, release
}

func (c ServiceStatus) AddRef() ServiceStatus {
	return ServiceStatus{
		Client: c.Client.AddRef(),
	}
}

func (c ServiceStatus) Release() {
	c.Client.Release()
}

// A ServiceStatus_Server is a ServiceStatus with a local implementation.
type ServiceStatus_Server interface {
	Status(context.Context, ServiceStatus_status) error
}

// ServiceStatus_NewServer creates a new Server from an implementation of ServiceStatus_Server.
func ServiceStatus_NewServer(s ServiceStatus_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceStatus_Methods(nil, s), s, c, policy)
}

// ServiceStatus_ServerToClient creates a new Client from an implementation of ServiceStatus_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceStatus_ServerToClient(s ServiceStatus_Server, policy *server.Policy) ServiceStatus {
	return ServiceStatus{Client: capnp.NewClient(ServiceStatus_NewServer(s, policy))}
}

// ServiceStatus_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceStatus_Methods(methods []server.Method, s ServiceStatus_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe5ad4396565b592,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/servicegraph.capnp:ServiceStatus",
			MethodName:    "status",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Status(ctx, ServiceStatus_status{call})
		},
	})

	return methods
}

// ServiceStatus_status holds the state for a server call to ServiceStatus.status.
// See server.Call for documentation.
type ServiceStatus_status struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceStatus_status) Args() ServiceStatus_status_Params {
	return ServiceStatus_status_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ServiceStatus_status) AllocResults() (ServiceStatus_status_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceStatus_status_Results{Struct: r}, err
}

// ServiceStatus_List is a list of ServiceStatus.
type ServiceStatus_List = capnp.CapList[ServiceStatus]

// NewServiceStatus creates a new list of ServiceStatus.
func NewServiceStatus_List(s *capnp.Segment, sz int32) (ServiceStatus_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceStatus](l), err
}

type ServiceStatus_SvcState uint16

// ServiceStatus_SvcState_TypeID is the unique identifier for the type ServiceStatus_SvcState.
const ServiceStatus_SvcState_TypeID = 0xc26ce1b6c9189a7a

// Values of ServiceStatus_SvcState.
const (
	ServiceStatus_SvcState_running ServiceStatus_SvcState = 0
	ServiceStatus_SvcState_stopped ServiceStatus_SvcState = 1
)

// String returns the enum's constant name.
func (c ServiceStatus_SvcState) String() string {
	switch c {
	case ServiceStatus_SvcState_running:
		return "running"
	case ServiceStatus_SvcState_stopped:
		return "stopped"

	default:
		return ""
	}
}

// ServiceStatus_SvcStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceStatus_SvcStateFromString(c string) ServiceStatus_SvcState {
	switch c {
	case "running":
		return ServiceStatus_SvcState_running
	case "stopped":
		return ServiceStatus_SvcState_stopped

	default:
		return 0
	}
}

type ServiceStatus_SvcState_List = capnp.EnumList[ServiceStatus_SvcState]

func NewServiceStatus_SvcState_List(s *capnp.Segment, sz int32) (ServiceStatus_SvcState_List, error) {
	return capnp.NewEnumList[ServiceStatus_SvcState](s, sz)
}

type ServiceStatus_status_Params struct{ capnp.Struct }

// ServiceStatus_status_Params_TypeID is the unique identifier for the type ServiceStatus_status_Params.
const ServiceStatus_status_Params_TypeID = 0xf8b2dee80c8d9ee2

func NewServiceStatus_status_Params(s *capnp.Segment) (ServiceStatus_status_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceStatus_status_Params{st}, err
}

func NewRootServiceStatus_status_Params(s *capnp.Segment) (ServiceStatus_status_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceStatus_status_Params{st}, err
}

func ReadRootServiceStatus_status_Params(msg *capnp.Message) (ServiceStatus_status_Params, error) {
	root, err := msg.Root()
	return ServiceStatus_status_Params{root.Struct()}, err
}

func (s ServiceStatus_status_Params) String() string {
	str, _ := text.Marshal(0xf8b2dee80c8d9ee2, s.Struct)
	return str
}

// ServiceStatus_status_Params_List is a list of ServiceStatus_status_Params.
type ServiceStatus_status_Params_List = capnp.StructList[ServiceStatus_status_Params]

// NewServiceStatus_status_Params creates a new list of ServiceStatus_status_Params.
func NewServiceStatus_status_Params_List(s *capnp.Segment, sz int32) (ServiceStatus_status_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ServiceStatus_status_Params]{List: l}, err
}

// ServiceStatus_status_Params_Future is a wrapper for a ServiceStatus_status_Params promised by a client call.
type ServiceStatus_status_Params_Future struct{ *capnp.Future }

func (p ServiceStatus_status_Params_Future) Struct() (ServiceStatus_status_Params, error) {
	s, err := p.Future.Struct()
	return ServiceStatus_status_Params{s}, err
}

type ServiceStatus_status_Results struct{ capnp.Struct }

// ServiceStatus_status_Results_TypeID is the unique identifier for the type ServiceStatus_status_Results.
const ServiceStatus_status_Results_TypeID = 0xa89c7568362299ab

func NewServiceStatus_status_Results(s *capnp.Segment) (ServiceStatus_status_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceStatus_status_Results{st}, err
}

func NewRootServiceStatus_status_Results(s *capnp.Segment) (ServiceStatus_status_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceStatus_status_Results{st}, err
}

func ReadRootServiceStatus_status_Results(msg *capnp.Message) (ServiceStatus_status_Results, error) {
	root, err := msg.Root()
	return ServiceStatus_status_Results{root.Struct()}, err
}

func (s ServiceStatus_status_Results) String() string {
	str, _ := text.Marshal(0xa89c7568362299ab, s.Struct)
	return str
}

func (s ServiceStatus_status_Results) State() ServiceStatus_SvcState {
	return ServiceStatus_SvcState(s.Struct.Uint16(0))
}

func (s ServiceStatus_status_Results) SetState(v ServiceStatus_SvcState) {
	s.Struct.SetUint16(0, uint16(v))
}

// ServiceStatus_status_Results_List is a list of ServiceStatus_status_Results.
type ServiceStatus_status_Results_List = capnp.StructList[ServiceStatus_status_Results]

// NewServiceStatus_status_Results creates a new list of ServiceStatus_status_Results.
func NewServiceStatus_status_Results_List(s *capnp.Segment, sz int32) (ServiceStatus_status_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ServiceStatus_status_Results]{List: l}, err
}

// ServiceStatus_status_Results_Future is a wrapper for a ServiceStatus_status_Results promised by a client call.
type ServiceStatus_status_Results_Future struct{ *capnp.Future }

func (p ServiceStatus_status_Results_Future) Struct() (ServiceStatus_status_Results, error) {
	s, err := p.Future.Struct()
	return ServiceStatus_status_Results{s}, err
}

const schema_b1ade260fb3cadf2 = "x\xda\xc4Z{tT\xd5\xd5?\xfb\xceL.\xf0\x05" +
	"\xc7\xc3\x84<&\x8fIb\\\x98\xf8%<\x02~\x90" +
	"%_\x06\x9a\x18b\x85f&\x89]\xd0\xa2\x0c3\x97" +
	"\x10J2a\x1e\xc1\xa4X^\"\x92\x8a\x9ab\xc4\xb0" +
	"\xac\"\xc5.+E\xc1\xf2\x10\xad\xc5\xe0\x83\x866V" +
	"Zq\xa1\x08\x16\x90\xa5P)\x88\xd2E\xd1p\xbb\xf6" +
	"\xb9sfN\x92i\xe6\x11\xba\xfa\xdf\xcc\xbd\xfb\xec\xbd" +
	"\xcf~\xfd\xf6\xd9\xe7\x8ek\xfd\x1f\xab~\xfc\xc8\xba\\" +
	"\"U?\x06\x86\x04u\xef\xe5W\xcb\xda*6\xaf " +
	"\xf4V \xc4\x002!\xc5i\xf4\x00\x100\xe5\xd3R" +
	"\x02\xea\xd6\x0d)\xb3M\xadE\xab\x89\xad\x10\x80\x10=" +
	"\x12T\xd2?#\xc1\\F\x90SR\xfe\xd0\x9d\xc6o" +
	"W\x13Z\x1c\xe4p?\xbd\x84\x04\xed\x8c@W\x0bw" +
	"\xf7Zj\x1f \xb6b\x90\x02\x1c\xba\xe8t\x89\x80\xe9" +
	"C\xba\x94\xc0\xb5\xc4\x8b\xb3o\xbe\xaa[K'\xe2z" +
	"\x09_O\x1a\xc5^\xcf\x1c\xb5\x94\x80:\xa3\xc1\x0c\x93" +
	"w\x8f[G\xe8\xcd:\xf5\xd2\xf6\xdb\xbf\x99wj\xfb" +
	"NB\xa0x\xdf\xa8-`:<\x0a\x17\xf4\x8c\xaa\x90" +
	"L\x8e$\x99\x10u\x9c\xf1\xfcf\xe73S\xdb\xfa(" +
	"\x9c\xc4\xf4\x99\x9b\x84\xfa\xfc\xe9'oL\xdd?\xf5\xc4" +
	"O\x09-\x0c)\x9c\xc4v\xd4\xce\x08\x1eZ>f\xc5" +
	"\x88\x84\x19\x0f\x13\xdb\xadA\x0e;\x93^E\x82.F" +
	"\xf0\x8f\xf7f\x1e\xad\xe8i[O4\x95\x19\x87\x93I" +
	"w\xa2\xca\xbd\x8c`\xcc\x83{\xfe\xf0\xce\xed\x8b\x1e\x11" +
	"\x092GO@\x82I\xa3\x91`7\xbc\xf7\xd63\x93" +
	"[\x1f!\xb4\x80K\xa8\x1d}\x09\x88^mwZ\x9f" +
	"\xcd\xdbc~T\\Z9\x9a\x99\xc3\xc1\x96^iX" +
	"\xf1\xda\xf7\xf7<\xde!zl\xe5h\xe6\xb1vF0" +
	"\xee\xc1\xece?Z\xfc\xbb'D\x0e;5\xe1\xddH" +
	"pa\xdbm\xbb/<P\xb3\xd16\x11\x82\xef\xcfj" +
	"\x12 \x19\x0d>\xee\x7f\xf7\x1f\xea9\xfd\xc8F\xcd@" +
	"L\xb9\xb9\xc9WQ\xb9\xcc\x9c\x89\xde\xb7}\xdf<)" +
	"\xbc\xb1%3\xb5\x1f\xae;7\xffX\xfe/6\x896" +
	"+O\x1e\x85L\xe7&\xa3V\x09\xc7\xdb\xbavm\xb3" +
	"\xfd|\x80\x17W&\xdb\xc1\xd4\x91,\x13bjO>" +
	"h\x1a\x99\x82N|s\xfc\xd1\xdd\x93\x7f,=CD" +
	"%/'\x97 \xbf\x91)/\x11P\xbfxkz\xc6" +
	"\xac\xae\xd2\xcd\x82\x05\x9fK\xd9\x82\xaa\xbc\xbe\xff;%" +
	"\x07R\x0eo\x16\xfd\xdb\x91\x92\x8bK\xb7\xa7\xa0*\xd3" +
	"v\xd5\xb6\xb6\xd8\xb3\xb6\x88\x06\xeaIa\xbc\xcf0\x82" +
	"\x97*\x137\xfc}\xec\xa3[\x04\xde\x86\xd4\x97\x91\xf7" +
	"\xec\x0bo\xa6\x0c\xefx\xe39q\xe9em\xe9\xc8T" +
	"\\\xba\xad3\xf7\xb6\x85\xfe\xa7\x9e\xc7`\xe7k\xa7\xa6" +
	"2;\xd42\x82\x0d\x9f~9\xa6D?{[\x9f\x9d" +
	"\xf9S\x99\xf9\xd7\xa7\xe2\xce\xa6U\xb4}l[\xa1\xbc" +
	"(\x18yRZ\xaeD\xf4\xea\xd6)\xeb&\xaf:f" +
	"\x7fI\x94^\x98\xe6\xc1\xa5\x95i\xc8\xbc\xe0\xdd[\xca" +
	"v<\xb4q\x87\xb8\xf5\x964\xb6\xf5vFp\xfa\xe8" +
	"\xbe\x0a\xdb\xbc\x9a=br\xecL\xbb\x8a\xc1\xf36#" +
	"\xa0\xff\xbc\xf6\xcbwV\xcf{U\xe4p&\x8d\xe9\xdf" +
	"\xcb\x08\xbe\xb8\xd4\\&W\xe6\xfcV\xb3M \xb4\xcd" +
	"/ \x87B3\x12,;\xf8\xde\xdf6\xde}\xe6u" +
	"Q\xc9\x99f\x96\x1c\xf5\x8c\xc0\xb7\xea\xf3\xa2\xaf\x1f[" +
	"\xf0\x86\x18*\xeb\xcc,\xbd:\x91`\xff\xf0\xaey5" +
	"\x1f=y`@\xba\x9b\xe7\x80\xa9\xc7\x8c\xe4\xdd\xe6\x0a" +
	"0u\xa4c\xa4\xb4nJ\xed\xdesr\xf1\x01B\x8b" +
	"%\xf5g\xbb\x15e\xca\xfbs\xae!\xf9\xfd\xe9\xa7\xc0" +
	"\xd4\x894\xa6\x8e\xf4\xff#\xa0\xce=\xd1\xd6\xb6\xc6r" +
	"\xc3A\xc1\xae\x9d\xe9f\xb4\xab}\xef_F<U\xfe" +
	"\xdaA\xc1\xdf\xed\xe9,\x96\xd6\xcf\xbc\xed\\\xcf\x0b?" +
	"\xf8=\xea\xcak\xd7\xcat\xa6k{:\xe6\xca\xda\xbd" +
	"\x09\xdf\xfak\x8a\x0f\x0d\x08\xeb\xf3\xe9\x9b\xc0d\xc8@" +
	"\xf1\x90\xb1\xd6T\x9b\x91B\x88z\xfb\x8c\x8b\x0b\xf2\x7f" +
	"x\xf10\xb1\x15\x84\xb2$\x83\x19\xaf6\x03m\xf3\xf4" +
	"\x13\xdd%\xaf\x1c\xfd\xcd\xfb\xa2\x7f\xfc\x19\x87\x90`]" +
	"\x06\xca{v\x9fz\xec\x95\xfa]\xc7D\xeb\x9e\xc9\x98" +
	"\xcf\x927\x139x\xcd\x1f\xffu\xc9\x01\xf5\x98\xa8q" +
	"N\xe6\x08$\x98\x92\x89\x1c\xb6\xeeZ\xb5\xd5\xbc\xcd\xf3" +
	"\xb1\xc8\xa1#s\x11\x12\xecd\x1c^9\xfd\xfc\x8bG" +
	"\xeey\xfe\xb8\x18\xc2\x873\x99\x03\xcf3\x82\x1d\xa5e" +
	"\xf5\xab\xbf\x9b\xfd\x89X\x81h\x16\xab@9YH\xb0" +
	"\xfa\xdc\x05\xff\x85O\xcf|\"\x06\x91-\xeb#$P" +
	"\x18\xc1\xc5\xea\x1b>\xbai\xb9\xfb\xa4\xc8aM\x16\xdb" +
	"f'#\xd8\x95\xf2m\xf1\xac\xb7rO\x0f0kw" +
	"\x96\x1dL\xc7\xb3\xd0\xac\x1ffU\x98\xc0\x821\x00\xe7" +
	"\xfe\xa8^\x99\xd8\xf3\xa9\xa8\xf1\xd9\xacs\xc8\xae\x97\xb1" +
	";q\xaa\xa1\xf5\xd7\x1f\xdc\xf4\x99&\x8f\xbd\xcf\xb4\x1c" +
	"@\x07g\xaf}|\xce\xbb\x1b\xb7~&Zc\xa4\xa5" +
	"\x157\x9bo\xc1\xa5mK\x96I\xe5\x15\xaf\x7f&\xee" +
	"\xa5\xd2R\xc0\xea1\x12|\xf3\xff\x87\x92\x1aL\xf7\x9d" +
	"\xef\xafh\x87e\x11\x98~eau\xc9\"K\xa6\xde" +
	"l\x0c\x80\xe6\x9615\x05\xea\x07\x17\xc4\xec9\x9f\xcd" +
	"\xe2\xa97\x1b\xc59OtO\xbcgD\xf1WB\x90" +
	"f\xe6\xb0 \xad\xdb\x947\xeb\xec\xde\xaa\xaf\x89\x80\x93" +
	"\xa3sX\xe9)\xccA\xc7\xde\xfb\xa6y\xc3\xc3g\x16" +
	"~-,]\x973\x02\x97^\x9b\xa3\xd6eY\x9f\xbc" +
	"\"nr\xa5\xb6\xb43\x07\xa5\x9ezz}\xe2\xe7'" +
	"^\xbe\xa2a8[\xda\xad-\x9d\xdd\xbeAZ\xf2\xc9" +
	"\xb9\xab\xa2\xc2]9\xac`\x1caK\x83)\xd7\xdf\x00" +
	"\x97s6\x81idn\x0a!\xa6\xb4\xdc\x0a\xd3\xb4\\" +
	"\xf4T\xea\xdb_UL\xbbw\xc75Q\x93\xfc\\V" +
	"\xfc\xa6\xe5\x96\x12\x95,U\x9b<n\x9f\xdb\xe9^\x9c" +
	"\xe0\x1d\xdb<~\xecB\xb7\xd77\xd6\xabx\x9a\xeb\x9d" +
	"J\x9d\xc7\xd1\xb4\xb0\xc8\xe9hjl*\xa9`\xbf\x15" +
	"W\x9d\x92gW\xbc\xfe\xc5>/\xb1\xe9uzB\xf4" +
	"@\x08\x1dY@\x88m\x98\x0elI\x12\x18\x91\x08h" +
	"\x08\x80\x08\x00%\x10\xa5\x9cj\xedQ\x91\xd7\xe7\xf0\xf8" +
	"\xf2\xaa\x1c\x1eG\x03xEI\x13B\x92,\x1e\xc5\xe7" +
	"i\x01 \x12@\xd4\x02\xca\xea=\x8a\xd3\xa7\xb8\xb4\x0d" +
	"\xf9\xdcyv\xc5\xc2\xf6\x13NH\x9e\x04\x96F\xb7K" +
	"\xf1\xc2\x0d\x04\xaat\x004\x94)\x04\xf0aP\xea\xb0" +
	"\x18\xa4.tx\xcb]u\xca\x1d\x1ewC\x8d[\xdb" +
	"\xa4\x17\x05r\xf9\xf9\xb9\x84\xd8\xf2t`\x1b'\x01\x05" +
	"H\xc2$\xa3\x85\xf8\xf0\x16\x1d\xd8&J \xfb+]" +
	"` \x12\x18\x08\xc8\xcd\xa1\xdfQj\x130\xf2]\xf5" +
	"\xf3=\x0eOKQ\x9d\xe2\x0b<\xf1\x86\x9c+hS" +
	"\x10\xd0\xc6*h3\x15M4Y\x07\xb62\x09\x8c\xde" +
	"fg\xc8B<A5\xfbX\x14\x8f\xc7\xed\x81D\"" +
	"A\xa2\xa0\x9f!Z\xfdd\x87\xa7\xa5\x0a\xc0\x96\xa73" +
	"`\xaf\x19h\xb5\x80\xb7\x14&\x0as\x88d\x1a\x0e2" +
	"@\xb0Y\x00\xde\xd3\xd1\xde\xf9D\xa2\x97e\x90\x82\x1d" +
	"\"\xf0\xb4\xa6g\xe7\x10\x89\x9e\x94A\x17LW \xbc" +
	"3>\x82\xebzd\xd0\xf3\xdeMhA\xbb\x16\x11\x89" +
	"\xee\x93\xc1\x10l\x9a\x80g\x19\xdd\x8e\xeb\x9e\x93!!" +
	"\xd8v\x00\x87g\xda\x89\xeb\xdae\x90\x83\x98\x02\x1c\x1a" +
	"\xe8\x9a6\"\xd1\x952\x0c\x0b\xb6\x1c\xc0\x0b%\xf5o" +
	"\"\x12]\"\xab\x0e\x97\x8b\xd9\x85\xe8\x9c\x8a\x15B\x7f" +
	"e\xa7\xe2\xb5\x82\xca\x9d\x18x\x1d\xfc\x1bx\xcd\xf2\xa9" +
	"Z\xf1\x10#Z\x96=p7!\x05\x91\xfb\xfd7\xd6" +
	"\xf7e\x08N\xa5\xda\xe7\xf0\xf9\xbd\x84\x84{\xaaC\xe2" +
	"*\x889\xbf\x15\xdf,\xb7K\xa9t\xe5UYX\xfc" +
	"\x8b\xe9W\x12\xca\xf1\xd2FF5 \xc0\xa3\xad\"\xee" +
	"\xa6@H\xff\xfb*\x12O\x84jy\x8c\xba\xe5\x95V" +
	"\x0d\xd0\xdf\x1c\xe2\xae\xab\x1fbrr\xc7\xe1\xb3`v" +
	"\x92\xd8\xf6\"\xc7W\x0d\xc2\xb9&7$L\xf66;" +
	"\xfb\xa4{\xf4U\x1e\xab_\x91GiV<^\xc5\x85" +
	"\x7f\xb8\xa8\xf8l\xc4s\xa1O\x01\x8b\xc9B\x09\xd1z" +
	";\x12\xf8!Q?\x94\xa0\xf1z\"\xb4\xad\xa1x\"" +
	"\xfeh\x1b\x1c\x98\x82\xb84A\xc0\xa50\x8a\xc4\x85\xd2" +
	"\x03\xcb\x84\xbdT\xb3|\x8c\x0c\xea\xbdv\x7fcc}" +
	"c\xdd\x80\x08\x93\xa3py\x00\xa8\xa7+\xbe\xa5\x8a\xd2" +
	"\x18\xb6\x92\xd8\x09\xb1%\xea\xc0\x96*\x81\xeat76" +
	"\"\xcc\x13p\x0d\xd8\xaf>RB\x80\x828\x97\xc8p" +
	"\x8e\x1f\x88\x81\xf7\xaf\xd4V@$Z\x8e(\xc7\x0f\xe2" +
	"\xc0O\x86t\x8a\x99H\xb4\x10Q\x8e\x8f9\x80\xb7\x91" +
	"4\x07Q'M6.\xf0\xb8\x1b\xac\xa0\xf3\xb9\xad\xa0" +
	"\xf2\xc4#F\xdc\\\xdf\xea-\xc7\x16-\x1af`\xb0" +
	"\xf02\x98\x184M9\x06\x86U\x07\xb6\xbb\x84\xbe\xa1" +
	"\x12\x1f\x96\xe9\xc0V%\x01HIxd\xa231\xaa" +
	"f\xe8\xc0V\xd3\xbf\xa7\xb3,p{\x9c\x0a\xff7h" +
	"\x98\x1b\"\x17\x1c\x1f\xeb\xb5\xe4\xe8\x83\x80\x07Q\xa8$" +
	"\xcer4h5@\xee\xd71\xf6\xa9\x01\x8e\x06eh" +
	"5X\xc8|\x1e\xf7\xd7\x13\xbd\x9850\"bL\x8a" +
	"A\xcan\x18\x14,\x085\xd1\x83u\x88\xb1\xc9\xd6\x9a" +
	"\x0e\xacS>\xbf7\"\xb4#\x99\x02\xc6\xd0\xd0\x82\x00" +
	"\x18\xe3\xaf\x8d\xc1h\xf7\x06kc<\xe1^\x10\x08w" +
	"\xd7\xe0\xe1~\xfd\x8c\x86\x01\\\xa64)\x8d.\xa5\xd1" +
	"Y\xafi/\xc7\x8d\xb6\xa1l\xd0\x9c\x81\xfc,\xd1{" +
	"_\x1c\x1a\xc5\xb7\x95\xc0\xcf\x9a\x96\xa6\xc8\xb9\xe8ki" +
	"R\xe0Fu\xd9\xa8\x8d\xa7*\xbe\xf7\xf9\xe3(\xf3\xc6" +
	"\x98Q(\x04\"\xe1\xb2qzH\xdcr\x8fF7\xa0" +
	"\xfaG\xb7\xb7&\x8f\xd2\xe4\xf0(5n\xbb\xbf\xf1?" +
	"\xd2\xb6\xf22hW\xbcF\xff`\x15l\xf0.&\xfe" +
	"\xb4\x89\xb3\x81\x8d\xa6\x19g\xf5,\xf6f\\\x1f\x89\xb5" +
	"\xaei!\x02s\x12\x03f~U\x01\xfcV\x80\xb6#" +
	"0\xafA`\xe6C/\xe0\xd36\xda2\x81H\xb4\x01" +
	"\x81\x99\xcf`\x81\xcf\xf2\xa8\x03\xd7\xd5\xe2\xf1\x93O\x10" +
	"\x81\xcf\xf4ie+\x91\xe84\x19B\xf3P\xe0\xf7F" +
	"t\x12\xae\xcb\x97\x99\x8b\xac\x81\xe9\x84\x15\x02\xf8\xae\xf2" +
	"\x86\x85\x94j-\x8bU\x1b\xc7\xc4qB\x0b\x14\xda\xea" +
	"fg\xb5Ov\xf8Xs2\x8c\xd5/:\x9d\xc5\xc3" +
	"\xf0\xe9\x84\xf0x_\x8eNnR\\C\xcbe\xf4\x9d" +
	"N\xa8J\x83{\x1d\xfb\xc2\xa2z\xd7\x80Zf\x88v" +
	"\x8e\xc5c\xe5z\xce]\x0c\xd1N\x81\x02Q5\x8cE" +
	"\x15\xbf\xb1\x03>\x0a\xa6\xe3=\xcc\xcb\x00\xc1Y+\xf0" +
	"{?\x9a\x89\xed\x1e\x95\xb9\xaf\xef \x166G\x0at" +
	"w6=\x04'\xfa\x84\xc4h\xcbpu!B\xfe\xc4" +
	"p\x10\x0f`f\x9f\x03\xc5\x84p\x16\x17N\x14\x83\x01" +
	"\xe4\xf5\x81/\x1e@\x83\x9e\xad\xfa\x80V\xf4\x07\xba\xb0" +
	"\xa7\x88pf\x88\x18x\xf7\x09\x81\xd7r\xfd\x06~\xd5" +
	"\xc1>\xca\x18{\x93\x19\xff\xc83,\x0cD{\x92J" +
	"\x88\x16\x0c\x06\x1b\x05\xc40\xd9\x8de`\xcdD\xeab" +
	"5d\xb4\xd3\x87\x08\xf8\x19\xc3\x9e\xf4\x91\xca\x81v\x1a" +
	"\xd5\xb3\xf2\xc4\xaf\xeb\x80_\xa7Q\x8a%\xc8 \xeb\xea" +
	"]\xb1 \xcb\x80\xd1{\x95\xc3\x18#Z\x1b\xa3\xb6T" +
	" \xcb\xf8\xc2!6\xb8\xf1\x9d\xc2\xe2k\xce\xc3%\xe3" +
	"\xa2@n\xdc\"\x81\xea\x0a\x10\x13#\x92G: \xe8" +
	"#\xe9\xc0\x06\xc2\xe8\xeclm\xc4\x1e\xf8\x9c\x03\xf8W" +
	"\x09\xf4K;\x91\xe8Y\xc4\"~Y\x06\xfc\xca\x9f\x1e" +
	"\xc7N\xe5\x08v8\xfc\xb6\x17\xf8\x9d8\xed\xc6w]" +
	"\xd8\xe1\xf0\x1bv\xe0\x97{t\xf7*\"\xd1\xed\xd8\xe1" +
	"\xf0[4\xe07\xe1\xf4\xd9ED\xa2\x9d2\x18\x82\x9f" +
	"?\x00\xbfF\xa7\xeb\xedZ\xb7\x95\x10\xfcN\x06\xf8\xe5" +
	"g\xb0\xdb\x92\x83\xb7\xba\xc0?=\xe1\xdd\x96\xca\xe7I" +
	"\x04\\\xe2\x90\xbcT;\xd9\xf7{\x84M\x89\xf6\x88\xf9" +
	"\x07\x02\x0e\"V\xb4\xae\xd6\xa9\x13#\xf6\xeaVP\xf9" +
	"\x11\x81@\x9d\x95\x9d;=>+\x18\x11\xf64H\x16" +
	"2\x91\xc4|J\x0f\x17}\xd7{\xe8\xd8\x7f\xc8\xd1\xbf" +
	"\x19\x8bw\x86\x1c\xd4=\x12\xdaE\x1a#\x0e%\xc5\xfa" +
	"\x1c\xac8\xfe\x0euk\xff\xad\xa1\xc7\x00\xfdc\x9d\xb5" +
	"G\x0a\xa7\x08\x17\xb8\x86hU\xd6\xf9\xbd,\xf4C\x9f" +
	"\x8c\xc0\x9d*;P8|\x0aa\x18\x86\x15\x87_\x86" +
	"\x03\xff\x96\x87\xd2\x12\x06/\xa5\xda\x86\xfbBL\xbcg" +
	"\xcf\xd8.\x06\xfe\x15\x00\x00\xff\xff\xf5\xb6\xd3\xed"

func init() {
	schemas.Register(schema_b1ade260fb3cadf2,
		0x80a0478a44baf5b7,
		0x832e7a13591793a4,
		0x83fc0f4a88453a21,
		0x84551ffd56015503,
		0x8703fa2559f00c00,
		0x8930b538011a6d48,
		0x8a3d9f63a0ed0f30,
		0x8bde3dbf3dc07ecf,
		0x8c48060a80277f88,
		0x8d8acd47d84dd0f6,
		0x8e6a3cc6cbb68627,
		0x8e7a389fc4d001b5,
		0x8f1ab624a1406391,
		0x9594b657bb806df8,
		0x96be6c6b7c208630,
		0x97548400efb536ab,
		0x978ee3cdcabf2c30,
		0x98fb74c57334211d,
		0x9aa329db62ea678c,
		0x9d51abb4c18add06,
		0x9f027b38b5d831c3,
		0xa03fc14e1c42c4ec,
		0xa0d117c23a43bfbd,
		0xa21e52797a55b441,
		0xa28f2fee930c49af,
		0xa5c0950917c3ef59,
		0xa89c7568362299ab,
		0xab59043a27f1e493,
		0xae658051dc8a4741,
		0xaf52db82388939a4,
		0xb09788b04428ce2a,
		0xb654605147b9d8e3,
		0xba6083c6a6fef911,
		0xbc2149074476f2ec,
		0xbde55697ebd0c77c,
		0xc06690f42ee88274,
		0xc20098da5460c109,
		0xc26ce1b6c9189a7a,
		0xc70e1f858a8ade5d,
		0xc7bb459c0ad3b752,
		0xc85baacdea364d8d,
		0xca335475fc06b787,
		0xd1f05c2966f0483c,
		0xd4b3d8b83ac9969e,
		0xdbb469b8dbffb9a1,
		0xdbffc271e0dc1a73,
		0xdc72ab1aa482b4a4,
		0xdda85ed5aea8e3b8,
		0xdf204b8369443fb0,
		0xdfe5e4ef75efea83,
		0xe16f7f23da0e53f0,
		0xe322c44e33fc17b4,
		0xe4cd34f8ffccea01,
		0xe723d6ac7a6de2de,
		0xe7a497ce5a948720,
		0xe7bd4745027c718a,
		0xed78136d1400ca3e,
		0xefd6ff2a54277976,
		0xf3330a5e34c9de63,
		0xf450b7e94e249a67,
		0xf468e58c931ac35f,
		0xf898401e67ff5afe,
		0xf8b2dee80c8d9ee2,
		0xfaeadf7102939159,
		0xfe5ad4396565b592,
		0xfeb05f4147f3c518)
}
