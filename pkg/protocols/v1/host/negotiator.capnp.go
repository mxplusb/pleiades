// Code generated by capnpc-go. DO NOT EDIT.

package host

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Negotiator struct{ Client capnp.Client }

// Negotiator_TypeID is the unique identifier for the type Negotiator.
const Negotiator_TypeID = 0xe35a52b4e5c60a15

func (c Negotiator) ConfigService(ctx context.Context, params func(Negotiator_configService_Params) error) (Negotiator_configService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/negotiator.capnp:Negotiator",
			MethodName:    "configService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Negotiator_configService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Negotiator_configService_Results_Future{Future: ans.Future()}, release
}

func (c Negotiator) AddRef() Negotiator {
	return Negotiator{
		Client: c.Client.AddRef(),
	}
}

func (c Negotiator) Release() {
	c.Client.Release()
}

// A Negotiator_Server is a Negotiator with a local implementation.
type Negotiator_Server interface {
	ConfigService(context.Context, Negotiator_configService) error
}

// Negotiator_NewServer creates a new Server from an implementation of Negotiator_Server.
func Negotiator_NewServer(s Negotiator_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Negotiator_Methods(nil, s), s, c, policy)
}

// Negotiator_ServerToClient creates a new Client from an implementation of Negotiator_Server.
// The caller is responsible for calling Release on the returned Client.
func Negotiator_ServerToClient(s Negotiator_Server, policy *server.Policy) Negotiator {
	return Negotiator{Client: capnp.NewClient(Negotiator_NewServer(s, policy))}
}

// Negotiator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Negotiator_Methods(methods []server.Method, s Negotiator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/host/negotiator.capnp:Negotiator",
			MethodName:    "configService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ConfigService(ctx, Negotiator_configService{call})
		},
	})

	return methods
}

// Negotiator_configService holds the state for a server call to Negotiator.configService.
// See server.Call for documentation.
type Negotiator_configService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Negotiator_configService) Args() Negotiator_configService_Params {
	return Negotiator_configService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Negotiator_configService) AllocResults() (Negotiator_configService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{Struct: r}, err
}

// Negotiator_List is a list of Negotiator.
type Negotiator_List = capnp.CapList[Negotiator]

// NewNegotiator creates a new list of Negotiator.
func NewNegotiator_List(s *capnp.Segment, sz int32) (Negotiator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Negotiator](l), err
}

type Negotiator_configService_Params struct{ capnp.Struct }

// Negotiator_configService_Params_TypeID is the unique identifier for the type Negotiator_configService_Params.
const Negotiator_configService_Params_TypeID = 0xf9b86cbf3f6febfb

func NewNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func NewRootNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func ReadRootNegotiator_configService_Params(msg *capnp.Message) (Negotiator_configService_Params, error) {
	root, err := msg.Root()
	return Negotiator_configService_Params{root.Struct()}, err
}

func (s Negotiator_configService_Params) String() string {
	str, _ := text.Marshal(0xf9b86cbf3f6febfb, s.Struct)
	return str
}

// Negotiator_configService_Params_List is a list of Negotiator_configService_Params.
type Negotiator_configService_Params_List = capnp.StructList[Negotiator_configService_Params]

// NewNegotiator_configService_Params creates a new list of Negotiator_configService_Params.
func NewNegotiator_configService_Params_List(s *capnp.Segment, sz int32) (Negotiator_configService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Negotiator_configService_Params]{List: l}, err
}

// Negotiator_configService_Params_Future is a wrapper for a Negotiator_configService_Params promised by a client call.
type Negotiator_configService_Params_Future struct{ *capnp.Future }

func (p Negotiator_configService_Params_Future) Struct() (Negotiator_configService_Params, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Params{s}, err
}

type Negotiator_configService_Results struct{ capnp.Struct }

// Negotiator_configService_Results_TypeID is the unique identifier for the type Negotiator_configService_Results.
const Negotiator_configService_Results_TypeID = 0xd663f8eebd0e079f

func NewNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func NewRootNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func ReadRootNegotiator_configService_Results(msg *capnp.Message) (Negotiator_configService_Results, error) {
	root, err := msg.Root()
	return Negotiator_configService_Results{root.Struct()}, err
}

func (s Negotiator_configService_Results) String() string {
	str, _ := text.Marshal(0xd663f8eebd0e079f, s.Struct)
	return str
}

func (s Negotiator_configService_Results) Svc() ConfigService {
	p, _ := s.Struct.Ptr(0)
	return ConfigService{Client: p.Interface().Client()}
}

func (s Negotiator_configService_Results) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s Negotiator_configService_Results) SetSvc(v ConfigService) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Negotiator_configService_Results_List is a list of Negotiator_configService_Results.
type Negotiator_configService_Results_List = capnp.StructList[Negotiator_configService_Results]

// NewNegotiator_configService_Results creates a new list of Negotiator_configService_Results.
func NewNegotiator_configService_Results_List(s *capnp.Segment, sz int32) (Negotiator_configService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Negotiator_configService_Results]{List: l}, err
}

// Negotiator_configService_Results_Future is a wrapper for a Negotiator_configService_Results promised by a client call.
type Negotiator_configService_Results_Future struct{ *capnp.Future }

func (p Negotiator_configService_Results_Future) Struct() (Negotiator_configService_Results, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Results{s}, err
}

func (p Negotiator_configService_Results_Future) Svc() ConfigService {
	return ConfigService{Client: p.Future.Field(0, nil).Client()}
}

const schema_90858bf9ae63c319 = "x\xda2\xe8`q`1\xe4MWb`\x0a\x9e\xc0" +
	"\xc8\xca\xf6\x7f>;\xdf\xdew?\x92\xaf1\x08\xea1" +
	"20\xb02\xb230\x18K\x0a*110\x0a\x1b" +
	"\x0a\xda30\xfe\x17\xe5:\xf6tKP\xd4c\x06A" +
	"e\xe6\xff\x92\x87\x93\xd7\xfd\xecn\x9d\xc0\xc0\xc0h\x1c" +
	"(X\xc4(\x9c*\xc8\xce\xc0 \x9c(\xe8.\xdc\x0b" +
	"b\xfd\xff\xfd:\xdf~\x7f\xce\x8e\x9f\x10\xe3X@\xa6" +
	"\x95\x0aJ11\xfc\x87B\xfd\xff\x05E\xf9%\xf9\xc9" +
	"\xf99\xec\xc5\xfae\x86\xfa\x19\xf9\xc5%\xfay\xa9\xe9" +
	"\xf9%\x99\x89%\xf9Ez\xc9\x89\x05y\x05V~H" +
	"\x02\xf9yi\x99\xe9\xc1\xa9Ee\x99\xc9\xa9*A\xa9" +
	"\xc5\xa5\xec9%\xc5\x81,\xcc,\x0c\x0c,\x8c\x0c\x0c" +
	"\x82\xbcJ\x0c\x0c\x81\x1c\xcc\x8c\x81\"L\x8c\xec\xc5e" +
	"\xc9\x8c\x82\xff\xcb\xd74-<\xf08\xf4,\x03\x03#" +
	"\xa3 \x03#\xdcJ\x16BV\xca\x83E\x02\x18\x19\x03" +
	"Y\x98Y\x91|\xc3\x08\x0b%A\xc1\"\x06&AN" +
	"\xf6\xff0g1\xc8\x83\x1d\xe6\xc0\x18\xc0\xc8H\x99\xd7" +
	"\x02\x12\x8b\x12\x99s\x8b\x01\x01\x00\x00\xff\xff5>\x88" +
	"M"

func init() {
	schemas.Register(schema_90858bf9ae63c319,
		0xd663f8eebd0e079f,
		0xe35a52b4e5c60a15,
		0xf9b86cbf3f6febfb)
}
