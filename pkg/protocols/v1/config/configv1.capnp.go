// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type Negotiator struct{ Client *capnp.Client }

// Negotiator_TypeID is the unique identifier for the type Negotiator.
const Negotiator_TypeID = 0xe35a52b4e5c60a15

func (c Negotiator) ConfigService(ctx context.Context, params func(Negotiator_configService_Params) error) (Negotiator_configService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:Negotiator",
			MethodName:    "configService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Negotiator_configService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Negotiator_configService_Results_Future{Future: ans.Future()}, release
}

func (c Negotiator) AddRef() Negotiator {
	return Negotiator{
		Client: c.Client.AddRef(),
	}
}

func (c Negotiator) Release() {
	c.Client.Release()
}

// A Negotiator_Server is a Negotiator with a local implementation.
type Negotiator_Server interface {
	ConfigService(context.Context, Negotiator_configService) error
}

// Negotiator_NewServer creates a new Server from an implementation of Negotiator_Server.
func Negotiator_NewServer(s Negotiator_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Negotiator_Methods(nil, s), s, c, policy)
}

// Negotiator_ServerToClient creates a new Client from an implementation of Negotiator_Server.
// The caller is responsible for calling Release on the returned Client.
func Negotiator_ServerToClient(s Negotiator_Server, policy *server.Policy) Negotiator {
	return Negotiator{Client: capnp.NewClient(Negotiator_NewServer(s, policy))}
}

// Negotiator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Negotiator_Methods(methods []server.Method, s Negotiator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:Negotiator",
			MethodName:    "configService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ConfigService(ctx, Negotiator_configService{call})
		},
	})

	return methods
}

// Negotiator_configService holds the state for a server call to Negotiator.configService.
// See server.Call for documentation.
type Negotiator_configService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Negotiator_configService) Args() Negotiator_configService_Params {
	return Negotiator_configService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Negotiator_configService) AllocResults() (Negotiator_configService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{Struct: r}, err
}

type Negotiator_configService_Params struct{ capnp.Struct }

// Negotiator_configService_Params_TypeID is the unique identifier for the type Negotiator_configService_Params.
const Negotiator_configService_Params_TypeID = 0xf9b86cbf3f6febfb

func NewNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func NewRootNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func ReadRootNegotiator_configService_Params(msg *capnp.Message) (Negotiator_configService_Params, error) {
	root, err := msg.Root()
	return Negotiator_configService_Params{root.Struct()}, err
}

func (s Negotiator_configService_Params) String() string {
	str, _ := text.Marshal(0xf9b86cbf3f6febfb, s.Struct)
	return str
}

// Negotiator_configService_Params_List is a list of Negotiator_configService_Params.
type Negotiator_configService_Params_List = capnp.StructList[Negotiator_configService_Params]

// NewNegotiator_configService_Params creates a new list of Negotiator_configService_Params.
func NewNegotiator_configService_Params_List(s *capnp.Segment, sz int32) (Negotiator_configService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Negotiator_configService_Params]{List: l}, err
}

// Negotiator_configService_Params_Future is a wrapper for a Negotiator_configService_Params promised by a client call.
type Negotiator_configService_Params_Future struct{ *capnp.Future }

func (p Negotiator_configService_Params_Future) Struct() (Negotiator_configService_Params, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Params{s}, err
}

type Negotiator_configService_Results struct{ capnp.Struct }

// Negotiator_configService_Results_TypeID is the unique identifier for the type Negotiator_configService_Results.
const Negotiator_configService_Results_TypeID = 0xd663f8eebd0e079f

func NewNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func NewRootNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func ReadRootNegotiator_configService_Results(msg *capnp.Message) (Negotiator_configService_Results, error) {
	root, err := msg.Root()
	return Negotiator_configService_Results{root.Struct()}, err
}

func (s Negotiator_configService_Results) String() string {
	str, _ := text.Marshal(0xd663f8eebd0e079f, s.Struct)
	return str
}

func (s Negotiator_configService_Results) Svc() ConfigService {
	p, _ := s.Struct.Ptr(0)
	return ConfigService{Client: p.Interface().Client()}
}

func (s Negotiator_configService_Results) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s Negotiator_configService_Results) SetSvc(v ConfigService) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Negotiator_configService_Results_List is a list of Negotiator_configService_Results.
type Negotiator_configService_Results_List = capnp.StructList[Negotiator_configService_Results]

// NewNegotiator_configService_Results creates a new list of Negotiator_configService_Results.
func NewNegotiator_configService_Results_List(s *capnp.Segment, sz int32) (Negotiator_configService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Negotiator_configService_Results]{List: l}, err
}

// Negotiator_configService_Results_Future is a wrapper for a Negotiator_configService_Results promised by a client call.
type Negotiator_configService_Results_Future struct{ *capnp.Future }

func (p Negotiator_configService_Results_Future) Struct() (Negotiator_configService_Results, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Results{s}, err
}

func (p Negotiator_configService_Results_Future) Svc() ConfigService {
	return ConfigService{Client: p.Future.Field(0, nil).Client()}
}

type ConfigService struct{ Client *capnp.Client }

// ConfigService_TypeID is the unique identifier for the type ConfigService.
const ConfigService_TypeID = 0xcd55e3c0a182ac77

func (c ConfigService) GetConfig(ctx context.Context, params func(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_getConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_getConfig_Results_Future{Future: ans.Future()}, release
}

func (c ConfigService) AddRef() ConfigService {
	return ConfigService{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigService) Release() {
	c.Client.Release()
}

// A ConfigService_Server is a ConfigService with a local implementation.
type ConfigService_Server interface {
	GetConfig(context.Context, ConfigService_getConfig) error
}

// ConfigService_NewServer creates a new Server from an implementation of ConfigService_Server.
func ConfigService_NewServer(s ConfigService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigService_Methods(nil, s), s, c, policy)
}

// ConfigService_ServerToClient creates a new Client from an implementation of ConfigService_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigService_ServerToClient(s ConfigService_Server, policy *server.Policy) ConfigService {
	return ConfigService{Client: capnp.NewClient(ConfigService_NewServer(s, policy))}
}

// ConfigService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigService_Methods(methods []server.Method, s ConfigService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConfig(ctx, ConfigService_getConfig{call})
		},
	})

	return methods
}

// ConfigService_getConfig holds the state for a server call to ConfigService.getConfig.
// See server.Call for documentation.
type ConfigService_getConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_getConfig) Args() ConfigService_getConfig_Params {
	return ConfigService_getConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_getConfig) AllocResults() (ConfigService_getConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{Struct: r}, err
}

type ConfigService_getConfig_Params struct{ capnp.Struct }

// ConfigService_getConfig_Params_TypeID is the unique identifier for the type ConfigService_getConfig_Params.
const ConfigService_getConfig_Params_TypeID = 0xec98034329cbb446

func NewConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func NewRootConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func ReadRootConfigService_getConfig_Params(msg *capnp.Message) (ConfigService_getConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Params{root.Struct()}, err
}

func (s ConfigService_getConfig_Params) String() string {
	str, _ := text.Marshal(0xec98034329cbb446, s.Struct)
	return str
}

func (s ConfigService_getConfig_Params) Request() (GetConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Params) SetRequest(v GetConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated GetConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Params) NewRequest() (GetConfigurationRequest, error) {
	ss, err := NewGetConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return GetConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Params_List is a list of ConfigService_getConfig_Params.
type ConfigService_getConfig_Params_List = capnp.StructList[ConfigService_getConfig_Params]

// NewConfigService_getConfig_Params creates a new list of ConfigService_getConfig_Params.
func NewConfigService_getConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Params]{List: l}, err
}

// ConfigService_getConfig_Params_Future is a wrapper for a ConfigService_getConfig_Params promised by a client call.
type ConfigService_getConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Params_Future) Struct() (ConfigService_getConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Params{s}, err
}

func (p ConfigService_getConfig_Params_Future) Request() GetConfigurationRequest_Future {
	return GetConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_getConfig_Results struct{ capnp.Struct }

// ConfigService_getConfig_Results_TypeID is the unique identifier for the type ConfigService_getConfig_Results.
const ConfigService_getConfig_Results_TypeID = 0xad375e71bf983dc3

func NewConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func NewRootConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func ReadRootConfigService_getConfig_Results(msg *capnp.Message) (ConfigService_getConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Results{root.Struct()}, err
}

func (s ConfigService_getConfig_Results) String() string {
	str, _ := text.Marshal(0xad375e71bf983dc3, s.Struct)
	return str
}

func (s ConfigService_getConfig_Results) Response() (GetConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Results) SetResponse(v GetConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated GetConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Results) NewResponse() (GetConfigurationResponse, error) {
	ss, err := NewGetConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return GetConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Results_List is a list of ConfigService_getConfig_Results.
type ConfigService_getConfig_Results_List = capnp.StructList[ConfigService_getConfig_Results]

// NewConfigService_getConfig_Results creates a new list of ConfigService_getConfig_Results.
func NewConfigService_getConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Results]{List: l}, err
}

// ConfigService_getConfig_Results_Future is a wrapper for a ConfigService_getConfig_Results promised by a client call.
type ConfigService_getConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Results_Future) Struct() (ConfigService_getConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Results{s}, err
}

func (p ConfigService_getConfig_Results_Future) Response() GetConfigurationResponse_Future {
	return GetConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type GetConfigurationRequest struct{ capnp.Struct }

// GetConfigurationRequest_TypeID is the unique identifier for the type GetConfigurationRequest.
const GetConfigurationRequest_TypeID = 0xc0e43eb9670b8d20

func NewGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func NewRootGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func ReadRootGetConfigurationRequest(msg *capnp.Message) (GetConfigurationRequest, error) {
	root, err := msg.Root()
	return GetConfigurationRequest{root.Struct()}, err
}

func (s GetConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc0e43eb9670b8d20, s.Struct)
	return str
}

func (s GetConfigurationRequest) What() GetConfigurationRequest_Type {
	return GetConfigurationRequest_Type(s.Struct.Uint16(0))
}

func (s GetConfigurationRequest) SetWhat(v GetConfigurationRequest_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetConfigurationRequest) Amount() GetConfigurationRequest_Specificity {
	return GetConfigurationRequest_Specificity(s.Struct.Uint16(2))
}

func (s GetConfigurationRequest) SetAmount(v GetConfigurationRequest_Specificity) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s GetConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetConfigurationRequest_List is a list of GetConfigurationRequest.
type GetConfigurationRequest_List = capnp.StructList[GetConfigurationRequest]

// NewGetConfigurationRequest creates a new list of GetConfigurationRequest.
func NewGetConfigurationRequest_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationRequest]{List: l}, err
}

// GetConfigurationRequest_Future is a wrapper for a GetConfigurationRequest promised by a client call.
type GetConfigurationRequest_Future struct{ *capnp.Future }

func (p GetConfigurationRequest_Future) Struct() (GetConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetConfigurationRequest{s}, err
}

type GetConfigurationRequest_Type uint16

// GetConfigurationRequest_Type_TypeID is the unique identifier for the type GetConfigurationRequest_Type.
const GetConfigurationRequest_Type_TypeID = 0xd6645c0180f9fc72

// Values of GetConfigurationRequest_Type.
const (
	GetConfigurationRequest_Type_all  GetConfigurationRequest_Type = 0
	GetConfigurationRequest_Type_raft GetConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Type) String() string {
	switch c {
	case GetConfigurationRequest_Type_all:
		return "all"
	case GetConfigurationRequest_Type_raft:
		return "raft"

	default:
		return ""
	}
}

// GetConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_TypeFromString(c string) GetConfigurationRequest_Type {
	switch c {
	case "all":
		return GetConfigurationRequest_Type_all
	case "raft":
		return GetConfigurationRequest_Type_raft

	default:
		return 0
	}
}

type GetConfigurationRequest_Type_List = capnp.EnumList[GetConfigurationRequest_Type]

func NewGetConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Type](s, sz)
}

type GetConfigurationRequest_Specificity uint16

// GetConfigurationRequest_Specificity_TypeID is the unique identifier for the type GetConfigurationRequest_Specificity.
const GetConfigurationRequest_Specificity_TypeID = 0xbe4eeef9143c2824

// Values of GetConfigurationRequest_Specificity.
const (
	GetConfigurationRequest_Specificity_one        GetConfigurationRequest_Specificity = 0
	GetConfigurationRequest_Specificity_everything GetConfigurationRequest_Specificity = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Specificity) String() string {
	switch c {
	case GetConfigurationRequest_Specificity_one:
		return "one"
	case GetConfigurationRequest_Specificity_everything:
		return "everything"

	default:
		return ""
	}
}

// GetConfigurationRequest_SpecificityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_SpecificityFromString(c string) GetConfigurationRequest_Specificity {
	switch c {
	case "one":
		return GetConfigurationRequest_Specificity_one
	case "everything":
		return GetConfigurationRequest_Specificity_everything

	default:
		return 0
	}
}

type GetConfigurationRequest_Specificity_List = capnp.EnumList[GetConfigurationRequest_Specificity]

func NewGetConfigurationRequest_Specificity_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Specificity_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Specificity](s, sz)
}

type GetConfigurationResponse struct{ capnp.Struct }
type GetConfigurationResponse_Which uint16

const (
	GetConfigurationResponse_Which_all  GetConfigurationResponse_Which = 0
	GetConfigurationResponse_Which_raft GetConfigurationResponse_Which = 1
)

func (w GetConfigurationResponse_Which) String() string {
	const s = "allraft"
	switch w {
	case GetConfigurationResponse_Which_all:
		return s[0:3]
	case GetConfigurationResponse_Which_raft:
		return s[3:7]

	}
	return "GetConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GetConfigurationResponse_TypeID is the unique identifier for the type GetConfigurationResponse.
const GetConfigurationResponse_TypeID = 0xad93807af77fe1b9

func NewGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func NewRootGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func ReadRootGetConfigurationResponse(msg *capnp.Message) (GetConfigurationResponse, error) {
	root, err := msg.Root()
	return GetConfigurationResponse{root.Struct()}, err
}

func (s GetConfigurationResponse) String() string {
	str, _ := text.Marshal(0xad93807af77fe1b9, s.Struct)
	return str
}

func (s GetConfigurationResponse) Which() GetConfigurationResponse_Which {
	return GetConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s GetConfigurationResponse) All() (AllConfigurations, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != all")
	}
	p, err := s.Struct.Ptr(0)
	return AllConfigurations{Struct: p.Struct()}, err
}

func (s GetConfigurationResponse) HasAll() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetAll(v AllConfigurations) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAll sets the all field to a newly
// allocated AllConfigurations struct, preferring placement in s's segment.
func (s GetConfigurationResponse) NewAll() (AllConfigurations, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAllConfigurations(s.Struct.Segment())
	if err != nil {
		return AllConfigurations{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetConfigurationResponse) Raft() (RaftConfiguration_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s GetConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetRaft(v RaftConfiguration_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s GetConfigurationResponse) NewRaft(n int32) (RaftConfiguration_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetConfigurationResponse_List is a list of GetConfigurationResponse.
type GetConfigurationResponse_List = capnp.StructList[GetConfigurationResponse]

// NewGetConfigurationResponse creates a new list of GetConfigurationResponse.
func NewGetConfigurationResponse_List(s *capnp.Segment, sz int32) (GetConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationResponse]{List: l}, err
}

// GetConfigurationResponse_Future is a wrapper for a GetConfigurationResponse promised by a client call.
type GetConfigurationResponse_Future struct{ *capnp.Future }

func (p GetConfigurationResponse_Future) Struct() (GetConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetConfigurationResponse{s}, err
}

func (p GetConfigurationResponse_Future) All() AllConfigurations_Future {
	return AllConfigurations_Future{Future: p.Future.Field(0, nil)}
}

type AllConfigurations struct{ capnp.Struct }

// AllConfigurations_TypeID is the unique identifier for the type AllConfigurations.
const AllConfigurations_TypeID = 0xa3cf4f7f955be932

func NewAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func NewRootAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func ReadRootAllConfigurations(msg *capnp.Message) (AllConfigurations, error) {
	root, err := msg.Root()
	return AllConfigurations{root.Struct()}, err
}

func (s AllConfigurations) String() string {
	str, _ := text.Marshal(0xa3cf4f7f955be932, s.Struct)
	return str
}

func (s AllConfigurations) Raft() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s AllConfigurations) HasRaft() bool {
	return s.Struct.HasPtr(0)
}

func (s AllConfigurations) SetRaft(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s AllConfigurations) NewRaft(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllConfigurations_List is a list of AllConfigurations.
type AllConfigurations_List = capnp.StructList[AllConfigurations]

// NewAllConfigurations creates a new list of AllConfigurations.
func NewAllConfigurations_List(s *capnp.Segment, sz int32) (AllConfigurations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AllConfigurations]{List: l}, err
}

// AllConfigurations_Future is a wrapper for a AllConfigurations promised by a client call.
type AllConfigurations_Future struct{ *capnp.Future }

func (p AllConfigurations_Future) Struct() (AllConfigurations, error) {
	s, err := p.Future.Struct()
	return AllConfigurations{s}, err
}

type ServiceType struct{ capnp.Struct }

// ServiceType_TypeID is the unique identifier for the type ServiceType.
const ServiceType_TypeID = 0xabc8f8f8f8f8f8f8

func NewServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func NewRootServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func ReadRootServiceType(msg *capnp.Message) (ServiceType, error) {
	root, err := msg.Root()
	return ServiceType{root.Struct()}, err
}

func (s ServiceType) String() string {
	str, _ := text.Marshal(0xabc8f8f8f8f8f8f8, s.Struct)
	return str
}

func (s ServiceType) Type() ServiceType_Type {
	return ServiceType_Type(s.Struct.Uint16(0))
}

func (s ServiceType) SetType(v ServiceType_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

// ServiceType_List is a list of ServiceType.
type ServiceType_List = capnp.StructList[ServiceType]

// NewServiceType creates a new list of ServiceType.
func NewServiceType_List(s *capnp.Segment, sz int32) (ServiceType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ServiceType]{List: l}, err
}

// ServiceType_Future is a wrapper for a ServiceType promised by a client call.
type ServiceType_Future struct{ *capnp.Future }

func (p ServiceType_Future) Struct() (ServiceType, error) {
	s, err := p.Future.Struct()
	return ServiceType{s}, err
}

type ServiceType_Type uint16

// ServiceType_Type_TypeID is the unique identifier for the type ServiceType_Type.
const ServiceType_Type_TypeID = 0x962be5e31fc6adcd

// Values of ServiceType_Type.
const (
	ServiceType_Type_test          ServiceType_Type = 0
	ServiceType_Type_configService ServiceType_Type = 1
)

// String returns the enum's constant name.
func (c ServiceType_Type) String() string {
	switch c {
	case ServiceType_Type_test:
		return "test"
	case ServiceType_Type_configService:
		return "configService"

	default:
		return ""
	}
}

// ServiceType_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceType_TypeFromString(c string) ServiceType_Type {
	switch c {
	case "test":
		return ServiceType_Type_test
	case "configService":
		return ServiceType_Type_configService

	default:
		return 0
	}
}

type ServiceType_Type_List = capnp.EnumList[ServiceType_Type]

func NewServiceType_Type_List(s *capnp.Segment, sz int32) (ServiceType_Type_List, error) {
	return capnp.NewEnumList[ServiceType_Type](s, sz)
}

type RaftConfiguration struct{ capnp.Struct }

// RaftConfiguration_TypeID is the unique identifier for the type RaftConfiguration.
const RaftConfiguration_TypeID = 0xdb9a661a7821150d

func NewRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func NewRootRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func ReadRootRaftConfiguration(msg *capnp.Message) (RaftConfiguration, error) {
	root, err := msg.Root()
	return RaftConfiguration{root.Struct()}, err
}

func (s RaftConfiguration) String() string {
	str, _ := text.Marshal(0xdb9a661a7821150d, s.Struct)
	return str
}

func (s RaftConfiguration) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RaftConfiguration) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RaftConfiguration) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RaftConfiguration) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RaftConfiguration) NodeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s RaftConfiguration) SetNodeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RaftConfiguration) ClusterId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RaftConfiguration) SetClusterId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RaftConfiguration) CheckQuorum() bool {
	return s.Struct.Bit(128)
}

func (s RaftConfiguration) SetCheckQuorum(v bool) {
	s.Struct.SetBit(128, v)
}

func (s RaftConfiguration) ElectionTimeout() uint64 {
	return s.Struct.Uint64(24)
}

func (s RaftConfiguration) SetElectionTimeout(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s RaftConfiguration) HeartbeatTimeout() uint64 {
	return s.Struct.Uint64(32)
}

func (s RaftConfiguration) SetHeartbeatTimeout(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s RaftConfiguration) SnapshotEntries() uint64 {
	return s.Struct.Uint64(40)
}

func (s RaftConfiguration) SetSnapshotEntries(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s RaftConfiguration) CompactionOverhead() uint64 {
	return s.Struct.Uint64(48)
}

func (s RaftConfiguration) SetCompactionOverhead(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s RaftConfiguration) OrderedConfigurationChange() bool {
	return s.Struct.Bit(129)
}

func (s RaftConfiguration) SetOrderedConfigurationChange(v bool) {
	s.Struct.SetBit(129, v)
}

func (s RaftConfiguration) MaxInMemoryLogSize() uint64 {
	return s.Struct.Uint64(56)
}

func (s RaftConfiguration) SetMaxInMemoryLogSize(v uint64) {
	s.Struct.SetUint64(56, v)
}

func (s RaftConfiguration) SnapshotCompressionType() uint64 {
	return s.Struct.Uint64(64)
}

func (s RaftConfiguration) SetSnapshotCompressionType(v uint64) {
	s.Struct.SetUint64(64, v)
}

func (s RaftConfiguration) EntryCompressionType() uint64 {
	return s.Struct.Uint64(72)
}

func (s RaftConfiguration) SetEntryCompressionType(v uint64) {
	s.Struct.SetUint64(72, v)
}

func (s RaftConfiguration) DisableAutoCompaction() bool {
	return s.Struct.Bit(130)
}

func (s RaftConfiguration) SetDisableAutoCompaction(v bool) {
	s.Struct.SetBit(130, v)
}

func (s RaftConfiguration) IsObserver() bool {
	return s.Struct.Bit(131)
}

func (s RaftConfiguration) SetIsObserver(v bool) {
	s.Struct.SetBit(131, v)
}

func (s RaftConfiguration) IsWitness() bool {
	return s.Struct.Bit(132)
}

func (s RaftConfiguration) SetIsWitness(v bool) {
	s.Struct.SetBit(132, v)
}

func (s RaftConfiguration) Quiesce() bool {
	return s.Struct.Bit(133)
}

func (s RaftConfiguration) SetQuiesce(v bool) {
	s.Struct.SetBit(133, v)
}

func (s RaftConfiguration) ConfigType() ConfigType {
	return ConfigType(s.Struct.Uint16(18))
}

func (s RaftConfiguration) SetConfigType(v ConfigType) {
	s.Struct.SetUint16(18, uint16(v))
}

// RaftConfiguration_List is a list of RaftConfiguration.
type RaftConfiguration_List = capnp.StructList[RaftConfiguration]

// NewRaftConfiguration creates a new list of RaftConfiguration.
func NewRaftConfiguration_List(s *capnp.Segment, sz int32) (RaftConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[RaftConfiguration]{List: l}, err
}

// RaftConfiguration_Future is a wrapper for a RaftConfiguration promised by a client call.
type RaftConfiguration_Future struct{ *capnp.Future }

func (p RaftConfiguration_Future) Struct() (RaftConfiguration, error) {
	s, err := p.Future.Struct()
	return RaftConfiguration{s}, err
}

type ConfigType uint16

// ConfigType_TypeID is the unique identifier for the type ConfigType.
const ConfigType_TypeID = 0xadb2d0b69445303c

// Values of ConfigType.
const (
	ConfigType_system      ConfigType = 0
	ConfigType_exchange    ConfigType = 1
	ConfigType_customerFsm ConfigType = 2
)

// String returns the enum's constant name.
func (c ConfigType) String() string {
	switch c {
	case ConfigType_system:
		return "system"
	case ConfigType_exchange:
		return "exchange"
	case ConfigType_customerFsm:
		return "customerFsm"

	default:
		return ""
	}
}

// ConfigTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ConfigTypeFromString(c string) ConfigType {
	switch c {
	case "system":
		return ConfigType_system
	case "exchange":
		return ConfigType_exchange
	case "customerFsm":
		return ConfigType_customerFsm

	default:
		return 0
	}
}

type ConfigType_List = capnp.EnumList[ConfigType]

func NewConfigType_List(s *capnp.Segment, sz int32) (ConfigType_List, error) {
	return capnp.NewEnumList[ConfigType](s, sz)
}

type ListRaftConfigurationRequest struct{ capnp.Struct }

// ListRaftConfigurationRequest_TypeID is the unique identifier for the type ListRaftConfigurationRequest.
const ListRaftConfigurationRequest_TypeID = 0xc75a0f30e41b37f5

func NewListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func NewRootListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func ReadRootListRaftConfigurationRequest(msg *capnp.Message) (ListRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return ListRaftConfigurationRequest{root.Struct()}, err
}

func (s ListRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc75a0f30e41b37f5, s.Struct)
	return str
}

// ListRaftConfigurationRequest_List is a list of ListRaftConfigurationRequest.
type ListRaftConfigurationRequest_List = capnp.StructList[ListRaftConfigurationRequest]

// NewListRaftConfigurationRequest creates a new list of ListRaftConfigurationRequest.
func NewListRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (ListRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ListRaftConfigurationRequest]{List: l}, err
}

// ListRaftConfigurationRequest_Future is a wrapper for a ListRaftConfigurationRequest promised by a client call.
type ListRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p ListRaftConfigurationRequest_Future) Struct() (ListRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationRequest{s}, err
}

type ListRaftConfigurationResponse struct{ capnp.Struct }

// ListRaftConfigurationResponse_TypeID is the unique identifier for the type ListRaftConfigurationResponse.
const ListRaftConfigurationResponse_TypeID = 0xc5195060b33b8218

func NewListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func NewRootListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func ReadRootListRaftConfigurationResponse(msg *capnp.Message) (ListRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return ListRaftConfigurationResponse{root.Struct()}, err
}

func (s ListRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xc5195060b33b8218, s.Struct)
	return str
}

func (s ListRaftConfigurationResponse) Configs() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s ListRaftConfigurationResponse) HasConfigs() bool {
	return s.Struct.HasPtr(0)
}

func (s ListRaftConfigurationResponse) SetConfigs(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewConfigs sets the configs field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s ListRaftConfigurationResponse) NewConfigs(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListRaftConfigurationResponse_List is a list of ListRaftConfigurationResponse.
type ListRaftConfigurationResponse_List = capnp.StructList[ListRaftConfigurationResponse]

// NewListRaftConfigurationResponse creates a new list of ListRaftConfigurationResponse.
func NewListRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (ListRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ListRaftConfigurationResponse]{List: l}, err
}

// ListRaftConfigurationResponse_Future is a wrapper for a ListRaftConfigurationResponse promised by a client call.
type ListRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p ListRaftConfigurationResponse_Future) Struct() (ListRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationResponse{s}, err
}

type GetRaftConfigurationRequest struct{ capnp.Struct }

// GetRaftConfigurationRequest_TypeID is the unique identifier for the type GetRaftConfigurationRequest.
const GetRaftConfigurationRequest_TypeID = 0xa233c1204c18c976

func NewGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func NewRootGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func ReadRootGetRaftConfigurationRequest(msg *capnp.Message) (GetRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return GetRaftConfigurationRequest{root.Struct()}, err
}

func (s GetRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xa233c1204c18c976, s.Struct)
	return str
}

func (s GetRaftConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRaftConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRaftConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetRaftConfigurationRequest_List is a list of GetRaftConfigurationRequest.
type GetRaftConfigurationRequest_List = capnp.StructList[GetRaftConfigurationRequest]

// NewGetRaftConfigurationRequest creates a new list of GetRaftConfigurationRequest.
func NewGetRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (GetRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationRequest]{List: l}, err
}

// GetRaftConfigurationRequest_Future is a wrapper for a GetRaftConfigurationRequest promised by a client call.
type GetRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p GetRaftConfigurationRequest_Future) Struct() (GetRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationRequest{s}, err
}

type GetRaftConfigurationResponse struct{ capnp.Struct }

// GetRaftConfigurationResponse_TypeID is the unique identifier for the type GetRaftConfigurationResponse.
const GetRaftConfigurationResponse_TypeID = 0xb4fe5e6f0ef85636

func NewGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func NewRootGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func ReadRootGetRaftConfigurationResponse(msg *capnp.Message) (GetRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return GetRaftConfigurationResponse{root.Struct()}, err
}

func (s GetRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xb4fe5e6f0ef85636, s.Struct)
	return str
}

func (s GetRaftConfigurationResponse) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s GetRaftConfigurationResponse) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationResponse) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s GetRaftConfigurationResponse) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GetRaftConfigurationResponse_List is a list of GetRaftConfigurationResponse.
type GetRaftConfigurationResponse_List = capnp.StructList[GetRaftConfigurationResponse]

// NewGetRaftConfigurationResponse creates a new list of GetRaftConfigurationResponse.
func NewGetRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (GetRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationResponse]{List: l}, err
}

// GetRaftConfigurationResponse_Future is a wrapper for a GetRaftConfigurationResponse promised by a client call.
type GetRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p GetRaftConfigurationResponse_Future) Struct() (GetRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationResponse{s}, err
}

func (p GetRaftConfigurationResponse_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutRaftConfigurationRequest struct{ capnp.Struct }

// PutRaftConfigurationRequest_TypeID is the unique identifier for the type PutRaftConfigurationRequest.
const PutRaftConfigurationRequest_TypeID = 0xefe67d057faf5d90

func NewPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func NewRootPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func ReadRootPutRaftConfigurationRequest(msg *capnp.Message) (PutRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return PutRaftConfigurationRequest{root.Struct()}, err
}

func (s PutRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xefe67d057faf5d90, s.Struct)
	return str
}

func (s PutRaftConfigurationRequest) Enable() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationRequest) SetEnable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationRequest) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationRequest) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationRequest) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationRequest) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationRequest) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(1)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutRaftConfigurationRequest) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationRequest) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutRaftConfigurationRequest) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PutRaftConfigurationRequest_List is a list of PutRaftConfigurationRequest.
type PutRaftConfigurationRequest_List = capnp.StructList[PutRaftConfigurationRequest]

// NewPutRaftConfigurationRequest creates a new list of PutRaftConfigurationRequest.
func NewPutRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (PutRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationRequest]{List: l}, err
}

// PutRaftConfigurationRequest_Future is a wrapper for a PutRaftConfigurationRequest promised by a client call.
type PutRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p PutRaftConfigurationRequest_Future) Struct() (PutRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationRequest{s}, err
}

func (p PutRaftConfigurationRequest_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(1, nil)}
}

type PutRaftConfigurationResponse struct{ capnp.Struct }

// PutRaftConfigurationResponse_TypeID is the unique identifier for the type PutRaftConfigurationResponse.
const PutRaftConfigurationResponse_TypeID = 0x8f8f8f8f8f8f8f8f

func NewPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func NewRootPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func ReadRootPutRaftConfigurationResponse(msg *capnp.Message) (PutRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return PutRaftConfigurationResponse{root.Struct()}, err
}

func (s PutRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0x8f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutRaftConfigurationResponse) Valid() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationResponse) SetValid(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationResponse) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationResponse) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationResponse) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationResponse) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// PutRaftConfigurationResponse_List is a list of PutRaftConfigurationResponse.
type PutRaftConfigurationResponse_List = capnp.StructList[PutRaftConfigurationResponse]

// NewPutRaftConfigurationResponse creates a new list of PutRaftConfigurationResponse.
func NewPutRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (PutRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationResponse]{List: l}, err
}

// PutRaftConfigurationResponse_Future is a wrapper for a PutRaftConfigurationResponse promised by a client call.
type PutRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p PutRaftConfigurationResponse_Future) Struct() (PutRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationResponse{s}, err
}

const schema_9f0a9459eb121bf0 = "x\xda\xacW]l\x1cW\x15>\xe7\xce\xec\xce\xae\xb3" +
	"\xeb\xdd\xe9\x8cE\xe2*rH\x82hLq\x9cZ!" +
	"\xad[\xd8\xa4v\x1aR9\x8d\xc7\xe3B\x09\xb4\xcax" +
	"\xf6z=\xb0;\xb3\x9e\x99\xddd#U\x0e\x01\x1eZ" +
	")\x02DA\xa5/Q\x8b\xfa\x12\x88*\x95\x08\x91\x87" +
	"\x92\x16D)\x82\x08*\x95\x0a\x0a\x95\x80\xc4\x88\xaa\xa4" +
	"\xe4\xa5\".M\x07\x9dY\xef\xce\xd8\xde:\xa6\xa9_" +
	"\x12\x7f\xf7\xf8|\xe7\xef~\xf7\xcc\xe0\x97\xc5\xdd\xe2\x8e" +
	"\xec\xa9\x140\xad\x98H\x06\xdf\\\xfc\x01m\x0bbp" +
	"\xe5\xe6\x9b\xde\xfc\xc2c]\xa7 \xc1$\x80\xa1\x9d\"" +
	"c\x8a&J\x00\xca\x01\xf1\x19\xc0\xe0\xc2\x99\x17\xfb." +
	"\xce\x7f\xe2{ og\xc1\xd5\xf0\xe7\xa5\x1f\x02\xe0\xd0" +
	"\xbc\xf8\x14*\xd7B\xcb\x05q\x17`P\xff\xf5\xfa\xb1" +
	"M/\x0c=\x05\xf2\x96\xb8[$\xb7\x98x\x07\x95\x8d" +
	"\x092\xde\x90(\x00\x06\xb7\xbd\xf1\xc5\xef\xce\x1d\xfc\xdd" +
	"\x0f:\x19\xdf\x918\x8d\x8a\x16\x1a\x1f\x08\x8d\xdb\xb4K" +
	"#&\xee\xa1\x87\x13\xc7P\xf9v\xe2#\x00\xca\xf7C" +
	"\xe3_|\xfa\xf1\xf3\xb3\x0f\xed:\x03\xf2\x0e\x84E\x8f" +
	"\xe7\x12\xbd\x0cPy948\xf7\xb7\xb9\xff\x1c;\xfe" +
	"\x9d3\xcb\xbc\xedE\x89\x01\x0c\xbd\x9d\xf8;*r\x92" +
	"\xc8\xb3\xc9#\x80\xc1]\x83{\x1f\xfb\xc9\xef\x9f=\x03" +
	"\xf2\x16\x16Y\x03\x0e5\x92.*'C\xcbG\x92\x07" +
	"\x01\x83O}\xeej\xb7\xf3\xd0{g;\xe5\xf4t\x92" +
	"1\xe5\x85\xd0\xf8\xb9$E\xb1\xf5\x96\xbb\xd4\x85\xb7\xee" +
	"\xfb\x19\xc8w\xb2`\xd3\xc9u\xa5s\x9f\xb9\xf4<\xb9" +
	"}=9\xcc\x94k\xa1\xe5B\x92\xea\xda>\\\xd6\xaf" +
	"fa\xa5\xd7P\xd9(}\x1c@\xd9)Q\xbf\xd6\x9f" +
	"\xb8\xf3\xc7\x87\xc77\xfc\xb2S\x10\x17\xa4.\xa6\\\x96" +
	"\xc8\xf5\x1b\x12\x05\xf1\xf6\xae\x9b/\x0d\xe6\x0e\xfdj\xa9" +
	"qX\xd7\x0d)\xc6\x94\x9d)\x09\x84\xe0\xc8\x8fN<" +
	"\xf9\xfc\xc5\xfb/\x80\xbcEXR\x019\xf5(*\xdb" +
	"R\xe4\xefc\xa9}\x8aF\xff\x0bNI\xdd\xcf\xbdu" +
	"\xd5|\x15\xe4\x81v\xfd\xefHm\xa6\xfak)\"u" +
	"\xdf]8\x8e_*\xbe\xba\"\xf3Y\xa2<\x19\xba{" +
	"$E\x99g{>z\xb4w\xfa\x89?S\xe6]\xcb" +
	"\x939\x99:\x8d\xca\xd3d=\xf4d\xea\xbc\x00\x18\xf4" +
	"t\xbd8\x7fv\xe2\xd0\xc5\x15q\xfe)\xe3\xa2r9" +
	"\x13\xe6\x9d\xd9\xa7\xf4d)\xce{\xce\xfef\xdb\x88\xf0" +
	"\xf8\xbf\xe2sr-s\x13\xc5\xd9\x93\xa58\xbf\xf5\xe0" +
	"3s\x89\x87\xff\xf1\xef\xce\xf7$\xfb\x0e*Z6\x9c" +
	"\xd1,\xd5\xfd\xbfo:\x85\xf3\xe5\x9f.4\xd3\x0eK" +
	"8\x9f\xede0\x18T]\xc7wL\xa7,y\xdb\xeb" +
	";\xb6\x9b\x8e=m\x95\x16\xff\xa9\xef\x180\x8d\xaa]" +
	"\x1d\x1e\xaf\xf9\x13\xc6\xb4?\x12\xa25\xd7\xf0-\xc7\x9e" +
	"\xe0^\xd5\xb1=\x0e\xe3\x88ZF\x10\x01D\x04\x90\xf7" +
	"\xde\x06\xa0\xed\x16P\x1bc\x88\xa8\"a\xfb\xfb\x01\xb4" +
	"Q\x01\xb5q\x862C\x15\x19\x80|\x80\x0c?+\xa0" +
	"6\xc9\xb0\xafn\x94\xad\"\"0D\xc0\x9cmT8" +
	"f\x80a\x06\xb0\x8f\xbb\xae\xe3\xb6~kG\x9bX%" +
	"Z\x9d\xbbu\xcb\xe4\x93\x8d*\x1f\x98\x94\x1aUN\x11" +
	"\xa6BR\xb9\x1f\x00QN\xbb\x009\x9f{~\xd0\xfc" +
	"S\x9dC_\xf87m\xff\xc9U\xfc\xef\xe3\x1d\xaaQ" +
	"\xe0\xb35\xee\xf9D%\xb6\x8b\x91\xed\x05\xd0R\x02j" +
	"*C\xc1*\xfe_Y\xec)\x97#\x86\x9c\xe5\xd8\xde" +
	"2\xdf\xfd\x8b\xbe\xb72\xcc\xb9\xc6\xb4\x8f\xdd\x80\xe3\x02" +
	"b>\x1aL@\x02\xdbt\xe2\xf5\x8aVhVM\x13" +
	"1\xae\xac\xd8\x9fk\xa2+\xb9U\x869\xbfQ\xe5\x98" +
	"\x8b\xec\x011\x17#]m\xaeF\x16\xab\x1f\xd6~\xa0" +
	"\xc4\x17k\xbau\x82{\xb5\xb2\xe0{q\xca{\x01\xb4" +
	"\x8c\x80\xdaz\x86\x81\xdb\x9a=\x00\xccG\x8a\x09\x88\xf9" +
	"\x18\xf3uz\xb8r\x9a%\xdbk\xce\x8a f\x82 " +
	"\xa4\xdd\xb6\x19@\xdb*\xa06\xc80\x8b\xef\x05\xcd\x81" +
	"\xfe$\xe5\x7f\x8b\x80\xda(C\xc9(\x971\x1f\xbd\x18" +
	"\xcd >\x84\x8e\x84\xf1\xf5\x95&\x17\x078\x13\x0e\xf0" +
	"\xc6\xe1p\x80{\xee\x05@&\xcbS\x00\x05\xaf\xe1\xf9" +
	"\xbc\x12\xf0\xa3\xe6\x8ca\x97\xa8&\x81Y\xf3|\xa7\xc2" +
	"]\x90\xee\xf1*k\xeaD\xc7\x99\x8e\xdf\xf0X'\x86" +
	"\xa3\xe6\x17\x9an\x96e\x98_c\xfbW6!\xbcC" +
	"\x03z\x95\x9bVa\xda2-\xbf\x11\xbb\xbb\x9b\x9bw" +
	"\xf7\x10\x80\xe4\xd8<\xe0u\xee6\xfc\x19\x0b\x04\xbb\xf4" +
	"\x01{>[\xe3\x82\xe7k)\x8c\xcb~\xba?\xf6\xfa" +
	"%\xa6\xc2\xd9\x0f\xc2\x90\xa6-\x13$\xcbo\xc4\xe5\xae" +
	"?\x92;\xb9\xadw\xc3\x91\xde![\x94\xbb\xdeH\xee" +
	"rGf\x0c\x1fs\x11g\xf3\xca\x14\x8c\x8aS\xb3\xe9" +
	"\xa0\xcd\xdf<\xe8$\x1d\xab\xd5u\xcc\xf2V\xe9\xe6\xf2" +
	"v\xde\x1d\xe9\xc8\\\xd3\x91w\xfd\xc1\xfd\x00\xf4ao" +
	"\x89|M\xf2\xb7D\x1aZ1'b\x0f#\xb66)" +
	"Y\x9e\x00&\xa7\xa5\xa0\xa5\x1f\x80\xa5\xdd\x18\xe7Y-" +
	"\xd8\xfbx\xc9\xf1-\xc3w\xdc\x013N\x19j\x90T" +
	"^\xaaA\x9b\xa3\xc9\x97\xbc\xba\x89r\xb4|\xd0h\xde" +
	"\xe0\xd8\xd3\xa0\xc1\xcay\xef\x07 \x8d\x09\x15eM\xa5" +
	"[R\xfb\x1c1\x90\xd3\xd1V\x1a\xca\x05\xec\x05\xd0_" +
	"B\x01\xf5W\xb0\xfdJ+/\xe30\x80\xfe[\x82\xff" +
	"\x88\xd1C\xad\xfc\x01'\x00\xf4W\x08\xff+\xe1\xc2q" +
	"\x15\x05\x00\xe5u\x9c\x02\xd0\xffB\xf8?\x09\x17\x05\x15" +
	"E\x00e\x1eO\x00\xe8\x97\x08\xbfBxBT1\x01" +
	"\xa0\\\xc6G\x01\xf4+\x84\xbfKx2\xa1b\x92\xd6" +
	"\xc8\xd0\xfe*\xe1\"c(KI\x95\xb6\x1d\x05\xd9\x13" +
	"\x00\xba\xc8\x04\xd4\xf3\x84\xa7\xbe\xaab\x8a\xf6^\xf6\x1a" +
	"\x80\xae\x12\xbe\x89\xf0\xb4\xa4b\x1a@\xd9\x18\xdao\"" +
	"\xfcV\xc2\xbbR*v\x01(\xdb\xd8\xcf\x01\xf4[\x09" +
	"\xbf\x9d\xf0ui\x15\xd7\xd1B\xcaN\x03\xe8\xb7\x13>" +
	"Jx\xe6\x84\x8a\x19\x00e\x0f{\x16@\x1f%|\x9c" +
	"\xf0\xec\xd7T\xcc\xd2\"\xc5\x0e\x01\xe8c\x84?@x" +
	"\xf7\xd7U\xec\x06P\xeegT\x9fI\xc2\x0f\x13\x9e\xfb" +
	"\x86\x8a9\x00\xe5Av7\x80\xfe\x00\xe1E\xc2\xf3i" +
	"\x15\xf3\x00\x8a\x11\xfa9Lx\x99-\xd9\x0b\x0a\xb6S" +
	"\xe4\xfb\x8b\x98\x06\x86i\xc0\xc0,\xd7<\x9f\xbb\xfb\x01" +
	"c\xd8\x0c7\xbf\xa2\xd5\x1c\x90\xdcZ\xa5\xb51\x05\xbc" +
	"\xccMj4NZ\x15\xee\xd4|h\xdb\xcfp\xc3\xf5" +
	"\xa7\xb8\x81~\xeb(:\xf3l\xa3\xea\xcd8>\xee\xb5" +
	"}\xd7\xe2^tb:\x95\xaaa\xfa\x16:\xf6\xc1:" +
	"wg\xb8`D!8n\x91\xbb\xbc8\xc2\xe2C<" +
	"2c\xd8B\x89\xb7#\xaa\x18G\xf7\xdb\x07x\x05\x1d" +
	"\xb71\xe6\x94tK8\xc6W\x10\xb3\x11\xa7Ru\xb9" +
	"\xe7Y\x8e\x1dN\x7f\xdb\x82\xdb\xbe\xdb\x18q*\xd8:" +
	"\x0ee\xb8}\\\xb4<c\xaa\xcc\xf7`\xcdw\xc8\x87" +
	"\xd1\xd7L\xbf\xc5ny\x07\xa7<\xee\xd6A\xe0n\x0c" +
	"\xfc\xbc\xe5\xdb\x94\xa6\xd7\xc2\xe6fk\x16\xf7\xcc(\xec" +
	"\xe6U\x9al\x80\x10.5\xed\xaf\xabeK\x8dx=" +
	"E\xe9\x0b%%R\xad\xd6\xfe\x8d\xad\xef\x0fYv\x9b" +
	"\xaa\xb5l\x03]\xbbr\xbd\xdf\xf24n\xb8F\x05\xbd" +
	"N\x12\xaf2\x9cs\x9bj\x83\xf9\xf8\xc7\xcd\x9a\xf7\xa6" +
	"\x8e_\x02\xb1\xdd7\xf62\x0e\xaf\xf5C`8z\x19" +
	"\x0b\xdc\xa6\xbev\xfc\x12\xb8\xb1]\xe3}u\x9e\xca%" +
	"T\xbc\xff\x05\x00\x00\xff\xff\xd5\xeb\x8dv"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x8f8f8f8f8f8f8f8f,
		0x962be5e31fc6adcd,
		0xa233c1204c18c976,
		0xa3cf4f7f955be932,
		0xabc8f8f8f8f8f8f8,
		0xad375e71bf983dc3,
		0xad93807af77fe1b9,
		0xadb2d0b69445303c,
		0xb4fe5e6f0ef85636,
		0xbe4eeef9143c2824,
		0xc0e43eb9670b8d20,
		0xc5195060b33b8218,
		0xc75a0f30e41b37f5,
		0xcd55e3c0a182ac77,
		0xd663f8eebd0e079f,
		0xd6645c0180f9fc72,
		0xdb9a661a7821150d,
		0xe35a52b4e5c60a15,
		0xec98034329cbb446,
		0xefe67d057faf5d90,
		0xf9b86cbf3f6febfb)
}
