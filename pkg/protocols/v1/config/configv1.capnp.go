// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type Negotiator struct{ Client *capnp.Client }

// Negotiator_TypeID is the unique identifier for the type Negotiator.
const Negotiator_TypeID = 0xe35a52b4e5c60a15

func (c Negotiator) ConfigService(ctx context.Context, params func(Negotiator_configService_Params) error) (Negotiator_configService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:Negotiator",
			MethodName:    "configService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Negotiator_configService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Negotiator_configService_Results_Future{Future: ans.Future()}, release
}

func (c Negotiator) AddRef() Negotiator {
	return Negotiator{
		Client: c.Client.AddRef(),
	}
}

func (c Negotiator) Release() {
	c.Client.Release()
}

// A Negotiator_Server is a Negotiator with a local implementation.
type Negotiator_Server interface {
	ConfigService(context.Context, Negotiator_configService) error
}

// Negotiator_NewServer creates a new Server from an implementation of Negotiator_Server.
func Negotiator_NewServer(s Negotiator_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Negotiator_Methods(nil, s), s, c, policy)
}

// Negotiator_ServerToClient creates a new Client from an implementation of Negotiator_Server.
// The caller is responsible for calling Release on the returned Client.
func Negotiator_ServerToClient(s Negotiator_Server, policy *server.Policy) Negotiator {
	return Negotiator{Client: capnp.NewClient(Negotiator_NewServer(s, policy))}
}

// Negotiator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Negotiator_Methods(methods []server.Method, s Negotiator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe35a52b4e5c60a15,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:Negotiator",
			MethodName:    "configService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ConfigService(ctx, Negotiator_configService{call})
		},
	})

	return methods
}

// Negotiator_configService holds the state for a server call to Negotiator.configService.
// See server.Call for documentation.
type Negotiator_configService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Negotiator_configService) Args() Negotiator_configService_Params {
	return Negotiator_configService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Negotiator_configService) AllocResults() (Negotiator_configService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{Struct: r}, err
}

type Negotiator_configService_Params struct{ capnp.Struct }

// Negotiator_configService_Params_TypeID is the unique identifier for the type Negotiator_configService_Params.
const Negotiator_configService_Params_TypeID = 0xf9b86cbf3f6febfb

func NewNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func NewRootNegotiator_configService_Params(s *capnp.Segment) (Negotiator_configService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Negotiator_configService_Params{st}, err
}

func ReadRootNegotiator_configService_Params(msg *capnp.Message) (Negotiator_configService_Params, error) {
	root, err := msg.Root()
	return Negotiator_configService_Params{root.Struct()}, err
}

func (s Negotiator_configService_Params) String() string {
	str, _ := text.Marshal(0xf9b86cbf3f6febfb, s.Struct)
	return str
}

// Negotiator_configService_Params_List is a list of Negotiator_configService_Params.
type Negotiator_configService_Params_List = capnp.StructList[Negotiator_configService_Params]

// NewNegotiator_configService_Params creates a new list of Negotiator_configService_Params.
func NewNegotiator_configService_Params_List(s *capnp.Segment, sz int32) (Negotiator_configService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Negotiator_configService_Params]{List: l}, err
}

// Negotiator_configService_Params_Future is a wrapper for a Negotiator_configService_Params promised by a client call.
type Negotiator_configService_Params_Future struct{ *capnp.Future }

func (p Negotiator_configService_Params_Future) Struct() (Negotiator_configService_Params, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Params{s}, err
}

type Negotiator_configService_Results struct{ capnp.Struct }

// Negotiator_configService_Results_TypeID is the unique identifier for the type Negotiator_configService_Results.
const Negotiator_configService_Results_TypeID = 0xd663f8eebd0e079f

func NewNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func NewRootNegotiator_configService_Results(s *capnp.Segment) (Negotiator_configService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Negotiator_configService_Results{st}, err
}

func ReadRootNegotiator_configService_Results(msg *capnp.Message) (Negotiator_configService_Results, error) {
	root, err := msg.Root()
	return Negotiator_configService_Results{root.Struct()}, err
}

func (s Negotiator_configService_Results) String() string {
	str, _ := text.Marshal(0xd663f8eebd0e079f, s.Struct)
	return str
}

func (s Negotiator_configService_Results) Svc() ConfigService {
	p, _ := s.Struct.Ptr(0)
	return ConfigService{Client: p.Interface().Client()}
}

func (s Negotiator_configService_Results) HasSvc() bool {
	return s.Struct.HasPtr(0)
}

func (s Negotiator_configService_Results) SetSvc(v ConfigService) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Negotiator_configService_Results_List is a list of Negotiator_configService_Results.
type Negotiator_configService_Results_List = capnp.StructList[Negotiator_configService_Results]

// NewNegotiator_configService_Results creates a new list of Negotiator_configService_Results.
func NewNegotiator_configService_Results_List(s *capnp.Segment, sz int32) (Negotiator_configService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Negotiator_configService_Results]{List: l}, err
}

// Negotiator_configService_Results_Future is a wrapper for a Negotiator_configService_Results promised by a client call.
type Negotiator_configService_Results_Future struct{ *capnp.Future }

func (p Negotiator_configService_Results_Future) Struct() (Negotiator_configService_Results, error) {
	s, err := p.Future.Struct()
	return Negotiator_configService_Results{s}, err
}

func (p Negotiator_configService_Results_Future) Svc() ConfigService {
	return ConfigService{Client: p.Future.Field(0, nil).Client()}
}

type ConfigService struct{ Client *capnp.Client }

// ConfigService_TypeID is the unique identifier for the type ConfigService.
const ConfigService_TypeID = 0xcd55e3c0a182ac77

func (c ConfigService) GetConfig(ctx context.Context, params func(ConfigService_getConfig_Params) error) (ConfigService_getConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_getConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_getConfig_Results_Future{Future: ans.Future()}, release
}
func (c ConfigService) PutConfig(ctx context.Context, params func(ConfigService_putConfig_Params) error) (ConfigService_putConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "putConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigService_putConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigService_putConfig_Results_Future{Future: ans.Future()}, release
}

func (c ConfigService) AddRef() ConfigService {
	return ConfigService{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigService) Release() {
	c.Client.Release()
}

// A ConfigService_Server is a ConfigService with a local implementation.
type ConfigService_Server interface {
	GetConfig(context.Context, ConfigService_getConfig) error

	PutConfig(context.Context, ConfigService_putConfig) error
}

// ConfigService_NewServer creates a new Server from an implementation of ConfigService_Server.
func ConfigService_NewServer(s ConfigService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigService_Methods(nil, s), s, c, policy)
}

// ConfigService_ServerToClient creates a new Client from an implementation of ConfigService_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigService_ServerToClient(s ConfigService_Server, policy *server.Policy) ConfigService {
	return ConfigService{Client: capnp.NewClient(ConfigService_NewServer(s, policy))}
}

// ConfigService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigService_Methods(methods []server.Method, s ConfigService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      0,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "getConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConfig(ctx, ConfigService_getConfig{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd55e3c0a182ac77,
			MethodID:      1,
			InterfaceName: "protocols/v1/config/configv1.capnp:ConfigService",
			MethodName:    "putConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutConfig(ctx, ConfigService_putConfig{call})
		},
	})

	return methods
}

// ConfigService_getConfig holds the state for a server call to ConfigService.getConfig.
// See server.Call for documentation.
type ConfigService_getConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_getConfig) Args() ConfigService_getConfig_Params {
	return ConfigService_getConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_getConfig) AllocResults() (ConfigService_getConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{Struct: r}, err
}

// ConfigService_putConfig holds the state for a server call to ConfigService.putConfig.
// See server.Call for documentation.
type ConfigService_putConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigService_putConfig) Args() ConfigService_putConfig_Params {
	return ConfigService_putConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigService_putConfig) AllocResults() (ConfigService_putConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{Struct: r}, err
}

type ConfigService_getConfig_Params struct{ capnp.Struct }

// ConfigService_getConfig_Params_TypeID is the unique identifier for the type ConfigService_getConfig_Params.
const ConfigService_getConfig_Params_TypeID = 0xec98034329cbb446

func NewConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func NewRootConfigService_getConfig_Params(s *capnp.Segment) (ConfigService_getConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Params{st}, err
}

func ReadRootConfigService_getConfig_Params(msg *capnp.Message) (ConfigService_getConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Params{root.Struct()}, err
}

func (s ConfigService_getConfig_Params) String() string {
	str, _ := text.Marshal(0xec98034329cbb446, s.Struct)
	return str
}

func (s ConfigService_getConfig_Params) Request() (GetConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Params) SetRequest(v GetConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated GetConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Params) NewRequest() (GetConfigurationRequest, error) {
	ss, err := NewGetConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return GetConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Params_List is a list of ConfigService_getConfig_Params.
type ConfigService_getConfig_Params_List = capnp.StructList[ConfigService_getConfig_Params]

// NewConfigService_getConfig_Params creates a new list of ConfigService_getConfig_Params.
func NewConfigService_getConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Params]{List: l}, err
}

// ConfigService_getConfig_Params_Future is a wrapper for a ConfigService_getConfig_Params promised by a client call.
type ConfigService_getConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Params_Future) Struct() (ConfigService_getConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Params{s}, err
}

func (p ConfigService_getConfig_Params_Future) Request() GetConfigurationRequest_Future {
	return GetConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_getConfig_Results struct{ capnp.Struct }

// ConfigService_getConfig_Results_TypeID is the unique identifier for the type ConfigService_getConfig_Results.
const ConfigService_getConfig_Results_TypeID = 0xad375e71bf983dc3

func NewConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func NewRootConfigService_getConfig_Results(s *capnp.Segment) (ConfigService_getConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_getConfig_Results{st}, err
}

func ReadRootConfigService_getConfig_Results(msg *capnp.Message) (ConfigService_getConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_getConfig_Results{root.Struct()}, err
}

func (s ConfigService_getConfig_Results) String() string {
	str, _ := text.Marshal(0xad375e71bf983dc3, s.Struct)
	return str
}

func (s ConfigService_getConfig_Results) Response() (GetConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return GetConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_getConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_getConfig_Results) SetResponse(v GetConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated GetConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_getConfig_Results) NewResponse() (GetConfigurationResponse, error) {
	ss, err := NewGetConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return GetConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_getConfig_Results_List is a list of ConfigService_getConfig_Results.
type ConfigService_getConfig_Results_List = capnp.StructList[ConfigService_getConfig_Results]

// NewConfigService_getConfig_Results creates a new list of ConfigService_getConfig_Results.
func NewConfigService_getConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_getConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_getConfig_Results]{List: l}, err
}

// ConfigService_getConfig_Results_Future is a wrapper for a ConfigService_getConfig_Results promised by a client call.
type ConfigService_getConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_getConfig_Results_Future) Struct() (ConfigService_getConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_getConfig_Results{s}, err
}

func (p ConfigService_getConfig_Results_Future) Response() GetConfigurationResponse_Future {
	return GetConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Params struct{ capnp.Struct }

// ConfigService_putConfig_Params_TypeID is the unique identifier for the type ConfigService_putConfig_Params.
const ConfigService_putConfig_Params_TypeID = 0xc3273101c10b065a

func NewConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func NewRootConfigService_putConfig_Params(s *capnp.Segment) (ConfigService_putConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Params{st}, err
}

func ReadRootConfigService_putConfig_Params(msg *capnp.Message) (ConfigService_putConfig_Params, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Params{root.Struct()}, err
}

func (s ConfigService_putConfig_Params) String() string {
	str, _ := text.Marshal(0xc3273101c10b065a, s.Struct)
	return str
}

func (s ConfigService_putConfig_Params) Request() (PutConfigurationRequest, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationRequest{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Params) HasRequest() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Params) SetRequest(v PutConfigurationRequest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated PutConfigurationRequest struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Params) NewRequest() (PutConfigurationRequest, error) {
	ss, err := NewPutConfigurationRequest(s.Struct.Segment())
	if err != nil {
		return PutConfigurationRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Params_List is a list of ConfigService_putConfig_Params.
type ConfigService_putConfig_Params_List = capnp.StructList[ConfigService_putConfig_Params]

// NewConfigService_putConfig_Params creates a new list of ConfigService_putConfig_Params.
func NewConfigService_putConfig_Params_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Params]{List: l}, err
}

// ConfigService_putConfig_Params_Future is a wrapper for a ConfigService_putConfig_Params promised by a client call.
type ConfigService_putConfig_Params_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Params_Future) Struct() (ConfigService_putConfig_Params, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Params{s}, err
}

func (p ConfigService_putConfig_Params_Future) Request() PutConfigurationRequest_Future {
	return PutConfigurationRequest_Future{Future: p.Future.Field(0, nil)}
}

type ConfigService_putConfig_Results struct{ capnp.Struct }

// ConfigService_putConfig_Results_TypeID is the unique identifier for the type ConfigService_putConfig_Results.
const ConfigService_putConfig_Results_TypeID = 0xdc2aa0850f905013

func NewConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func NewRootConfigService_putConfig_Results(s *capnp.Segment) (ConfigService_putConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigService_putConfig_Results{st}, err
}

func ReadRootConfigService_putConfig_Results(msg *capnp.Message) (ConfigService_putConfig_Results, error) {
	root, err := msg.Root()
	return ConfigService_putConfig_Results{root.Struct()}, err
}

func (s ConfigService_putConfig_Results) String() string {
	str, _ := text.Marshal(0xdc2aa0850f905013, s.Struct)
	return str
}

func (s ConfigService_putConfig_Results) Response() (PutConfigurationResponse, error) {
	p, err := s.Struct.Ptr(0)
	return PutConfigurationResponse{Struct: p.Struct()}, err
}

func (s ConfigService_putConfig_Results) HasResponse() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigService_putConfig_Results) SetResponse(v PutConfigurationResponse) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated PutConfigurationResponse struct, preferring placement in s's segment.
func (s ConfigService_putConfig_Results) NewResponse() (PutConfigurationResponse, error) {
	ss, err := NewPutConfigurationResponse(s.Struct.Segment())
	if err != nil {
		return PutConfigurationResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ConfigService_putConfig_Results_List is a list of ConfigService_putConfig_Results.
type ConfigService_putConfig_Results_List = capnp.StructList[ConfigService_putConfig_Results]

// NewConfigService_putConfig_Results creates a new list of ConfigService_putConfig_Results.
func NewConfigService_putConfig_Results_List(s *capnp.Segment, sz int32) (ConfigService_putConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigService_putConfig_Results]{List: l}, err
}

// ConfigService_putConfig_Results_Future is a wrapper for a ConfigService_putConfig_Results promised by a client call.
type ConfigService_putConfig_Results_Future struct{ *capnp.Future }

func (p ConfigService_putConfig_Results_Future) Struct() (ConfigService_putConfig_Results, error) {
	s, err := p.Future.Struct()
	return ConfigService_putConfig_Results{s}, err
}

func (p ConfigService_putConfig_Results_Future) Response() PutConfigurationResponse_Future {
	return PutConfigurationResponse_Future{Future: p.Future.Field(0, nil)}
}

type GetConfigurationRequest struct{ capnp.Struct }

// GetConfigurationRequest_TypeID is the unique identifier for the type GetConfigurationRequest.
const GetConfigurationRequest_TypeID = 0xc0e43eb9670b8d20

func NewGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func NewRootGetConfigurationRequest(s *capnp.Segment) (GetConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationRequest{st}, err
}

func ReadRootGetConfigurationRequest(msg *capnp.Message) (GetConfigurationRequest, error) {
	root, err := msg.Root()
	return GetConfigurationRequest{root.Struct()}, err
}

func (s GetConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc0e43eb9670b8d20, s.Struct)
	return str
}

func (s GetConfigurationRequest) What() GetConfigurationRequest_Type {
	return GetConfigurationRequest_Type(s.Struct.Uint16(0))
}

func (s GetConfigurationRequest) SetWhat(v GetConfigurationRequest_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetConfigurationRequest) Amount() GetConfigurationRequest_Specificity {
	return GetConfigurationRequest_Specificity(s.Struct.Uint16(2))
}

func (s GetConfigurationRequest) SetAmount(v GetConfigurationRequest_Specificity) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s GetConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetConfigurationRequest_List is a list of GetConfigurationRequest.
type GetConfigurationRequest_List = capnp.StructList[GetConfigurationRequest]

// NewGetConfigurationRequest creates a new list of GetConfigurationRequest.
func NewGetConfigurationRequest_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationRequest]{List: l}, err
}

// GetConfigurationRequest_Future is a wrapper for a GetConfigurationRequest promised by a client call.
type GetConfigurationRequest_Future struct{ *capnp.Future }

func (p GetConfigurationRequest_Future) Struct() (GetConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetConfigurationRequest{s}, err
}

type GetConfigurationRequest_Type uint16

// GetConfigurationRequest_Type_TypeID is the unique identifier for the type GetConfigurationRequest_Type.
const GetConfigurationRequest_Type_TypeID = 0xd6645c0180f9fc72

// Values of GetConfigurationRequest_Type.
const (
	GetConfigurationRequest_Type_all  GetConfigurationRequest_Type = 0
	GetConfigurationRequest_Type_raft GetConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Type) String() string {
	switch c {
	case GetConfigurationRequest_Type_all:
		return "all"
	case GetConfigurationRequest_Type_raft:
		return "raft"

	default:
		return ""
	}
}

// GetConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_TypeFromString(c string) GetConfigurationRequest_Type {
	switch c {
	case "all":
		return GetConfigurationRequest_Type_all
	case "raft":
		return GetConfigurationRequest_Type_raft

	default:
		return 0
	}
}

type GetConfigurationRequest_Type_List = capnp.EnumList[GetConfigurationRequest_Type]

func NewGetConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Type](s, sz)
}

type GetConfigurationRequest_Specificity uint16

// GetConfigurationRequest_Specificity_TypeID is the unique identifier for the type GetConfigurationRequest_Specificity.
const GetConfigurationRequest_Specificity_TypeID = 0xbe4eeef9143c2824

// Values of GetConfigurationRequest_Specificity.
const (
	GetConfigurationRequest_Specificity_one        GetConfigurationRequest_Specificity = 0
	GetConfigurationRequest_Specificity_everything GetConfigurationRequest_Specificity = 1
)

// String returns the enum's constant name.
func (c GetConfigurationRequest_Specificity) String() string {
	switch c {
	case GetConfigurationRequest_Specificity_one:
		return "one"
	case GetConfigurationRequest_Specificity_everything:
		return "everything"

	default:
		return ""
	}
}

// GetConfigurationRequest_SpecificityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetConfigurationRequest_SpecificityFromString(c string) GetConfigurationRequest_Specificity {
	switch c {
	case "one":
		return GetConfigurationRequest_Specificity_one
	case "everything":
		return GetConfigurationRequest_Specificity_everything

	default:
		return 0
	}
}

type GetConfigurationRequest_Specificity_List = capnp.EnumList[GetConfigurationRequest_Specificity]

func NewGetConfigurationRequest_Specificity_List(s *capnp.Segment, sz int32) (GetConfigurationRequest_Specificity_List, error) {
	return capnp.NewEnumList[GetConfigurationRequest_Specificity](s, sz)
}

type GetConfigurationResponse struct{ capnp.Struct }
type GetConfigurationResponse_Which uint16

const (
	GetConfigurationResponse_Which_all  GetConfigurationResponse_Which = 0
	GetConfigurationResponse_Which_raft GetConfigurationResponse_Which = 1
)

func (w GetConfigurationResponse_Which) String() string {
	const s = "allraft"
	switch w {
	case GetConfigurationResponse_Which_all:
		return s[0:3]
	case GetConfigurationResponse_Which_raft:
		return s[3:7]

	}
	return "GetConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GetConfigurationResponse_TypeID is the unique identifier for the type GetConfigurationResponse.
const GetConfigurationResponse_TypeID = 0xad93807af77fe1b9

func NewGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func NewRootGetConfigurationResponse(s *capnp.Segment) (GetConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetConfigurationResponse{st}, err
}

func ReadRootGetConfigurationResponse(msg *capnp.Message) (GetConfigurationResponse, error) {
	root, err := msg.Root()
	return GetConfigurationResponse{root.Struct()}, err
}

func (s GetConfigurationResponse) String() string {
	str, _ := text.Marshal(0xad93807af77fe1b9, s.Struct)
	return str
}

func (s GetConfigurationResponse) Which() GetConfigurationResponse_Which {
	return GetConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s GetConfigurationResponse) All() (AllConfigurations, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != all")
	}
	p, err := s.Struct.Ptr(0)
	return AllConfigurations{Struct: p.Struct()}, err
}

func (s GetConfigurationResponse) HasAll() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetAll(v AllConfigurations) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAll sets the all field to a newly
// allocated AllConfigurations struct, preferring placement in s's segment.
func (s GetConfigurationResponse) NewAll() (AllConfigurations, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAllConfigurations(s.Struct.Segment())
	if err != nil {
		return AllConfigurations{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetConfigurationResponse) Raft() (RaftConfiguration_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s GetConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GetConfigurationResponse) SetRaft(v RaftConfiguration_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s GetConfigurationResponse) NewRaft(n int32) (RaftConfiguration_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetConfigurationResponse_List is a list of GetConfigurationResponse.
type GetConfigurationResponse_List = capnp.StructList[GetConfigurationResponse]

// NewGetConfigurationResponse creates a new list of GetConfigurationResponse.
func NewGetConfigurationResponse_List(s *capnp.Segment, sz int32) (GetConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GetConfigurationResponse]{List: l}, err
}

// GetConfigurationResponse_Future is a wrapper for a GetConfigurationResponse promised by a client call.
type GetConfigurationResponse_Future struct{ *capnp.Future }

func (p GetConfigurationResponse_Future) Struct() (GetConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetConfigurationResponse{s}, err
}

func (p GetConfigurationResponse_Future) All() AllConfigurations_Future {
	return AllConfigurations_Future{Future: p.Future.Field(0, nil)}
}

type AllConfigurations struct{ capnp.Struct }

// AllConfigurations_TypeID is the unique identifier for the type AllConfigurations.
const AllConfigurations_TypeID = 0xa3cf4f7f955be932

func NewAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func NewRootAllConfigurations(s *capnp.Segment) (AllConfigurations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllConfigurations{st}, err
}

func ReadRootAllConfigurations(msg *capnp.Message) (AllConfigurations, error) {
	root, err := msg.Root()
	return AllConfigurations{root.Struct()}, err
}

func (s AllConfigurations) String() string {
	str, _ := text.Marshal(0xa3cf4f7f955be932, s.Struct)
	return str
}

func (s AllConfigurations) Raft() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s AllConfigurations) HasRaft() bool {
	return s.Struct.HasPtr(0)
}

func (s AllConfigurations) SetRaft(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s AllConfigurations) NewRaft(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllConfigurations_List is a list of AllConfigurations.
type AllConfigurations_List = capnp.StructList[AllConfigurations]

// NewAllConfigurations creates a new list of AllConfigurations.
func NewAllConfigurations_List(s *capnp.Segment, sz int32) (AllConfigurations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AllConfigurations]{List: l}, err
}

// AllConfigurations_Future is a wrapper for a AllConfigurations promised by a client call.
type AllConfigurations_Future struct{ *capnp.Future }

func (p AllConfigurations_Future) Struct() (AllConfigurations, error) {
	s, err := p.Future.Struct()
	return AllConfigurations{s}, err
}

type PutConfigurationRequest struct{ capnp.Struct }
type PutConfigurationRequest_Which uint16

const (
	PutConfigurationRequest_Which_raft     PutConfigurationRequest_Which = 0
	PutConfigurationRequest_Which_nodeHost PutConfigurationRequest_Which = 1
)

func (w PutConfigurationRequest_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationRequest_Which_raft:
		return s[0:4]
	case PutConfigurationRequest_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationRequest_TypeID is the unique identifier for the type PutConfigurationRequest.
const PutConfigurationRequest_TypeID = 0x93c59921a137c8db

func NewPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func NewRootPutConfigurationRequest(s *capnp.Segment) (PutConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PutConfigurationRequest{st}, err
}

func ReadRootPutConfigurationRequest(msg *capnp.Message) (PutConfigurationRequest, error) {
	root, err := msg.Root()
	return PutConfigurationRequest{root.Struct()}, err
}

func (s PutConfigurationRequest) String() string {
	str, _ := text.Marshal(0x93c59921a137c8db, s.Struct)
	return str
}

func (s PutConfigurationRequest) Which() PutConfigurationRequest_Which {
	return PutConfigurationRequest_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationRequest) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationRequest) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationRequest) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationRequest) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationRequest) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PutConfigurationRequest_List is a list of PutConfigurationRequest.
type PutConfigurationRequest_List = capnp.StructList[PutConfigurationRequest]

// NewPutConfigurationRequest creates a new list of PutConfigurationRequest.
func NewPutConfigurationRequest_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PutConfigurationRequest]{List: l}, err
}

// PutConfigurationRequest_Future is a wrapper for a PutConfigurationRequest promised by a client call.
type PutConfigurationRequest_Future struct{ *capnp.Future }

func (p PutConfigurationRequest_Future) Struct() (PutConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutConfigurationRequest{s}, err
}

func (p PutConfigurationRequest_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationRequest_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationRequest_Type uint16

// PutConfigurationRequest_Type_TypeID is the unique identifier for the type PutConfigurationRequest_Type.
const PutConfigurationRequest_Type_TypeID = 0xf737c9d3531fa703

// Values of PutConfigurationRequest_Type.
const (
	PutConfigurationRequest_Type_raft     PutConfigurationRequest_Type = 0
	PutConfigurationRequest_Type_nodeHost PutConfigurationRequest_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationRequest_Type) String() string {
	switch c {
	case PutConfigurationRequest_Type_raft:
		return "raft"
	case PutConfigurationRequest_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationRequest_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationRequest_TypeFromString(c string) PutConfigurationRequest_Type {
	switch c {
	case "raft":
		return PutConfigurationRequest_Type_raft
	case "nodeHost":
		return PutConfigurationRequest_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationRequest_Type_List = capnp.EnumList[PutConfigurationRequest_Type]

func NewPutConfigurationRequest_Type_List(s *capnp.Segment, sz int32) (PutConfigurationRequest_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationRequest_Type](s, sz)
}

type PutConfigurationResponse struct{ capnp.Struct }
type PutConfigurationResponse_Which uint16

const (
	PutConfigurationResponse_Which_raft     PutConfigurationResponse_Which = 0
	PutConfigurationResponse_Which_nodeHost PutConfigurationResponse_Which = 1
)

func (w PutConfigurationResponse_Which) String() string {
	const s = "raftnodeHost"
	switch w {
	case PutConfigurationResponse_Which_raft:
		return s[0:4]
	case PutConfigurationResponse_Which_nodeHost:
		return s[4:12]

	}
	return "PutConfigurationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PutConfigurationResponse_TypeID is the unique identifier for the type PutConfigurationResponse.
const PutConfigurationResponse_TypeID = 0x9f8f8f8f8f8f8f8f

func NewPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func NewRootPutConfigurationResponse(s *capnp.Segment) (PutConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutConfigurationResponse{st}, err
}

func ReadRootPutConfigurationResponse(msg *capnp.Message) (PutConfigurationResponse, error) {
	root, err := msg.Root()
	return PutConfigurationResponse{root.Struct()}, err
}

func (s PutConfigurationResponse) String() string {
	str, _ := text.Marshal(0x9f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutConfigurationResponse) Which() PutConfigurationResponse_Which {
	return PutConfigurationResponse_Which(s.Struct.Uint16(0))
}
func (s PutConfigurationResponse) Raft() (RaftConfiguration, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != raft")
	}
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasRaft() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetRaft(v RaftConfiguration) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRaft sets the raft field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewRaft() (RaftConfiguration, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) NodeHost() (NodeHostConfiguration, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != nodeHost")
	}
	p, err := s.Struct.Ptr(0)
	return NodeHostConfiguration{Struct: p.Struct()}, err
}

func (s PutConfigurationResponse) HasNodeHost() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s PutConfigurationResponse) SetNodeHost(v NodeHostConfiguration) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNodeHost sets the nodeHost field to a newly
// allocated NodeHostConfiguration struct, preferring placement in s's segment.
func (s PutConfigurationResponse) NewNodeHost() (NodeHostConfiguration, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewNodeHostConfiguration(s.Struct.Segment())
	if err != nil {
		return NodeHostConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutConfigurationResponse) Success() bool {
	return s.Struct.Bit(16)
}

func (s PutConfigurationResponse) SetSuccess(v bool) {
	s.Struct.SetBit(16, v)
}

func (s PutConfigurationResponse) Status() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutConfigurationResponse) HasStatus() bool {
	return s.Struct.HasPtr(1)
}

func (s PutConfigurationResponse) StatusBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutConfigurationResponse) SetStatus(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PutConfigurationResponse) Type() PutConfigurationResponse_Type {
	return PutConfigurationResponse_Type(s.Struct.Uint16(4))
}

func (s PutConfigurationResponse) SetType(v PutConfigurationResponse_Type) {
	s.Struct.SetUint16(4, uint16(v))
}

// PutConfigurationResponse_List is a list of PutConfigurationResponse.
type PutConfigurationResponse_List = capnp.StructList[PutConfigurationResponse]

// NewPutConfigurationResponse creates a new list of PutConfigurationResponse.
func NewPutConfigurationResponse_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutConfigurationResponse]{List: l}, err
}

// PutConfigurationResponse_Future is a wrapper for a PutConfigurationResponse promised by a client call.
type PutConfigurationResponse_Future struct{ *capnp.Future }

func (p PutConfigurationResponse_Future) Struct() (PutConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutConfigurationResponse{s}, err
}

func (p PutConfigurationResponse_Future) Raft() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

func (p PutConfigurationResponse_Future) NodeHost() NodeHostConfiguration_Future {
	return NodeHostConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutConfigurationResponse_Type uint16

// PutConfigurationResponse_Type_TypeID is the unique identifier for the type PutConfigurationResponse_Type.
const PutConfigurationResponse_Type_TypeID = 0xa2bce3bdb6c5201d

// Values of PutConfigurationResponse_Type.
const (
	PutConfigurationResponse_Type_raft     PutConfigurationResponse_Type = 0
	PutConfigurationResponse_Type_nodeHost PutConfigurationResponse_Type = 1
)

// String returns the enum's constant name.
func (c PutConfigurationResponse_Type) String() string {
	switch c {
	case PutConfigurationResponse_Type_raft:
		return "raft"
	case PutConfigurationResponse_Type_nodeHost:
		return "nodeHost"

	default:
		return ""
	}
}

// PutConfigurationResponse_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PutConfigurationResponse_TypeFromString(c string) PutConfigurationResponse_Type {
	switch c {
	case "raft":
		return PutConfigurationResponse_Type_raft
	case "nodeHost":
		return PutConfigurationResponse_Type_nodeHost

	default:
		return 0
	}
}

type PutConfigurationResponse_Type_List = capnp.EnumList[PutConfigurationResponse_Type]

func NewPutConfigurationResponse_Type_List(s *capnp.Segment, sz int32) (PutConfigurationResponse_Type_List, error) {
	return capnp.NewEnumList[PutConfigurationResponse_Type](s, sz)
}

type ServiceType struct{ capnp.Struct }

// ServiceType_TypeID is the unique identifier for the type ServiceType.
const ServiceType_TypeID = 0x94e84f47e297127c

func NewServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func NewRootServiceType(s *capnp.Segment) (ServiceType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServiceType{st}, err
}

func ReadRootServiceType(msg *capnp.Message) (ServiceType, error) {
	root, err := msg.Root()
	return ServiceType{root.Struct()}, err
}

func (s ServiceType) String() string {
	str, _ := text.Marshal(0x94e84f47e297127c, s.Struct)
	return str
}

func (s ServiceType) Type() ServiceType_Type {
	return ServiceType_Type(s.Struct.Uint16(0))
}

func (s ServiceType) SetType(v ServiceType_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

// ServiceType_List is a list of ServiceType.
type ServiceType_List = capnp.StructList[ServiceType]

// NewServiceType creates a new list of ServiceType.
func NewServiceType_List(s *capnp.Segment, sz int32) (ServiceType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ServiceType]{List: l}, err
}

// ServiceType_Future is a wrapper for a ServiceType promised by a client call.
type ServiceType_Future struct{ *capnp.Future }

func (p ServiceType_Future) Struct() (ServiceType, error) {
	s, err := p.Future.Struct()
	return ServiceType{s}, err
}

type ServiceType_Type uint16

// ServiceType_Type_TypeID is the unique identifier for the type ServiceType_Type.
const ServiceType_Type_TypeID = 0xdfa79f9e4e6e0810

// Values of ServiceType_Type.
const (
	ServiceType_Type_test          ServiceType_Type = 0
	ServiceType_Type_configService ServiceType_Type = 1
)

// String returns the enum's constant name.
func (c ServiceType_Type) String() string {
	switch c {
	case ServiceType_Type_test:
		return "test"
	case ServiceType_Type_configService:
		return "configService"

	default:
		return ""
	}
}

// ServiceType_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceType_TypeFromString(c string) ServiceType_Type {
	switch c {
	case "test":
		return ServiceType_Type_test
	case "configService":
		return ServiceType_Type_configService

	default:
		return 0
	}
}

type ServiceType_Type_List = capnp.EnumList[ServiceType_Type]

func NewServiceType_Type_List(s *capnp.Segment, sz int32) (ServiceType_Type_List, error) {
	return capnp.NewEnumList[ServiceType_Type](s, sz)
}

type RaftConfiguration struct{ capnp.Struct }

// RaftConfiguration_TypeID is the unique identifier for the type RaftConfiguration.
const RaftConfiguration_TypeID = 0xdb9a661a7821150d

func NewRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func NewRootRaftConfiguration(s *capnp.Segment) (RaftConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return RaftConfiguration{st}, err
}

func ReadRootRaftConfiguration(msg *capnp.Message) (RaftConfiguration, error) {
	root, err := msg.Root()
	return RaftConfiguration{root.Struct()}, err
}

func (s RaftConfiguration) String() string {
	str, _ := text.Marshal(0xdb9a661a7821150d, s.Struct)
	return str
}

func (s RaftConfiguration) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RaftConfiguration) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RaftConfiguration) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RaftConfiguration) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RaftConfiguration) NodeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s RaftConfiguration) SetNodeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RaftConfiguration) ClusterId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RaftConfiguration) SetClusterId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RaftConfiguration) CheckQuorum() bool {
	return s.Struct.Bit(128)
}

func (s RaftConfiguration) SetCheckQuorum(v bool) {
	s.Struct.SetBit(128, v)
}

func (s RaftConfiguration) ElectionTimeout() uint64 {
	return s.Struct.Uint64(24)
}

func (s RaftConfiguration) SetElectionTimeout(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s RaftConfiguration) HeartbeatTimeout() uint64 {
	return s.Struct.Uint64(32)
}

func (s RaftConfiguration) SetHeartbeatTimeout(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s RaftConfiguration) SnapshotEntries() uint64 {
	return s.Struct.Uint64(40)
}

func (s RaftConfiguration) SetSnapshotEntries(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s RaftConfiguration) CompactionOverhead() uint64 {
	return s.Struct.Uint64(48)
}

func (s RaftConfiguration) SetCompactionOverhead(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s RaftConfiguration) OrderedConfigurationChange() bool {
	return s.Struct.Bit(129)
}

func (s RaftConfiguration) SetOrderedConfigurationChange(v bool) {
	s.Struct.SetBit(129, v)
}

func (s RaftConfiguration) MaxInMemoryLogSize() uint64 {
	return s.Struct.Uint64(56)
}

func (s RaftConfiguration) SetMaxInMemoryLogSize(v uint64) {
	s.Struct.SetUint64(56, v)
}

func (s RaftConfiguration) SnapshotCompressionType() uint64 {
	return s.Struct.Uint64(64)
}

func (s RaftConfiguration) SetSnapshotCompressionType(v uint64) {
	s.Struct.SetUint64(64, v)
}

func (s RaftConfiguration) EntryCompressionType() uint64 {
	return s.Struct.Uint64(72)
}

func (s RaftConfiguration) SetEntryCompressionType(v uint64) {
	s.Struct.SetUint64(72, v)
}

func (s RaftConfiguration) DisableAutoCompaction() bool {
	return s.Struct.Bit(130)
}

func (s RaftConfiguration) SetDisableAutoCompaction(v bool) {
	s.Struct.SetBit(130, v)
}

func (s RaftConfiguration) IsObserver() bool {
	return s.Struct.Bit(131)
}

func (s RaftConfiguration) SetIsObserver(v bool) {
	s.Struct.SetBit(131, v)
}

func (s RaftConfiguration) IsWitness() bool {
	return s.Struct.Bit(132)
}

func (s RaftConfiguration) SetIsWitness(v bool) {
	s.Struct.SetBit(132, v)
}

func (s RaftConfiguration) Quiesce() bool {
	return s.Struct.Bit(133)
}

func (s RaftConfiguration) SetQuiesce(v bool) {
	s.Struct.SetBit(133, v)
}

func (s RaftConfiguration) ConfigType() ConfigType {
	return ConfigType(s.Struct.Uint16(18))
}

func (s RaftConfiguration) SetConfigType(v ConfigType) {
	s.Struct.SetUint16(18, uint16(v))
}

// RaftConfiguration_List is a list of RaftConfiguration.
type RaftConfiguration_List = capnp.StructList[RaftConfiguration]

// NewRaftConfiguration creates a new list of RaftConfiguration.
func NewRaftConfiguration_List(s *capnp.Segment, sz int32) (RaftConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[RaftConfiguration]{List: l}, err
}

// RaftConfiguration_Future is a wrapper for a RaftConfiguration promised by a client call.
type RaftConfiguration_Future struct{ *capnp.Future }

func (p RaftConfiguration_Future) Struct() (RaftConfiguration, error) {
	s, err := p.Future.Struct()
	return RaftConfiguration{s}, err
}

type ConfigType uint16

// ConfigType_TypeID is the unique identifier for the type ConfigType.
const ConfigType_TypeID = 0xadb2d0b69445303c

// Values of ConfigType.
const (
	ConfigType_system      ConfigType = 0
	ConfigType_exchange    ConfigType = 1
	ConfigType_customerFsm ConfigType = 2
)

// String returns the enum's constant name.
func (c ConfigType) String() string {
	switch c {
	case ConfigType_system:
		return "system"
	case ConfigType_exchange:
		return "exchange"
	case ConfigType_customerFsm:
		return "customerFsm"

	default:
		return ""
	}
}

// ConfigTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ConfigTypeFromString(c string) ConfigType {
	switch c {
	case "system":
		return ConfigType_system
	case "exchange":
		return ConfigType_exchange
	case "customerFsm":
		return ConfigType_customerFsm

	default:
		return 0
	}
}

type ConfigType_List = capnp.EnumList[ConfigType]

func NewConfigType_List(s *capnp.Segment, sz int32) (ConfigType_List, error) {
	return capnp.NewEnumList[ConfigType](s, sz)
}

type ListRaftConfigurationRequest struct{ capnp.Struct }

// ListRaftConfigurationRequest_TypeID is the unique identifier for the type ListRaftConfigurationRequest.
const ListRaftConfigurationRequest_TypeID = 0xc75a0f30e41b37f5

func NewListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func NewRootListRaftConfigurationRequest(s *capnp.Segment) (ListRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ListRaftConfigurationRequest{st}, err
}

func ReadRootListRaftConfigurationRequest(msg *capnp.Message) (ListRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return ListRaftConfigurationRequest{root.Struct()}, err
}

func (s ListRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xc75a0f30e41b37f5, s.Struct)
	return str
}

// ListRaftConfigurationRequest_List is a list of ListRaftConfigurationRequest.
type ListRaftConfigurationRequest_List = capnp.StructList[ListRaftConfigurationRequest]

// NewListRaftConfigurationRequest creates a new list of ListRaftConfigurationRequest.
func NewListRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (ListRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ListRaftConfigurationRequest]{List: l}, err
}

// ListRaftConfigurationRequest_Future is a wrapper for a ListRaftConfigurationRequest promised by a client call.
type ListRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p ListRaftConfigurationRequest_Future) Struct() (ListRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationRequest{s}, err
}

type ListRaftConfigurationResponse struct{ capnp.Struct }

// ListRaftConfigurationResponse_TypeID is the unique identifier for the type ListRaftConfigurationResponse.
const ListRaftConfigurationResponse_TypeID = 0xc5195060b33b8218

func NewListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func NewRootListRaftConfigurationResponse(s *capnp.Segment) (ListRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListRaftConfigurationResponse{st}, err
}

func ReadRootListRaftConfigurationResponse(msg *capnp.Message) (ListRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return ListRaftConfigurationResponse{root.Struct()}, err
}

func (s ListRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xc5195060b33b8218, s.Struct)
	return str
}

func (s ListRaftConfigurationResponse) Configs() (RaftConfiguration_List, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration_List{List: p.List()}, err
}

func (s ListRaftConfigurationResponse) HasConfigs() bool {
	return s.Struct.HasPtr(0)
}

func (s ListRaftConfigurationResponse) SetConfigs(v RaftConfiguration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewConfigs sets the configs field to a newly
// allocated RaftConfiguration_List, preferring placement in s's segment.
func (s ListRaftConfigurationResponse) NewConfigs(n int32) (RaftConfiguration_List, error) {
	l, err := NewRaftConfiguration_List(s.Struct.Segment(), n)
	if err != nil {
		return RaftConfiguration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListRaftConfigurationResponse_List is a list of ListRaftConfigurationResponse.
type ListRaftConfigurationResponse_List = capnp.StructList[ListRaftConfigurationResponse]

// NewListRaftConfigurationResponse creates a new list of ListRaftConfigurationResponse.
func NewListRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (ListRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ListRaftConfigurationResponse]{List: l}, err
}

// ListRaftConfigurationResponse_Future is a wrapper for a ListRaftConfigurationResponse promised by a client call.
type ListRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p ListRaftConfigurationResponse_Future) Struct() (ListRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return ListRaftConfigurationResponse{s}, err
}

type GetRaftConfigurationRequest struct{ capnp.Struct }

// GetRaftConfigurationRequest_TypeID is the unique identifier for the type GetRaftConfigurationRequest.
const GetRaftConfigurationRequest_TypeID = 0xa233c1204c18c976

func NewGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func NewRootGetRaftConfigurationRequest(s *capnp.Segment) (GetRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationRequest{st}, err
}

func ReadRootGetRaftConfigurationRequest(msg *capnp.Message) (GetRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return GetRaftConfigurationRequest{root.Struct()}, err
}

func (s GetRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xa233c1204c18c976, s.Struct)
	return str
}

func (s GetRaftConfigurationRequest) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRaftConfigurationRequest) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationRequest) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRaftConfigurationRequest) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// GetRaftConfigurationRequest_List is a list of GetRaftConfigurationRequest.
type GetRaftConfigurationRequest_List = capnp.StructList[GetRaftConfigurationRequest]

// NewGetRaftConfigurationRequest creates a new list of GetRaftConfigurationRequest.
func NewGetRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (GetRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationRequest]{List: l}, err
}

// GetRaftConfigurationRequest_Future is a wrapper for a GetRaftConfigurationRequest promised by a client call.
type GetRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p GetRaftConfigurationRequest_Future) Struct() (GetRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationRequest{s}, err
}

type GetRaftConfigurationResponse struct{ capnp.Struct }

// GetRaftConfigurationResponse_TypeID is the unique identifier for the type GetRaftConfigurationResponse.
const GetRaftConfigurationResponse_TypeID = 0xb4fe5e6f0ef85636

func NewGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func NewRootGetRaftConfigurationResponse(s *capnp.Segment) (GetRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetRaftConfigurationResponse{st}, err
}

func ReadRootGetRaftConfigurationResponse(msg *capnp.Message) (GetRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return GetRaftConfigurationResponse{root.Struct()}, err
}

func (s GetRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0xb4fe5e6f0ef85636, s.Struct)
	return str
}

func (s GetRaftConfigurationResponse) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(0)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s GetRaftConfigurationResponse) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s GetRaftConfigurationResponse) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s GetRaftConfigurationResponse) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GetRaftConfigurationResponse_List is a list of GetRaftConfigurationResponse.
type GetRaftConfigurationResponse_List = capnp.StructList[GetRaftConfigurationResponse]

// NewGetRaftConfigurationResponse creates a new list of GetRaftConfigurationResponse.
func NewGetRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (GetRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetRaftConfigurationResponse]{List: l}, err
}

// GetRaftConfigurationResponse_Future is a wrapper for a GetRaftConfigurationResponse promised by a client call.
type GetRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p GetRaftConfigurationResponse_Future) Struct() (GetRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return GetRaftConfigurationResponse{s}, err
}

func (p GetRaftConfigurationResponse_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(0, nil)}
}

type PutRaftConfigurationRequest struct{ capnp.Struct }

// PutRaftConfigurationRequest_TypeID is the unique identifier for the type PutRaftConfigurationRequest.
const PutRaftConfigurationRequest_TypeID = 0xefe67d057faf5d90

func NewPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func NewRootPutRaftConfigurationRequest(s *capnp.Segment) (PutRaftConfigurationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationRequest{st}, err
}

func ReadRootPutRaftConfigurationRequest(msg *capnp.Message) (PutRaftConfigurationRequest, error) {
	root, err := msg.Root()
	return PutRaftConfigurationRequest{root.Struct()}, err
}

func (s PutRaftConfigurationRequest) String() string {
	str, _ := text.Marshal(0xefe67d057faf5d90, s.Struct)
	return str
}

func (s PutRaftConfigurationRequest) Enable() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationRequest) SetEnable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationRequest) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationRequest) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationRequest) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationRequest) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationRequest) Config() (RaftConfiguration, error) {
	p, err := s.Struct.Ptr(1)
	return RaftConfiguration{Struct: p.Struct()}, err
}

func (s PutRaftConfigurationRequest) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationRequest) SetConfig(v RaftConfiguration) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated RaftConfiguration struct, preferring placement in s's segment.
func (s PutRaftConfigurationRequest) NewConfig() (RaftConfiguration, error) {
	ss, err := NewRaftConfiguration(s.Struct.Segment())
	if err != nil {
		return RaftConfiguration{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PutRaftConfigurationRequest_List is a list of PutRaftConfigurationRequest.
type PutRaftConfigurationRequest_List = capnp.StructList[PutRaftConfigurationRequest]

// NewPutRaftConfigurationRequest creates a new list of PutRaftConfigurationRequest.
func NewPutRaftConfigurationRequest_List(s *capnp.Segment, sz int32) (PutRaftConfigurationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationRequest]{List: l}, err
}

// PutRaftConfigurationRequest_Future is a wrapper for a PutRaftConfigurationRequest promised by a client call.
type PutRaftConfigurationRequest_Future struct{ *capnp.Future }

func (p PutRaftConfigurationRequest_Future) Struct() (PutRaftConfigurationRequest, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationRequest{s}, err
}

func (p PutRaftConfigurationRequest_Future) Config() RaftConfiguration_Future {
	return RaftConfiguration_Future{Future: p.Future.Field(1, nil)}
}

type PutRaftConfigurationResponse struct{ capnp.Struct }

// PutRaftConfigurationResponse_TypeID is the unique identifier for the type PutRaftConfigurationResponse.
const PutRaftConfigurationResponse_TypeID = 0x8f8f8f8f8f8f8f8f

func NewPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func NewRootPutRaftConfigurationResponse(s *capnp.Segment) (PutRaftConfigurationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutRaftConfigurationResponse{st}, err
}

func ReadRootPutRaftConfigurationResponse(msg *capnp.Message) (PutRaftConfigurationResponse, error) {
	root, err := msg.Root()
	return PutRaftConfigurationResponse{root.Struct()}, err
}

func (s PutRaftConfigurationResponse) String() string {
	str, _ := text.Marshal(0x8f8f8f8f8f8f8f8f, s.Struct)
	return str
}

func (s PutRaftConfigurationResponse) Valid() bool {
	return s.Struct.Bit(0)
}

func (s PutRaftConfigurationResponse) SetValid(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PutRaftConfigurationResponse) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PutRaftConfigurationResponse) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutRaftConfigurationResponse) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutRaftConfigurationResponse) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s PutRaftConfigurationResponse) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutRaftConfigurationResponse) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// PutRaftConfigurationResponse_List is a list of PutRaftConfigurationResponse.
type PutRaftConfigurationResponse_List = capnp.StructList[PutRaftConfigurationResponse]

// NewPutRaftConfigurationResponse creates a new list of PutRaftConfigurationResponse.
func NewPutRaftConfigurationResponse_List(s *capnp.Segment, sz int32) (PutRaftConfigurationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PutRaftConfigurationResponse]{List: l}, err
}

// PutRaftConfigurationResponse_Future is a wrapper for a PutRaftConfigurationResponse promised by a client call.
type PutRaftConfigurationResponse_Future struct{ *capnp.Future }

func (p PutRaftConfigurationResponse_Future) Struct() (PutRaftConfigurationResponse, error) {
	s, err := p.Future.Struct()
	return PutRaftConfigurationResponse{s}, err
}

type NodeHostConfiguration struct{ capnp.Struct }

// NodeHostConfiguration_TypeID is the unique identifier for the type NodeHostConfiguration.
const NodeHostConfiguration_TypeID = 0x859698645e9c4a44

func NewNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func NewRootNodeHostConfiguration(s *capnp.Segment) (NodeHostConfiguration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return NodeHostConfiguration{st}, err
}

func ReadRootNodeHostConfiguration(msg *capnp.Message) (NodeHostConfiguration, error) {
	root, err := msg.Root()
	return NodeHostConfiguration{root.Struct()}, err
}

func (s NodeHostConfiguration) String() string {
	str, _ := text.Marshal(0x859698645e9c4a44, s.Struct)
	return str
}

func (s NodeHostConfiguration) DeploymentId() uint64 {
	return s.Struct.Uint64(0)
}

func (s NodeHostConfiguration) SetDeploymentId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s NodeHostConfiguration) WriteAheadLogDir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasWriteAheadLogDir() bool {
	return s.Struct.HasPtr(0)
}

func (s NodeHostConfiguration) WriteAheadLogDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetWriteAheadLogDir(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NodeHostConfiguration) NodeHostDir() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasNodeHostDir() bool {
	return s.Struct.HasPtr(1)
}

func (s NodeHostConfiguration) NodeHostDirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetNodeHostDir(v string) error {
	return s.Struct.SetText(1, v)
}

func (s NodeHostConfiguration) RoundTripTimeMilliseconds() uint64 {
	return s.Struct.Uint64(8)
}

func (s NodeHostConfiguration) SetRoundTripTimeMilliseconds(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s NodeHostConfiguration) RaftAddress() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasRaftAddress() bool {
	return s.Struct.HasPtr(2)
}

func (s NodeHostConfiguration) RaftAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetRaftAddress(v string) error {
	return s.Struct.SetText(2, v)
}

func (s NodeHostConfiguration) ApiAddress() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasApiAddress() bool {
	return s.Struct.HasPtr(3)
}

func (s NodeHostConfiguration) ApiAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetApiAddress(v string) error {
	return s.Struct.SetText(3, v)
}

func (s NodeHostConfiguration) MutualTls() bool {
	return s.Struct.Bit(128)
}

func (s NodeHostConfiguration) SetMutualTls(v bool) {
	s.Struct.SetBit(128, v)
}

func (s NodeHostConfiguration) CaFile() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCaFile() bool {
	return s.Struct.HasPtr(4)
}

func (s NodeHostConfiguration) CaFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCaFile(v string) error {
	return s.Struct.SetText(4, v)
}

func (s NodeHostConfiguration) CertFile() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasCertFile() bool {
	return s.Struct.HasPtr(5)
}

func (s NodeHostConfiguration) CertFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetCertFile(v string) error {
	return s.Struct.SetText(5, v)
}

func (s NodeHostConfiguration) KeyFile() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s NodeHostConfiguration) HasKeyFile() bool {
	return s.Struct.HasPtr(6)
}

func (s NodeHostConfiguration) KeyFileBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s NodeHostConfiguration) SetKeyFile(v string) error {
	return s.Struct.SetText(6, v)
}

// NodeHostConfiguration_List is a list of NodeHostConfiguration.
type NodeHostConfiguration_List = capnp.StructList[NodeHostConfiguration]

// NewNodeHostConfiguration creates a new list of NodeHostConfiguration.
func NewNodeHostConfiguration_List(s *capnp.Segment, sz int32) (NodeHostConfiguration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7}, sz)
	return capnp.StructList[NodeHostConfiguration]{List: l}, err
}

// NodeHostConfiguration_Future is a wrapper for a NodeHostConfiguration promised by a client call.
type NodeHostConfiguration_Future struct{ *capnp.Future }

func (p NodeHostConfiguration_Future) Struct() (NodeHostConfiguration, error) {
	s, err := p.Future.Struct()
	return NodeHostConfiguration{s}, err
}

const schema_9f0a9459eb121bf0 = "x\xda\xa4Xkl\x1c\xd5\x15>\xe7\xce\xaegw\xbd" +
	"\x0fO\xeeF\x85P\xcb!IEb\x81\x89qi\x82" +
	"\x09u\x1e\x0e\xc4\x91\x93x\xb2\xa6\x85\x14P&\xbb7" +
	"\xf6\x94\xdd\x99\xcd\xcc\xac\x13\xa3FNR\xa2\x16\x04*" +
	"\x88\xd0\x06\xd46\x85\xfe@E\x8d\x90(\xa0\"\x95\x02" +
	"E\xb4\xa4-\xea\x0bP\x0bTm\x81T \x0a\xa5?" +
	"*\x08ELu\xeexwf\x9d%l\x1e\x7fb\x7f" +
	"\xf7\xf8\x9cs\xcf\xeb\x9eo\x96\x8fv\xac\x8e\xf5g\xd4" +
	"N`\xfa\xbex\x87?\xbc\xf1\xbb7\x94\x0e\x7f\xfb " +
	"\xe8\x8bQ\xf1\xdf;o\xde\xdb\xd7\x1eJ\x1d\x81\xb8\xaa" +
	"\x02\x0c\x98\xf1_#?\x18\xa7\x1f\xf7\xc7W0@\xff" +
	"[\xb3\xffH\x1c#\xe2\x8cd\xdeR\x19\xe3\xf1\x84\x0a" +
	"\xc01\xf1\x10\xa0\xff\xcas+\xee;\xff\x9eg\xef\x9a" +
	"#\xbd\x1eU\x060pO\xe2e\xe4\x8f&>\x03\xc0" +
	"\x9fH\xec\x06\xf4\xbf6\xef;\xaf]\xb5\xe5\xcdCs" +
	"\xc4c\xa4\xbb;y\x13\xf2\xfe$\x09_\x96\x1c\x0a=" +
	"92W7\x93\xba\xafM\xbe\x86\xbcF\xe2\x03{\x93" +
	"=\x08\xe8O\x1d;gt\xe1\xd3\x03\xf7\x83\xb68\xea" +
	"8\x92\xf2;S\x1f\"?\x9a\"\xc7\x7f\x94\"\xe5\xdd" +
	"\x0b\x9f}\xec\x89\xd7\x7fv?h\xabXh\x09p\xe0" +
	"X*\xc5\xf8[R\xf2xj\x05\xa0\x7f\xc9[_\xb9" +
	"{f\xcb\xef~\xd8J\xed;\xa9\x07\x91\xc7;e<" +
	":I\xed3W\x1c~r\xd7\x0d+\x8e\x82\xd6\x8f0" +
	"+\xd4\xdf\xb9\x80\x01\xf2\x11)\xf0\xf8?f\xde\xbfi" +
	"\xdf]G[\x07\xac\xd2\xf9\x1a\xf2[\xa4\xbe\x83\x9d\x14" +
	"\xb0U\xcb\xd7\x1fz\xec\xf7\x0f\x1f\x05m1\x0b\xa5\x01" +
	"\x07\xfe\xd3\xe9 \x8f\xa7\xa5\xe5\xf4\x16@\xff\x0b_\xfa" +
	" k\xdf\xf0\xf1#\xad\xdc\xecN3\xc6/\x93\xc2\x97" +
	"\xa6\xc9\x8b%KW\xe5O\xbc\xbb\xf9\xe7\xa0]\xce\xfc" +
	"\x85\xb7wN<\xfe\xc57\x9e\"\xb5W\xa7\x07\x19\xaf" +
	"I\xc9]i\xba}\xe3pN9H\xbd\xd3\xe9\x97\x91" +
	"\xdf\x9d\xbe\x00\x80\x1fMS9l\xeb\xe8|\x1a\xfb/" +
	"x&z\xfd\xf5\x99yt\xfd\xeb3d\xf8\x9c\x03\x97" +
	"\xffd\xfb\xd8\xb9\xcf\xb6\xf2ro&\xc5\xf8\xf72d" +
	"\xfb\x1e)\xfc\xdf\x15\xe7\xbd\xb1<\xb7\xedW\xcd\xc2\xb2" +
	"X\x8ee\x18\xe3\xc73*(\xfe\xee\x1f\x1f\xb8\xef\xa9" +
	"\xd7\xaf~\x1e\xb4\xc5JS\x88\x9e\xce\xdc\x8a\xfc/R" +
	"\xdf\x8b\x99o\xf0\x8b\xb2*\x80\x7fD\xcd>\xf1\xee\x07" +
	"\xc5\x97@\xebkx8?\xbb\x88<\xbc(KF\x9d" +
	"\x8fN\xec\xc3\xebJ/\x9d\x14\x9aMY\xc6\xb8IJ" +
	"\xb8\xc8Rh2\xf3\xcf\xdf\xb3`\xe7\xbd\xafPhR" +
	"s/cf\x1fD\xbe?+\xef\x95}R\x01\xf4\xf9" +
	"\xd8\x1d\xb9\x83?\xe8}5\x1a\x9bG\xe7\xc9\xd2x~" +
	"\x1eY\xeeJX\x9b\xbf\x7f\xe4\x81\xbf\x81v1\x0b;" +
	"\x85r=\xef~\xe4IN\x96\xe3\x9c,\xcfO\xfd\xf2" +
	"\xf8#[\xb7\xbd~\xd2\x953\xdcA~\xbe\x94\xec\xe6" +
	"W\xf1\x11\xfa\xc9\xbf\xf2\x91\xdf,[\xa7\x1c\xfeWS" +
	"Mr\x99\x94\x11N\x86\xef\xb8\xfe\xa1\x99\xf8\xde\x7f\xfe" +
	"\xbbe\xcb\x9b\xfcC\xe4\x07\xa5\xca\xfd\x9cr\xac<\xd0" +
	"S\xf8\xd3\xb1\x15\xef\xcb\x005\xfa\x1fp\xe0\xdc<c" +
	"\xfc\xd2<I\xf6\xe7\xc9\xcd\xff\xbdm\x0f=Y\xfe\xe9" +
	"\x89 \xd62o\x97\xe5\x170X\xeeW\x1d\xdb\xb3\x8b" +
	"v\xb9\xc3\xbdx\xaa\xff\xe2\xa2m\xed4'f\xff\x9b" +
	"\xea\xef+\x1aU\xab:\xb8\xd9.\x89\x0d\xb6\xeb\xad\x93" +
	"p\xcd1<\xd3\xb6\x00\xc6\x10\xf5\xa5J\x0c \x86\x00" +
	"<\x89_\x05($P\xc1B\x1e\x19\"\xe6\x91`\x0d" +
	"o\x05(\xe4\x09^\x88\x0c5\x86yd\x14\x14\xdc\x01" +
	"P\xf8,\xe1K\x09W0\x8f\x0a\x00\xff\x1c\xfe\x11\xa0" +
	"p!\xe1+\x09\x8f\xb1<\xc6\xa8[\xa4\xfc\xe7\x09_" +
	"Mx\\\xc9c\x1c\x80_\x81\xdb\x00\x0a\xab\x08\xdf@" +
	"x\xc7\xbe<v\x00\xf0\xf5\xb8\x15\xa00L\xf8\x18\xe1" +
	"j,O\xe1\xe6\x9bp\x10\xa0\xb0\x81\xf0q\xc2\x13\xf1" +
	"<&\x00\xb8\x8e\x1b\x01\x0ac\x84_Gx\xb2#\x8f" +
	"I\x00~-\xae\x05(\x8c\x13\xbe\x1d\x19\xfa%Q-" +
	"\xdb\xd3\x15\x019\xcb\x1b)a\x12\x18&\x01\xfd\xdd\x8e" +
	"\xe9\x895\x93\x02\x8d\xd2\xa8=1l:\x00\x98\x06\x86" +
	"i@\xdf\x9a\x0d\x1f\xa8\xc3\xa6\xd3@\x1d\xbbf\x95\xc6" +
	"\x1d\x93U\xc7\xcd\x8a\xd8d\x96\xcb\xa6+\x8a\xb6UB" +
	"\xb7\xa1\xd51vzkJ%\x07T\xe1\xba\x8d\xbf4" +
	"\xaa&\x81\x02\x94\x08X\xa9y5\xa3<^\x06t\x11" +
	"\x81!\x02\x0e\x15\x8d+\xcd\xb2h\x88\x14\x85\xe3\x11\x00" +
	"\xa1o37\x8a\xe9&\x99z9\xa8\xa7(\x87\xb1\x9a" +
	"\xb7\xd5\xd8\xd9\\\x0d[\x85[\xb5-W\xc8\xa2H\xd7" +
	"\x8bB[\x7f\x09\x80\xbeZA}\xb4Q\x11\xdaH/" +
	"\x80>\xac\xa0>\x16\x96\x83\xb6\x89\x047(\xa8\x8f3" +
	"\xec\x992\xcaf\xa9~\x8b\x9ceT\x1a\xfe\xf5\x08\xc7" +
	"\xb1\x9d\x93\xbc\xed8\xb5\xb7s<\xddU\x13\x8a\xeb\xe9" +
	"1\x8cv\x10\xf6\xe6\xc6\xa7\xabBO(\xb1\xb4\xefK" +
	"\xe7\x97\x91\xa3K\x14\xd4\x973\xcc\xe0\xc7~\xe0\xfeE" +
	"\x1b\x01\xf4\x0b\x15\xd4W2\xccQ\x82\xb0+\x9c?\x80" +
	"\xd8\x15\xcd8\x00v\x85\xcf\xfe\xeci\xdd\xeb\xd8)\xbc" +
	".\x08g\xca\x1c*\x0a\xe9\x13y\x1a\x8e\xa4\xba\xa7\xb1" +
	"F\x943\xe4hBA=\xcf0\xe7MW\x05\xe6B" +
	"y@\xcc\x9dq\xa8\xdc\xaa\xadZn\xe0A\xf8N\xd7" +
	"=\xc8\x87\xb1\xdaK.\xecQP\xbf9\x1a\xab\xfd\x14" +
	"\xab}\x0a\xea\xb7Q\xaa\xbb\x82T\xdf\xb2\x16@\xbfY" +
	"A\xfd\x8e\xb0\xed\xb5\xdb\x07\x01\xf4o*\xa8\x1f\x0a{" +
	"^\xbb\x93\x94\xde\xa6\xa0~\xf8\x0cC=\xe3\xd6\x8aE" +
	"j\x9dzG\xb8\x9e\xe1\xd5\x1aMS\x8fU\xe3f\xa7" +
	"\x11\xab\xabD\x8b&\x18\xa2\xdar=\xea\x81Hv\x16" +
	"\x84\xd9Q\xcc\xd2\xe9\xb6Z\xcb6\xeb\xa3\xf8\x07\x138" +
	"!\x83\xaa\xf5\x92\xf3Zr#\x80\x8cT4.\x0dK" +
	"\xf1SXZS.\x87\x96r\xa6m\xb9snQ\xaf" +
	"\xb1%\xf5\\d\x01\xc7\x14\x9c\x93\x92l\x9b\x17\x0bl" +
	"\xc9*/\x8a\xbe\x091{\xcd%[\x85[++\x9e" +
	"\x1b\xb5LE\x94VP?\x87\xa1\xef\xd4\xe7\x8cLw" +
	"c\x85\x9b\xd3Y\x9f\x92\xb8\xd6E.\x83\x19\xe9\xfeE" +
	"-\xbb\x9f\xc2\xb0TA}\x98\xa1j\x94\xcb\xd8\x15n" +
	"\xa5\x81\x13m\x06'\xf6i\xc1\xe9\x99\xa0\x1c\xcbq*" +
	"3\xdc=(3<\x7f#\x002M\xdb\x010\xe4N" +
	"\xbb\x9e\xa8\xf8bOq\xd2\xb0&(&~\xb1\xe6z" +
	"vE8\xa0^\xe9V\xda\xcaD\xcbB\x8eN\xf3H" +
	"&\x06\xc3J\x1e\x0a\xd4\xb4\xe8\xc86\x8d\x9e<\x94]" +
	"\xaf\xafP\x15Esh\xa7Y4\xbd\xe9Hq/\x0a" +
	"\x8a{\x1b\x80j[\xc2\x17S\xc2\x99\xf6&MP\xac" +
	"\x893\xcc\xf9\xec\x1b\x90\xc0\xe8\x9a\x99\xec\x8d\xac\xe3\xf1" +
	"\x1dr\xc8\xf9\xd2\xa5\x9df\x11T\xd3\x9b\x8e>m\xbd" +
	"\xe1\xd3\xa65\xde\xb6\xc1\xf0mC6\xfb\xb4-\x08\x9f" +
	"\xb6\xdc\xeeI\xc3\xc3\\h3\x988CF\xc5\xaeY" +
	"t\xd0\xb0\x1f\x1c\x9c\xee\xbchn\xabj}z,\x19" +
	"3\x1c\xa3\x82M]\xb56\xcc\xe5\x8c\x13\x84\x1f\xbb\xa2" +
	"[d\xdb\xc9\x1c5\xddS\x94\xd0\xdc\x1aZ\x1b\xce\x91" +
	"\x99@\x91{v\xa3\xe4\x13\xcc\xcb\x1b\x91\xf1\xb6\xc6_" +
	"S\xe0f\x07\xab\x12\x8f\xac\xecX\xe7\x93Z\xffV`" +
	"\xda2\x15C\x8e\x85uB\xa1u\xd3\xd9|\xd5\xaf\x0f" +
	"4\xc0\x89\xd5\xe8\xd7\xf3 \x7f\x8bzt\xaakm\x16" +
	"\x13\xb6g\x1a\x9e\xed\xf4\x15\xa3\xce\xc9\x11\xa9\x96\x9bG" +
	"\xe4\xa20\x99\xaa;UD-\xe4b\xd49g\xd9\x95" +
	"\xf2\xb19\xb9\x1d{\x01h\x04\x06\xefM;An\xca" +
	"R\x8e,\x90\xd2\xe1\x06\x85x\x1e\x17\x00\x14\x9e\xa3]" +
	"\xfb\x85\x08\x85\xf8\x83\\\xd9\x7fK\xf0\x9f\xa3\x14\xe2E" +
	"\xb9\xe2\xbf@\xf8\xdf%\x85\xd8\x17P\x88\xbfJ\xaa\xf0" +
	"*\xe1oJ\x0a\xa1\x04\x14\xe28\x1e\x00(\xbcA\xf8" +
	"{\x92B\xc4\x02\x0a\xf1\x8e\xa4(\xef\x11\xfe\x91\xa4\x10" +
	"\xf1\x80B\x9c\x90\xf2\x1f\x10\x1ecD!:\x02\x0a\x81" +
	"\xec^\x80B\x8c)X\xe8\"<\xb1?\xa0\x10\x19\xf6" +
	"2Q\x1d\xc2\x17\x12\x9eT\x03\x0a\xd1-\xe5\x17\x12~" +
	"!\xe1\xa9D\x1eS\x00|\x19\xfb\x05Q\x1d\xc2W\x12" +
	"\xde\x99\xccc'Q\x1d\xf6 @a%\xe1\xc3\x84\xa7" +
	"\x0f\xe41\x0d\xc0\xd7\xb0\x87\x89\xd2\x10>Fx\xe6\xeb" +
	"y\xcc\x10\xa5aD\x81F\x09\xbf\x86\xf0\xec\xcdy\xcc" +
	"\x02\xf0\xab\x19\xc5g\x9c\xf0\xed\x84\xe7\x0e\xe61\x07\xc0" +
	"\xafgDi\xae!\xbcDxW2\x8f]\x00\xdc\x90" +
	"z\xb6\x13^fM\xbb\xca\x10m\x13\x11\xb6S,\xd7" +
	"\\O8#\x80\x11lR\x14o\xd4k6\xa8N\xad" +
	"R_\xb8|Q\x16EJ4\x12\xc9\xb1k\x1e4\xe4" +
	"'\x85\xe1x;\x84\x81^\xfd(<s-\xa3\xeaN" +
	"\xda\x1e\xae\xb7<\xc7\x14nxR\xb4+U\xa3\xe8\x99" +
	"h[[\xa6\x843)\x14#t\xc1vJ\xc2\x11\xa5" +
	"u,Z\xc4\xeb&\x0dK\x99\x10\x0d\x8f*\xc6\x9e\x11" +
	"k\x93\xa8\xa0\xedL\x8f\xda\x13\x05S\xb9I\x9cd\x98" +
	"\xad\xb3+UG\xb8\xaei[\xb2\xfa\x1b\x12\xc2\xf2\x9c" +
	"\xe9uv\x05\xeb\xc7\xf2\x95h\x1c\x97L\xd7\xd8Q\x16" +
	"k\xb0\xe6\xd9\xa4\xc3\xe8\x09\xae_\xb7n\xba[v\xb8" +
	"\xc2\x99\x02E8\x11\xf0\xcb\xa6g\xd15\x1b\x9b\xea\xcc" +
	"\xae\x9a)\xdcb\xe8v\xd0J\xe3\xd3\xa0\xc8\x95\xb5\xf1" +
	"5j\xce\xcaz&\x8f\xc3\xe9\xed\\\x91/tM/" +
	"D\xfc\xd3\xd8L@f\xfa\xc6\xd5\xd9\xb5\xa6yqu" +
	"\x00r\x9ep=\xbf>\xec\xa0G\xfeM[\x0b\x93\x9c" +
	"\x95=rX\x06\xaf\x0dM\xee\xfa7\x0f\xac\x7fh\xd2" +
	"4\x07\x98\x96T\xe7\x9ah\x7f&\x7f\xd2\xd6\xda\xf6\xf3" +
	"\x1a\xf9\x8a\xd5\xf6\xc2\xda\x92nG\x98Fd%\x19l" +
	"\x97m\x0f\x86+\xc9\x90\xb0\xa8b[\xd2\xed\xb3[\xf2" +
	"Z2\xef\x16\xcfI;\xd4\xe5\x8c^JJ\x8bRq" +
	"\xff\x1f\x00\x00\xff\xff\x11vOG"

func init() {
	schemas.Register(schema_9f0a9459eb121bf0,
		0x859698645e9c4a44,
		0x8f8f8f8f8f8f8f8f,
		0x93c59921a137c8db,
		0x94e84f47e297127c,
		0x9f8f8f8f8f8f8f8f,
		0xa233c1204c18c976,
		0xa2bce3bdb6c5201d,
		0xa3cf4f7f955be932,
		0xad375e71bf983dc3,
		0xad93807af77fe1b9,
		0xadb2d0b69445303c,
		0xb4fe5e6f0ef85636,
		0xbe4eeef9143c2824,
		0xc0e43eb9670b8d20,
		0xc3273101c10b065a,
		0xc5195060b33b8218,
		0xc75a0f30e41b37f5,
		0xcd55e3c0a182ac77,
		0xd663f8eebd0e079f,
		0xd6645c0180f9fc72,
		0xdb9a661a7821150d,
		0xdc2aa0850f905013,
		0xdfa79f9e4e6e0810,
		0xe35a52b4e5c60a15,
		0xec98034329cbb446,
		0xefe67d057faf5d90,
		0xf737c9d3531fa703,
		0xf9b86cbf3f6febfb)
}
