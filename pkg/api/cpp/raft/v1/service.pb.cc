// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/v1/service.proto

#include "raft/v1/service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace raft {
namespace v1 {
}  // namespace v1
}  // namespace raft
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_raft_2fv1_2fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_raft_2fv1_2fservice_2eproto = nullptr;
const ::uint32_t TableStruct_raft_2fv1_2fservice_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;
const char descriptor_table_protodef_raft_2fv1_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025raft/v1/service.proto\022\007raft.v1\032\027raft/v"
    "1/raft_host.proto\032\030raft/v1/raft_shard.pr"
    "oto2\216\007\n\014ShardService\022E\n\nAddReplica\022\032.raf"
    "t.v1.AddReplicaRequest\032\033.raft.v1.AddRepl"
    "icaResponse\022]\n\022AddReplicaObserver\022\".raft"
    ".v1.AddReplicaObserverRequest\032#.raft.v1."
    "AddReplicaObserverResponse\022Z\n\021AddReplica"
    "Witness\022!.raft.v1.AddReplicaWitnessReque"
    "st\032\".raft.v1.AddReplicaWitnessResponse\022M"
    "\n\013GetLeaderId\022\033.raft.v1.GetLeaderIdReque"
    "st\032\034.raft.v1.GetLeaderIdResponse\"\003\220\002\001\022Y\n"
    "\017GetShardMembers\022\037.raft.v1.GetShardMembe"
    "rsRequest\032 .raft.v1.GetShardMembersRespo"
    "nse\"\003\220\002\001\022\?\n\010NewShard\022\030.raft.v1.NewShardR"
    "equest\032\031.raft.v1.NewShardResponse\022E\n\nRem"
    "oveData\022\032.raft.v1.RemoveDataRequest\032\033.ra"
    "ft.v1.RemoveDataResponse\022N\n\rRemoveReplic"
    "a\022\035.raft.v1.RemoveReplicaRequest\032\036.raft."
    "v1.RemoveReplicaResponse\022K\n\014StartReplica"
    "\022\034.raft.v1.StartReplicaRequest\032\035.raft.v1"
    ".StartReplicaResponse\022c\n\024StartReplicaObs"
    "erver\022$.raft.v1.StartReplicaObserverRequ"
    "est\032%.raft.v1.StartReplicaObserverRespon"
    "se\022H\n\013StopReplica\022\033.raft.v1.StopReplicaR"
    "equest\032\034.raft.v1.StopReplicaResponse2\226\002\n"
    "\013HostService\022<\n\007Compact\022\027.raft.v1.Compac"
    "tRequest\032\030.raft.v1.CompactResponse\022S\n\rGe"
    "tHostConfig\022\035.raft.v1.GetHostConfigReque"
    "st\032\036.raft.v1.GetHostConfigResponse\"\003\220\002\001\022"
    "\?\n\010Snapshot\022\030.raft.v1.SnapshotRequest\032\031."
    "raft.v1.SnapshotResponse\0223\n\004Stop\022\024.raft."
    "v1.StopRequest\032\025.raft.v1.StopResponseB\250\001"
    "\n\'com.github.mxplusb.pleiades.api.raft.v"
    "1B\014ServiceProtoP\001Z2github.com/mxplusb/pl"
    "eiades/pkg/api/raft/v1;raftv1\242\002\003RXX\252\002\007Ra"
    "ft.V1\312\002\007Raft\\V1\342\002\023Raft\\V1\\GPBMetadata\352\002\010"
    "Raft::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_raft_2fv1_2fservice_2eproto_deps[2] =
    {
        &::descriptor_table_raft_2fv1_2fraft_5fhost_2eproto,
        &::descriptor_table_raft_2fv1_2fraft_5fshard_2eproto,
};
static ::absl::once_flag descriptor_table_raft_2fv1_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2fv1_2fservice_2eproto = {
    false,
    false,
    1456,
    descriptor_table_protodef_raft_2fv1_2fservice_2eproto,
    "raft/v1/service.proto",
    &descriptor_table_raft_2fv1_2fservice_2eproto_once,
    descriptor_table_raft_2fv1_2fservice_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_raft_2fv1_2fservice_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_raft_2fv1_2fservice_2eproto,
    file_level_service_descriptors_raft_2fv1_2fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2fv1_2fservice_2eproto_getter() {
  return &descriptor_table_raft_2fv1_2fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2fv1_2fservice_2eproto(&descriptor_table_raft_2fv1_2fservice_2eproto);
namespace raft {
namespace v1 {
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
