// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: raft/v1/service.proto

package raftv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardServiceClient is the client API for ShardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardServiceClient interface {
	AddReplica(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error)
	AddReplicaObserver(ctx context.Context, in *AddReplicaObserverRequest, opts ...grpc.CallOption) (*AddReplicaObserverResponse, error)
	AddReplicaWitness(ctx context.Context, in *AddReplicaWitnessRequest, opts ...grpc.CallOption) (*AddReplicaWitnessResponse, error)
	GetLeaderId(ctx context.Context, in *GetLeaderIdRequest, opts ...grpc.CallOption) (*GetLeaderIdResponse, error)
	GetShardMembers(ctx context.Context, in *GetShardMembersRequest, opts ...grpc.CallOption) (*GetShardMembersResponse, error)
	NewShard(ctx context.Context, in *NewShardRequest, opts ...grpc.CallOption) (*NewShardResponse, error)
	RemoveData(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*RemoveDataResponse, error)
	RemoveReplica(ctx context.Context, in *RemoveReplicaRequest, opts ...grpc.CallOption) (*RemoveReplicaResponse, error)
	StartReplica(ctx context.Context, in *StartReplicaRequest, opts ...grpc.CallOption) (*StartReplicaResponse, error)
	StartReplicaObserver(ctx context.Context, in *StartReplicaObserverRequest, opts ...grpc.CallOption) (*StartReplicaObserverResponse, error)
	StopReplica(ctx context.Context, in *StopReplicaRequest, opts ...grpc.CallOption) (*StopReplicaResponse, error)
}

type shardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShardServiceClient(cc grpc.ClientConnInterface) ShardServiceClient {
	return &shardServiceClient{cc}
}

func (c *shardServiceClient) AddReplica(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error) {
	out := new(AddReplicaResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/AddReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) AddReplicaObserver(ctx context.Context, in *AddReplicaObserverRequest, opts ...grpc.CallOption) (*AddReplicaObserverResponse, error) {
	out := new(AddReplicaObserverResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/AddReplicaObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) AddReplicaWitness(ctx context.Context, in *AddReplicaWitnessRequest, opts ...grpc.CallOption) (*AddReplicaWitnessResponse, error) {
	out := new(AddReplicaWitnessResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/AddReplicaWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) GetLeaderId(ctx context.Context, in *GetLeaderIdRequest, opts ...grpc.CallOption) (*GetLeaderIdResponse, error) {
	out := new(GetLeaderIdResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/GetLeaderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) GetShardMembers(ctx context.Context, in *GetShardMembersRequest, opts ...grpc.CallOption) (*GetShardMembersResponse, error) {
	out := new(GetShardMembersResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/GetShardMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) NewShard(ctx context.Context, in *NewShardRequest, opts ...grpc.CallOption) (*NewShardResponse, error) {
	out := new(NewShardResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/NewShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) RemoveData(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*RemoveDataResponse, error) {
	out := new(RemoveDataResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/RemoveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) RemoveReplica(ctx context.Context, in *RemoveReplicaRequest, opts ...grpc.CallOption) (*RemoveReplicaResponse, error) {
	out := new(RemoveReplicaResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/RemoveReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) StartReplica(ctx context.Context, in *StartReplicaRequest, opts ...grpc.CallOption) (*StartReplicaResponse, error) {
	out := new(StartReplicaResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/StartReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) StartReplicaObserver(ctx context.Context, in *StartReplicaObserverRequest, opts ...grpc.CallOption) (*StartReplicaObserverResponse, error) {
	out := new(StartReplicaObserverResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/StartReplicaObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) StopReplica(ctx context.Context, in *StopReplicaRequest, opts ...grpc.CallOption) (*StopReplicaResponse, error) {
	out := new(StopReplicaResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.ShardService/StopReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardServiceServer is the server API for ShardService service.
// All implementations should embed UnimplementedShardServiceServer
// for forward compatibility
type ShardServiceServer interface {
	AddReplica(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error)
	AddReplicaObserver(context.Context, *AddReplicaObserverRequest) (*AddReplicaObserverResponse, error)
	AddReplicaWitness(context.Context, *AddReplicaWitnessRequest) (*AddReplicaWitnessResponse, error)
	GetLeaderId(context.Context, *GetLeaderIdRequest) (*GetLeaderIdResponse, error)
	GetShardMembers(context.Context, *GetShardMembersRequest) (*GetShardMembersResponse, error)
	NewShard(context.Context, *NewShardRequest) (*NewShardResponse, error)
	RemoveData(context.Context, *RemoveDataRequest) (*RemoveDataResponse, error)
	RemoveReplica(context.Context, *RemoveReplicaRequest) (*RemoveReplicaResponse, error)
	StartReplica(context.Context, *StartReplicaRequest) (*StartReplicaResponse, error)
	StartReplicaObserver(context.Context, *StartReplicaObserverRequest) (*StartReplicaObserverResponse, error)
	StopReplica(context.Context, *StopReplicaRequest) (*StopReplicaResponse, error)
}

// UnimplementedShardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShardServiceServer struct {
}

func (UnimplementedShardServiceServer) AddReplica(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplica not implemented")
}
func (UnimplementedShardServiceServer) AddReplicaObserver(context.Context, *AddReplicaObserverRequest) (*AddReplicaObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicaObserver not implemented")
}
func (UnimplementedShardServiceServer) AddReplicaWitness(context.Context, *AddReplicaWitnessRequest) (*AddReplicaWitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicaWitness not implemented")
}
func (UnimplementedShardServiceServer) GetLeaderId(context.Context, *GetLeaderIdRequest) (*GetLeaderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderId not implemented")
}
func (UnimplementedShardServiceServer) GetShardMembers(context.Context, *GetShardMembersRequest) (*GetShardMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardMembers not implemented")
}
func (UnimplementedShardServiceServer) NewShard(context.Context, *NewShardRequest) (*NewShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewShard not implemented")
}
func (UnimplementedShardServiceServer) RemoveData(context.Context, *RemoveDataRequest) (*RemoveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveData not implemented")
}
func (UnimplementedShardServiceServer) RemoveReplica(context.Context, *RemoveReplicaRequest) (*RemoveReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReplica not implemented")
}
func (UnimplementedShardServiceServer) StartReplica(context.Context, *StartReplicaRequest) (*StartReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplica not implemented")
}
func (UnimplementedShardServiceServer) StartReplicaObserver(context.Context, *StartReplicaObserverRequest) (*StartReplicaObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplicaObserver not implemented")
}
func (UnimplementedShardServiceServer) StopReplica(context.Context, *StopReplicaRequest) (*StopReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplica not implemented")
}

// UnsafeShardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardServiceServer will
// result in compilation errors.
type UnsafeShardServiceServer interface {
	mustEmbedUnimplementedShardServiceServer()
}

func RegisterShardServiceServer(s grpc.ServiceRegistrar, srv ShardServiceServer) {
	s.RegisterService(&ShardService_ServiceDesc, srv)
}

func _ShardService_AddReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).AddReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/AddReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).AddReplica(ctx, req.(*AddReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_AddReplicaObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaObserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).AddReplicaObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/AddReplicaObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).AddReplicaObserver(ctx, req.(*AddReplicaObserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_AddReplicaWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaWitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).AddReplicaWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/AddReplicaWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).AddReplicaWitness(ctx, req.(*AddReplicaWitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_GetLeaderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).GetLeaderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/GetLeaderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).GetLeaderId(ctx, req.(*GetLeaderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_GetShardMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).GetShardMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/GetShardMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).GetShardMembers(ctx, req.(*GetShardMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_NewShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).NewShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/NewShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).NewShard(ctx, req.(*NewShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_RemoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).RemoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/RemoveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).RemoveData(ctx, req.(*RemoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_RemoveReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).RemoveReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/RemoveReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).RemoveReplica(ctx, req.(*RemoveReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_StartReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).StartReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/StartReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).StartReplica(ctx, req.(*StartReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_StartReplicaObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReplicaObserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).StartReplicaObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/StartReplicaObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).StartReplicaObserver(ctx, req.(*StartReplicaObserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_StopReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).StopReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.ShardService/StopReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).StopReplica(ctx, req.(*StopReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardService_ServiceDesc is the grpc.ServiceDesc for ShardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.v1.ShardService",
	HandlerType: (*ShardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReplica",
			Handler:    _ShardService_AddReplica_Handler,
		},
		{
			MethodName: "AddReplicaObserver",
			Handler:    _ShardService_AddReplicaObserver_Handler,
		},
		{
			MethodName: "AddReplicaWitness",
			Handler:    _ShardService_AddReplicaWitness_Handler,
		},
		{
			MethodName: "GetLeaderId",
			Handler:    _ShardService_GetLeaderId_Handler,
		},
		{
			MethodName: "GetShardMembers",
			Handler:    _ShardService_GetShardMembers_Handler,
		},
		{
			MethodName: "NewShard",
			Handler:    _ShardService_NewShard_Handler,
		},
		{
			MethodName: "RemoveData",
			Handler:    _ShardService_RemoveData_Handler,
		},
		{
			MethodName: "RemoveReplica",
			Handler:    _ShardService_RemoveReplica_Handler,
		},
		{
			MethodName: "StartReplica",
			Handler:    _ShardService_StartReplica_Handler,
		},
		{
			MethodName: "StartReplicaObserver",
			Handler:    _ShardService_StartReplicaObserver_Handler,
		},
		{
			MethodName: "StopReplica",
			Handler:    _ShardService_StopReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft/v1/service.proto",
}

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactResponse, error)
	GetHostConfig(ctx context.Context, in *GetHostConfigRequest, opts ...grpc.CallOption) (*GetHostConfigResponse, error)
	// rpc LeaderTransfer(LeaderTransferRequest) returns (LeaderTransferResponse);
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactResponse, error) {
	out := new(CompactResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.HostService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostConfig(ctx context.Context, in *GetHostConfigRequest, opts ...grpc.CallOption) (*GetHostConfigResponse, error) {
	out := new(GetHostConfigResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.HostService/GetHostConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.HostService/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.HostService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations should embed UnimplementedHostServiceServer
// for forward compatibility
type HostServiceServer interface {
	Compact(context.Context, *CompactRequest) (*CompactResponse, error)
	GetHostConfig(context.Context, *GetHostConfigRequest) (*GetHostConfigResponse, error)
	// rpc LeaderTransfer(LeaderTransferRequest) returns (LeaderTransferResponse);
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
}

// UnimplementedHostServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) Compact(context.Context, *CompactRequest) (*CompactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (UnimplementedHostServiceServer) GetHostConfig(context.Context, *GetHostConfigRequest) (*GetHostConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostConfig not implemented")
}
func (UnimplementedHostServiceServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedHostServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.HostService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Compact(ctx, req.(*CompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.HostService/GetHostConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostConfig(ctx, req.(*GetHostConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.HostService/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.HostService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compact",
			Handler:    _HostService_Compact_Handler,
		},
		{
			MethodName: "GetHostConfig",
			Handler:    _HostService_GetHostConfig_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _HostService_Snapshot_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _HostService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft/v1/service.proto",
}
