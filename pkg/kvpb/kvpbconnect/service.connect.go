// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kvpb/service.proto

package kvpbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	kvpb "github.com/mxplusb/pleiades/pkg/kvpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// KvStoreServiceName is the fully-qualified name of the KvStoreService service.
	KvStoreServiceName = "kvpb.KvStoreService"
	// TransactionsServiceName is the fully-qualified name of the TransactionsService service.
	TransactionsServiceName = "kvpb.TransactionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KvStoreServiceCreateAccountProcedure is the fully-qualified name of the KvStoreService's
	// CreateAccount RPC.
	KvStoreServiceCreateAccountProcedure = "/kvpb.KvStoreService/CreateAccount"
	// KvStoreServiceDeleteAccountProcedure is the fully-qualified name of the KvStoreService's
	// DeleteAccount RPC.
	KvStoreServiceDeleteAccountProcedure = "/kvpb.KvStoreService/DeleteAccount"
	// KvStoreServiceCreateBucketProcedure is the fully-qualified name of the KvStoreService's
	// CreateBucket RPC.
	KvStoreServiceCreateBucketProcedure = "/kvpb.KvStoreService/CreateBucket"
	// KvStoreServiceDeleteBucketProcedure is the fully-qualified name of the KvStoreService's
	// DeleteBucket RPC.
	KvStoreServiceDeleteBucketProcedure = "/kvpb.KvStoreService/DeleteBucket"
	// KvStoreServiceGetKeyProcedure is the fully-qualified name of the KvStoreService's GetKey RPC.
	KvStoreServiceGetKeyProcedure = "/kvpb.KvStoreService/GetKey"
	// KvStoreServicePutKeyProcedure is the fully-qualified name of the KvStoreService's PutKey RPC.
	KvStoreServicePutKeyProcedure = "/kvpb.KvStoreService/PutKey"
	// KvStoreServiceDeleteKeyProcedure is the fully-qualified name of the KvStoreService's DeleteKey
	// RPC.
	KvStoreServiceDeleteKeyProcedure = "/kvpb.KvStoreService/DeleteKey"
	// TransactionsServiceNewTransactionProcedure is the fully-qualified name of the
	// TransactionsService's NewTransaction RPC.
	TransactionsServiceNewTransactionProcedure = "/kvpb.TransactionsService/NewTransaction"
	// TransactionsServiceCloseTransactionProcedure is the fully-qualified name of the
	// TransactionsService's CloseTransaction RPC.
	TransactionsServiceCloseTransactionProcedure = "/kvpb.TransactionsService/CloseTransaction"
	// TransactionsServiceCommitProcedure is the fully-qualified name of the TransactionsService's
	// Commit RPC.
	TransactionsServiceCommitProcedure = "/kvpb.TransactionsService/Commit"
)

// KvStoreServiceClient is a client for the kvpb.KvStoreService service.
type KvStoreServiceClient interface {
	CreateAccount(context.Context, *connect_go.Request[kvpb.CreateAccountRequest]) (*connect_go.Response[kvpb.CreateAccountResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[kvpb.DeleteAccountRequest]) (*connect_go.Response[kvpb.DeleteAccountResponse], error)
	CreateBucket(context.Context, *connect_go.Request[kvpb.CreateBucketRequest]) (*connect_go.Response[kvpb.CreateBucketResponse], error)
	DeleteBucket(context.Context, *connect_go.Request[kvpb.DeleteBucketRequest]) (*connect_go.Response[kvpb.DeleteBucketResponse], error)
	GetKey(context.Context, *connect_go.Request[kvpb.GetKeyRequest]) (*connect_go.Response[kvpb.GetKeyResponse], error)
	PutKey(context.Context, *connect_go.Request[kvpb.PutKeyRequest]) (*connect_go.Response[kvpb.PutKeyResponse], error)
	DeleteKey(context.Context, *connect_go.Request[kvpb.DeleteKeyRequest]) (*connect_go.Response[kvpb.DeleteKeyResponse], error)
}

// NewKvStoreServiceClient constructs a client for the kvpb.KvStoreService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKvStoreServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KvStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kvStoreServiceClient{
		createAccount: connect_go.NewClient[kvpb.CreateAccountRequest, kvpb.CreateAccountResponse](
			httpClient,
			baseURL+KvStoreServiceCreateAccountProcedure,
			opts...,
		),
		deleteAccount: connect_go.NewClient[kvpb.DeleteAccountRequest, kvpb.DeleteAccountResponse](
			httpClient,
			baseURL+KvStoreServiceDeleteAccountProcedure,
			opts...,
		),
		createBucket: connect_go.NewClient[kvpb.CreateBucketRequest, kvpb.CreateBucketResponse](
			httpClient,
			baseURL+KvStoreServiceCreateBucketProcedure,
			opts...,
		),
		deleteBucket: connect_go.NewClient[kvpb.DeleteBucketRequest, kvpb.DeleteBucketResponse](
			httpClient,
			baseURL+KvStoreServiceDeleteBucketProcedure,
			opts...,
		),
		getKey: connect_go.NewClient[kvpb.GetKeyRequest, kvpb.GetKeyResponse](
			httpClient,
			baseURL+KvStoreServiceGetKeyProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		putKey: connect_go.NewClient[kvpb.PutKeyRequest, kvpb.PutKeyResponse](
			httpClient,
			baseURL+KvStoreServicePutKeyProcedure,
			opts...,
		),
		deleteKey: connect_go.NewClient[kvpb.DeleteKeyRequest, kvpb.DeleteKeyResponse](
			httpClient,
			baseURL+KvStoreServiceDeleteKeyProcedure,
			opts...,
		),
	}
}

// kvStoreServiceClient implements KvStoreServiceClient.
type kvStoreServiceClient struct {
	createAccount *connect_go.Client[kvpb.CreateAccountRequest, kvpb.CreateAccountResponse]
	deleteAccount *connect_go.Client[kvpb.DeleteAccountRequest, kvpb.DeleteAccountResponse]
	createBucket  *connect_go.Client[kvpb.CreateBucketRequest, kvpb.CreateBucketResponse]
	deleteBucket  *connect_go.Client[kvpb.DeleteBucketRequest, kvpb.DeleteBucketResponse]
	getKey        *connect_go.Client[kvpb.GetKeyRequest, kvpb.GetKeyResponse]
	putKey        *connect_go.Client[kvpb.PutKeyRequest, kvpb.PutKeyResponse]
	deleteKey     *connect_go.Client[kvpb.DeleteKeyRequest, kvpb.DeleteKeyResponse]
}

// CreateAccount calls kvpb.KvStoreService.CreateAccount.
func (c *kvStoreServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[kvpb.CreateAccountRequest]) (*connect_go.Response[kvpb.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// DeleteAccount calls kvpb.KvStoreService.DeleteAccount.
func (c *kvStoreServiceClient) DeleteAccount(ctx context.Context, req *connect_go.Request[kvpb.DeleteAccountRequest]) (*connect_go.Response[kvpb.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// CreateBucket calls kvpb.KvStoreService.CreateBucket.
func (c *kvStoreServiceClient) CreateBucket(ctx context.Context, req *connect_go.Request[kvpb.CreateBucketRequest]) (*connect_go.Response[kvpb.CreateBucketResponse], error) {
	return c.createBucket.CallUnary(ctx, req)
}

// DeleteBucket calls kvpb.KvStoreService.DeleteBucket.
func (c *kvStoreServiceClient) DeleteBucket(ctx context.Context, req *connect_go.Request[kvpb.DeleteBucketRequest]) (*connect_go.Response[kvpb.DeleteBucketResponse], error) {
	return c.deleteBucket.CallUnary(ctx, req)
}

// GetKey calls kvpb.KvStoreService.GetKey.
func (c *kvStoreServiceClient) GetKey(ctx context.Context, req *connect_go.Request[kvpb.GetKeyRequest]) (*connect_go.Response[kvpb.GetKeyResponse], error) {
	return c.getKey.CallUnary(ctx, req)
}

// PutKey calls kvpb.KvStoreService.PutKey.
func (c *kvStoreServiceClient) PutKey(ctx context.Context, req *connect_go.Request[kvpb.PutKeyRequest]) (*connect_go.Response[kvpb.PutKeyResponse], error) {
	return c.putKey.CallUnary(ctx, req)
}

// DeleteKey calls kvpb.KvStoreService.DeleteKey.
func (c *kvStoreServiceClient) DeleteKey(ctx context.Context, req *connect_go.Request[kvpb.DeleteKeyRequest]) (*connect_go.Response[kvpb.DeleteKeyResponse], error) {
	return c.deleteKey.CallUnary(ctx, req)
}

// KvStoreServiceHandler is an implementation of the kvpb.KvStoreService service.
type KvStoreServiceHandler interface {
	CreateAccount(context.Context, *connect_go.Request[kvpb.CreateAccountRequest]) (*connect_go.Response[kvpb.CreateAccountResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[kvpb.DeleteAccountRequest]) (*connect_go.Response[kvpb.DeleteAccountResponse], error)
	CreateBucket(context.Context, *connect_go.Request[kvpb.CreateBucketRequest]) (*connect_go.Response[kvpb.CreateBucketResponse], error)
	DeleteBucket(context.Context, *connect_go.Request[kvpb.DeleteBucketRequest]) (*connect_go.Response[kvpb.DeleteBucketResponse], error)
	GetKey(context.Context, *connect_go.Request[kvpb.GetKeyRequest]) (*connect_go.Response[kvpb.GetKeyResponse], error)
	PutKey(context.Context, *connect_go.Request[kvpb.PutKeyRequest]) (*connect_go.Response[kvpb.PutKeyResponse], error)
	DeleteKey(context.Context, *connect_go.Request[kvpb.DeleteKeyRequest]) (*connect_go.Response[kvpb.DeleteKeyResponse], error)
}

// NewKvStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKvStoreServiceHandler(svc KvStoreServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	kvStoreServiceCreateAccountHandler := connect_go.NewUnaryHandler(
		KvStoreServiceCreateAccountProcedure,
		svc.CreateAccount,
		opts...,
	)
	kvStoreServiceDeleteAccountHandler := connect_go.NewUnaryHandler(
		KvStoreServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		opts...,
	)
	kvStoreServiceCreateBucketHandler := connect_go.NewUnaryHandler(
		KvStoreServiceCreateBucketProcedure,
		svc.CreateBucket,
		opts...,
	)
	kvStoreServiceDeleteBucketHandler := connect_go.NewUnaryHandler(
		KvStoreServiceDeleteBucketProcedure,
		svc.DeleteBucket,
		opts...,
	)
	kvStoreServiceGetKeyHandler := connect_go.NewUnaryHandler(
		KvStoreServiceGetKeyProcedure,
		svc.GetKey,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	kvStoreServicePutKeyHandler := connect_go.NewUnaryHandler(
		KvStoreServicePutKeyProcedure,
		svc.PutKey,
		opts...,
	)
	kvStoreServiceDeleteKeyHandler := connect_go.NewUnaryHandler(
		KvStoreServiceDeleteKeyProcedure,
		svc.DeleteKey,
		opts...,
	)
	return "/kvpb.KvStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KvStoreServiceCreateAccountProcedure:
			kvStoreServiceCreateAccountHandler.ServeHTTP(w, r)
		case KvStoreServiceDeleteAccountProcedure:
			kvStoreServiceDeleteAccountHandler.ServeHTTP(w, r)
		case KvStoreServiceCreateBucketProcedure:
			kvStoreServiceCreateBucketHandler.ServeHTTP(w, r)
		case KvStoreServiceDeleteBucketProcedure:
			kvStoreServiceDeleteBucketHandler.ServeHTTP(w, r)
		case KvStoreServiceGetKeyProcedure:
			kvStoreServiceGetKeyHandler.ServeHTTP(w, r)
		case KvStoreServicePutKeyProcedure:
			kvStoreServicePutKeyHandler.ServeHTTP(w, r)
		case KvStoreServiceDeleteKeyProcedure:
			kvStoreServiceDeleteKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKvStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKvStoreServiceHandler struct{}

func (UnimplementedKvStoreServiceHandler) CreateAccount(context.Context, *connect_go.Request[kvpb.CreateAccountRequest]) (*connect_go.Response[kvpb.CreateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.CreateAccount is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteAccount(context.Context, *connect_go.Request[kvpb.DeleteAccountRequest]) (*connect_go.Response[kvpb.DeleteAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.DeleteAccount is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) CreateBucket(context.Context, *connect_go.Request[kvpb.CreateBucketRequest]) (*connect_go.Response[kvpb.CreateBucketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.CreateBucket is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteBucket(context.Context, *connect_go.Request[kvpb.DeleteBucketRequest]) (*connect_go.Response[kvpb.DeleteBucketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.DeleteBucket is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) GetKey(context.Context, *connect_go.Request[kvpb.GetKeyRequest]) (*connect_go.Response[kvpb.GetKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.GetKey is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) PutKey(context.Context, *connect_go.Request[kvpb.PutKeyRequest]) (*connect_go.Response[kvpb.PutKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.PutKey is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DeleteKey(context.Context, *connect_go.Request[kvpb.DeleteKeyRequest]) (*connect_go.Response[kvpb.DeleteKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.KvStoreService.DeleteKey is not implemented"))
}

// TransactionsServiceClient is a client for the kvpb.TransactionsService service.
type TransactionsServiceClient interface {
	NewTransaction(context.Context, *connect_go.Request[kvpb.NewTransactionRequest]) (*connect_go.Response[kvpb.NewTransactionResponse], error)
	CloseTransaction(context.Context, *connect_go.Request[kvpb.CloseTransactionRequest]) (*connect_go.Response[kvpb.CloseTransactionResponse], error)
	Commit(context.Context, *connect_go.Request[kvpb.CommitRequest]) (*connect_go.Response[kvpb.CommitResponse], error)
}

// NewTransactionsServiceClient constructs a client for the kvpb.TransactionsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionsServiceClient{
		newTransaction: connect_go.NewClient[kvpb.NewTransactionRequest, kvpb.NewTransactionResponse](
			httpClient,
			baseURL+TransactionsServiceNewTransactionProcedure,
			opts...,
		),
		closeTransaction: connect_go.NewClient[kvpb.CloseTransactionRequest, kvpb.CloseTransactionResponse](
			httpClient,
			baseURL+TransactionsServiceCloseTransactionProcedure,
			opts...,
		),
		commit: connect_go.NewClient[kvpb.CommitRequest, kvpb.CommitResponse](
			httpClient,
			baseURL+TransactionsServiceCommitProcedure,
			opts...,
		),
	}
}

// transactionsServiceClient implements TransactionsServiceClient.
type transactionsServiceClient struct {
	newTransaction   *connect_go.Client[kvpb.NewTransactionRequest, kvpb.NewTransactionResponse]
	closeTransaction *connect_go.Client[kvpb.CloseTransactionRequest, kvpb.CloseTransactionResponse]
	commit           *connect_go.Client[kvpb.CommitRequest, kvpb.CommitResponse]
}

// NewTransaction calls kvpb.TransactionsService.NewTransaction.
func (c *transactionsServiceClient) NewTransaction(ctx context.Context, req *connect_go.Request[kvpb.NewTransactionRequest]) (*connect_go.Response[kvpb.NewTransactionResponse], error) {
	return c.newTransaction.CallUnary(ctx, req)
}

// CloseTransaction calls kvpb.TransactionsService.CloseTransaction.
func (c *transactionsServiceClient) CloseTransaction(ctx context.Context, req *connect_go.Request[kvpb.CloseTransactionRequest]) (*connect_go.Response[kvpb.CloseTransactionResponse], error) {
	return c.closeTransaction.CallUnary(ctx, req)
}

// Commit calls kvpb.TransactionsService.Commit.
func (c *transactionsServiceClient) Commit(ctx context.Context, req *connect_go.Request[kvpb.CommitRequest]) (*connect_go.Response[kvpb.CommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// TransactionsServiceHandler is an implementation of the kvpb.TransactionsService service.
type TransactionsServiceHandler interface {
	NewTransaction(context.Context, *connect_go.Request[kvpb.NewTransactionRequest]) (*connect_go.Response[kvpb.NewTransactionResponse], error)
	CloseTransaction(context.Context, *connect_go.Request[kvpb.CloseTransactionRequest]) (*connect_go.Response[kvpb.CloseTransactionResponse], error)
	Commit(context.Context, *connect_go.Request[kvpb.CommitRequest]) (*connect_go.Response[kvpb.CommitResponse], error)
}

// NewTransactionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionsServiceHandler(svc TransactionsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	transactionsServiceNewTransactionHandler := connect_go.NewUnaryHandler(
		TransactionsServiceNewTransactionProcedure,
		svc.NewTransaction,
		opts...,
	)
	transactionsServiceCloseTransactionHandler := connect_go.NewUnaryHandler(
		TransactionsServiceCloseTransactionProcedure,
		svc.CloseTransaction,
		opts...,
	)
	transactionsServiceCommitHandler := connect_go.NewUnaryHandler(
		TransactionsServiceCommitProcedure,
		svc.Commit,
		opts...,
	)
	return "/kvpb.TransactionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionsServiceNewTransactionProcedure:
			transactionsServiceNewTransactionHandler.ServeHTTP(w, r)
		case TransactionsServiceCloseTransactionProcedure:
			transactionsServiceCloseTransactionHandler.ServeHTTP(w, r)
		case TransactionsServiceCommitProcedure:
			transactionsServiceCommitHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionsServiceHandler struct{}

func (UnimplementedTransactionsServiceHandler) NewTransaction(context.Context, *connect_go.Request[kvpb.NewTransactionRequest]) (*connect_go.Response[kvpb.NewTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.TransactionsService.NewTransaction is not implemented"))
}

func (UnimplementedTransactionsServiceHandler) CloseTransaction(context.Context, *connect_go.Request[kvpb.CloseTransactionRequest]) (*connect_go.Response[kvpb.CloseTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.TransactionsService.CloseTransaction is not implemented"))
}

func (UnimplementedTransactionsServiceHandler) Commit(context.Context, *connect_go.Request[kvpb.CommitRequest]) (*connect_go.Response[kvpb.CommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kvpb.TransactionsService.Commit is not implemented"))
}
