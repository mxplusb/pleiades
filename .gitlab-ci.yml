.before_script_template: &build-test-scripts
  before_script:
    - ci/scripts/install-mage.sh
    - mage install:godeps

.default_rules: &default-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # MR pipelines
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # default branch
    - if: $CI_COMMIT_TAG # tags!

variables:
  GO_VERSION: "1.19"
  MAGE_VERSION: "1.13.0"

include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - build
  - test

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
    - ci/scripts/install-mage.sh
    - mage install:godeps
  cache:
    paths:
      - .go/pkg/mod/

build:
  stage: build
  image: "golang:$GO_VERSION"
  extends: .go-cache
  <<: *build-test-scripts
  script:
    - |
      mage build:compile
  artifacts:
    paths:
      - "build/pleiades"
    name: "pleiades"
    expire_in: "5 days"
  <<: *default-rules

code_quality:
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH      # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: $CI_COMMIT_TAG   

test-with-cover:
  stage: test
  image: "golang:$GO_VERSION"
  extends: .go-cache
  needs:
    - build
  <<: *build-test-scripts
  script:
    - go test ./... -coverprofile=coverage.txt -covermode atomic
    - gocover-cobertura < coverage.txt > coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  <<: *default-rules

test-with-report:
  stage: test
  image: "golang:$GO_VERSION"
  extends: .go-cache
  needs:
    - build
  <<: *build-test-scripts
  script:
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    reports:
      junit: report.xml
  <<: *default-rules